
%!PS-Adobe-3.0
%%Creator: RDS-Sujatmiko
%%BoundingBox: 0.0 0.0 600.00 816.00
%%Font & Form Already Embeded
%%EndComments
%%BeginProlog

/BS {/SV save def 0.0 792.0 translate .01 -.01 scale} bind def
/ES {showpage SV restore} bind def
/SC {setrgbcolor} bind def
/FMTX matrix def
/RDF {WFT SLT 0.0 eq
{SSZ 0.0 0.0 SSZ neg 0.0 0.0 FMTX astore}
{SSZ 0.0 SLT neg sin SLT cos div SSZ mul SSZ neg 0.0 0.0 FMTX astore}
ifelse makefont setfont} bind def
/SLT 0.0 def
/SI { /SLT exch cvr def RDF} bind def
/WFT /Courier findfont def
/SF { /WFT exch findfont def RDF} bind def
/SSZ 1000.0 def
/SS { /SSZ exch 100.0 mul def RDF} bind def
/AF { /WFT exch findfont def /SSZ exch 100.0 mul def RDF} bind def
/MT /moveto load def
/XM {currentpoint exch pop moveto} bind def
/UL {gsave newpath moveto dup 2.0 div 0.0 exch rmoveto
setlinewidth 0.0 rlineto stroke grestore} bind def
/LH {gsave newpath moveto setlinewidth
0.0 rlineto
gsave stroke grestore} bind def
/LV {gsave newpath moveto setlinewidth
0.0 exch rlineto
gsave stroke grestore} bind def
/BX {gsave newpath moveto setlinewidth
exch
dup 0.0 rlineto
exch 0.0 exch neg rlineto
neg 0.0 rlineto
closepath
gsave stroke grestore} bind def
/BX1 {grestore} bind def
/BX2 {setlinewidth 1 setgray stroke grestore} bind def
/PB {/PV save def newpath translate
100.0 -100.0 scale pop /showpage {} def} bind def
/PE {PV restore} bind def
/GB {/PV save def newpath translate rotate
div dup scale 100.0 -100.0 scale /showpage {} def} bind def
/GE {PV restore} bind def
/FB {dict dup /FontMapDict exch def begin} bind def
/FM {cvn exch cvn exch def} bind def
/FE {end /original-findfont /findfont load def  /findfont
{dup FontMapDict exch known{FontMapDict exch get} if
original-findfont} def} bind def
/BC {gsave moveto dup 0 exch rlineto exch 0 rlineto neg 0 exch rlineto closepath clip} bind def
/EC /grestore load def
/SH /show load def
/MX {exch show 0.0 rmoveto} bind def
/W {0 32 4 -1 roll widthshow} bind def
/WX {0 32 5 -1 roll widthshow 0.0 rmoveto} bind def
/RC {100.0 -100.0 scale
612.0 0.0 translate
-90.0 rotate
.01 -.01 scale} bind def
/URC {100.0 -100.0 scale
90.0 rotate
-612.0 0.0 translate
.01 -.01 scale} bind def
/RCC {100.0 -100.0 scale
0.0 -792.0 translate 90.0 rotate
.01 -.01 scale} bind def
/URCC {100.0 -100.0 scale
-90.0 rotate 0.0 792.0 translate
.01 -.01 scale} bind def

%!PS-Adobe-3.0
%%Creator: RDS-Sujatmiko
%%BoundingBox: 0.0 0.0 600.00 816.00
%%EndComments
%%BeginProlog
/t /translate load def
/K {0.0 0.0 0.0 setrgbcolor 0.0 setgray} bind def
/W {1.0 1.0 1.0 setrgbcolor 1.0 setgray} bind def
/R {1.0 0.0 0.0 setrgbcolor} bind def
/G {0.0 1.0 0.0 setrgbcolor} bind def
/B {0.0 0.0 1.0 setrgbcolor} bind def
/BO {gsave moveto 1 index 0 rlineto 0 exch rlineto neg 0 rlineto closepath setgray fill grestore} bind def
/FN {findfont exch scalefont setfont} bind def
/LI  /lineto load def
/MV  /moveto load def
/SL {moveto show} bind def
/SC {moveto dup stringwidth pop 2 div neg 0 rmoveto show} bind def
/SR {moveto dup stringwidth pop neg 0 rmoveto show} bind def
/UL {stringwidth neg -2 rmoveto neg 0 rlineto 1 setlinewidth 0 setgray stroke} def

%!PS-AdobeFont-1.0: ArialMT
%%CreationDate: Wed Mar 03 12:48:36 2010
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.001) readonly def
/Copyright (Contemporary sans serif design, Arial contains more humanist characteristics than many of its predecessors and as such is more in tune with the mood of the last decades of the twentieth century.  The overall treatment of curves is softer and
fuller than in most industrial style sans serif faces.  Terminal strokes are cut on the diagonal which helps to give the face a less mechanical appearance.  Arial is an extremely versatile family of typefaces which can be used with equal success for text
setting in reports, presentations, magazines etc, and for display use in newspapers, advertising and promotions.) readonly def
/Notice (Typeface © The Monotype Corporation plc. Data © The Monotype Corporation plc/Type Solutions Inc. 1990-1992. All Rights Reserved) readonly def
/FullName (Arial) readonly def
/FamilyName (Arial) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -106 def
/UnderlineThickness 73 def
/Weight (normal) readonly def
end readonly def
/FontName /ArialMT def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put } for
dup 32 /space put
dup 33 /exclam put
dup 34 /quotedbl put
dup 35 /numbersign put
dup 36 /dollar put
dup 37 /percent put
dup 38 /ampersand put
dup 39 /quotesingle put
dup 40 /parenleft put
dup 41 /parenright put
dup 42 /asterisk put
dup 43 /plus put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 59 /semicolon put
dup 60 /less put
dup 61 /equal put
dup 62 /greater put
dup 63 /question put
dup 64 /at put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 88 /X put
dup 89 /Y put
dup 90 /Z put
dup 91 /bracketleft put
dup 92 /backslash put
dup 93 /bracketright put
dup 94 /asciicircum put
dup 95 /underscore put
dup 96 /grave put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
dup 123 /braceleft put
dup 124 /bar put
dup 125 /braceright put
dup 126 /asciitilde put
dup 128 /Euro put
dup 130 /quotesinglbase put
dup 131 /florin put
dup 132 /quotedblbase put
dup 133 /ellipsis put
dup 134 /dagger put
dup 135 /daggerdbl put
dup 136 /circumflex put
dup 137 /perthousand put
dup 138 /Scaron put
dup 139 /guilsinglleft put
dup 140 /OE put
dup 142 /Zcaron put
dup 145 /quoteleft put
dup 146 /quoteright put
dup 147 /quotedblleft put
dup 148 /quotedblright put
dup 149 /bullet put
dup 150 /endash put
dup 151 /emdash put
dup 152 /tilde put
dup 153 /trademark put
dup 154 /scaron put
dup 155 /guilsinglright put
dup 156 /oe put
dup 158 /zcaron put
dup 159 /Ydieresis put
dup 160 /space put
dup 161 /exclamdown put
dup 162 /cent put
dup 163 /sterling put
dup 164 /currency put
dup 165 /yen put
dup 166 /brokenbar put
dup 167 /section put
dup 168 /dieresis put
dup 169 /copyright put
dup 170 /ordfeminine put
dup 171 /guillemotleft put
dup 172 /logicalnot put
dup 173 /hyphen put
dup 174 /registered put
dup 175 /overscore put
dup 176 /degree put
dup 177 /plusminus put
dup 178 /twosuperior put
dup 179 /threesuperior put
dup 180 /acute put
dup 181 /mu1 put
dup 182 /paragraph put
dup 183 /middot put
dup 184 /cedilla put
dup 185 /onesuperior put
dup 186 /ordmasculine put
dup 187 /guillemotright put
dup 188 /onequarter put
dup 189 /onehalf put
dup 190 /threequarters put
dup 191 /questiondown put
dup 192 /Agrave put
dup 193 /Aacute put
dup 194 /Acircumflex put
dup 195 /Atilde put
dup 196 /Adieresis put
dup 197 /Aring put
dup 198 /AE put
dup 199 /Ccedilla put
dup 200 /Egrave put
dup 201 /Eacute put
dup 202 /Ecircumflex put
dup 203 /Edieresis put
dup 204 /Igrave put
dup 205 /Iacute put
dup 206 /Icircumflex put
dup 207 /Idieresis put
dup 208 /Eth put
dup 209 /Ntilde put
dup 210 /Ograve put
dup 211 /Oacute put
dup 212 /Ocircumflex put
dup 213 /Otilde put
dup 214 /Odieresis put
dup 215 /multiply put
dup 216 /Oslash put
dup 217 /Ugrave put
dup 218 /Uacute put
dup 219 /Ucircumflex put
dup 220 /Udieresis put
dup 221 /Yacute put
dup 222 /Thorn put
dup 223 /germandbls put
dup 224 /agrave put
dup 225 /aacute put
dup 226 /acircumflex put
dup 227 /atilde put
dup 228 /adieresis put
dup 229 /aring put
dup 230 /ae put
dup 231 /ccedilla put
dup 232 /egrave put
dup 233 /eacute put
dup 234 /ecircumflex put
dup 235 /edieresis put
dup 236 /igrave put
dup 237 /iacute put
dup 238 /icircumflex put
dup 239 /idieresis put
dup 240 /eth put
dup 241 /ntilde put
dup 242 /ograve put
dup 243 /oacute put
dup 244 /ocircumflex put
dup 245 /otilde put
dup 246 /odieresis put
dup 247 /divide put
dup 248 /oslash put
dup 249 /ugrave put
dup 250 /uacute put
dup 251 /ucircumflex put
dup 252 /udieresis put
dup 253 /yacute put
dup 254 /thorn put
dup 255 /ydieresis put
def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.00100 0 0 0.00100 0 0 ] readonly def
/FontBBox { -665 -325 2000 1006 } readonly def
currentdict end
currentfile eexec
e8dc61728071abd4d5bcd230c4e186dce095a0ca84ffc476adfaa82124268e60d2cc570c
5f52c10ed4a85a71ce8e5bcf26aa13b27d7fce1cc0c72c3b848dd5ffb2d56d06a1920fad
e4ffa3b35336627e9ed1622c1f9652956d4a424488b4c4ffda9936442bbe0ca749700ae9
8a2bf964fad088f0cc64b7c1d76742f25e90e759aca624a321402b1d20863faf5e04b86c
1ae66f450b1586041815e52f13d2ae539f1725d11489898a83a05fe04d6d14bce66b823c
20e86b4e9ec5ffdf6a4a2215a850966d31d9dee52e3e7a614f79588f823c1c8b6ca57d79
03fb0555bdbde155be127c1ccbf318a0562121b9af53ee5266ab5f21eeb0f4805885506f
245e1aa67e3073dbfa85958209744d019bf250d58eadfb9c7e84655e445acb0d0b27abca
121b46e200b811ae0c6273864f117e58a9bbbadc9bdf3c2f7f1153f7e2bd00c6d4b0dbfd
604242f9ca882f485241424106c61036bdd63912f251adb16ec9f3ad9849b45045c8d411
6097419b44416464053c7c0e4226483cc3cf40d5fae142d3c72388011e6f85496703089f
e82992911bc42ec107fecc42b3343b8d931a2f193a36c27fb917ac389eb4ad9f5b02f414
e1503fd98b7286d817ce4602728022731220248caaf7bdf9a00d9a6dc4442c4e6c8de922
c246876ba86ef42ff1ea0326d187c63524542df758b282b168a8b48402bd7b5079f3a3d2
251d4145da9749d1671d1ba2a5587bf8b90a3acc342409f6410181a3682187894ca328b2
07c29bad8a8b4043e010dbb0c54cc172837b433d0ae12cd33db1f56ba5a5bdcd89d87e2e
bd8854d92f56fc60d4037499c0d66628d335c15ef32794c23c24ea9f32bcf5f2d1fe4474
f8fbc7f5a617af23e7153dcb43d6257f66a7557193da013a0abaae9fe65899f8f63ee150
881873cfa224cf72938567e7dc7d8ca2cb5a961c65ef24e2197789ac2ebed5d2e5f7b2ea
81271764cbedaa9471b7f741c6309de06e7f548d23d69a724d425f558823a4d52491097c
eb78f9a0a66618cd89a237383375f93e1facd2c839c5be5f3d0bc0ea141a544975ece6f4
949a90248b1116f2372968852d66256ceb1779974a7c01283b3ec7437902eef91384332a
3eff9ea243723cc88579c3d9b3a16a92f66e1d875136253aef0bbadb323387831f6f9680
687d890f0c4950b390322afe1ea43613ade5daef9737ebe6c2b34885198b85e7f8763100
406b6d371874c90af724b8b69f1c4b31ac34698b5724d07c1876c62456d61b1667cc27cf
ff4b9964c913d719fb5c6df1677ee8f033b968afdab423b8593bb17a8aee788251e44c47
82a76bf347ee1d5c166771c28fe8bfc8b07f6c85c4ff1386fea7155695d0aa4235f638dc
5e8c6045871ac7c4eae3053feb16a35cb029b6cfc21b13f861fa63fc043540d1a51b045d
bf352836948a5a32ad0a55835fb6dd16e43f49335002b539a74a329b3a7576dda2c8a434
c169d8f509c9d6e58979fe48808183fe5345c26784a089607cca595a7fb536ccb5c71f29
4fd9c1944cfef3c2f479cbb239ceed539118ccd65b3a66c0b56034f75cc105fb7125fd21
9549b9986eb13872e58b083c59c592e5f7403cdea36b672a164adf4aa3055107548d185c
cbbaf92a8ed1a03fceb6356135b406b01ae12711e85c5f6c8644320e9b01303295854206
866bd673984d7991535972625b86815c0db61ccd25f5d70f9a6f3c3df5d882393b727896
ee74202caee1472e6e92168db5f8e06f835296532edb23e5b86ecbdaf73c51b939f93254
0634ed2f63ce5af65cebfd0aec3ecd60df73fdcd6e0a5e6e64367be0099a4520778319ad
d69b99fe0e87717ed3ac649f47a7ef490aa1af3e0037c99b725a8c8f350bc55e0b417578
3c9011d8a4e87a9abcb539d5e95e2fa93c90cede33b2a18c3728531e47ad09644029d817
bd00c70e17f9ec876a224902848c5e6ea14c4aa243d78225ab686983ccae149175027263
7d079c14f306d94f3782cb06e405240a0ba4e0081eae506a24915947e8b1095c6da4cf57
5572f569517ec8a39ada0c63c9eb9ec419b277188e984ca103881dea6260addf28105096
99c0c1b5f60a9691ede350598f13a743b7766a44a7db05d5ada9aef4e99e9553684b341c
592df32a76479a2a4ef5d17509d6f032120cc0384e646e2138caa2e46a7aad40e0ffd84f
97dd99062d0100d2c918c00499ed8de056ed4a8154194983403717be56effae66c7ee637
b426e094cb2e9bb85c76c021dfb2f96da03539ed5d0935c16896d17c1676c87547f332ce
f32c818a4e87c40d719a5a384eb10cae7bbe11fe5eca3035418936f4e85aa68119979892
a1348cbe4e88a94ea970e498ce92ef33ec2f89cfc002e7d5aa52f95dcb494cc6639d2ec9
94c695ed495e99e7b9216510cf62d5c098af7f62ebf0581f2b0c4a13c517d6fc55362a74
2b0b92f547380c030ddc2538209b71ccff3e86106113124f61e4c291260f12fe2de5487b
1f913cccd9ef9a0c0d3d20c3539b91dccfa7b8158070344eb6f9361fa176a06400d8e4ff
06996eb1ecc4d577dd52d7ac86ddafcf80868b6682c64aa14f1a206f3b5e26e66210e9b8
c425257410aa1b5f4dea23998863c0d0f3dea6a800e66bbe1e1e297046642031c719d814
ac6d0b4bff245a43c7f6cff050ba73e112c9ba74e7c1242595af6894a1e436ad01e7fdf9
3004642ed6a9b79f3c2b636452b7f8b5cfef73cca606d304581b4de32d12e070e828c81f
167cb8ee422c7dc220f4ae87d8ec7915c3253f60047931239f79f7254c73311af4f49cad
d23606ddc94d49882179cfe4d62557510871e4ef6916b35a8745f5b24c2c409d25bbd16f
320f4163e56f434255305ef6aa1b3fb75223d156a467e7f335e6baf25d20b85398431309
c4b6c94bc53e65185e850757dfc1e4505a2f61e20f56816288273649de09519ab33b0476
35730f0ac416f4fb4d7c9ed0de16ecf6c1a4e71a9379a081d04eaf226d7ba54a79b97270
a42ad1c0a9f0513932bc704e21ba19d105fb2ca4591e0be10ff7bffc819e146a6fa067fe
475fa697010152fe4cbee17c51943d68bdf6d2187c00a2843edd865b2fccacf34bed3250
04557676e401d54757cfaae0a7fd81ba3a2e675680cdadc3b399a575c17b9f28333562cf
a3fcf89cf373e1c58a49b2c15e97b099ba07cc3c10ee92a64b4817af34717d62278defed
092d94d71b37b62bbb0c3164d1723d4d02990913fe9b5b3607e20079e784e1419b19a3f6
484187ceafd2fe317a6d866633c8f7c1dea6038da5fc363025b0c229721d7d6d449d4f92
46217d39b7490a653cbd451a82fee209c8b62b9b39357b337db1ab5ceea4e67097325a1a
a8d04626bd75fe7f35015dfa5853a03f149db8a14918b3a2ef6820c83a140aafeae6ddf6
790fe501f8448bdd6482d91fea057a8a19094f8ef8c9d587cbdd02ba141467872f4354c4
b97e96e6faab115a60908aaf2cfe4a943a7f115fed0be8203c71f78a4b19ed5d84ade637
1382c2b23fd5e6fed0e88005bfcdde2abc16f0a9a05714ecb035d8a916ffc968579c7ce0
c3d721d946334647b95d2506daee6aec9f12566f3c89cdef9822d9d862d5b640cff2f0e8
ff129ce1b0dc3c653ffae21e853149b4dbefeeefe42ffb4d22aa301a8d91492a43bc9a44
d3ec63d865f1d4b58f9897d89ec65012144ae17726b8398b75af4698d5ca2f716b08c993
09a693adb9b4209239cb582f845c95180d632ae8c4cfcfccf332d3b03aa06dc4c2f58e0f
ec14afae4c6f718fca031eaa3eaeea2effa40201844b5e1cf8ac1bb18adca731cbfd77b6
56acc6105406cef0e1aacdac8c29e1b5740aba8347af1cf586b17b5bb6ca74ac13323ffd
f27e2f2892324d917cfc3d0105e18eb6cdfe371a65327d684332448ce96f6c455121bc3b
55a66a5fb6c679c2a0d058dd37cfe54ec75c2bea483bea2cf3f275f62e439370488870b4
1d9930e8511855c5442797a8c7807622c61f3f477314e6551c0d655038bf6e23c2e8ecac
7be8aca2c2c79f8198f5f2996c705b7bfe5e710306b64db29d7a8466cc989a4f3641f038
469ce6294cd9808d052dc6c0a21c686df349e37617cc1211c4636e7d7caca152909d0d3e
a8a910a3658d504677d09fcf9416a8481666e46740a6cc6066656f246714ca84b988c0b9
3e3c42466b5f5c2f25947d79ecd50ce1ea008078dbd5c60a9fe4cbdbb0225fe625bd3fe6
f6e5d21887e085eadee1eab82141a80b21dcd80143a4cd9487c610a1205dd1cf50ac9456
771d1e9493f8bb427c4d36647bf73f8d8b53ab28e2affd10f504e70527513cdcbbb66253
fcd329733d61503d3ff643be541987de32bf8816f2d8ac36fbb4a6194a2d7b4f64e111c6
4eab2f34a08d08510064435447f6f8f7dcb3d8954e44c8baf597a51aa6aa3b019ca3e246
0651e10300c041b818127384067a3bf930226dc2900ad911f1d4b52acda911eab61ef19b
28a4ca467ec4625a271f2817acfd5a29e7a5ff52900b6aef7fd24adfa10c5af42f1fff6c
2ea42c814e1e9e7e904bbaa3ca6e0e16bc17b694765bcf64f446664cd0a5487740445c1d
9f4e7a3f57522813b2c7b50d8f80dbcded98643013743e89cddbe0049c656275e49c5ae6
481a3c84a98f96ea4b56bcf0ffae6239dede387d558dbfceb27d9a28f7ac6b0b1307fbdd
c103cabe40a420942f4e80cab4094a2b7472cf0b4da68aabe36e5011532c32e4d978c68e
cd2ca98fa0451d8c984e2b0a954ed03d832b7a522d7799f51d798ce9ef52e158f886a300
02412f313e770c2f5cd7ec93eff3cc886bc41838068878673482bcf62571d5b1373a08c4
23ed66dc846ec47e21aa01328639d3a7f680e2a9e0162fa5c79afed5f7ac607cd2bf43bc
b1c2e7fd2784a4a13bb0678aef9e969a20d11599b6c9b9d3786b13839b8ef1c1771e99c5
19bed48b821bd9274e763a354cf389b02e78ee5f2cf1584fae233fa4c9ffc239e2191790
63f16bc2a054c7e0ef6bbec351d749af47bbd2bb27a00c7ffabc72845d165a2957580971
0674356ee35b43db8c2421dd70921cf249e53c6bb3cd5abf45243098726e0aaf693322df
e421e2a0fd91c5a77818d00de1d8ecd8106b2a0d3e9b8d933f09a6af20c4768f471d5467
8b6b351b6a867392e3c36e2e713edb4bd0e07b5d7643c2e8cfa9f1679c16b21b961004d5
c1c5d2ce3dc86f799bbdd794bd0bdb2e9e74436eab31bb1b5ae0192ee754325895c71517
96176e48a467f5c92686f13b4a46767fbcda0bc3c2d6c1409976164b5beef066ed4c6970
70c2121e6ac20f4f6a6e37dbb39d33d00ec795caa0c077e4b857724abecde9e4ba75ce71
a63f096c50ef317497838b3655e1512663b5999453fa8bd7eb2f637a3f9954ee09507836
68d087a92fac05f44396a3a87f399f88bc58d203cf8378ab987eb3c78388f323b31a24d4
21b2e24d5b0456781f2e803864104593c1981b48e58a9b1b1e334d8ff0895db8b700003f
f4aee4ac75943f32cc487c7e0dd5c3ef7c7f79534ce6c1e008d3bd22145b60d91f75a59b
dc7a337b3d00151e9eb6c33faf9aeddff16c69478bf5251ae6f9f407acb07e1f16e63225
60e98d27de83de36683db37d154b67b0520950cb3f042144181dee0aa5c1cbe2a5fec44e
9baf0d34291283825c35448df2cf4e89f2b3107d47a4a061af6e939f94dba4be73a04709
93b21b6e7d3c4a71f4ca0ba36a55f77494301a30a289b8d8694993da93e5cc892abaa0be
2d3b98f6d29773a86e99620cab2b2a131e1f763ba664f0d88fedbd4084b9df4baedd4880
959d151602458a835641258ce2d2051db9564612aaa0d757510e46dbf6b6e767b3ac01d1
89f31f6ff23e11c0ab5f8b300ff97fdf0484187758fe551880438e13086a8cbc2a7c7def
a1e0cc51daf9f1add617dddaac27d7f3a2e6e7c91d5162084d29c6251ac994582be3ffea
c38d0a840a0bce1c8fce64d91855ccb145d23cb2ec902134d0b588f2f40866c0848aba95
fda65a84f273aca03ec42ee5f8104a5eaf8cdf753cbfd52fbafe1fecf2e5d6dc96e30a4d
ba6da49ec65382cd9d4d2371742c353d747dbcb143b9cd104fe2b4c9703cc27c809ca7cc
06241685fe1df67aa1c7bc060dbfb0ebf890ecf28e5f0145aaa78c6aec8433ef764b296b
b139e9c4500f04e95875f7ad0ed3af37fd7cffd338de7c6abd7785f7e4745901f62a89b0
423806d66eb272ff3c9be1a4ae257ec879be98990c088ef611025fa40febe6fedc524d6c
3fa3d6c0fc603267d9c83c452715d2f4c19824cf430c36d9b5a01c8785a324d9cc37def4
5956d6af9e156eaa55491a60c73cb105434ae1ac8fe3cd4299ceac9814fc8afc10262920
4a2de60147afad2d8afd2c1c836b4892e6095c31fe5cb75a5f58710eaff4ed7572738eb1
2d903c1bd4db7577cb74dc65ec7358d29708742307a0143f143e5134948c0cd76521f749
a68f47ae50b26f515f4ba141eaa9ca3f7c2e15e7e5e98f7b4f05e6fb9f7328510fd2f933
184995829890953bbae6162f78128daf92c3896c5b255a98244c74c1eb77e72e1efc73a3
412be67289feb4877ecf80d50fe7f6fcdeb50c9fa4f2183a64a694e6759b08179eded910
ca247921b2746a5e5a12c60031ca96c61e14b58c12d84ae58698940c0ed25cb69f29e511
5c3e6738db07d0cfde678901243d51d1bc808280f1d97c40c488c2698c2f1cf9f747e218
01698a34149555b976e41ddfe9b5bfb1eb557c0788f8bf30c969583e984846e8fb22074e
622cd4337d43ced4e623be08b3b8f338937f2e7d438d1c8fa3961002c036df7940a28446
fc99b6607911d59dd73168ee57167eb7540c255a95d4d3d4a5fb2d86e1523bde64e123b2
78f51fb5a34365e97b30c9ca26d5c5a131ecd88164c0818ea2e9134e7236311cbb08f71b
e998f1fb44bcb82eee220e1717d28b1db58ed1acbcb33db7684f508e2f2261d1c7f0164c
816f6a13f213def3cc8a79059dc264b6364d5d154d903fe56a619f77e3d490dab8359a73
b4afa8fffee5e73afd10790580ec01b7414c02727a6020409d0d6c120a57c3f287265e9b
93ff0665a5ec83103875a5771186ac7fd8968cad68234d4848fb942ae044f7777d89cfeb
7dba1b03b9154e6fea6240021859ebe9ad533182b7462d7113b8ece1dd7c21eabce94fc9
0cbfa518a66fe61f0c4f8c61f84af9bccf4264d9ad2aae5da513afa13d68de60128f83b6
b1d66dff62c90313cf060b061dbb4dae87a7ae9f9ebc6c7b2f89310a75f09410df6d61db
e3e2e2017857df6d8892d6c79262160e3eab6c75684a9597b15aa609cfbdbb8491b4b908
6ce3e541d2e0f70e95229639e29c6e3b13db017278e6fce20a040fdc35e68332074bfbcc
fd3ca7d2673de5183316d51f0c0bef07dff7ca1de7c6895e4c4d5281ec561b9a36e272a7
5e2787abbcf9b523c3dd7fb3d05113bf185dc2e7482e9c45a6c7f5a9e061d5e3b8c03efc
3681e32d6bd3b7315bd8b2c2e65b59e33f99a135980a3896be6a412eacdd97e377af9138
afe4dcaf331f0d2d5b925a47d8198ffc9bc2ecc2e5d4a0ca1a0429d5b74fa85c7f143215
1e0450973024ac232bafbc3d2589bb26ab46f387ec7c467217de971f0d59af0d240c61a0
e3897eba23dffe7b85d183edac6de1af5be4bba199220c326e2381245df2efd7d107b806
75a7bea86702ba97e16bb3d253bae5d69da7404a1ccb18376761a895bcd7567ee4198ebe
524e8bf227fad718be151801548d875a15e61a2762371287f5b56698ed1724211ff5477d
c9acf68cbb2302e691038fff962dabaf2834edb19a132de2fda8e8b67d30bf1ba94c317b
bf152f75e75fc130eb0521a56013eb0cce194d529b3c8f5174c6a6ec274aa11e86f8218d
c6e4c9dd8724915b75affbf2e5acff23572faa8aeb242aa85e7647739956b6e5b98e3c19
d7fb1ac30b3ccf02eb5d30390ed8c0485e7ba326770ef4d78b74fd16ba7e9d7b29d17ba2
76568bf416508a76d35f09441535bddf769dd7028563f4152e2b54bb348b69fe1da7086b
ec6994cccf6125d3f6b676d137f7e88556e77525a4011c0e724e534e98bcc67ab256b3bd
58967a3ae7313df797d81cd87474e0046f99967364738f93c1f820592c5c7f5db3ffc296
4700c75f6bd2f1b3781d2962371fdfa3bdd20e51e4ddfec82d8bf1fe1682d242f139a23e
04337d095920fa1164ac15b5b481d2db2041a7c03e19d02dfe394997cd84c59ee76cdc5a
414643f379bca5e969748647b5507bd98c19bccc8469b620d2a68d42dfb26af47ed1e028
4b946c688ce9e2b3fed87e27a4f21a17b571f1e37da0dc5155683c507ff89d3c3eb19618
e23c4ea523c2d3ea242c2cd0d6f37fa8e9999a29d57cce9ce2db1c970e9c2233e8d46eb5
c4129d4e86e0f047956cdb7c2ddb4142b54467865cf6bc728a5e6336e034d5496b64f8c9
8875c19fa6da9ad722c183fea64815c92b40c0360e24ad04081db3a0f986a0ff28cc7442
3477138a9ce1ca15b82419f00bcc5b2eff8c26f291dab4ed53e39af888c0eadc4f6660ac
a6db0bab1c7cdaf3a476f8c0d12d97e6836d71eb0e84e5df6c89639dc53f5a1bdcb6800d
61563fe8c388c8ecb22de5e6d00d939bfac7b7319794c1acafd7da053fafc4485be678e3
e4fc2405845e1bddfa4f43a2a56384a9600deceb04525656965e3dbf6e60170e17b4ed05
be8a6226a88046f6a66d7f75a00627467f60e680b9cb0f51125ae5356df1bcc903a74327
1c4d5204d34e3f95873f477ed9f024ec94331ef0118a05c0f0031c7ea11b79c2c4715b02
d8a6fc2e00b1c793f700af24d2f6e4848058577f1deab50bd44d4aeae9befa11e295ebbc
43b7ee74f8ef503ed5848608a9d00fe19d31cfa588c937745f51d6b1e8e8a95b878f3745
c236159896777c6ab5da25f3db66773332d97894596f5cb5904bbfa0dfe3362afd0bbf51
a3fa4e9d1e31fce2f05bd1f6985ad3066aa3f4aad9db29176c2f1d5a19c456fa3661379b
9d1d102c334d465d1aba1afb0fdaf7f463d9e6c2a069928d1184e9ff5dab79c828b7c93e
cb0fd3d67e6dbb9a192e815a0b66ee5f827d8e51daf0fa51b9b5a425122b6c1dbcaff408
81eeb62b66f71103bc2ec1d7708b3ba162d8107664d215b0969d00d1d9221099454f5f69
f64518491d737e43f0cd7c4ce9a83315b82fe733e6837fce967bf485fd0627a3b1b81964
c1567c1999db9ff76204d507b2827a7ec4be91df7747057a816cfaeb988e55a5d170467a
4fcb23ef9852fa42c99974996a68363c2aa5f9e98ee29961c398593ddb346fe62ee0edae
b91b9ebe6a4e62220c5476ee2a67ab4fb59585687b7cc4173cebdefb900b7d61a00f4eca
36152e9aaf2eb89987b8b92183b0584d3b0cc19dbaab4bde6191cf53c9bc48f843aaadd9
0aadd60884997acb230345c2fa085b952be893aed0d7f1927b4ccae6e41eef4fa703e81f
51a01e3a427f9b2b643ffd7c13c494103b11a10882c56ab367a3d324cb61ac80a944fd83
8e9931cb3c42d30fedd3079f89c47a58bd78d6ac72e2020691eb9b10f16fc3396699310c
68087f18831ffe45ed9242fbb29173ca7120aab7e482c8ce27b5ce285c8050a8899de3ee
5deb77fbd00b202478f3d046fb5ffbef484ef49a576f5d075b393f6070f55bd78062149a
1b7fc5ba1ee99ded6337e083b918f33bbfb5fc6d62477ae1bc935a36ee106f365310fa41
f272e08eeef42e8952f3e603632298b364477c73dbb7e766b79c4833283d37db61bac15d
62d4ed88376d7df60e7337067c4d61db42e2f406c512721ac78f2bc01569103a20d81dbf
983c9b23efc641e3cae276c390ede4bc64a147616a3e1dfc8b2f3c85957027e16a61a884
21356a93782e87399de22f99a3abb54bb8c5dfd842e4f11636606baae4715d84d6d35e98
d764dc2cd4ae3781fce6167c0391c1d1bd9df7825c607dcbf9afe81d26fe6a5d88235e33
c8c899b6666d1d173fdc7cbf4c2f08fa61614347fa2057da2e23ea6ccc3d6e565d49e446
c2a876cd3abde15b65064e56b2ab2270aa757d04e61910e44bb24c9e5da63f6942559725
a858d5ce30d9266471cc61140f9353ca4364e7c66d8fae2395f1a017d0bec4e34a6590f0
ae343ddf1838947ffc8750066e131f3c38c4096c7d30c66725ed5f5c36b98100c8c5c570
1730713c43e8528c40fc32477b1f00529e4a0a5bcbac898a078dfdf184690b4aeebd02ed
e74a8faf05a5f19c82ceb3246993ab4417c37a851dca3a7c6a61139c0e727499194f495c
6bbe6a667606802285d94a7aef0743a0dca9c58be086507ec878e8000e2ee53f68805115
a05146b3f0a51bbe4354bd23b9c7310f11746ea4af9f60a2a6205f0436be20af965351f1
cdd2e093711c0b509ff0a82ed6ba4215fd0740087d856a2ec88152aed1e00f9ed78d426e
42a5a3393dcaa8ac904283c20cd2d589ef802bcb0130cab7b1e3e4f93671e625431886cf
ff4e72d2f2eb9feb915a2e5923ede8365d41b4a074ccbe375aba5181cfbe41be3ff0b9d8
59ddffb7feb2b3d4a0c2ea3b98f1ed25a7e4ce0042cc3e7ea43f23e9058c6050d2ade6ee
8e37de23a3a6ab0f0b1b774103f58f750c3c428ff935528eb861a4ad822aa34caf42590c
9a8a7ec98ff706c331c1d328d1967ea8a772d0d872490d2171887b47db8c1fbdfed34f76
75e6ef7c6bd9303e9aa833bbe200fee79d26f507b10bff2a91940f8f2a68f80d4d8cf958
b8d98926e83052124555a957a7c4be595d2e08942d787825b72bddbb054d24f5e4e19948
da11d87c490ea6e329922fb1a3d20dba0d7aabd4f8f9e8a1ed65c7a87ecb2fdf98a91f04
d8a96293f2aa63176495ef0be40e51594fd1164166cfd8fde3923669d8e4ed5c9983945e
200e75dcead430b9f4e87b07dc191a4256edf253d5ded7cafaa9f430da2db41d2aba5365
e3db0d1b0377b096d4b064b81e65a51de20d6f788804e5d6cc5be547006eb09f7b8593d0
0bcbd9a95ee02b15924166617cf2bd906459695070a65a441ee0edc556bda35dc1150874
d98e9c3381db4953c6ddca887adec7552138c8cc50fda578b1444430ac45e951ab9b094f
4ec3ad6c3c936fd90172264ef31cc5ecf9011fd083d425e2174e08656390a5b680599378
fb38186148cf9d1d2adfa7ae96a244aca215151fd0bc258c5c2a40db2bf3f7caecba00a7
0449fa7ae09bc66374a48270b4567f2892a9886ddc0868c1aad3abd475dfa73c0187bb50
5745cf4b2fb88d2e5ff099b315bf96bdb151f5a3f89f9b46344611ef0c35ad7e5bab7569
b1cd97b41027a41d11ee61023c14b62c3e95770733215bbc9eb3d17b50727c789b373283
19f8e1f8bc7004a0eb434f6c951f7dadc951a92a86f50d356e791e61e3996604c41e52a2
64431625f36e77635dab88aa2520a8221daae9f6fc8f479b1ac002b6c354cb54541f3677
3ffbaa26def952cbad2e8aa5f7be683a7630f50cb03eb17a11fe74e9703c583609f6cd50
aa29cd956aad857faaf5025cc9844ffa490d18d80a9002fe659ff8ccf7814725aa6489e1
4118ffb4ff1541440151be6ffadf0a9c05e0bc12613f7e0a798242a2c936f1b4e85a8328
5ea8a82bee638b6fb8099e35fa09d125d329317d0975abcee7b498c28d5eb0f346a5428d
723d0b99854fb384d308cdc9febc4c1aa83c46927762743c2b2db2ccc2543f24542fd7b3
2d7ccfa1446b81e37ad83f530a38cf4ce9237ede8da8cb8475ae9088c855935f7081b26d
85b10e29ec60961db256ea381e77855e11713599f04c8982d26d43cc1be1d9d1ad0757b0
1350c190f44f844f2d086dbfe4d72e9f75a8dbb1f6342dfd4b089fe4ec3cdd8cf4a813fe
4814b53349ae206ef37a6dad2b5570211447f2c56a2f7d4a50087324a548c3dde5a0b5e5
55c380b5494defa73fab4623c8756144e3ba9a4a534567144d616ccfd794a4ac31ee3dee
fbd07cf6a18470d7d856578e8dba826530d12061a5bcdd8057d0ae0e84e7d4c97716f2d0
f3b1d89b0600cc71518a81e783c6de44c399bb8e6af40a5ddb567103c8c9539f50771a6c
a7dd82aefff8fa354f890f43a402132b386c2242589d2a11b62a071be120c92eecd7ebee
725d6d80cbb1af63679f7426b4a1941898f3421769a4f92560c4b37ecf8f27ff81086c0f
af7f416add081c6fb1226c4c4f61aee2d0791774431393aa01f8b781cba0b7894efb47bb
f865e5ba4ed151621b911f8029cc6fd1c62750ac3decb0e8d6ffa80fdd578c000e1e679b
aa4d2b703537ba24229664e1f356b1f213275896a1b2860aeeea43b78c8a35d298da8bde
126e1ff4cfe1c607b833d631bb9d38fb7d0cd79b081c3dfdb2ed0785714593dcae348bbf
6769ab125f0d7eeeadd9f4c18926edfbd97dcdf508ad9d3ea90a4f4dbe52c877ab28ec9a
f07e102f3af344c718cc4038c26aa92377bcd1f4dcae5e78f70cf1ad40a459f94b030778
99f3eef48d74a03cfc7333d0997122260f26ceaf03d47234b86a342a72cfd50fecffeb4a
afa53eecd12aeac186ec8332b8d5fa502a0a6903428e8c3a87b0a0b5975f06b8ddda1bbf
0d33d1728fb14746232b4398c8a27dd20765ad06c13ad1544eb0c174c55f0ce6783f96c9
ec80f1747bd928f41122f8b0c1e191c3585bef9ff27dd5f1fddad538352834ed7efcf13f
307898b591e25675b8e3dd5512bee8b17c56e6b02af551d68dd98e07e56c0570d880c9a8
ef52cbb371d1d04ee2c1650922f224f1f276a5819170449a7c5334ee43025c36951af02f
5c839ec57fee097f7e131e1c05060fa8846b6e09eebbbcea1354379cc9ccd499e1187b6f
4f773cef2804618082e0c2dbd0a1754f4124389211899e94b05f5da35e96d8c25e358a6f
e789a1ffec196c67b82d00ce70abbf1529e8a8b2eea2cc4181ecc972d2339b6898a3f8b9
922e0f2ed4327d0ff89ad66871aad115ea382e78762fe03b14271996db464dbd602e1387
bd01f746fb00ea143b1e1ae9a4be894b350ceb50c5d94fe00fa7338b3c76fc0911826b5b
880d32d4cffdf1ab450012317c5535ef10302b0e7454341123c29f9067094907c32ebd4d
8876d5d197f3354843fe908ce5fdb53c77aeaac8266d07c77f1fe00a2932cc6025fe38a7
29012306f45576549bae3d56817e4a96d3ad7c6443e840f749ad2b77de880107bc9f30fe
579939831636e574798a392631075fd9e2c68e12ea9c22ee4e156d512574684deb850d40
55aa56245885877d8e8048c42d9973e0141abb418e8f233934f14f7586fdfd811edb48dc
599a10806bdb11fa316261436c77b4b37498dbb5584c5f7c59c7fc5d635ad624cdf147b7
9abcad71c9163d35efbd8e4a5e34b8e39275d11c678224a730e5b35b1665e008ddbe4589
363e9f446445f5e7c97abb9a73448f8b7b5f86751272659d495da1367c396d73174116e1
6cda80dea7c686279d3da52ef652535ebf6b7f25fae0a04b276425dee3ecf3abf77b3fac
489f2871ad431c75c2baf3d236296fdaa11b31c9d4984594ec9b2abaef3d87b69d0f4bfb
a98719d40d15f3b32b95bc56c26a7dd0daca767c5e7a4cf8222f31f84b62d7668344ed3d
f98faea02e4dff197fbf69d1e981d6911afb8dfb7e8d097bfbcd302a2f356f59d474e0fe
4b2b6468fec3139433f953f354b849e974bab6620226c631a227712104f88c3f34a234cf
f7e1c01dc2a1803818bccffb665d44c9302ef70d62494558144710e39cd835b14402d6f7
bd0ffd8532bd091a9e166588f4d9cfe549bb07edb1432834f908f9ef672c128d22984186
60a29525830da5a09461ccae52b8b18c33a918cf8e91b8c3f44f7a28078bde44b321b650
3d761a9d731fb1c840888f984d53fd03b7f5ea3618443baac9a9ec80777485ad1da6c667
3c6fc5826a9925349d4d6af3bbaa46b4190932ac2a60215e9ec74e4270350e09b2142e74
89602f2e883330bf6808409752d19dd2821d9509bd6db546348ca7ced873c157637d99bf
2d6240c0ba8446319c16cab0dc549c589fcd5d6dd2bb316bc5b5ad4c52dfcfb03fe1c0df
470c8dfc21ed17a0a704b5c24ddfde33aa07b36a5be38059b4568da27bdef6c7fca93d06
01fd444a02c8e270eca3cbe5799c17f94792f033de5dbcc2b1fe44fa1b791c55dfaaeb91
0beef5f1a611d175bbf53551052f7ffbc00aa88094b1ee58e2175d06b502ab560a7f8f35
aaaa7d970ae5becaf74d25ba38c895daef47181f8c5395b8297723f3ca059809cba1da23
7cf75a5353d353705c9aa8c7715c97b6f18c3e85511fdef583ce0c3de1c995559a440f78
acdbae8c39372e9a4ba14ba55456e2d6a787acea2737b342b83f5a173592606358b407dd
6d259de8f62500cf63b1ca5f4e778bf0568f08b845e19767f959f62a6ff98528ccca7693
0ccef67b17fc0d0c5312dff1cafe6a18d82ec626f8293de14d644271d8cb5843e8c79764
8fdc17f8d31d87a0512f7583e01b807be98256f02308896bb4da8ea43861fe846e0aa980
4127c8c4580f8ebdb75744732f9bf25d88abbc344072dd8a03154b3d117ee25da5241b50
c8a210e26e570978cfe7e63d01ab5eac76ed4d5156043607b44589fef53ee2ffcc78fe67
9dad3e7b7a6a5fbad7d404994cc7de5f269a3d435bbe3bcebd99aab5e0ceb262e031b66e
0a2b56f09ecefdf1c15e91dbcaa46f18b2339212e872f8433969fa1144df9a9680b04213
593d6657650f8569f1a45856f2cb345df34a9b89ea1aacc3676e3668a49f2174673b66dd
4f504b4c30db8f2a095137a992c9026c736077c0556405d93982337cc042a5951a945206
c3d9b20f1692b53b48e68916a62736175a2dc3ff53acfa3afb984ec10908ee49cd40323f
eca929dfa369798563fd1f6ee249cc99d1ea1c8bee328017104d7f943d0a6f653fd75845
9b4776ba0e3ec463317f375b52efe150596464da773e628da2370f5a31bfe7b46c1d573f
cfc2153f9f090a4106804c8f79093083536dafe3675d79ee67e6f3b5606d0cf79a6b0e36
f7fb833ecf652a64b5d6bb5b5e753af512980c1bbbf40b639638e589726743e08e9b19c8
30f85211e4e7c96259a98765b8665e3be3d1813faed75c15edee4178cc13ec16af311209
8fee2ee202fb0b4673819d73a66fc172b757fb481e30ebdb15224f7e1466d7ac4385440c
27f921b7d114fd0e37343151fc65f7fb19c3b63c6e103a20d81dbf983cfb534e9378298d
82a6e71b19eaf11d4256208c48c6f8c6f356f24b5ed72d087a21b9c3042fd52a7c2af088
dba53eb5f7ba832e91686efcd4f03c6a27488cebf53c812cd5b8e0955454210a7eaba864
a37a82d3fbec31fef9a6810fc40bb935898198c51a03eac4abae9dfd7650940b93712d32
c3242a5bb9bf6a3f56b41a0f2ca5ba3e942a31486e3eae15ce9f09d4289beb41567ed484
32075fd09b172538a4132d53cc6c329103505f575d5b6975cf8c162e7a487973d94e027f
e426f5607791ff7c56df35aecd8f78ba7d8fcb5f7b8dab662f5431b37adcc8bbb162b77a
7b0bacca3942085618f84b76fc51116e7ee6c3c567f2d557d7220bff6a30a9f768ab72f7
d84eaf8530716c17d098b4d0ecd3b74ba516d96aaac4fefee991e3322188343b67be5f21
cd9f259e8a8e2d82f37d94498707e87a1573706b9712bc36423ee67daf66191f1c11a57f
4e05a8375bcef907939a67861da8b54f9bfb2eb9ceddd680576a176c4f9cb0089ca0c756
369d393180a275b8cf4283e4d6409bdd10676648f72c956b9e63e23db227430cc42ae6ff
c9fcce1b3c6c527f0af604dc77bead63568734bf78cdd28f0b8f6705891aded034bf942a
c075c9ad66b3bc0764836068e6b63cb8c437a841cf7726434be609e65d5522ca14de17a5
ffaf269734526df15500a65c4de53c1894b8431d74e674d42d9fafcf5ab33fde9ab56a52
cc5a3b60765f8f82cf43416558c62d0d7e92d6e04bfb3a618b5038fc21825be40e76804e
24c753aa22292eb9fc630aeae143cd7c2b2bb2b972676d9086eed5eb7113f5224b90647a
c14e47f20f8781e34c86a20dbaca486df25ea0a8218c66c64c1bb545a7379567c3903845
f41d2ecfded00d4e2a78c11bbb2216c089ff9fc7ac79cf70150043516581533b829197ef
47808dce5630e65ad9e6effa7c0d464152b89301a0fd9c9255c39c766f07ef61d6a5b173
f341d03365f9079a1b2982a3e9fb319e44363683a0ac028c8d0578b5c9893754e27a6128
f86a50939d0e702351a77711b4ffe56547d697c415c96e59020a9bf5de89cb0dbd89214d
98e9f5c76c9abad9372452bdc4df6ee425c31e2fd734a71ed48126b9b20e335ffe5e43e6
277134171ab47b8759f1bf20d238d1e8acb071b3ab8dd317bc10a26164881d8449a8f982
e9584b825dca23136aca507a96530b06380eebb4d285ccf9771d956801f03ed8ee0b5f6c
5b401c007cde3be89327122dbeb0d5680eebcd8cd61c3f404abfaceb42c4f9faa263c686
5fa0fd26012cd0be03a76c009dacee60519b6da8b828a1867c4d34d544d33869ed8eeb2e
f9fdb4275a6f90463fb4ef202f7e542d66a49f28eeed5426dfd07bdf379d2d1a0dad177f
e0a14a1225470a46ff306ea1009dd59b1be4ee7f29d3d9a722a9c1a523fac059888aaf6f
95faa88e837f3abb930e614b2617643c3f0c95fc60e1708a975547b455b63a11276c0de3
0ff03aa6448145de700b9101522ff17632d8d1321477dca0cc0ef606c2f06f9944a979a9
e8183a442029ec25d48d8e766498a4adfabea41dd6e03685f4156eeb7178939b6a3a22fa
3ac70462cfdd245917f92a6a95adab94643f142ba9db4ade7ecda79f24404ca064a09944
53d2736efce1cae1be3028da041443cde18364a7e1705028c7d8fcfc97c8ddee83b962f3
ecc8b4ac32206611efdca2f587e47b5f6db538692ad1737711581d4316dc47411bbb8e70
942e459f92f3a473c482bad2114c2b54518ecea9b0c0939a4edb7d81ee82f356aa79f425
73f2f9297f14505c1e70178bbf82d62856469e1f613d568a5969a803c4b20b4c29dcdec6
083bb8c2dfa7bbb847fe56fbbf431850dd12eafb597455a39a293db563bc42125858213f
10be0c47c602ad3c7e9f35a00141db81d5d5dcecda17c489271a0204ed05156f95c82e45
6a2cd55f30b7ed15b3f6d7836a4f9d6d39eb6a8a1baaf3b21f524eb2b8ef144fe15dcfbb
936db7a7fda49370b87c2c85b2a02dbf3275c476a29b58004263e82441e803f9a39fb4da
cfee9af73d1e6c19b29f8de88dc63ec1b12fe8448cff19d786ac80865db488122e2d61c8
2f8b914051459daf47d872f8687fa868a0ec0b07bd875be2aa8379debab172a8527990a3
ba88272469b31598be3469abbb98fec7d1c3d0aeadedead96ffa7a3d7e6cbc2904a58605
e0c3803fad7fb64e1af9c5dd400ad4d81ff9251f100988e5e61268861a458ff0c33c436d
3301a737ec9c53ebe547a253a3468c2524c7fef1f514688029d3041c3fee34c55222a5ba
ed3708aeff0b8dbcfa6d89616b23168d7039110e924db8088436a7efd69d42d6705aa3e6
15b4c46a4359204afd9e78530f0075324ae4e036abf5821ba16a4edb171671aec063139a
fbb05069c53ce513ed1603516a976b7161b4792d5a440245c648f869a8d74dd0d08c7dd9
94f4cb02678035ee2bd16de0a5f89a4337fd9b004b5a3a58eb116612bba3d1df644f479e
8cb766e7a4eb25d6d1605676046a4f0bbd6a5f5eed1e669d5030134b8536736118c8858c
5e38ee011059bcff4573d397e6abe347f90fd4b4a5e458aef6d75bb7960b31a32530b483
4753f76e0d5c20546c89063323c026c312267b10a9718c836b69c58173c6520d0245b810
46c89690592714f81096311e71a174f7f532f7fba21abd1429ecb74041d49af7e9853cf7
1a098dd0b92be32d7b270561940c0f558167fde2716bd367ed53e1845c9bdb40a43fde79
b137c061bb871afc259872f28e2b4d4b4d22cfc66073c6e530db8b72635371fc17d71d14
c167c9eed4284d603ad5edce0b19f36457e4fa9205fab0f4a2b1f2412bda10bb27454ebe
35894c457150abed1a4af761640590ca5a9d24f4626a340b4fc112ea20fdbd18bbea6a82
ecf0c7a0f825c04d1793a4043928cc236f3c8dec184a57bb9bd894a5daa5dd100cc05bbf
7c66fae58fb1342acf361db8282e57c49e5b3130773fa563c86767d582e938e06201f295
899af402a302d0f606ee025bda1291c25ce473c20f5da1954ef1bd582522b21a418987c5
c771b7ec389fb43f82af318fd0a4fb5bdcd561383866ec2a6b0c873c320a6a9c152e8e9f
50a5aff439d1aa73a93c40f20c0d7a0d851197fa7df093727c9fa59915405985d0d64e50
a2dd081a6ff9e0ab65301155169a6776a47959d98926501426dda373972b111d2932d982
bc3f0511acd478bf2d4100ea2fe3bc5c297af60ac2b4922355fd67f6e13fa4e07277d970
3cc668a2dc9d4bdd5cd494c7530bbea7b5d605e4d36e6dca74ac33929ce70e92bbd3e41f
a4d8d899b86eee116790b53a6c32846d2670cf31229e02c9887762d0e3fde4f597f63b4c
3bba446d6150bb96091c8aff5799a42a1d93cda967aea7fb20e7bc5146a06d0e75c4e662
e480a3fe702a92a4d8f65e9a006b7c3219150f535b26e99491456bc0639588d638874f56
0c76f47fa94ec134e1906ed1b28fba411115eb8e40ad53fc76d2d02c4ae8ef3a79af4927
1149672057900fca756951ba960592edd0ee6900c9b1590dba993a4fe5b070fa6cfb5021
2342445bc53f6ef6958fae1ab984d6e6c258de4ea9432c51e2276c2068cb378742ea3996
d7da1d2ee0447900439548bd6c7361649297000b492177452da51dfe72c76c1471236b84
19ba5d4519adb130f7fa1bcf4da17a3fcece093004c8837d9ee3608042c6ab928cbbc217
f2d74fb9b66c4ceedfa66241a4b6a10503bcbe125da3eff35d7786d2f8c9b717f137832b
6707c9408601e488455fbba382e7faab3c674ac99cd2209eb3a9f1b9bae7b9a995a3b7c6
6c9d2f5b4c69e4a17ff3cf34e011afd903b3515ce15523a7aebf456a68e065bd65776145
d71cacd8cd702f88e3cd595991e39c410a86ec5cb7fd91a21c0bb676d71a0d0e0055f986
8d113a41628c1cef6efb0a2380bdbb97f629e0f1d01b9cdd3b59d092995166150836ec28
636daa819cc17f63d546e894b8fe70fe22e8c4c273164d12b5a4fbc7f24617ba2780c541
b3b2066b2695bc92cb6df26369dda53c80493f4b822a6faca6d85bbee5a7d9fc8ac06ea4
9145893dc2ecbb2a16da05ccca781deeb56bf6e32631c18f79d8dfdbe5ce49a9a1b05e3f
5966fe08dea8c46cd67f0f05f973acb71178ec9a394a6c94dedff9a8c3a47825a65fe719
68c6216dbc32bf76c84b5ba057fc94d19f265204611871ee541cd31a567896858d64ad9e
57d2ab503ed38e424bb574e44ae0b49b531442ef7773f3e9006dbb3d0f39f4996b98422a
27aa14f4a4c35cc2489509e8482ade4c20d7b969aabc8af4b3596fbe3375c2821c4348c3
21911965b699b3d327e746a16a667888c6ed5a7638eac3be8b781f9379415288a6ef7af6
cf00ab10fa47be12639034d462633508fd1aee5c592a15953b03dbfd62d38f74f622f45e
e1656a01dee7017d150f8a9a5b0e9503ccfb99f2de9f794359bffeb8d005e6b250166426
177d26668a3e04cd17d74c5a65c488020ec79cf7d2a0f5cf94971b80fd35b8cbf6169b4e
9edbf9ac125adf33474ebc8406b9bb242f245935111ee4530aede8a562d1fd48f946194a
ae559e79d8cab6d9b4f870967fbec105be46fe2b4a13b38516cb68da0fa3aa9671ef0691
4b7941a190a37060360a9d38cbea5c8a235f04a7ce5eec4b96c3319a55b0003f784ad070
9242232e2eaa3f05eb1873f8ee94bc1740ca7b8cac9baf4233e174784d10865e4915015e
054e45c4166d2e11dba58ace4a7f3fb5304aac56378119cdde22b1d867008476050079dd
f4472b1af71c7c087a4131589c1ab061627b27ac99f27f35b48ac7447d19fd5168ad9b1b
9a7a070c952a413d3cbf8b250305f8a41d3334639e0367a2a3f3da85564332b9003bf1f7
d6b26eabaccd4f342a7a09e686c851a709ee1e2a80e2839e539ec4d009cfde8a44f08f40
1fd571ef3412502bebc906009aa0d93c88c591ab3f22be40ca7ff3582402d17af287afae
3af6ce143f30d0ce5539299945aa280011f83925729eca052c6c20bc1ab7e8ebc689103c
f98c8ec340ddb79c68d7404788bdb52309333722a6031e5953e31582be0670da60f8f793
bcdf2e7bff54a4ef093e637e8640000861ade609a1fb39d7cbb76dc58aa9d4e64945f7de
1ed62e7d69cd12db33c18c6823a46565f5a15950727de79f8a7068199d928068edb082dd
564bf7f093977bab0e14ce70b5977e4086e6a3e651f51ba6d2f2fc6c2bdd58985903c95a
91fddc9dc0b9bfcbeab912742d05eb11a6ad7d51c3b62256d922a9fac2bbad6681c694a5
22103ab4b148f60420d182bb51a1f9681d4f996bab2a86918084135d18cf49313e13a81d
4e56336d35e81799c8169efb75bf523a596b0dd2cfd909e79f233fa21aeb3e2caf21a384
001845732eadc5afcc83469ce2996ee7c07a77417d99b4b30c3a9af9c3e234f65410def9
b6bedcc101f0ec76560bf84142d4da8b3b92e35a7327d3c900099537f3bb865ceb4b0cbb
f0fbd8551f0871ff4f2ad9c24f164f7174895f3315d1a030d5d8c79ce0a54ea637e7bf5f
2e183616c331dd5d70926b634b695308e89d82290e27702bc9e08f075974e48b59e1efd2
e6bf53fdcf961768a15e07a3e03a915caf41dede1e021c3fc64a25d1efe880c837ee2503
ffd9c52cdd74266a3cefb1489b0e760d66af8412f23aec3ad1ab7cf0b57fd615e46fc386
f82e5c06eb195a12b04f27bac2972f782af82c5d9139b40caf7f2989bba15d4bbdfcf506
4feaae1dfdc8a2958ff3d7f1d67a51c5f0e2f81a4921909d5e329d129955ab83c884ee59
ce0509369c82fa053361ff5cb7ab38d6a4ab187380f2041cce6138709d0b61b85b99fe45
2a1771d66b9f9565922f964e3c4598d3e5573f952f6a7575cf6d27ae0f12bb11fcf4eace
ab248d500ad1bdb32783769c84ca87aca4bedf99e7be2592c3beedaf35d74e6e7c28c140
7954e12dbc25baa19ae22d07b094f03204d473a1b2a54ed6a731845157d5bee8ac35cb3b
d895d2f3ae64da95bf3ddc0b8c7873c9c5556ff01288ea0be7e18234b3b351e8fae732e5
d1b88a92bdb643a7cce7e4b056e7a83c829bc928cdd816f9909641b96558aa1a49c19752
0f1cc9d4c14748acaeb5da2e85311a98dfbc6fc6d13e0172c203f3c1fbabbcea4ad269a9
0bf4ad0c52485c68ecbf6dfc813d2c9fd2341d5e0befdfece8ad034188f4158438e7b223
429f700e02ec3543ecb3f8ace2242943a57edb062ba2f2c112b469c199d499a3c30561cb
9a6c536947b64feb34b85b68c7908497acb916e35ba1c5660f9ae68f2b35ad361f455877
983da98fc2ac802c207da5306780310307238e2a8e03e8a132c19e835916ffeeeba50e69
e111c5a649071d9eb7ff0ec785c0a0d41e53c4ba6de9107e709ab67628bb8b201fc89110
dcaf9b1d5c9c735a6884a019b789d3ac9565c94fd1b92e05cb2d715f78bcc9a266038119
de4ca160c044608902ee80e8d2017fcefe8bf1ac82dfb251bd0f4d05cb14dcd2056c65ab
9c811e5a2096d70fba324b1fc74a887217a738e6b20ab5b4baf911d9041a90603745b615
3df9ede3235255f38802bd6e491b038f576e24d94d7c7ae935bb8fdaad647faecb0b5588
1172f46f7d583708c7c416509aa3be530788ec8bd38fcd7f01309aaa84dff1c8c6eade8a
7450a4af4b2c1db57aa8a61795d4e1a41b9754efd26161687eeaea2196b328c2c6ae1231
a9bd6b97bd869c9aa200e100a53e1033bb1464aabdf06d5386737bb2a5ac8a9a65fe3e2b
2568805d3dd9d4ab52fc2a5b1c41d24efa8d790dc029cb3ead4a277e74c528c12846dcc1
b5284a3436ae6e07b6cf9bfbff37ddd703c3f633bcc37e9bda3291f4a9498dfd5ff343f7
f8178d31858721e407c3047c610a10970bea2fba4c3a9ab82dc11a30406ab44d860cdea2
b57094993efcc4515b621751b0c59caeaad245e4da5e5d00d8ad62adc9e515f22b528acd
57939943eacf7ddec9ecfd86b9086ad77e48e29b6d842ff6d0ce26cc39b32584be4828c2
ca4093ab1bac437c5d19189dd2f38bad7520830f0646e2cb72299b3f8541f8cafc451ea6
609eff37107f526391bd5a1e5265027a53a40c3d940afc1be092b060cb7de5483090a3c7
4b414752ab43def8771cc57c5a119a0c07050a03eacd214b85647bb5829914340adefe5b
cc2a95accaacabe9470e4c7408452dab6eeec9d5b0e0c84020cf314c5e2f482127afce20
e11b2c4d94fa63783befe62e2a1bf6315808228ca67affd9d80fea67910352c5485a9a5b
5298dfbb2a65344dd9bc25ac98d4908c29c346949767ccd4de5fa91ef1b869bcf447d744
93e2e4c309178503df1d7784e98f33d27ab19210d759e89fd76a3223ab8f4755c7a12c80
e2c4eda9ee17363f5c71a1fbfea6af67ac8073e565a06d7e2147a7012a316becf38cc9de
49243d0c3f1b85090b8c1dd8656760a309e7e159f5a15e0fc10af074834af78b4cf44a23
530f49f32ae7b6b070d7aa763db4c9dc98c44ec01d08d72633264282d28740086025c34a
e94f31ca0de820a1529914a4ffc93259d2dab9955f1463cde29c7ca01698b9cea0b8c235
2de49b0ee1ca2963a55cbc27fd059df61c85829de3d969644b75f67d7d7beb1ea533d494
9413a256e0b9236b340566e64328200b25f0b944a848336966671c5cfbec93b8c5b325db
c3bbccf444205e11e922651ab869135acceef6cc344d9949d8a0292de5bf1ac7d172abcf
673fd73a588d22872d7e8486ee2808bd04e125f1c39972b08cdad254b372444136acccc6
ca8b298d9c7703ac0b9996fa47b947010fda89fa805ee0e504ee187758cbe30778998f4e
a51ea94eb16296eab3103753a5a89734a6cda7e9b963ccfb677356133549e2cf8a32090d
ef23ea43d604578b61e534bc5a623ae15e17cb829f715f72ef1b2cbacc66b41a9a0d8e08
ff758ee0ec5baaf3e9f52b8449394cde9da7a741fafdde7a9808fc1317e13068cd44cdda
b57652c6b3bd0aea0151a183bf56d50cbcacbec73ca8e34121811c57ad099be65aef9f80
df82f2f60593291a99d46695682e2a07fe51946416cb1c4d6a02f9dc8cce0ec120f6a1a1
99073fa0479082f640434414d1c3433311558961a9c42cc5d5b3352bb05120cc2cf8d142
00c0c3e6e683023b2115831691a4c4caebfdba6e7204b3f723c67fca66b9e67a547bab7f
bf4e04c5372eedcda9fc4faa2b51b47264d47fb94ef3a6d5779c68131543a3d9aebce740
1a10641ea28a2872efe614c18111da1c0a50db9fe9075c5db6b56600d24040c0f161180a
3def23589d3a257e7826075db1152ce40c9c739bce1c3cc5a83084be63a231ffee4703bf
ed79cb6cc13b4dd849b9fe782200c1e036c4da3cbca47455a246a8e01e32b42e6d2bcfb4
2d499870f8d9a685c38c9fcbbc79a2f656e940c58032da8a9a8a0d24b1e6d5b8195c04fd
0d38f070a05fefe82964573f472d57669246dd1d8b0368e353e51a33618e1af8f6565dae
2b7dba9fe15ee12ffc69530b1c97c14958e166dd48a0a14554e445753cac8c30fce93687
2f48296599c367a1144814027c15a2b63363923f6629912dc2a299727e487b761f265354
d1f4d2585b7db7e7497f2b5f2ed860c51d99515a9df654f62d491378a6b36fd4aaeb6954
c45cc5cdb34d52551e88fbe80e58ac65dfd2ffd3fea5f3a88c7864dc48058a8619d406fb
469cd85aa9b9656f4a22aa0872eeae0d9e392f3b8c1376285ea83ff9e6048cee5ff46035
4dbc48fd01cb3a037f7702010c979df9c93215344f899e0c1de7da16b0663d3ecfee5dd2
7739644f6346ea4fb0172664bf84b5610643df73dff852b7d91529176a78b0f3aa54f3d4
7b652083dc8c70bf1dab29aff66f32e09023e898b1b49704c12ef6e49fb1cb8373baf423
259686c11f7b0a8d9b22e880d6987eac76918f630e1a0db7a3886b7ad19ec8fd843825e9
24f69e088fd8de5defb5491c7f8ed91476367296e6fccda20d242645b99b7a93c7596593
8c607ca8e6578d409842e0d0a9d3722c91dc066b53589d693c059699fa60c21dd9552d91
43814a445f89cdea442bbe49956c7e147291dd6cada01a62dd50c6bc877a41dc994ad2c0
af319df6bfc41c95b538e0c4a33fffaa7d84d57157afb34116ff0c3da6d59b98e19f4e91
ea206b672fe36eff1219367641ee528cb4605f49f70967190799a0c550f50474438dc875
ee19a54302ea97c4a41d422428a1ff45d9d8929699e99fd307e93373735ed7a745d926af
d49c263bd0af6e188afb2b579532757c2c14119bf3f1eb094bd82e31f4b2c78f67f1ae1b
24d8ade369ae3187e1be2b77e156cfa7772b089455627e91353bbd5c52f51b974904cd23
23a45c472e0f82a7925cfb4a9c135a2b1f804a3205cc5977b1512046de52a7491eb9c019
65e7b892b449df8c95d2aa2e8a355d3773dca891867849890163543ee6c84bb3e7f2e0bc
6603ebc7399f63db6d9b903a62207dfdec8e9335fbe4f8dc1a8c5729ba75c7112965dbbb
1bfdc0fcee2c8fd9084b91d7a0eb23bfee6796338df734025087c1cb03f19d1c1fb9ef5f
2758aee695c60e4d1ba5edbdd84ff400f5994d559eeaa2728c2b3866996ef04cb1cf2be2
0c5646566e2f579612790d71a408df77d9ba56bcee361791562f47654cbcf2664b12555e
06ed98d8b473f6fd40182e93b242df68f9e6bc9c29dbbff626b868b9b1bb5e97885545fc
d404d4141ae4948cc9a01f8e55198c1b44fcf72cf1150d48381beafd53ca3f2cd961f216
1d83d24a8e62ce60f1b929aee37560dd0cd032e9298ec9c1aa6862768536fdb70a14e444
1e70a2f99f8e46ec51f7bca6af69ac1043eff602ddb995e365107764a2139ea89df7fd98
bfa9d0b96c357d2ec49627ab9bd7343f4c036644254fcecc93e08ec33628fb9ab1c7b6f0
a187ffd095cec46f2e55e499a43cef24cf551410d5122ace270789e7f7fa3606d4523330
041b2c32bc07678887010aead4566bed7160c4a879a7dda6d794f9963965a4720296a049
a34adb4bc3ac871356eb423ffa07bec069f20c7ab8a6743226605c1e3beb1c3a8c790727
aff2914b6e7f2ad4e4eb5dbaf47248883c488f7d4b441f51620a30c8e21641ed53ed15dd
969f3ec1c0d65dcb86fbd23ef60ac86f1f2df49caaa4888a014bde2230e2fe328519c767
0bbee63f4596fecdfe59010e9b2ba4a9280a19d061471e156031af25b285066f2581f01a
1ef80e237841685312511d061941417e00c475e8f9af1e12e93b2f4f19e05bda3613f48f
41e83204fe4c19af5e21bee29065325394a3ab316e02eebe4b54a2fc827bc2776f2f7ffa
ed0ba12f7c567c008e8bd2a7a815988cee4dfefdf5145b8e28e437dbe3f87fdf73e22b05
0e7ea51b7eb63152c7ecf3a493921a33e9d90875457aab7577c8eb7a1f4113740aaf71dd
f72d60e39329c54a5bb846888223a5c40a779a4d9479e9d01f2f3c17b0655ceaf8862f05
8102ffe599556916ad3740713ec3ecc13309a3325f5f029c52ade93553a6717741dd3d40
861f2dce756d97f887ebdba5508cf35fc50915f341ad9c14a352b19ec7a61419c56577a9
f1ca46a2d2dbc893be41bf5fd82f8978f8777caf21ae950d121fe2e9e8450f29f39891c7
6d6c14e2c182c82ddc7367e5f34bf7c7edb56a00e4fccb6ce0e3beaa1dcaf112dd981115
d55c958e0c3c3b6f6db76d7c2970ac3d63d678ef4d5e5795927a5fbe92d7c34dbf94dd86
aa78c04ba731b59b2c77cba15fe11ff6bf28ff096554b04c17150da403222a0bcac1c3ca
8af5f2eccd3de33ab2f14107c7b20098d62133ad547e915c7cee78fe2dde4cf86903757e
59a904d25bc23ece55571dd33e98251f80f02d64a55c9f6f64921bd174ecdf128885d911
5510bb5de1b49d5ebb5920561a2ae64f69839afd479b2469f260c5834206d55f247cae4d
3d323735e2faeacb6d04b3c8082700a7d5c8a4ce47d3c84b5e08922f821c28dd15273bb5
af8802f9dc4a826afef19e108aae3ae7be9b91d3882b83cbbd44f51a509203f1ceaabc8e
d388506df615903e6c46b45799e619b89e2e6662b3a22894d79a9ba199224f1d127b48c2
b08ae6ff1f92801d44aa8bbab5c30d7b03a93fa47551f297c9ba92bdd55ccd72d3c60443
af4a2f709869f9cfc2c25e41bc0c3fbe7b416e943464cabe95b10dded1d53090b4c71d1f
ef3c96a79f3e28f8aec6954053e7fcc632ccca2654f08ffeb03f536fcb4ad1a69e2241ea
e7445ffae0fc84dba823ca1310f4b24de4de5a89d03b9744eeb176928d262a7e36a856d3
61d7417d615023fbead39effe4f1834ea22ccf7ebd3b269d898a643df7e72ae5ec13d9c9
df738cef8cc667cda7373b58d61ad5f15fdb0d25fd00f30455864ee14f3da24d5cb37e26
79ec5c54a92d4876ade5f6aa104e279350fc1335485ef81776e1a967079c595debd79263
096148c7d2e4288f9709c8a60a3e19174b5bce193dbd421f66c73c135fe2a7f92849c588
386947db89e5d09ee8376498bdc7d5f316d1133020b895411760594256d942649deb47f2
38f4e25c3cdc8d637a5969a76b1994705b349bc15eb538f3b1f6920f693a0ef16d3f27b1
d4c90a6432e1ad05d6ef887db703b1086be3910c3ba1a5aeffe2dadfc8b3c1b6704234bc
b91dbaf0dcf368f6cd29864252e6e08a747b5eb584714ab213a287c9c0523a26ad898cec
75fabdff36fe44f60e260a4ca78fad27daf2c50fb92943eb33753e1c56e9e98864852f4d
375061aec3dd31592e32f4b51bc402544fe515d1864b0fd93365fa605ad7b56f7b22eae8
7dafdf2fd936426e8b460acbf234644e0428677d41c28f429948fdb9abddedf3b7df2a79
10f3e57f9cbdc3e379972f4bef98b85108887040808f3bac59951b4d5cdcd2855140b80a
94a91e065b4a3badab5ea8892106a88dbb263316d8c74d33de2e30162e1a5c731b843682
b4626f5bbeb49eaf2354b5c3d342b5b40f2166449421e802bda13034e7286c7eb94d1e2f
866bdd11a8fa38a66cb3745b8a8fbb8337649aa037f2bc8963acf46e51d849137673a386
ea699528188680e42d408423c6d62703cba9ed7647eea6bc5d55d4ea5663dcc571b46cfe
4518f8185e41f8f74a10e1b7a880b1f74b82e0b5506e7130e89e9463422de9c2985763c6
95c484cc8a93e4b9c45f3d475935a0187ba91ec58c623a46fe9d3fcb3bde06f043a969a3
c33ed234e73c423d9c37d138792b1edff8e5d3689685d3c46fe5da34208df54e80d49fa6
f24c38c0739a0ad4465e218095da0862f9e096e7d79dfe21f467bc3423bffe047344d5e4
bd2f0a5c74a45649aed50cdffef5a01da517e1cbd401098524114872fbf8db682a403f0b
7d59bbe5c3bff243db7c48f5d4b7fec9a82e016901451902e0943e9c0dcd759c4749bf2c
fad3a3e5fb538ec3871625e04b0532f10589c11c98ccc2c4033b5ca5d58af21765cc14f3
dd37cfe54ed7755c9de6ef19172e6526f354fc6cda43cb81a44484b7501ddc17caf9108d
2b891fcc8ff4b568914e8449a6f6ec090bd123adc7e2b447411e8b11331465af3974a7b7
9ca3ab4ed3179a1eb6046fc21de23f38552bef525f9e7450273bf3d9ad37c125093c0c75
e691ecb08d5ea5fb96650d9dd63c50bbf41e9357b53b8c37b9e3b1db1f24490e96f9ffc8
acea151fe165518f53f4c2dd92ff3f2628a3d8aa56897f8aedeb7df78d72c4fae8f2cc34
b022b67044a89e06893b80ad885b8d358e249400595171efb50b6830db7152bfeef60d23
4c27c996ffe9c6a81dd823a550b1870159fb33c78d5124224d34a854ac97d31566df10be
4a5ef425a695d3acee38e46739f5807b3b1a216f54cf95da7c92d5c114ec06167df30eb2
d32240144ecb4be076e5e1210f096a4d1c154bb8422f6009d53a861173a316e47dc498f2
20b24a738f04c22efb758517f156d2f4e6221706ef67a1b8c8b47003d21fa5b23c11f041
cd649ee27d0bdf6e2f5364836e1b31d48dd7015e59801d9ed81937400a0aa93781585fff
39216f16dad11d689d1120da640ad10df147f7b52b81469ce8eea6a3064c1886cb0cb504
2949412ec633e839375c750e63e3ace83bb6f514d16a5c19f492129e68f5150dfcc6a1ae
1785e82bb395495f14f0bd42f86a04f13abf9b46b8527e2e67791557813e016a0eaf5b76
8b55e1451118e16c58412bb6bf3f1a0d7392236aafcab2ea56acdf296ec48d787fcd5493
267631c62a2b3d4f4195b9209921444fa453ead75dcb138e3c0b9180ea67932c6b43808c
60ac0578f5cc9b9d3ac8d4a94ce6fe9b63446b6a34a4c47b52405849b9b2e850635be403
e264e7589f1d5329059dca9789063582002f37f5c52999695c012477b530675a48198c09
a140b5b34155c98558c482227a732096582558ccd528244083fff670112a7c3e8794d919
4863dc0a27f51c3b27fde72ce98428d5ac2b3b5ea435571beac73c65b50e4a337dc86d65
4ff9b32e233521820d7c4e7eac23ec12d0828e3c61e166be1172e916dec5ece31c09ca89
08727f4df4db3bc236360322c1361939c9107ad8f749fa811f44d0a468b24c745897abf6
ada9fb9b77f003ca67ea4ffb4df88d03e05477359eaa5f12a2f7afc79426bdc2f9d42b8a
20ccac5166bfd7134125fd8243ca0299aa3d1527cee04edd161d80733ce511e9578c544e
57c8eb52f8d681f156cff07c1a53d4a00aabc2544233fe0874cfd71adf295afdf231f450
ea196dc014e65b20591ca812e53d67b8e94a336ba4d5d808c1f25788ea62ab04a0e06a3e
4d37423ee03ff9ee2df4b9a2dad2df27fa9d2a04cb063d4828d29e77db1608da95519afc
1305ada3bb0d5ce7e68287775e86d6d7e37df6dcd25b62df4e20ceb1c6f6f3eadd787b69
f76f059a2891741735537572a29b9988cbb4c08af8a16e4b847db945dc05c6fc26acae3b
982ced9935883f6e503264bfe36f168172c7d70af34c42ee2d94d391ee3bc65adf60a323
59b5f2587d3d28e0af90dfb01e9c985033d3483f7573f2e852d9ab8cd8f3ca5c664bb92c
dcebf8fb6d0e9ae364c521743f2ccfc8c886d29bc8164b4d664cf25b0e2d74e69c0c7a60
02b3d8be6a6fd016fb2cdd2da9da3ba31b0922c8c8154f0021b40e94d959e212d0bd0550
f4040d63a3a546e4796c6eca9d4d552394f7d6d216b40fd902cafdad64d12c87031f44a6
b2c61e622a1fcf1efa1a63fd40a22d17b0a85b287362087c0c2b99012b1a276fc10f5e9c
541eb694d26e6631b807ac677dcb37c75cdf7958ecd11bf0565200d081583c28b9ce1c05
fb32105060439b66ad5298cffd2afc5ea0cdb6897f790662881e17b76c754f796847b084
8d58e71a8d1795033bf8c003dda9fd5c32c2d0b0655faf0ac47017554e7e67658f2abe0b
2f08bdb36ec64941ac4f2367b4425236fbb38f3e1da20c3d383d64343d256ace68e5db98
d620a1fcec209c46a3d783a0db49df9e660cafb2d025325a1cd88fb4063ef54714f015a4
5fec44074fecd31f341e9c818f2242a598408f049393d1e37abb4bb5dfdacd02d9b2401e
a3e79a5a2bca837479bd56c8eb611ca35d0e18fbee9f271a1ada99bfc2a1e2345672a338
a97b2c71c3816cb2233288998cfe54359f83aea132834008afe26a9cdcaf6e6131330798
9e5d3f738f413d2107e1acc7be55ea74d99e0206b87f31394db4bb390d32106a1fe42474
55b214bd143ae00f04f5bec17963b15d565df2f7ae535ac66bd39c86088e2d8b3c85c89b
7d107e90040edc48e9c3e112b8c774d89a284cc18e471df3e4d1510e98a12d32e4044646
2f91ebf3cea7ce461f234ff6c734bb0316d5c9f88125919ceb2b9341b9434beff0e21337
8e706417469fc6d845d8c45888e5922762d18960e6706095df65645fd97944b1b9d9a6ae
452712f8857e6c6c66febe9a02a4fbe58c87a8bfafc669241803ae1ee8dd2dcaed0aa5c9
7f6a04419e8f434e9820a68e1c0a766649a2a05ed21a5c6ac6ef8c74b98d3d06661f2c06
b1dac0e0c60eefd7910c348435d56378c4f0052c6a1661f0f06655baa0016d8547cc508e
29e5c4da255183a28a40e8c305436a05323d6f5f69734800f9fd03145c9be140b7f7f1ab
9707f002ea6fd5037333b4d9c83a9ea736202b26cb222454fb651d7b09bc7e479ec02322
da93670885577928cf4606f8ab25275faa8512def7d732fb7abf4473e92804ab0e2c3bf6
cc6582a0a7b8a282c430f8bf859459700cd1a40f4f1035da8ea7ae9ec25dff54b90b6377
c74810a0bde74db3e5f15a9a9307eb8fd445c87401e608e0f32947949a969ed3276067f6
ee9a2d433a748c358f07f0da91d73a9052499aed419cff53a0081f4165bb98479c041d21
f53ae6783981dd2b7b13ee5734014477232e962a99f641871166842a135779b20e33a1f6
556494e8ec8d53688b391d54e55654959435b91779d286c99c46e3fcccf9709bcdafa9d9
d2379589cb7354b000c72ffa31103b65791a124e9f8de2fc41732872dd063ec587d6de2f
9c8821f3798b96657383784947d45b9504cc5e7659f858eacbb8156994005418657d20df
ab7b1985a1c784f560a7839f60567e607f1ab359adb78988e288c18565e43e3354f567d0
ab9fe97fb862872f4e48acebc62ff22e2efda9d2e72ac8904a6687720842540647fa0786
c0c1dd15df439c74a40675d0b8d18444c8c5d895d1dbf568315b579b537ca85d327bc169
3e97db7286d9bbd7e37959b9f28ad28d6016ca33937b878b154d3f48607cd100c3c8e607
9b60a252ae5978f033b18750621b311aeb79692de97aa470d17d79fa27cd6b192143b806
f4eb8cc730575c3562654dd62d0ac7d1ab35d58a9f5b1219de09c75de9080e536bbccf12
6cabbaa8b322801864c141d681b5c58459374d342f4995de845c259aa715e65c21c4ecc4
83cb142db8d54ecc58be1d6e22730abb54814ddb401626164ac77a8ca205479c02fc5f54
98084f58b55d9553c10ffa4f792c6b3385d88a67f361374378003060ddd23afedefda809
20e254b8d6b8c8c8c59bf65580965f95f177536fd19ac38cc3d4fe23f4527b6c8739cc49
14d6cf45e23c628f9a022b6c1266c5a5aa40e1a24ba6e0ccfb143b3b07b016921ceb11bf
465066017f81aef9a7173b7e42096006cc0afc2c9934640d42fdd9c0e019dc6068cb706b
65b2cbc112c38ef18e7919a0d24a73b5f5e5a23609ebe23b0cfb4dd7d8dfb46030983a19
e0e171568fa493eb1aee58757ad15af2e6973f53be349facba3d94794aa7c1e664ee2aa1
d38580baa0ec5878d533a573f293376185caee583d764df7e3dd135c40f4a3e37cf57853
aba5cd5a2847aa43db6573d090324f2cf453eec021ad2343222ac369b006a8336c480179
cc51010755087b88e3ba88dbd5787e0396e0e9f1523a770b9dde2242d6bc568f72a50173
bb8c69a6c607dcf740476ad6d6c32b77dbeac3437f0fd4f0a79ec2ea3bdb542109fbad5f
6ae8c814f418b9cdd6c27f7e782682a3a49e209235d57f51eb283f551186d3320b8a3313
46910e97e0cedba9d70b21819e114eeea03969a9dd6ee72958a24dec370bb41af87ed304
1761ef03a20ee4dd1806587ed08eb6349b25a633f9ad5b7edd343dc0944e4ee2bbf8a497
4c409aa6ffa1dfcb4e931fc6d4a4ba919125cb3c141f91fb5e5569098a7ed69704075c7d
7eaa7bb0f4adf88bddecb367c1ed4ef2dcaaca1f95ee89350aafebc95142fc4c2642dd3c
6c4d8511b564b8d404f94ba257ba2b897827df304b78381a3ec92a688b4dbf5d340e3ba7
71a7fa97b27497126dcfa4519952888d7ebf0a87a1125ffe516f901a6294b16b68cb269e
5d630f06347131ed0f47491437781bd1a8a06dd2b31601e275194557b35ac1bf14b669e0
523f6737bf6c539cabf97efd632074c4aad898b3bf2737fd9433b0389f03968595bd7ded
3b5be55886b67751a067ce012e9571b279362a02d221262a5c55d6f8f8857b16fa33d5f3
a3d6db26f0f69a25e6e8042a0c2cbdd484451924e09f02f5f76a78e4c6468417b87f28d7
261d1baaf12072dec27a285b4159b46a2dcb3332d8e83ec786700626400d06bf771cedf0
7fb78e593c56154e910908e5a603d276fea14d0cb4f6e962c62e7a6a0652a5c7fa6d320a
bb71b900170669d79848f9918a49fadf3023af1c72769ad81730f01196863efd96cf573d
fab32a8c2d21f63579cfd3de08b1560940654953dfe812034a9e899cdcbb38c8b3076833
21de32d8d02bc64e83c95d787a1c4c81c40aab992886a2662762b7f2805110c1fc5555e2
c1cb5c5dd65ae3cad278752294050f0bb7d71983a8076cc227ece8b268b39295c39de6bc
1116e396e5bdc947555171bdf5c9bd14c719b59f656510dcdf0580212bd8f78c187eb30c
0ca40a12fed8102553023f1b34965bcf32c454f421ea3ce5cdad6458deb8d17c0f6da1b2
ed3e65cdcd3f03e19a360cc3c39cca02c043eb6d025ca3c21cead7d9567b2f553cb586ba
7e11b4053bfd5adbe0ae032b05e7d4ea64a2b0e56b0f2b2fb624a3f32a272d00605e25b7
cbe66a6dfc5e40a60f6ba762cafb5e24e164785c9d136511079af677422293b127501b37
b7595f18f54b7819a1fcb234c8caa9f2d07f3c6a5b99150047c03d0b75578e1f7313f842
5a79550de54a20d8df4593180bbeca0a0b70e41fc82ea6f4824af93ea3b929417accf946
1062e516fb4d1a0aa5fb0fbe5080cbb3c331eb5d3e84592ebfb107f749ea14bb5c78bcb7
d021e4a780e4da35726eac39b642ea69c9879d9f277aaf18dc5c13cb52ec4cca3a9af247
43658e6b6baeedc15bba3afe1df50a8a4e71ac92e41698466a8a5a5725d3e10ab370bb0f
8c6d089dba5eb4e6e25a59e62521d52272ed546c9b479f006e136c9b9732f5d53b3cae6c
55b6cc4e20084736a878506faa7b069b04e40c01d585a4b47b413d7fb5b0eb8352649e38
51166ec63dfce1d82776324c0ac880b253ab8adffdf5e14afb2680ce2c6c3bc2d5bf5c75
08a4e39678968f1c7727f12db8e2aaa6fe2713b954afdc8331beaf79382860d9573c9820
1f8d4a61cd7de7e2bcaa9349ffc29d9b79e106ed052c8c5631bc00cfd25d5a91f7be3d6a
d3f5e53cf5f109ef60db057024a9b490e5855fbec046732ad7b2a419e69827770bd1e305
0ee59a56a7a8abb08ac40197bab5057762e26fdfbd15364286cd65259b61aa1101fd5a79
0e2ec070ece9a2744a33c403ba8d4e06685b67ff734ac059a48a822195376171bb99d1ed
725d73fa0499aae8e24d439e0d061e460d8b433ba09a3a8b5ff1ed2188485657fc85fa1c
530f4bef3e7a83ebc198f7c681c23b573f88e2ef16d0bfdfe9403e1f7b6108f3400655a7
21ec147801a1601007c8c2db1177a59abcdcf5b74dc81750fbb124d43feeb30707e0270b
cf5a4f1b14ed4c575b8a78a1adf1d8a286b48d0dcca79b7953226ea0b557957ad63824bf
08a1c06d20f3bbee9c65070f7163db773fba41d77e627c31dea402066dcbd0bfea1fbea1
5210770f960b580f7c1fd95f710a53e6e601b2baaf382b76901957504c37d4b6c73247fb
c39b29e19ca203145329e467c15434898f8714175ef5b350e12a59d9ee7789c500b41b4d
9f5e25b293cf101a698fe03a02b59c3f1879f34721fc198828af7bfc2087e47bc3950836
70e31df988e96eb7a550dc2f49cbca51e136e95c6c21ea2619b3d6359b1e499aec8bd6e5
463af6d4a802678551f3b9ff8291a7caaebf8b9eace46c7249cf57d4612be06b4161b481
2b91c58ef76a8d1bf9c8b07a66e1f6b9b5ec3571fe2d0cd0d688554ecb0a81a89dbc971e
a9743a05d23d26d6c1484a4ca5b2df1ba7bbfc112ce0b07ff0826df5ab4e366e7906956d
4757cdb7034c214f8ad00992b071adc95464ee2d13fe7038c5616b67911def5259c68cd2
c2c7b838ea299e49656c15d4e3cb78a70b1ec045c8e122de3fabf5f6ff8794a671bbd157
db45e2c9a48debed69e8b98022e338442ed091b2600218e9f5856fc6905cf2c77b94bda4
15a31205c2db2ded6f86a170efcc20750ed0d8ca093a01f258568e89a6e38cb26c9371ab
80b8b243223af539b7e7903b9f359007301f047728bec9854a210de5dbf270a64c6d0a21
30c64fb79cec5b0c628573c37494b2d8d084c83a5c7b5ac0f40f39349524fa11c62c7ae7
d5423d8f94724c43a0b4b8790a4c706aab6eaddf23d3d1a801c06f3888ed4e7d91c6b3e4
dab9decbdb25370175fe4830048fe941d40a4105c3ce8166d01273d6cf8c3e2bce681426
8da04b6cbf7450ccbc5e1e91cdb6ec4da0ce9de497f191618988fe1c7997828493dcfeab
1984d76883c4c58ec26d0a2e62f8f4664418590059ea80cff8dfe32f7211abc7a87216ee
66799e0f3016b8f7ea35529f2838458980452ce4bdfe8e85f8de08bc53d9b8823b4fd28d
7137183a0665302cdda179446ee4259cce4c00a8a11280d5475a1f1c6cf638304081cc06
d136d90dd2e76e96fc25399114247e128d3fba901f6a9edfc867b6581bd9fb90366a7daa
ec5ba42fd9b58131c8f9f9d5c8ba833d72820500aee6bd71f1b762962d06785b7b6b400e
299a6d6a8c0b00877bed2d7b7b0d9debc5e4e7d90c57d30c8947053a1de241b7e984b17f
d89c314d09997607ca89629f7778f8d20ad6ab26d6a1b9221d6129000f746a08a5d46df7
130f0b5ecce1503c5731d5cab02730dd5a913b6cd6bcfacd2d304d5463d7383442551319
ddf7ff2497262c1dd77de6985eb774dc6ce323112f5ffcef06516760b465cda0a15dcd78
ccfe9b73f84a342cea23e358ad68d051796141784ac04097d621a2f5743e0b3c0034672b
e1335207c26954a0476c83f73ea7c6afdfc05fd5cf24bda6908be1853f97686ea99c91ee
2d8f68b3f0b9e73c34f2df7040fc812f3ca912cd8cc4a81483e5dbbd76cd67a9cc4b9176
789ee6471ee15f8839f8fc0d767f1ba869447b70c76b73c3c7ad5124a68a4717e8eddf40
7d7fbf36c1c23a94c8e86f84efd9b9df24f44066d1bc503fb8f59b4af37e6e16bc2b57df
57813a32794bb6ca1fb7e4b0205861291ffb5f098d4ae37ea0f8fd50a08b5409f06c5fca
63840807d0a9224b9bcb01ca5f0fa6d1282304d92077596e28a9600c4ded2830c29edbb5
108043b73b5fb9d22732856c21cbab018446fe24e7ac398bdaff2371b4f6252246c4e12b
b4825ebcca4eee5c08fde291b336556e3615b890d8fae9ab67b5a6aaac4179545fa30e15
dcd0c670d53eb6a286a0a9699a1a83235ad2c43639f30f0cae850c9ea70d541635076f87
07c8d9b7dd71d49c719f7fe80bfafdc0d0973c201a0c30815f6cb47cdcd7a5b2b8f3709e
c3d1fc0ef460bede1bdf1850380c2e88615919a6264fcfa1175f3b2bb0c038106916626c
91edd0fd42cbf7ab61b7b2db82714a48228932bed03e11842041d80a03178a56e101819c
6e2b4b7fb377698b7f80d85600138945243d350d4b8276b4633e74edceeec464d1b6c4f4
cfaef313b44f3c368d59939ffef5524f958cf632faf690998767060937f87b6a748a6e4b
c5a8eea95e874e2862581e697610f327c84ad8dc5737fbe11cf92065c6681fca5140e65c
67078f61e7c4339e6a5876a1a888a520528b75618c2877e432643c99172345cbc6f09b96
27a8be60a1096a883fc59fa267d34306f9fa412b17c6baa6de77380a03105d28fa7c15a2
3c8f8b3c6cf84e7a9616ae5aa6d28a3999678d61c96e9157ef5ba85a91a58e690a08a7fd
4f322cf30358860bd667280174c70196c92528eb8dad259debe56e96b39a798d8c247f08
c1ec046d48ba3d7bd527d1ad52bd7cd9f364e0bfa900ed197097335ddf56b516e3340979
4ca794bf7247b2586f3dd4bae04f6b2ca1bf41b5fa7a4972b37abd31d1ea726147eeb3ab
23fd316cf08019616d46cebf9f865339a539ed93f7bb7a776ac2b814f97896567927f938
5958794cb35967853e076f5db3025630ddcdfca3a4b0fce80e55d3aeb102781a79db41b0
0366cb89e7c8963025fdffd5c9f3165ed226d91518e92f5a659216cf712c616f52908891
5d84551271c6da8a51704464b064739d19106433477c658d2be0860219759b3fa413dfb7
4e02dda3b08f7050221bd2180d2f029cab54ade58003a1f06749f3403f967ce4fcdd72fc
e0d37d3f9741f47b9269a74f814ecae81e50a4570fde56ab18507e79b41624b0f048f394
d570283f155b4682faa12c7b26712df6ee3aa9b736d49d44b14753d2f516ab80fb6aff1e
a779c1590751e3f0986e0722e0bdbeca80d0e5dfc7d1e0d2aa53969ce2043c74d30f8199
943ddc58ecb3f62fdd791c1aad471f604d3d050fd34c1205541a0036716a91ac9a1656c4
8009e8f248df469eda5d57687eeb6b097f06b7e7a0fe9ae29c294b9c7e585c6f67889377
0ca9fd06bf7dd81b25ca0fb4d877e9b244c056e7b7c0739fec4a39cccc9d6d65d908e749
ddb9f6a6c71aec9b0106f6b20bc045f320390eb454177c090f91120f799d85d95aa527d5
adb126e714040df039e3cdfd10b9c8e03ee3e81290562c6c1cc72481849a8f770b63f1f9
ba446d935156d7b96a67fb9c9bbca781eb3979295275130eb1a45ae2284a250f63c325f0
9b469327bd0c4d05cd25c0f9a45971bd9ba55c3fee501e6e92f6854c13706accda9858e6
e7c2a3e8f23976e341e5409d5c07aca750bd139eb123215104ef3ac471c06f1554a2151b
1676faf52ffe30be617656cc59b940723d40a8382521d52272d1c17ddf45f556b5141c4c
eaa3cfa154aa7f5e506ece7c7d6d04416bdb69cb2cbbd0fbf747cb4c460a99de92544774
21d97a54fe95db0e0e52af755c65458f06186e07389f2da1359817a3e55021b76443f7be
515550073a174111195f0845f9088afb97cbf614d529fd30ab6065b9282b53f49db6bc3b
5b9d9d9b529aac99e836761cb5db4d642aeddaffc621f0d6fdc5258f580bfc45b9f82e7c
7c0d76d3b70068e746bc3907446e6cffe1d2b84a924a1b15808e02dce9cb46955b987b6d
4804a3f588606a2d34e6f089059b726970f01081479851049e590d5f536a4069075fad00
d82feeae53e387b0549beb5d3370a354a5c153fcb519304a724563d82c368bb86956fa0a
065e16e289306a1cc6f396182701893de5d1f3d1d63b0b22a08cb817b75c5a5f5a24b8f9
8123868498d933a2d06a83c1ad8d7997a3091f3baa7f14387be3afa107617054b6e15302
ac8ed472539fdfa24808676b8a9a3b899b46356998d72da49b28e521cb3f8c91f4e312f3
6103f69f03337e2f70a1486b761090ca63331a3bdacba68e4c960ff8476c13ee027c8136
4bd08178e10cf4f19be5819f9bf94fd908653e97ee678424cdb779ad9d1ae164ccb2e642
1b2da010db33d97a4c5dbfa1e3aded8cf828c668d34dd884d47a9c1b23fc251ae74af8f9
88e21a99aa210afb3a4db75ca72f10550db6f242f48dfb3ed7bd7798547575c20a7c90dc
713d3f64e69b63262b04ed2ce634e6bff2247fb6a6db6007bf39a2dd53f76382ea7f9f88
8326aa63763a316fd481abbb5e100a5e7743c1d1ff334362811f8318808db3dd699e5703
5c88190016190f8566534450c5fa84b732cd5366fd93679ad5dcec24c3702086ecc3c1ee
5de3111750e90f4c54d5d497f58ae020b92879a6f4f4995665f68aa1ee755fe02ef3f9ce
3906e6da1efe596291ba8b5af2e3cba6aa0b57859aa9d8adb46e1f48773a52d426eed102
77b605e65aecf26b6e794509ffee28d2c2e6ba51293cc3c5e9ed8a94f440576fa08220c7
2324401a8d4873cc56a959e31ccee3c54344ad51c08a81d2fcab20fab40d96776fc19a9d
898ca478e075c4615766cfe9fbdc26bec754bca0530063ba5acfe10eff9aa442ebc00aba
9ae9ba94a2e3fb5396ab8d6759ee191f1798dd4bcb5750e228d845c10ec272ad7df03cb9
d33c9b354e3d409dda6d2abb833ace269f7a4461a801ce8a33456609e148185178c29de6
55e6276f3150c45350600f52bb1b80cfc0498d4f97e225c71d823a3867c079b995dc11b5
4dbf3f37a1a8f9cb356192f0ab74e37074929e45f3e5faff67a26b0cd5091d28e7fb68cc
652ffe4508996e554c591cfae711ba151de1902ef7e8dc4e20a6c369df6c0e01a6861422
c006e369fefaba834569f51ab990e5ddfb7ce024dfc2eaa9a169d639abde27ade254990b
62ef8a6d685332ca0aaef460d2c24152f4778e938ea14db0f2cf6b0b051b3258b8661247
f21f7a74f46c0381eb84805229ab5f659e84ffb68f3e34e37eeef54f2a38711a9800898f
ee13dd02ecf93af81657109fb25017804371c8c824a42e8b0f9841e565bea7698e771c70
faa3ec9b30e10e5e00afb2ee8234a2a4dbc87d12107397f3fedf08716b4d93642bbe1773
77c64cbd29b92ac65489b0adfba8d8b0df05638ae01079c692f62497505bb138eb1dc108
d809fc52eba4a3379fe698863157652f508ab08acb3fc7ac80a4d1c718bb22fc4972a034
d5443e791aa8d4d2138415bc296c4551806a82046079aeede597f036fc81d74872356b8e
29ea0f28b0ddf9371cb1c091d2e5b8aa15e193da3f2c7687215d371bf97f9cc25b9f95f3
ee4bfe1bfd53e7b80aa16afb026ccd4301ea76f1ec5be8071b1bf6ddf998b8bedf3a2968
2c316a752ebad20ed945c36dc6e42e376a7a72730f7d4179bd635fc4b925a4cad92f9243
d99b0db1501e807088bfd2b320ffab5865367cd21b87a3e1a85dbc480a370a174b90c03d
6f5ff0abd56abb9543a3ac829ab7a673a1fd2e301c8e31353792faeb9f47a16d8905f90b
ee790ae5ce4bae8dd42551f2a4fca470282b60afa6914d066373efdddd7ae2935cd22b20
f260ff0a574313485c0b324e887291968b9ec7f84a3a3dd7c87b994780530b367cc91321
e861da214eb2a56f2a191be481f3896997151b8495d3be27bf36b259b6e3e06faf2f95f8
e7d9aea9e30cd1974a00180c5fe08547ceadb35164a9ad194d71c1c9cb22b633866b7864
ce5ac7a85ce428c7911e61fd9ef12d8bba63307e62f6c4a84f9b374967ef80dadbf4d966
55ddfa7a65599c3da68175f9b41ef94ee100c1970bf480b7912390ca53dc1073cbae8c59
092ee98f7023d1cd94ff8fd171577f659316af39d4628665c6e2a5989ca029305feea1ad
a227c178df81c1399a91fa73d2d527527da4e2431ba10848ee603e44755a145689700fa6
ec22f13d3b459da0ed55250ce3ce01c1a14b2c551b957b256702248ffe6a7ed44dfa7fbe
362ed361a0cacc6b085f93f67e13406041bb173b211bd52d0cf3b9159eb71a4c1336c414
ab01a49701564a18e0d6ae3b84dbaacd0a9c4623c9cea9091c91eb03930b9992f83b6d09
fe30864e4b29486320022e66e007ba7da0f8e6598c68276424d5fb87d942920e1792ac0c
c0f7f46c76c63d894f598d6d911e5d7edeb78337e6cddc2d3922336cd75854bab1f35e9f
7b5934b17121acc2394520e19d5f2f970614b655d01b004e160cf21d3e3302aed81a7ade
45598f9faf6aeb0472e6b990353a646370d66583f8942806b48f3c0907ad4c5bc4e0c530
f07edd8597248261ff20224b6d1260eca43298cf77b3ba3254583dc20d6e21678140c759
19102306049f408618d38be9bac75b68ff0f4adbd2954bd34ed2c44d4f8d8ec1cb57c2bb
bc275357eb607678204c94d4a7cd0cc416081fd9b48709fa1d65c8eafce064bff2d007bc
c4db96100015479c8a47a14a866c8e6e110ebc80070d98a7114e36e55ca018a729ace91f
f74d596ac5e3ac8b0438d538f2a08573b7de9dc71ab728ff8065707c38dbf9222e695f9e
f73099ddc9cbf50932c0e99facf58ae6f6245d182b6dd62e705347fda498c7a30f7951d1
5384591b9e901d5ef711222d239ea51e779d41bf7384baa067d27d585db7badc6c33972d
7b4c6e4ce245d1bb8b4fdff9a4ced6056017e3a98e9f70f0e5450ed680b0e239534a1752
526363a79c28e5bfbc6420c6d0bd6f1eeca8a63c3929373cb9e307e980b20ce27fafdda2
2df1a781aa6a5da2a44352b3da7e1885cef0d77a3d57b502c7dd1642b8ef34dd234931fa
5a0da67b58f8fe95de2f95e90e4b589e33b1bfdf2fada452f81156b40802f8977c4e091b
1c0268dbe9fea240b76bb3d708758e045ee840c7a26d3f444f336753936334f1e69b64f7
f618678b11b83c4af64512d171e870108b3cb1b9dcf121e70e9753502b750b26a415410c
0fbfd5a68d7b55f8dfd3032e79273342034e96f776c989b1187797656d8313a6a84fb484
97ebe06130699f8b9189dbcd596862af1e93ac05e743bbcc5e85e7aa2c8af1e5d953182d
3ba3744074e06b93116c4c22b9e03c7cbe88a64fc4abbb5ab541044e9877c29dee2c8eb8
a7e2a10bac348e9e6f5811153cb6506ee39a4e2397d4151efb82666e277ae1be495808ee
8cc5ec60b43932a661a9f4490f15c9f865c33e278645a8a0368263fbf388e2eee7b6f303
45700cb1bafc9ad240d38e040193143a271232a09577a232008b480b70bafc2fd44122d4
bf3394128b9c6736eaee7497a27312bd749355482137ae7f26f86329715becaca515ca1e
b5e5febbfb8c1ddeac30512c2ea2a7d30239ea11917ce95331ec7f6dc55c3e980c3a7f9b
46eec3e0ba0e084734ffe510b1e14f3055b81de67a6b3eb85b76d5ae6fd497c9d69bccab
17ed2f6c8b1b7ba1ad1261e0d0c45da8cd74ae8ac525bf19a43203ec2a7c513ddbaff8f8
ae713c8ce24a48d08bf5dfa163c940414f541db5977dd3323e8480b66d6ca0ec418b0f72
473f1572ee469bba45ed1588b41ff9ef87c3da44094ff850c84ff2d251c689f248f8a49f
8f450756429959ad47099a836858f3120953e515be23c11da08aece491176c47f79d9229
a98b177bec402e88b4342f20faa9f93343df55d0c2c9433e8bf48c7a9964ee32ecefd2f5
3a32c4d85df42eb49d91e094047f5163f2af355cd9e1443cc6f05682df05ab4e459b135d
a7e47f4346a5b33cd6fe0344f26600746b78f8454c2fb61efd80f50777c19c30008f14c1
8f9fbddda0a100d85c6530ec4866df6fe61aef362c0186c23e74b0a63d591ac456278301
b324dc3510c2cf6a9966b1b6f31790f41e421588c9dbc628598fe5b4ee66559bbd877673
c45c9df0c54f07617fb92d84dd72d20907f1b03525aca2773dcefb055714f71a4fdda283
15b3137c3915acabc9d8d13a8f4e457bc5c9c1470d4a3f4e6966bb2c67d808bd1fa262a0
6db14deccd3390bfc894975f170607e881240ec1754b7bbdbab6fed9bc6f9438a876583e
1986b48a455b4b9aff4f7a81bcf5cecc706093d2cb3d34b1cd7b6e987c71d474bd3eb518
5904b5fa47d7c0b065c820bbac7b5de6b04a4d72e0aa7eb150e15f9f29a5df633c8cc3d2
61aa04a97f0800b65413a7b39a0a0f450fa15ae96d4bd03f475f71d453639c4404daf9dc
947585e818eedb9cd2f4294ac691b362a196d738e1b46ee6c278630c3dd4c48940203356
9141295a43d9d9f5ae774a3eade3496cc0ae99ef7b647ab9019ec61760f50aa6ef834efe
6ab34ccd52c310690f12c4e511d4d035053beb2d5441ddf82bac9ba5643b4b6c45f120c4
c7bb8f9a30e4ee63300814a6719544c38f26fd276037fc8ec546f1a9f6bc658ff099df84
ab231b6f07ab4c9450bfaacbb2971f6e576428e835a3e2e90b03a1b82264bec8496fa04e
be369cc82e372f2327fa140ae4abe62dde2d8d485bb3f8bf03ff775a4f0f35bc5838d0ab
a19cca5afd2319b645dcd287ac614701886e19d6993eeffe28f75eee308bab4a9a3c456c
e90436ba46b1bbefd4c787e0d91617597650b29cab4e1bdd76606390603919088c9ae155
a53cd64a07cd2947ceda286e1fe7433051d0301795b913be6b99ab7905be1477fc6d09d0
100adce02550a13b89eaa7a2bd1a5d1089d595b87227af294b72de298782f9cfed70503a
bfb80ffb3425b48399b70a70b150390a97524f739e60637d55ae99e98f3d3ccd7aa5d51d
0d5066ad32e896a1c7b952c667968eb71799d3467922086dc56477180c198750df7e481d
e84a59e845d3172cce7ceff035d0b00f42af5a6d488ffdbc1df9e0dec829ff3c9a824a0e
0c8b51ed443d1205edf0b86929de59859e300273f74d8134a01f37ca5a4392050bab5a5d
808fec682c40ecbdd8ffaa49895f6e80efff2109e58a4a81fea9e86b9fba5293ccc10b46
5237d419cc162997bfa62cef82201fe51b64e0e2621d8a9081d6641752567439a5904923
0a51d44a7ef2aadb89835c60e878a270c3dee37d2c0fc66ec68fba56820453cf2fe53421
92723f886e461627aa6532c90b743c78dc07e2326d959d18718fd2b4312bae7db0221480
a3feda5cdceab06400052cdc5ae6e08c82eb722a884ca66c2d6222b844058610decb2b93
8a3ed3fb04bdb95563e9f89ed1555697012c5445e6f0428d53e0ff297b0637faa0ec77fd
3edee8426f1f95c6afba7636d005753c3445a8b1a97b5f8f18ed815ef45b1809fab838fe
a5662d1d6a5bae557e40fdb977fc47db384a6ec2ec084ee3e872d0ba216add93978fde46
dd827b25890a7307132636d7284a5a31da9731f624543fa2a24622c8a8c695e142f9c93f
52a3d22986b51989a7f7cbe5ff718307f8526c456edc14ab21f6cb94d28ea0764579179d
f379394e358d298e5b92ed964545e3df8363567be6c91d5aa2f18463db0afe73b91bc83a
fd90208c5205884b8004aff1c6a9b036d436d73186eaa3d1f6ab331e330424e6fca21461
17af577def12cf690386ce005b13989730c24aab112bb01ba0863d41fd659e75bc915360
4db12b67a2b15c984bedf817a0d3f35f7f7273bc45951bca878a366a96adeddd7e05cab3
151ec8e835c0a0346aa22d5be53d7c11cae90df8b76f97d21a70c1ac3ca0e28e8c57c11c
9ff7d0d79cf1c8b2d91f3b8f11ece64454d38ccdd42834e484e36c51f6fe41046902ac24
0aee7d9f95e1973bd32d3b0a450e016ad6b1a5161368fcdf4561ea08133aff4c8472acba
1f088c9ae155a53cd677ba10da0ebabb73e3846b08487b42e7b620294a0687e9b3d915d7
8754c45aaa6749cb475a192ed5062a46ba3021badc5fa6a5b46bdf2fc575b1890288aa1c
372424b0323f8f68076c0fe7634f6b131273d647d659bb25312321ecedc1d5a1dc26a519
c40d8828c6187c18d91fb77e115f280db5af254e906f4780bf5212644af24b0e7d2f69c5
f0d4451fd630e8ff8b9b54734fb01762d43962b38d60be3582d20e643cb79eb1e224b7ac
b63232ca21802410c753bd7dce4b99c43524ebadf8ac956a4492ed09e78785d59dc7270d
4dbd7e77ad1477078043946d4242f737395ea4b15078199f2be7ac6aa4d40624ec286767
50011685dea6feed8f1604539c8b0ae4820461012e1e00c86b203d6405e010bf13b8e97a
e10460f0351bebb9fe914511c8aa2476beaeebb09630683d87bb036d76fb30a917f4f300
e8d9bdc2e91c1a1efae907d58404ecdb84d2a727012a6ea13c4f2cfa53cdab2321b988d8
239c1b6261a96391ea007d6b2c4d8073f73eeb4fa47e2c8b3f6907df026fd325b2674cbf
ffc6d7a0e139f7b18c2ce37a5d306b9b289c7d043482c78525dc2d3f8ba5229b661c1e7d
443b0238d2df0dc235624d5dfd32a26dc09aca7e895054c7b0d09900e2f9df6cffec647e
15fc52e1ee45500d28bcb8bdf967d1e66d27a0de2c274cde7c69e0aa0c9388882a162c4a
aa520d4c1d401b9ebf559009666ac9556bd54bc2b49886c76e3c5246176bf6816790eb3a
ff68c6fb6af47eda20cac1d1f5bae5343853bb908d0e4e75bbe80ed113a018d501f7a41a
36e74a6a0b474c020343dc21cb196faeb137d4011cae4f9500827eb8b96ff82e1e571200
3ef5bb485011e59d0ad26b6aef02248a41390bcc264fa952a751b2adfe7e1291b14b6262
5bee4009ff8da9c2910960812e86a21b410f55562fdd3f6961912d8a614cef73daa86dfd
5aa11e3749b50dd51fd8c1ab1c7fc06b39c8ca0fc004d3457a45294fc076dc321d0173c3
6a8570153fbfa23c9f3d2d678a752608cfed111c8cef0de78fd428ef961dbaf520713a66
8655c84b8f146776f126143a88a6624b43bc77bb9ae6c7612c301427933b4a668f6debab
da7dd0e4636e77543e334e34ea57443567c73287fd6ba170e1c8b155f0dfeaa05c2e78b8
8aa2528256b694caf9d4af45b0dd5dfea6cec6a6a6fab3985b3d3cc20c46b0653ecaf365
8662b9e8ad0dcb6fb3bcfd0c1fae227da45367ef2305c603c9b9e9e086b382f882b02677
1a465b6fa7fd184f0445c7eda8d40ce2f694a26d6bbd3bc4833325c80f815fbb940e5b5f
fc884cf61cc49f2a182622bbcfff25a03151483be5a268fcbe81decae26497cbf52c29f9
01da59dc2f50e100a0f4cdc3d689f332256fcb0f7490a7e49ddf12636bd4edd392bd226b
876cf7d14fd9bac1a841affc2faf275afa6bce248866d3f272a59b345cdf95779d235ba8
daafdf0382b8e998ed41107b68bba52faacba8bf1d295b209b9238d4bb4289b3f0097ace
47edef64eaf8ecfbaa1b0ceca30b474a4904e28a01a1447931155547d11d546c6a9b21e2
38fdf5d4daf417e5c6aa7ec1d565f486711fac6627cf7ae4997f9f330bc9af337a7c9f2c
c18a8841d6b4cdb04dac1a1e4596b54706ae8e5c7ad051d7e4cafd48b22af69b806c4200
9ccecf4c1246160b412e4e5146d260b9d2dbd4f924883e026578a3f437aee8942767df77
0fde0fea1ada6069aa92cc7f8337a40068c7421dff62b55b23b9622cd80e99fd284b60c5
82360e3de2f060c9000979165eb87ea34e31913bc64ce59931ceddbb42693169e39ef4fe
b5e20c87caa81d17e85b7ae754442b4d871ff98e74baf5abce8530af6b6c752735578ae7
6cb6e1faa88438c5f3236d0a66acce59ae6d7a2017bcdd3a94641b060b4757dbd5454e86
5958578342622bf0c4cbd56b92829e1a70c8deaa0ceeaf938a113aad50bf48efbde088dd
de335052e2fd1f32f2fffce14e7273baeef1afaaed33e8527caf4f4c0cf0a1da50c5fa65
a036ad405710946b631fb03f22f4d26fcf3a2e48134094d147c9ee1d2ad22ab292260c80
af09c7762a89facf59399b300a688fdfc5a4465ec81054bc4f37956adf3bcba002476696
259be1a2b15dee5304615d7cf7d38be34c4f3b45a6e657e79a6520ad73c9bdeef0c860b5
9d0fc2661ceb119e25bf481f8a492b66475ca400147f334225984e38fd1e3627f1d27d42
85df95632f4a8460c7af7a3193dd0d8ce533bd1b928bdc52b586a360538e46ac702ea587
9cb68f2a3ed9f3bc4e167edbfe1d1d698b3c995e60a7ba5d654bc8f721a8bce7c4680652
e3103a1a18d669bc366f0a332100a9a0a31b59246321f71b3772d8a06594088a52d827dd
e7ec7307b34791dab8a6869e4f4df048df0f76d66cf6d3aded6dfbaaaa64901aff53dba4
86e514a8fffd38a1d4b0b3f1b89efc688c95f76d467fdc6b737dd61ec0a81fe5eb83f5b4
9621176c99685ba8ec525f68caf15797c11770f0715a9288537779ab6f7705a9d08ae54f
ef82af34f01f301c207eb063aa90e5f1605f329663d504c565909d3a1f13fc57ec3055e5
cc3614dc8c82a90ec77fd9547568818cf0c15c41b6b60fc22a8ec5c6e0b023f235e3e1a4
211a2bebe6b57ce3a76c57e2dd6ffb527fac32d44663068780194d7b7f7e01a23522fdd9
b02c79c90a54df3737d05119579dd5af98c3bc2f4f83ed0a720ee4b3c6dbdd92404cb814
3aaa99256fe6c37a8623b3941eeadd88aac75e64424e2a3201559328736498958e8287e1
9d12771b5d7e3168846e4913d2cea2c14184a8e4b299190f651bbd0b45a0162e0e6d2d93
8942483be488f618c15f5d66edf891d9910c07e5191f3ecd412e98e86933547ecf991210
b038a46bfe00a894b1b5e0052a02b623b15bb3006dd87e1e0398166da233b34deb38a8d4
9d12529da0b8442e06c093d8d89224bcce95322022840fb13ea0b7785708ff8923f1178a
c7fa8b52ab147a39f337e17082ef17a43d82039148637ca60e31857b4b5d5d1fadcc7418
d60f04654ed39899370e4c05c5966e36ab813b600cfde913e967c30918c5b0827474b843
4867264f8cc7ffc100e41f0c359befa50834555c8b74231f5e208395c09274bfb5ff6241
cf0e053182959c1898417e50a2dba983156f6018ccfab92ae2d27902fb2d405066e2c50b
0949bf1d4a101e91fac18f00fd2b62c98c8e7107ec79e775879ad6885d70d6bad36fb6e7
08e632bc1f7fa6579c47118ac50df5f2d2d8bb2611b042b79a47b0f4e82adecab13715df
e226dbfd7c15eecb769334b30932c47a1fadf366d5e4dd184dde7223344b924991a02712
e124c1f35931923399b1635e5b7e6dc1e386e400477d7d628d80e311ca0f96eff49e2095
d81cb1b5954ca7dc74225e4c97009c958c203da21bb42e8d099c9ea4b97c66cb84e35202
a8c3eac283fa8ac148f0d9b1a95521fcfc9f1c01b6c2b614133aed4e14d7404fb795dd9c
32678235b522917254e6ac2c49c5ee6a7fe54a47bf0430e8875b4a507449b7072bbeb500
41a1fc38180885a11cf48d00a439f6c4fd7fa3b560756f7ff8483b674ff55ef994a614a6
a290369cfdc949bedafb6aa639deeaf4601ac4e98bfb554e848287d7baa944df94b53895
c17243be75889e1db87bafe194fb8195263c7e8d503b83c2d5dd463bcc75c0775a5bb143
0e153cbf186c289fb2333dca49742804b4f42468cd9b8c75c3bac9f3a19b15e61a928f49
ae76e14a0539cde8df99bb4c17792270da187eb3f945d2b24e4b6ad8eb12382b15971939
c8bc6c9636639958c300c3df9548404492e44b89112ce305dfda411217aa789ee9bcd344
566ebdebcfc6c86a5f357a2454dccc1fabd372071de1b047dafa431f846e703db1939964
b74b9a8f763e5f877216757eb02731c8f5c1e52f01b478d62aa6676bca841909ddef0c39
899faa0e90a1a5963b3184fbc2c0151ba6ffdad2ce6f641c4536386044c0c93d498b4b4e
85212dbeffc65a3023ec2067fad0b26b285646219718a503741dedc8068be0b7e03c85e9
68b16871c32bbee03db6f31ed597fc101af191a5fb71baf11fc3783f189d444c6eb61af9
085e1df0c8f01c32e8de50b6674f01981e44c52ddbf932a210fcfd4be3718d9b055cc0cd
6b057c82d85b03e249728643857bad230d9e4cddfbcaf2e3c994c4fabd992d61223a8efe
7b8e6911e3a077a798cbb22580c6f57872fa5656897652e4d2704d2768525b9d71354313
8e516858cd14261850b5863eeaab5de79fbb0592d02021bc978a61124e97d9372d71dc80
2af1b6e20d7135063929215c60f20832bdf4be13cdfd78de6d27af94c7bf57996d49eb5c
56cc418687bd49c78c6c5fbce9e757e8cb2e4f5b21325c44658ca71acae89800456bfa58
90786e11627da4f9f5539b6cb8cd8a145d5c73687d530e502f5c360e2615e5b877a01271
273335ced38d0c5950d10674c2cf5ea96f2023bdc942b7c3d433aa0320748402463cca25
0a896c230ec173352de66999d573125e15c354c5557ff60c8ede14f7568a72c8d20a8e21
b05e27c4dc0a15db5139faae7921152ad06ca3b1c6cb88a6bc83fe0a37e725242bdd1725
f7951f366592549d18828675d14c6a0aee0ec1b241843a0afbd66c5edaa0a218862eadac
b065be5ad2d9084a0a680031450120a47376d49cde8c83aa3c341cd0acf49fac8bcee18a
bf64c080add5f454c576d7a8aefe5cb9eba03f92a77bdf89c00d47c59e8ca08c98153588
b1746bf7e44178e6193f13e2cfef440672a4f951d419e62bf668748ee136fd97e06bbc67
309c6f9333897715aca65d34af1a2e2f02009a6e4c361563dab4208845c48cd6419cc3e6
ae66125c4555a30e83496e1ca11d2e4f92909e2f2e3121ab83ec6ad3a31267e5a69359d4
861b12419b29b571deda4cf796dd24e1f9dea778b23bb2017c65f919fbe429e8131a983b
9b186d38b2945ba7bf3b14a46f672898f3913aa638a1c0ff9b207a2b75b249193c729863
b805549528b4c1d878511a361b87f21e3a5df89248860a9e5dbc78b1d593ddcc87ff0d7c
f3fefab9c3d94591053c8c4214ffffdbcd27b9a884881cdb3c24a7c33f14318d87c5e116
407be246d0562a0d7a893955d772f9afa3217a9159d1da48c3b23b9ef8de88246fd58dc5
3c96e43aec371806d1bed68e86016e06f24858869c2a3c06606a3800853602bc90dfddf4
4e2318dc79005a22e5dde22147b58b3d44ac31ef4a16eae0d1c13c0de337eac7fcb7291c
78646bcda6fe4b2330bb173b4d8933b5a886b83e9a0dada29f33b6473320ce75116e4c32
dab1f6342dfd4b089f857dc24cab91e99130567931eeac0baa17ca4cf27534b71d52c220
2628b014e75659b79bf404ebda41b8ece9ba89d029e268af1287c97765730d9a3217a821
4bf32fa41c3d6059147000ae899648bdd2dcdb5c2b598391579e26682b9faba018260607
cc735b535b79f6669aadb05b33af4b50545eac108aceaa6190476aae0e3d3f4049879bd3
fdc0ae18767fadefe1f4acea01fd4c9c33097ceedf3ac3dd741aa1fbf9f4722a9a37322e
312374745eeaaada9986c3f0dda784b4e1da5412e700e2928ac75ec23e16b7031717f608
089e6e11e53c5bb32c4810d2cf981f465b53f569eac157864f78a703ff816c1c4e68a926
6249bd0056e8554d99a234f71dbe377681e6b4f4bac148d0370d317faccadf963bbfb4ee
71178be9c4226052603cc2e7a8f54a0a414a2319fdf1882ac09e1adc525c8ab900d5abca
16c9330cfc5adac722e99c172eb5b21b1a5bf5cda9cc5967507e94f64d1549833b37aac3
85e99e49553d72cb59fa2560af816a4fb46be151b2bfb8a062bfb383f4a72b015a96890d
7027712f76b4e87410be1457b94ea53807d820dc80af4fa4d36ce5827bdcc0db2bc57d9f
16baa0fcd30b90c029b33634a93532a82c5de6e5dbd9d78eeac8b391778db210b6d7ea6a
ac4fd8bed96195975a11594023dcca5ace190c7a3e3c7eccc117f5cf7604ad638478d3ab
e4195377734327ea3d9e518babb557b3e1272acdf38b25a451b9fb4afece4ec4555597cf
1ba2b3d7a2b22a77614f23f51ed1c669de20cefc0ea64e262cf01f443b8748d7bb6bb7e3
f260f1fe1f0254db3d0703badb649bdeae5db643cb49c46d20051b75e997e5d65c0742ae
44e6b3a65ad6a7bcd65a557f9fe99a2942f312c8f19cfcb3f12581ce19bed3ea272057c7
e4195a4ca4d9b98523eca1cfaf3e9c70908fe9a54dc0ad152c147d902b6c3dee3c26102e
c686a23bd725eaff9540c89ce9dd7ba848d01a53c2f6e0df80ce44dc40a657c22f719b93
e684161725e565c866a6b0e7b8c93b20d701638c42dc344301e4b1b5d9b578915e4a6a62
b211ed3a19680c445248a166f6aa66b5749d581d89d746c2d58b18e327db772131f22d0a
a413379a7c5dfa8c9cf884d3fa65135c17ccdaa7a52a312b9ee86572575830d9805842bb
582768a8dba19798367b3a2c142f82544867a61867ad0f042f857ac2727254a8a9382bee
4761f290737bb35bb83b5e11eccdb077149167c457524f5bcf85b3885262de12c321c212
68a933b1e2ac84ba4aed9b0172b63a66a1ed16173b61a6c674eee92adae0b3b5cb8e548a
613a9c2706592eb5f8ee68a89ec9f2c3802dbe0c210385c7c50b996b66ddc9e506337179
3364d229ef599c0820b3f1c6522d18ce3862b02e1b298a7e769471d5b0c94c186676b8b0
a8c3a9e1eff1593a90a06c590b7955514c7ab25ac6df088ad3801f3c77a9d788e1bfa0dd
2941662c971cbfac97c58c3ea669132890360e9035e967b4d938faf08f226e2ba1e741f8
27dbb8c3a3748142ebe6bfddada0ac2307c150727817ecaf72821cc90f62c2a3f345cb16
1406b896777454d8f29bc2ecc2e5d4a0ca6fbcf5f7cc5bb26a289cc15d56eff1a1044be7
37cf41c1597625806707c97e085967ca0ddd4f30c8482c9098ba0624dc953e294a01f29c
8ff985f1e35fbd7e222c0d7cc57dc0a285944bbdc264266571765b0fd1c6b1c8d254973e
9f124d811cfcdece54de9cc2a283cb3e6bf1c95ee3e317ee5f15c523b21ca8fbe49fed7d
f53c95663ebd6332a5f9d8a8da1a622189a508f3154243ea596c27793f07ab7a23662d4f
82661075b4585933da9e81cda71a26b7f77a03e4ab19c953a2abdb522498002baacd54b1
7a792e62b1dc2ccbda0381c233339bb6724a81956cf445ff56506f57108298b3fd21e01c
9487dbb36b4f7c14c55be39f4df9c21f8a22fb3051ae9f5656206daefbe4af6a8a38ce69
9bd1f124e9e913bf4a21ecaeeedf4430dc4d24f3f40226dd811a08dc38b5e9bfbd3bde04
dfcecaed4c1b18a27186e26b194d3765a881fc8b4b2afcb0263f402c15c66556e71fce84
f249a1365023b2b8bdbd35c23e5f8836345a588d2163f2621bb0db6652f4f1bc444ba05c
2bbe856af7509fc415c47cd9a438693a94fb376305b52a773b11ba894e8e389cd87a1b50
6a8a7dfb25d7a55503fd7ac215722a3da4c37feec8fcdc4aea163e335770518ad1b8617b
e04c3279d5a7642fa0d9afabd1d1f79eb77248b29ca979d3034e658aca745d94b6f10e51
bb7c872aad95fee89d6c9b153773d9420e9785f056d72bcb8bb1a0fb63c7480ba6fe8626
24659a860e028ecce53297eff93931fb0d9d391e726879215addf331d4353031bc8ef022
ff80147b923db10811eef31db9d8cdaee113c206abd36318a608dcc77ebc1ea77c35e7dc
f0c16d26c4543c6655b8769e459f2f0b82445affb16da5e988cbdfeaa51191bf855d3d98
2f1650244f14a41db199e9aadae171d89b58fa7f55f230b0adef7e8ec907d7598e2991aa
1daf417146d59ccbd817f9a7faff68986410ebd812d561149678557283a97c658adfe286
e57810661deba245e00520ce038e8d9a9d732c416d1e70ba0742999707e239395f2f4839
73eacf875bf2810cec983e3e5cc48c374b9850adac6adf21843a606a5b2fdca36056b0fa
e0fc84db9d0a8cda54ae001df40277695ccc1f9523251c05246f72e71b66fc37ce55de8a
d6aa67c360df80a113710e6645e29f8eb4f674a4153d95bbb065b9d7d3d77f4fdff0cccd
52868365be175ded154a0eaa14c17997625d75aaea432cc0ff087f38877a74160af87544
7587fb9a00b45f99b90901c437307c6ae5f07843e740f78b5b61e3e68e325041bc9a8b58
0a26adf8fe624d2d1a2ecf1eb3072cdee6e89bcb4a5622ca71dfc58646b191a4e079b184
73441562cee76bb90a7e9cae8ec48bab6639835dcde9f718f85376849cba70cd9a95b960
e81fa087dac3d568820ec4bf2146827183682710a9275bcf7cc27a1ef47a3a875b624b3a
08ceae60351c22c9b76d69a7481e455d8dfa46db063c16dc19c66ef13c466b98c2e06284
1ccf3a90b89ae79076684ac788f10478de028e5c0d27c803f4e17816ff3b671c5d4a2fac
615f9843694b2938ab14ab986521fef5f79c0b31d80c972fbbbb65a0c82b7ca294163d84
a8081e3683289058ac121351f383b6459f0da455332f5b0bed36c3e03f63be6601e8d84f
3bce988cff9d5bec78fc2b8f2d075ab810e0efa2e3c016879789e8d7fbb4c95400585b2c
d1de6d786b1e5cfa6ddf874d89cc0995e8ed6a110024fdee016779fbedaff79a11c492e1
9ed00d58d15499f17b9e2b32bf1eb82be00f2162f54152a3d5eba545206dfeeb1005c969
3f3362d86472186a4aae05342e5d8e8ae6efd29abdfb4d432e869a86c1e576dd34e8f745
01d2199ad3c3d461f4adb7476f66aef6a12ac51c7feb8a5adf3c9a56178448be077526c3
5579d744f9dccf7e7a03ad1e30be7490e52ed5b0e259a6a55f9c7899c5c23c4687e5e2e6
475c72d02030afaed645663d91b98039c51931b91216ff21813aecce282bc445e19cf132
5cb6ed151e672afcbccc13a00e500bc5b72a4382209a8ced648a07dc37ed40aac968eba5
eae7d64467c9c1d3fcfbe025acb441570a580c003feceeeee9f83e869addb6701ab1ef4f
ec155db0c54a82bfd753c09b130302a9f39db05e2af7233149a6ac8bcb6e38d3805fe906
5b9fb5183c0d9452bf085fb80d1bed271dbd2c735879dea33b04acc79eac540de5dc5cf8
241763db451a3fcdd6fdccc13c10257f41545b5bdae72f650c2d34e9307acebd334e76c0
fa84d609ca3cfe796f4fdce48be7aa42f76a41d9e847fca77a009be6d233990102c9017a
7b07d5ec2cc450c55447c8bb4bc2c77e7b9064684c0c99f4956a1314ef6ee327671ecb3b
9c4e48f2c3f90aa36dfd016823b90b127ad073fa6127a623c049f7494e7c530dbf78d259
4bacbbc92d1e743635582e0b53428c1b77399c5ac3cecc760aa8a9e359285f10a06820a3
3e77cba14b2df271f97a217e2cd876f754d00fd6bc0859a7711a2ecb32c0a6d9f1f661c0
38bcc09c60833f028c82e3636540142fdfd34841cd60af4f58f0a07923bacf060ea5eb16
74897c11216b740a36321be641e7fed4b7c2b7125e6c404086e46293515237921819723c
ad28e81be04e4136350ba9531173928cdcddb484f6140acdb466397992589373aba07f73
15fe73d296d05058d778fe781ad09bca7c88e2481f4edf54e3c17c78148bbea81e4164c9
f46420436feb22a22d30809effc746cc0a39af0ca02e4c33530704dc67098c3142834110
49c0bff785339a1d73ef703f7b5587967acb170c12c5fe029a8d1988a96359e48d0e4c5a
c4d5bb0a3e2c8d7bfad0b33c608883c9f05237b998f9b8a06804764e003b8f2f07cef3ad
11c8574da4c64b4054fc538358ecff97461a46af7139324f92a1c43cbe5605de84e9788a
97292a5338aa3ef6c9404963f54eb9cb003e9f7a0522840af8d28559016729fb4b59c8cb
f245076303349a2ab93de0d8a1f1704988afd1bfefd4c9db6564e28286e272769174bd27
345b3c78db45640dbaeefb829a0cf43597f3737a10fb0f98748e19e92f8e526bb1c6fe8c
4a34af39f054840e8ff66ef28603798231149df148856e58e0ca37771e5e4e451dae1a53
eb811803a383b0588589228b5c5b8aa9c2a354b4791142fafe1fdca47556352b19e62b7d
4d2d801024cd1446f46ab0a226ca5a3bad35fb248ad1d887443f8bba85d2eba533d4b15e
84ede9725aed237aba8c62882ab499862ad8cf62a88f7623a2eb9b6258b22b4aa369c250
1ed51dd3c7fa62ad97873cb944ab165c5558323b2f36a5152589c5aeaf2508780779ebd4
5f127a7b39353564922d8cf9074b5c509ba7167646eb2f5a2e5e398bc47b622f69b3e537
f8d47047188162322bec75cf62803b528a2b925c3014e49dfe83beb71a8fd64aa7fc1c80
e3d2a5269d566100d4c55bf9e34923defbea3c41c8cccbc83d71b9ea3130288bc3bfd088
9de58ca5bc3d31f4ecaa68af6a424f018b0b04b386cc428bfe39a6575521884fc3e80acc
a025c5d22c373add9815e78b1075954f22c793f56a8d81f30cacc4720a4aedccda243284
fc52113bdf5ca264111c74a733bf2a5ed2f324ebb039a88fb4d0b024e276e9f51bf345e9
7138da88cf05980c218ea9d80654c51a5d77e7eee5312f80c370db20caee9c9186706d54
bc24abd7ecd23648800c4e9c93b3094646fb3d1b93c1feb8775c4c8235d99771d92c5fab
d552275b6fbabc8a92ebc6148b9ff43b9d2394c7de1f8978196347ff1191e264708ff8ff
7437b2a7df3a9d83d79c264cde0314ea819d23364d2051b831260571e2bee8e7af58cae3
c4dc0132de7ee3c6aff165e7fb49ab6d2a10455bcf618402c62343a849fa6a9cf3a3f976
867c1199faecf58f464b82f4a27582eb3ed0496a22ed552bd617f645baf673d42e24332d
d6aa5ea013bdfa4fe0778bd86aadae4f0b158b2be9f7cca9288029c22b496c5d28afb3b3
8a98d1cd6edb7d5d03ca5cddb1852ace42a44d46e5236f22516b9455924206b35f02ccc6
ad8c13a72d1ec57a61323d874fbde132597d0c2a2d494b709b95853bdf94dbfc11c2d806
5aebe47727d3a949d42ba66aa4c1cd6dd4374c262906ef612b28833cc4bd70fbc494e65c
7122ada0fb2b53141451b691d387a02b66f8c5f7554e4dfacf4fe7f868be0f97d1115bb3
133bccf2c94adc924bed8088f5885d4b7d3378a0d6a93a6a535f336d8feaab0ba75186ba
3964de399537cb90ada8c65574ad13020e2f1a2f276d025ceafc393ab95ad5368b8c0cab
b20c8a7782a4dbe5b899c9d74034ffa06b8be095047c834f114a0bd89ed894bce361dea0
4f48d08fddeacc6cc9069a3d9e808713308ef3f53bd581fdc205865de2976ab31f46c407
fe900d2769eed83396c931b1db60b40995e02e6960b3158185b870ec7057d4ac97d9fd87
93148cc5cf96c01d07a5f09859b784e8e538c1a8bf52d6c44429721486bd8be76b745fd7
61c4c9c7061d4326ab592ae0d1bca3ac66d022c077edba85f752531b60036a7cf807b8b0
f315d6cc82e1d4a024fa8af42d00f69bf72d7b1996a9bddd7cda3097c7ee29c582eaedcf
46444495bae64684b7fffde07c975f36c82a3844401f5dabb1d99c9b72abbc86bace812c
fe23f4833f82a84211969aa49d37a6982cf88052849baa89dace981ea374cd487689bfca
c163f6303b33cece8f49556217f1cdce6c874d94d15f4c14e5971fd861aea23aa183a20e
c640ad12369225c8c25161edb99634f29eaf4161dc6c5f5648440362df38e0ab3127bff4
fe9134b926954327984d7130a94cde311e2afca50decfcb182d40e99dd537a501fd02d6f
bd4c598ac43af5a6b90d4a0d53bd836773b51dbf5051f9897a579e235a60cc9dce6fd8a8
a5b51d7f88711c2bfb0f49c8c9b415ac6ee3aed80ada658299f3cccb670648f82eb2250a
b9ac4411f29ad52bbfad2b4d48a382c27e24e91f8a46bed0069184e94c793b90d8d40367
9dd110a5c28ebbdea34072444a7aa08d1ab3e7afcade04a5fc8fab3ebe6ccb2bf3efa38d
93e1b7ebb5ff3e6350e0ac121fe7a0d368866c1ef42471659a1e8d5624ac3dee0ac223e1
e38734de41b2a9510bfefdeff64439bec2206bcbd411153916f005b684fe82651ba3473e
bdc1b30a33c0c7a347bd9b025257b2b83327b300cb9951ab7b3d078f52f07be406e917c8
34519e66c54e879288332c88865872580e06e21fb76318502fc83fbbf6e91229451410b2
70eb09dfd50becbaca72148994ef729bb58e3ac4362f3bf06a99daed71af913a439d159c
df41b951caeba60cf455a8d58a0e0831da30bd2b2c4ea6c0b48db2ffb7986153afe5c42d
83a6fbe60a6bbebb2416ac4d0b5c1c9c5dd86579fb2bdbc007c68e57da3ab81fec96faaa
11c17b0afed41b0ad2fb6ee0bf52dc26f08f2137e68cb5c77cc3a721a772d99befede208
5e1ad75733c39fbfc6bb99c645f18cb80870e4a0270f1a0daf7b11913368ff092cd58e41
3e93aa4e6c9e37155348b3fd2e7bd7038c5c1c6e28be281d0d8e1b58f90c09c723a0b539
af57c88c8093cd44c6789cc558253ee0661a3eec092d806a851d597224a84167eb14a7e3
a12cb7584b962e90ddaf9299a08ba61d1b78c9df75ac52c1469c06814e7e7f49afd4863f
7a03a2b7b53dcdfc455eb3511fc0b60da9bfd79a4bd49f682c78e846c1e97fa700e4d14e
b6db466f47eec7fff673174330d3bd296d8a000756247614876e8922972c3565fd85e797
fa969b90c3942c3b4ee1428c55b2539c9698da8905625e589776b2085280f9a4055e2357
ac0666ec66a51eaf3a21214949a86fe2b5c730c4e3bcc8bea48857a0c929bdd0f750bdcf
fb9701b725850c60999da8aae15aa09674c95cf8ff28db2f63b48d114090acb1e3951742
d97a0c2938e632656d3da35f095af43ff86f4092a97a6e602df5c7776fa7d93d8d067576
079432418cdc48a534ac074c4d4fbcbc77f7e17257917565829c62674d6a4d4868546a47
5772e0a32bcdb188ed6164ceeb9963e2de117aeb983833c3d17a7b4326c66514382bd23d
7176b47def8a5397632f18a4c9e248df10c434aa64b5e55522d4f42c7c7e657620426528
7da39fa0a180e884e80ce7775abd4bf4fb7caac7bc65d9d6af69434125030f6670f54683
c551793c2eefa329e43c88aba381a88566c2da1f2e902de0b9c8e153c67027ad5c1f4102
084ef57607316961f0afa954cc0a12443318b053b6b3d081618011850607d3016cb72186
ff72e7ca020627af147e4632425ab15c88e315e4cf67e67cd4d8d7e75771c42ee044ac58
3fb67f56d9a28491f2ebf6bbd63bfdd35a1913e0c8d750d713e5c57959f0141ee6ebd092
06c3d42c732f4feead49ff8dfa21fcc9f66bae2126d6710f52e83c8f39203565b0083029
ec7ef15980abb3aebf8504b456419b3759904d53b8efc2331bc933183adbc2044abd256b
e5695a5379334b43026955eb80b949d80c8d1e61721de0c134d5236c96d35982f0e11533
4d59b6b8b6d8d8929476c78a5cc53aac2cd9dfa5dd469b7bc67ca77e1a326fbd3d1add64
94521c212e349649dbadaced6c5b821316d17d296c5ec48fd5db1db1ca4e0ac10866f8c9
509a6a98c034fdbc4e4514432ccc515b1d2a3a5470e842a1264b7ee37a36d7cff5bd49cb
5e90f7bf373a9d2682323356a2d484042a90e4a266ae0cc90695410e98eb5daa032eeaac
f61c1ecd1b4fd455a78923437092f9965ea011d756b5b759e612f133690df3339c797cba
2f54a54863cdd8b35150f17d5cbdd96aca89ebb531f8d73b7c292b10eeff162b02dfe39b
233074525886636d126529ca45472038f936a2bca27ece05d123d509af92ebb9b83759e4
6996d18d58a8a4f9edc1784d87fb521d6f9907d4d3539017fe866476e1f87a31d87a004c
5fa795d2b0f50d36d913e6d2b38e0f1bb3bff9943bb89bfd5c5ffd67a11884f62951e341
27a167605f935186263b2230b506b88f89219fed0f578b813872d3457334a06b276b9055
d63d5beae487c327392ebd7351a4d6e958276ca9b36dce675a486a58c774407579247666
fcd053b667c340da31270d845c50f6ee7e245d89f3126d454d7aef321c9d9f4a065fe43b
e2d0474ae40b5eca16126f607d00859bdeae8e7a027600c9ad219efde3e493c9bfc4f1c2
02c639209c4db7050da4636e90e6bbf0effc3c3a31bfccfc340fce8601d0632aa25b99cc
4c55c937a7e13d6c38e946865fccffc4f791dd31967aef6f11d6b355fb78a19dcadf5358
816025336db8238102a1904197a27bbab23c757c2a6ffb0eb98d32b737e7946d5232899a
a1b58bb5881ea71ca23e2f863ae3d2a3c422facbabdfb50ec74c110428ffdeb866b98478
7d75995dacb2c8a9c47975284d3ee857cbf4173e73363541992d8401d58ac78bfa05058b
4f2dcf38153723c13594c6c52b718f15f1a73ad98c3ff60abde3c5b7665e5770f2d31092
18004717511cdd7353d1cbbaa44da78b833a46107544629df5204bbc8b514f6283531dfe
de7a1128f0be96c9659010b03bc3ee978abeb238132706ae4ea1b700490000e5bb53521e
070b03e6f5535993895cb4b8bb632ae880718a5bd7ef2bf005d1835bfe3df80e293f8a6f
9a5d6e9bf64afa17955000e25128514623a37686d2214ff9391026e6ba7cb1fc23859888
e9cd5d546e9c8c6d3d98a4809c1ff9dfc3d66d555f13678b9e7a97d863a5f8c1f52853cf
8364dd7af90c52d3b23b03e102d439d033c9f740b30974d7d4db428c1b3b859e3e99c3a3
c65fd6d4c8a93703a9eb5a395243a1649f1656c1d8d3273af74e326c136520038f2122c0
f9ec813bc8528c916f95fb18fba859ffdecffee0cd7456e3a63ca89948f2674e3b3c86d6
df8dd721bcb74a3265ec3323802a9f8e16f3e7d67b70090e2499dfad7c481ce50b4c5522
c26823207de52c0aa37c785b044ff1f837a9cf0f7b30d0ec1ffddf9a0d1b2f1dbebc3547
76b3e662c15ef58f17894956908fca007ad27a8c19b33b682f587530e0f36ab17997f963
212878d6d4be211474403cf2abae47bf2eee947396230c620974bac648e57a7dd36956c6
c5df947f9a16b70b94862efedf45117ef3df55e7a34e1347963de5a4fdeb9fbeac31f9fd
d30858a774aa42f393032c3b93fde44308cd2b2f6e3d4c9833b7cbccb3e12144b9d86c8d
211661fe4f684118ed88faf5ca5b6708f17c4c983904fbdc0d27e4e01a9f51dd1bf7269f
0e6e3812a0c9ea8360952d93d2183f8e662c29b214b4804fe75371485ebd03c974991496
e46c593eeb725eb99e95b41d5b804d00c739a22bd3b36f8eaae6035d86f0df1cf4c55519
b1369b24e218d1071cfb7fc8590a3e24aec4ac9b456abef8aecce3e082689d7e741c28a6
2eafb683e072f034a6ba48cd6022b90355a721e5eee6b5e4f7ca06444466a5fe8666c284
1e677ac199d05ab9bfa64e3fb3e672a3e7623153dbfba4006b30300cd8cc16b6a11521e6
37bd3686210743e7f9b099ea55ee6f01df059a7414c05ecc287b132564ef04dc44733c86
350319efdabcf7cf868c52e54f773d9e00db9ae68efb23ff33692ad86a922fa96f5f93a9
902891579b2955f2bb87752d32d7e763461817a5d4893ac8721b6d52160705a730379b51
6397778a46b7531d024c10da4ae2ddf6bbacfbd399645b4b5dc86352274bf90f79b33ea1
93a3446b903a025c236ac62f4fbb8eaadd9b10f9a0f3a1997df583249fff3b8236a5ae4f
c3d6b1f9fa58b6629b012370b60ac9228369dccd342d60a12efe71cf397fdc5787421a33
c371385815f4a32425097ba760631759e9eb40e1e1c5d53d6ed1f70749e35f5055791e64
a5d6cc43c8a4eb2cd8f21f25e09d4064f41ab474617c4d67956a6df6a76298f209fdd613
92168a1a463035c1dc85d35fa7058edf68740e10bc733c30613cdbce8ba8939f464a11c2
35fe8f7c26452874d6358a28ec9221cc60613ff6cb2100293efe5af81d9b935d5613e5a0
0cce21b024b567678972349004ea6c91130a56312ef40b31adf37c6f04789803a8025787
241059e363e682b690e4dccb93b87b6cf27a197cf784290f063c0a5c71229173bbeaec49
2c7d13a645ac6fcdc733616aff44985e8e346d24dce6aeb98141e83dcaddd9a23094bb40
88c21492cd7768154b7a938fd53af4a62212fed676bb0385942684778cce854ae63c8c97
459b320ade06fba72339ab33c4867b9ea4dff8795f5ea26f17b3347de358be5c10e405f1
9dc5287f5fc5015f6fac19e9b847ada336aa59290e1d7f49c457dd404a535deb747abb85
21df9954ecd06de88ce9753b0fa9a339ba1c0770769d7925707cd7b9256d87aeb219a540
5175744eb95480e485201c719717a8292504c3faaf6ce2cc9388cc96bf194571a48e2b78
c6679688378defadaec309801898f193e58e363972a05ce3cd6eb4cafd3dd103c891a3a1
29e8243a836dd93d3392937bd3a328ea34a6da5e9de32232f9cf2127f2fb52ed8edebdff
d72c85e19bd2cf90f1c296df00fb9bddc13d3e413c7c9b1280630d5151409e836d5de76e
719b23abf5bdaa10c9194d83f36309e2a8a7e56e1c1ddc311de7cd7453ee851602227540
4493196c698d18ac5a29a0bc8400d34df9cf7590ec9c0da3797ac8e71741efeba365655b
6557dba87d4f749a73dd87e0486a0a444c6f990ba32c3bead84da9166044131cc72c615a
a9e243e78dcc878b52778f6ab71a60b5f7a867ac266d38343b5edfe3cd68478c48524811
0a61343d9242a5f72e4b7208b4ed3d73dbd309030d902516c63f17e9eaeffd5dc8e17d05
04db09303ffe4fc9f75ef04c80f217b620424cb6d1aa03f986c71a288d884edae4f379ca
07509e2543bfcae5ada0046b27d24acb1d1e496762c0f0081cdd4fd11eadb1dce3c59861
9e750a144159a24a1be407a5ca0310ec77b1a5989c3dc8ef28801674e9d60965079df27e
ae81e5bd83e8b60b533a883a7d4bf3163860ce4176f0c7bda36b73b1ad9e55292934ee26
f1f06c7c1220d1d7316717228c3163e20f9059412a39387d65c01e5d5e32882d3abc8b3b
551c449a8fa76b48b28788c6dac125700277b60dfdf3d30b268adf4d4650c57470afa3e4
0f91bfa9c5736f50b34a1ec20e26f85459c836bf3ab45a7cff9b64032057ac3175297f6c
9f0f4895c0099cd1a91d07e928a1505d05f3ac5630a9ee6076ec6be23f7f96a21d1d4a6c
2463697c85b342b321df809bbc2c48c9101b63f4af1e83927306f39824d84411232d5062
5a72efefbd0f2c54d7c48a5ef36cf7daaf0e3bab389caf98ce5330a15664bcb596b20e36
bc6cdf85af05c8906dafe96db05368908187e8213e66590fe15519af3ce7ce0ee3731dd7
908fdedf5cfa668cc71e82ac4a9c3e10854ed04898a532b5857e1f150cc469861e9b3dac
4372f295cb9928b38730d3f0f1f7c80e7f65b9c5b405511362c0baf2bc9da568a5f3d05e
3d3f9e6960e1c981ef6dd0ae0f780c4414db453e83f900d1d831f12eb4da2f19bcbf5913
50cb5a9cc6ac94c58cc6686a5df37cd764da2e98e4f7bb4d030e68e1a06a5c182c4618c9
167a70e87c23e8e15efc09841c0135ca96d5e45557c0a87d61cc8abd1bb654576b9d7e42
58396884532794cff8d82088d20fc2ae7fbfbe8ce14d116db67aa66d40c262bde5a0e480
1e5b3af5955f3384ccd26a1b5f837b6177e53234a1570648298b7d011ca21abd31e1e2b3
3b310d93d0b11987ccdc8360cf640747941a71ae04938d79b82ef95acd819009a3f6c539
f60b246a619ec61ab10da563e5630792e675723fbd511f337809fc85a0a59afb34456848
d38bce3bc5858b03d7f8c7a839c97074b6a0ae3c2bac8d7d87334dd2543172da74bca922
e80489f7b9d60de976279f4cbc455034601a0c62b8c97872251bdc634e32eddd267d17a1
b5da32469cfef377e4aa9b18caf3342fb8eced34e50a763cc4913fc3bbdd0a70b853c892
f5f5ea2762f0c852182ddfe5becc43f77bb2a98787984f50c7a76260e67c95e7ee76662e
011ae3a9db13627eead5393cafc44a3e24506889f622324cd0e17dfd85b45d4f3ece490a
f71b87552bebe93b5fb478377d7532258c0de51483f0cb204686200324ba233a8a4c583f
7c85186b62ad4e6f72a2cf75b3570bf3d21c1ae4196d7373d4ef5cf0c5c9e4bdd5ef4100
643c6248e83fd2e3d887b34e19b6c60b4aa4c9cccfc3aac3fe0f4c2598da560a5012ab25
eee6ca5009e42e478101e84b5f3ee214cb2ccab8fe9d9a30734778337dc966e0c2539d43
a0f8da9f5a7b67635ee9e54a5d3fd39a67274b16303d686c0e35c93641207727329e27c9
0ae5b5b93d0c081ad6eaaaba1d162172752d718b44042420f03326ef77740adbd64feaa9
2f5bd3dad6e64314de03bde2ac72c36a5e428e2d838f18faae8dbf002755869603a11ee0
17771cb7d0d15803a0fbfef967d394a6d745b1097a6c14ebb69b598465b02848a22b6bc4
3f3da999c86c41c121ba4b8131ef7f24d56e7078147ca27f07ab7ce423903f974e72802d
5635d66269956e1e18f2b782437df80f42ddcb1b84f4a318a013142b5a71c905f0bc231a
5699222d5b4255be849efddb7d6ad8d103ededfa82204ab8fe94c0d4e69f2d3c2238bcb2
caff3edfa4d87d191db7d528d850fdf9e94b84d6568c7b546592761d511011eb3ba2b05b
71b16bef06ab9c100fd7f84e62cdf73076f6e68edee69d6c1a6379cc977bd3136b57dd1e
7b7ff8ff37c1b31ae5615a192203be4d1ea14341526acd28fcb83d29ecab05f52a7c7711
e6a2fc5c63ede74546fdb8dd84840841e03eab68dfa691f4559abea4d4a0edca8b5ee4f0
b0cbd416c4cc434c360bbef3d9ebaa0ba38c63d583b6b047c886b1f51151dcb491e46032
e1e202b85b543991cf53eb244e7c917d679f658dbe54117ea35493a8dfbfeacbdd28536a
e8a67b4006129275bc3fbb2ff626e6cee780fc801372fe0d81054076c8c721889d47b5a4
f83670bdf962f7879d3741ccecea2afaa20a73dc5cb5c34661e2146a71b578b0ab690681
b84be60fd5332e79bdf85976df8901f0752591b7452ea727cc6462add7fa958edfa04a65
c977c9a97dd5b248f2b03cc180920cbd09e29f691c4c4927dcee231315ef95442aabac04
66826d6b9c5588208ea8799e479076acc0fdc681eb935fcb1a9ae7445c4cb017fc128f67
0b7a5de6b7595abda87d223aeb78ccd3d8974ca2e35d2c544c219042360d723271104bf8
724e43492ea08f4dd3520742d648313a0cfd0c3a6227b04c7afc022f2f0c196e29a17986
5d9ff9e295d37b827d630aa69f2a8ab9b3a83629d577ee86eccec8105900599ed155caa6
c7c45e3216a810460355c2bc10f50fb088ac2b3212c2775303c1ebadea2a85282c0ce412
1fc1e134fe415b713af1cafad08d0fc89ade87af478da09dc22006229089ec602dd5e4ec
6a8e98cea1950076397757ff399cbb7a01a98af46a7df021152858d7c2a1e252e6fd5df2
b33598514f227fef3668431bf66bc9592213d7cf5aab2fb2988b10b56fda5ff6807d3688
5e99eb888d5c94f628d7b99d13364908ce66c882b6127380f364a68cbe6d554329f141fc
f4cd30404a5f150d7d05f74f4c255f371a26a61a591e1e063931469ef0851fb81cfbb2c4
4e05ca42b27008968cc3b157cfb371c86891d5b0aad2881b6688cd737b8bf3165ecbeb6a
853b7d9fd8d8da7989961ca55a21b122b459d8498925649c2fe07e5742b85d1f3adb276e
994cf8309d0c4c474c2fd9899dc44963c263a70521ccb22f4841147f20e01edd3e49b162
7b8b5624f0c26e0bc00f0168f6021bfbed568d42532efa2fd52a7dccb3d6ddd36e706814
656a2be9d29972317b9700e2484f368169fc7cd0082374a3a9a119d160e8bbc2d3c88103
8de163bbe6f47607ace93d93588396e8ad55e47456ed183a1b00060eab55e575e5416a6f
f4b137f297579164f6a340f36ccf8ec96a2fa2953190642a34de751a438c80581eca131d
c2816d9d7788ee2afb8c4994cd6e034a24ba7e42cce311b6ff181343de275a74ed9e0b5a
99551106229513d89feb7704d7e6fd79f33f412a9d85eca25b37bf079047d1cbbb2f299b
0c2557cf3721894343c60e32b83d1b5831e125fd4f4c2dce97e1fdab21b00097809e5f19
6ae92d063ffa8342e050d418bfbe0a16cd70862f77e9fd4c46ba96bad2a3db8f48167fa9
fd5da128091c9b8950adb5a7457e5b456b7a0a9478142d55ac64e7fb0120777607344592
63a039108ba30bbffca5c774d4fde26c8c3262feefbe977b2f589d7634450f808709e306
c474599835c9be3c55c46f60246663c508ffa4e755437a4ef98b43ebfeeed34aff136486
85decf44b714b13846e0311080978951fc5e00ce6bc5e74e6e7251dcda74e70adc62f01e
748677adf20bb2077202e8264859dc011776c15b41e6de73bf85f965f3ce9caabdcd3f11
c963a634aaa9d0fc199bbda4913c6e99f6d5a53e190f8f3f0fce575e63fc0dd53ff86696
6b7a6b94e2d147f4a6b6b5d3591cf38eb8a6463f603be400e729d6df9930e715d47ef871
a2a4cbbf68aba581a18771d1407717cccbb994a041157a45ca2a23ceff6830fd2bfa7b0f
46e6f5d63dba009936c8e22850a32f58dfe7c5615e585dffe0f1f656a159f86c480737da
de8c1178b992369b0d86479d145b72360cafa6bb9f230f2279b2ff324e241a8d262d8f04
ff7651b42e3f03d5fc4c2fb0a2288fb9da9615216e686cd9cfd78f0073d4229c6e0759d5
d6934f9975f4cde820ab279ee1aef4751e57a1e4b78f47d52997ac35d9f3adf1d1dc734a
e39d8e5a5fa900b249672b6913eb2766fd6fb17808b099d8929ab5bc3ba9b55deac47296
6d26a69a2575d379f9ad4c1e8b0e6a6417c3e12aec55fa05db10b6095843057fabebb2dd
df8d17c20db13a5c1dd564de645fa63ae5d96f70a9c19b87ba05d27c2af842d39fba8ecf
247a2aef632828da8cec012a3e7380af49a84b6fc3da7c6350a4ab16117a80b1b464ad53
1142bb549dc6abf6da5c7ec864f1e9479e8a6959f711ade790fad12ee6fc3886d368b679
a4a0c6e54ac51c8b071ff4f032e4bc0024cdfc81dacb0a8fc62fce8d3a9335effebd4d90
df2eefc3695d79ee67e6f3b5600b398b352b9ef041ca6fa1b52773744f4e3529e1487d7e
d1df6c06f17357b7f9727f6eaa5b1b20ed491016450278e9467073bf2c54ac69d72b5822
cad3c6618e61696de2e95cf925f761d2c98af25762a7adea1a2edb805106211369f683e7
620d1d69348de5bc6e52b739617ce1cead6d7bf52ecc347ee056e2250e20bc654d788391
bfcab47106c47ff19227bba38e3ae67446b8753d44955cde902b6ccab538916280ce99f4
7a1a3b71dfdd46ae12941b856ed62b13c79b44a4b0907fb38231676fb3c81fa608a63cd3
40b22fb02b8e21f4d29c013c4f157252bb0a943bbb9aad2cd40663c3fae2d5936fceefc4
089ed01f9605ad25ee86647d1de76c9af23273857cd3fb1adf463790f784ecab93045210
7d9e1d6ede256dae9ccaad024a089e204d7adf616a56bed455f3dae6ad4b9ae3b08104a0
bb7c0d90f17fe0710e5cdeb321e0dbb118ad7a12e803ba7c024aa31da0a625f457854cb9
c91f30e35d2232bd2bf74d52e6dcc3f236d7e32b93a6af929faa3cbc57244c904da110d7
6e67c355badd1150ab17f584ce89e2359f031fa5124ddbc7185f635cb7a7aedd9c3f5371
a840d047fc182f13d23b648710edb924b6541f21aded0e1907c79e4112ea067567598e5d
d35a5b78050d6ec0f52175d9bee2ec459c9307cf80242c79ba3ff1cc73285e7323542410
57d50cb5d0e50d3a9d50812c7fcf6c60d4c6fbf673843543787c3a8975391d6c1ea738d6
2716e93327b5a8be46aa1955db0c3d457461d336b7cafa05dd0f8bdf878fee75efc371fe
e35aac060179ede0fac43b9292727c4c1fc4fbd8b5cd6164dacae1edb8f734020a69c8a3
52a80e1d059f51cd77d8195aa752b5b1c6e22a8de51bdebe2a77dd5750aa5687ab794a32
cb1e56388f585c4899c74e2af0d64800d46f7d23974d7e4ed5a26f38138fde4011277304
4c965bc7812635b34b511bcaad03f1512406b0d7dcbe71312aaee1fe9c2552351dadd8e5
371499aa146385608bd16d50a02c1ac515d84b44c7a8547ad5693f00e97dbe7046253e3d
0e1cad423cd2bb21984d401596f5352376569851a8994fd308dabf05be1308a053cd0107
69f9f406140355f9ddcd8f607043d1a37f83fc8e047452054977da99840f233c5544ef54
8743eff6142f028471af08d88104aa64c2f0f85da3a7fa1c99f57ddb082f5d7819656131
6260d1758bacd610e09c5e9dbb0a8b8467e89d5d6a9cefb46bf1e22ea8ae4b3a20b82548
530e4937ec962c91cbc9fa98373cd529bb7c90e99d3c95af7688b7c14a272c9802e6f072
742fc640222b478cb70781f9ecbc5f048b397785f3652ddd4f071bc94c6483b91bd2a8a1
7d399774a80a1190de756506baad193063bbdc8e3deb609c1d4d5a15cd87770850f17390
887ded588422acb2ce7fb27ccfc1399d681542230ef6be1268585223b859f8fa03b9f40c
db1c1667940c90608e18c4dcc8000b6ec3d15f2bf280f2387efca0bf4427d688fa5dd089
bc66e1172166e277ebfe0e7acad323780ed3bafb3fd91027a52c2e6022ca6e9f1be567c5
831ea136ad8a28ef7ed66835513918d4d1bbf2244e211a9e5c8f5c06249797f3d62abab9
15d152716e970201939424511843e6ea889b8092e9450bdc8e284cd3ea1eb65054d6f95f
08915ec807f0efd565a946eba02190630401d47f429791399d525cc72c61701ae5103d37
98daa38a8d57a5de7c82823494eb0eff4446e6510dbe8c7d6a95af88d370069dd3275846
a096a38c7a8235f82897987935fec3cfadeea494ce257f9ccbe2be04da986f6cf2789218
514253b481d7311552a8fe547061690810beac89f25aa82c4f5993c60cf7e00141ed9400
9a68fed255e25b5100a33e33fd7f540b079b0129c4e2da77d1cb153cd9bc3a3a650c0093
0e8b68dcc46335f2bc6898f68d49f661e4e10fd219276954800c543feb59e7903c69474c
12afbecb0eeb285ceca95aab4ee1690f34e48f043400e650c8a4d81722daf8529c6a2247
e4e0d9fd28cc8c4be0fb988c93827eed17d14e14d888e91f09555f6dc5f1402fee85b0c8
20eb7189e9d6ab294edbf58c90b58cfa9b0acaec046e7c0a17051e4c80cb27c38c92be17
7bd8e4143af0df3eaba3429e46752598c2baf0eafcb4b604b6b3a91a3fdad3b2d716c680
145aa607517e7cbdbe6ca4580fa20e8874b17da91a0cb3da6694458b00053f35c3c38ae1
fbc898fb8bf01f7b7dd1f95ca4e052dd86bd542d90bd5c1f6a08c667577afc86621e372b
5c6379239d379622e62b7c8a85b500e5333d85443d4b497caa1362306f6f0598f91432fb
44775377e2916ba313e8209bffc4884a7460f57dfdeace239fc1e9fe6c04cd7eb0149524
22795efe5f5f325ff839e61806e14f58080fd06145795a2b1aebacd99d39652b93f16df4
a3125c7ae3e48a951255ed688b0e47cc7a97597bbcb90c7fcfe0e8cc840505c2495d91b7
d99baf69ff300664ac38fee13ddfbc45dfc470ae2126f1b5f5482e509004921f0464f1d5
4976df8df9a04e332fe1e3cd0e6ec28fe74d6c5d4dc8c92e1cfd227b52edd1888385aef6
ed382e3cf75a84a3fc381f1b6c1618f6e044c385fa73709d4d90cbf6606d42961c446c8d
24fc2425436ce8ef5230a48cfc5e0f58da09ede00266d28f6da23d4f9feb1535720573a6
428e9c760451efefcd821c1188a0f2a81f3701881cccbb3a36944429a1746fe0caecf7e9
11458eed805a047367f4cd42287c339ead63489cb5e87af6b9b01295dd3b974d7cc554db
9fc660ca9255bfe9f70d8f0e146c16a18f92eaf628ab8e74ab6c024386523bc5e4cc0ad6
36ca0ffb39898c875192a28abf422905e09d33a3f6e6c11f9e8c6642269d4598f1aa4d50
8869afd74d051b0d1826f2ba37397d12b4d8aefdeb0be080832259082898de06a866cf16
b2af7a2b2e9dc42d12df85b7e60bfd12a718437a78719a28220d30f89398d008dd029b44
ff3de4addf7f874c4234ced21cf00a43edfdc8435d33d9768aaedbff2e3e78e08934518c
f28aeca4cde93a5b9dbb07acfff167642a9751cd10fc7e8f9ee3108c9abed0af8217a8dc
45ad23638dba2841ce99a8f49ae99b73e615f1aaa51154b95ce9b8a1bf44c2a76fffac6f
e5172244b3785b1869c42e49b704334c22b0326e42f478ce188462be09bbbacbf48ab7c1
5f698d0e40957775e12b72f73c7bf656c0f960ffbe807bb6131f9b00b7723edcffe0af12
037f88f30716bd37d0d0ba0ee5b2739d2e4c0cd593ec8207971c2856bb4485b9e809b432
e0f9166bcacc8c664284b3b860ef98330081f5715b16140329dda60204c5ed1f28904116
fdeb808498ad4dd4a7523946bcdb01c8c387d3e47c25475ee45ddc28f16c2f3d4488bccd
ad0ee052ce69fa8c70c797e048feac57e8744ec63c15f8cc58d75e2f9a0fff806e691930
8344529842431a47b612d6441f1397d6c50bea8ae7fdb0b6767818fa3fed413a4f7bf03d
a568108d5a69e615634ddb42b2abbfb624d512428dea241cee7958a97d01792094ca1085
d5823ac7b461d16a8802cb169c2dc705cfaf3eec090d06abd0a5c2f4982943b13d4bdd71
fbff1b842d7a6de89f83f819c6e41c1b640dde2ce496f9383b8aefcd7574e71acdf3ff65
5918bc0f16814b26c39d783ff751335c744b4e1de55ca3506892c5cc59ae841573837882
4575358fb36bcd8274247e83b79d5b6d6a2a4953bb8aaeb49ffe48057ae55eeadd5377ae
5b38c6b263f8ed5adea3ce64fd3aa39d58dce49346f3d744799decfb3f9b3f5b55763429
6acf4111db492b484aadea7bd4b1dee1cfc21751b0a0e43789e9ab97bb051a1e87f87651
fff6c292aecb81440cc840ecdf0220c237459b569746770d224505342b1ad60e43d347e8
689be24b3b05e0aed6ef4fb6b07d4c5bb08aa3c370f8e8201ec64e09c930a0135f371fbf
0f7f3a5d369dc897d6c803f13f1dd9b4fce3baaf4e9324e35724317b4d5bb9b0a236b740
b3c7beae6dc1600b14aa9aaf2ad381d24270daf407d82c15509af1caae50daec4cb76211
5d4bb438ed512168bae9b3b6c304cea1ea9f321c6c96e8e37e07fa3be305cc24de726849
e40c649fadce847630f45ba3deb4f376640a0e2e2a16b634d8be63d0d7b4d2f969b43b3e
29d988143f1f8bc8ba50d99faeeaefd9df10360bd2895df1edc21f68787d0b94e0a1fead
85d03b4925bf2d051c137c1405691be448661b7e0e87abda6cdb668644852613d4fff804
57e9e383a1d3b1ec69c175806804443ea9ba10ebfcce4225ca7bf666c42bf070185ff4c0
08ab92003bfd5494877b4a5051e88eba29fe35fc6ecc7e558749c987f456be45ee2304b2
de5a0309fb8e4352cfc240345edef48760de73be4d01a35a3ddca752300b0debd9ac1988
39992bf275b6490b3375c5d1aab3e7fac3789dd2a3e4f511cd4d621983b01f0bac61b01f
39c526d11a1a9e6a21dfc673b55521e537e2465f41003a0f1df203235f075686d1c55e0b
2bbfe9c198a49ad76699d759ee5fa3543a202df594d6d046b6ab1b50ab69f7d13d98acb2
811a7a6fccb08915038dc114ccb828d796622f041b78f3f8d896aeef06853b3ec9d5181e
80cfc6e8e999825deb157462e6444d47dfc50c468904574f5678d8a15a073e39b8eb487c
606ea8978503d2a50ceae8ddd93807284da8729630dab70d9b1da52f4b6c3ddfb06aef93
54bfddf73a6b3358225276165e5f2d7e38036ef517b3a18b100325836caa8f6228ff39b5
ac16107f0632c50746a1a200a92c01f30d05d518a3c025c4827b62bdd575d268d4137597
9e28179ad6503fa003424d176c13f2a196ad9448917788d59ff58e9be76ff14f48e36bde
0d2c0eea35c2c5c586d644c89b598f0f437af4a1200a4eeab9c9cfd90274c43a0af7ef8f
29b7ac24b07cc820229aaf3217974c2ff6f244d7f42be63348ef852ad07469e58abb77f4
f53f0d525a0468780007aee2e8cef842b325ecc65174e32e6eb8dd5d261fdcebd84151d6
366868c7562baa08b7c7508daca31dec9522c16218d3660bd54bed53e8f12f48026562ec
c3c6672b5290a30b2a7fa861612c8fbab70cc5eb5ec7c44eb11f743bf09bb96976942550
548fc5189556d777d90dc21dbc47722e3b550d8e47921376c1e0e0e2c991e7f6ea6ec48b
ff73d19beaaeb2fbd55f4d3eb8b953c01978ce09aa76953006e79acf4f9d969de7cb917a
ceb0b8b576386a12266054847a298f1e7cd8cd6210faf2d2ab5b31f3e67091e6e5d6aa1c
5ecf628a11298532c9f3c3a72936499076173b9c2d9c65992776129aedd65613d9ff688b
2131d13ad78acea0e49ea21dad27f31e847e54890357e680c8e7e944a5af3a457bf4238e
45a1b9b44e5767df4de0bedd7c9908397be044b98dff41a3303ecb1816ec2c9c0c63a910
0a4da6aba07b1221422c86620d2d28f158cd475d8c499eba3e07e5edf5e4ce5bdbbf0854
58cbbbca8029515c08adc0d6dd01ffbe9c6bb25654ce36c41aae92032a7407a7b7cab967
435aefc57886ea5fa27679993d0afa86ef963613594e6d8e8a750a891cf6e3347788f1c8
e7ee87cfc59cc29e561c781fc55d0a3640d1656a9c17520d4546818a46c9b5867e6b7515
4965200202555c93fb4acf4300eae19c7e5d0b08cf24f661f8e2fd044ddec7749b56d7d9
7d29d2ed908cb024c0c93bb2a47c7e05c9b195226a3f05d486055cdb76f08d994c54d92d
854af612495959e87952c3aefcf4d96bd269bef0e3e210a0ba6352b9ab9e292a90558f35
43d145a32a44799548c40625ace64f0129ee351bfdc2be0f9b0fccc6b9afc3536c900d26
986354566572aa95ed657074c1e00daa1af580a76296f6b4f86ea437ffc19d510cfa3be7
18ce501824dca2ad50c289419d6ff076c6aaee90d42eb4bdc5dc5aa52c30575d9498994e
8bb493535b51c706911be528561b8e3ccddbce2d7388c9f1bc5c074ddc7cdb3fc55a5520
a9a678fa8cf429bd06183fe18721c003158982a6f96d6f82a5cbb1f5813504bbbdba759b
e949ab3e08412c36db93602bdc492c82d419dc224200c2b94af7743226a43178e7906157
6c6c98af90f069bdd64e47155083e2a7ba928a58691075f4412c1cb8a9a6164e6df6c651
259f49a6770583f0d67874e0ce1e59b64c724bcbbd03b8540bcb1c3d7350114e935e40ce
5f919b494b69e27ca36a9e59d818a784a47ac16c519b380f67bf16c8ceb137c80975b35e
8dcc877de18f0c509071ee05598f21ca574b5d27f175a2807e14529aa6c3d86e0227f486
afdc064134f2d1abba229d5ca618be7d9fe729952f6e6ec0375a29ef193b4ea5c8ffaae9
c602cdfed3d302012ecab24a00f03524ab5da0fa95aec75ac09b0fc72096b2d8e82af2f6
ed97392bbd6e9d931ad60ae919070655ed0d68f3348692a8f0eadd03656f39e2a8b8c0ec
c6863a9ce1e0bf7bdbb0d1f13e8351135f60cb7f2bcece751c39fbe458b046ad5c260cda
3de1051a0a69365fb3e33f492b7828b3eb6a19a134687da0d4f72d5d28d4ea8c74a594ed
a361bf4ac5febc9254f44737e80e20ed2ddf5fd32e5b4dfb5a0cd09d2237af3cf96ca480
df43348d4401781bf2be0253f4bc95bdb219185b7309ef1b375d580357fefbc3c8ee4d7f
3f44d09dad742f95e0b47f783041b6ae209ca631cceef0d7c531ea42ff19bf4a1c1fc02e
a5d8d76ad58878ed5bbf094c71120f504dc886af6d397cfcd6b8bde996eab605bd8aa91a
1d774596bcbddf56f2dd1e2114b59cf384763dc6aba294e514cba99f06711948c9f5cb4e
1fb8212b4499a72bfe3dfb24313aeae7aba5fbf5807e4f3f774b36030860c82627a421dc
7bb487c8b4c396de413d379c55b2aea47efb7c08a4fa1f06e73884f1939fec05a2f5818e
1abaaa7cd91a4c05bf7b5fcc78411900492270f5b52369bd6210168ed249e48d4917bde9
ef67e9f6e561d64fe24d0a9c688ae64776ee29d189f476ca9cfa6baef01c3bf5b1a0c3d1
5bc9b09f162705d1f0ab912c213d3e2bdc3c4d44ce34b6ad7e143ba6ba77cd22415b12eb
608198a2fae4b7bba4c85aa5fc6248fef1bf4ac340c94e98afa73ba05499f8e5a1385434
2b0718a202676d9493bf890e24b8eb6641562dabf2b37fcbee4fce292a2032aa60eef758
53ab7ee27193e6a607c7b0bf0beb6d998b0f58adc660d0b7458c702d31cabd0128c7059c
d02a670f95c65ce502005a4dba4bd1c4ed8e9b7794178677368dac7c2681ee27e841e7c2
07d70f72249b1379cd6d4d6b6696629488b4d7bb9d8ab9959609b38d27dd2ee8b9dfb947
11b35642fc6a7e09995e99a47c64042a274b1caa7372b13904af7fb4f7d62c4017f1f157
eec4e930d066083f85cf261c6d422a64b5d6bb5b5bd975f5076e505572447cfd44c20f7e
70490216eadb0d8bc991a1ee801c098e306902b328fe7cf2b35069a016c3ccc2eeaec820
2bddebca7b1cc42005b9ac463b6e53be00163c0b1b960f7af085b1726b702c74b40eb89a
fc62b87beecb2e542ba73858a37e86194ab9c3db66752446a918ebf16169d0d5e9dc4395
0e38639d1bc7e6ec00610c3c3c5890914197e8494e46648a37726a61fab0407e5d7be7a8
355d66bf6c3fc41c6a553a3119ca7d45242cb00546cea3f68fc6754b881fc56b6d481514
32448e9e5b2eedb856c39ba05da3720dbfefe11c6d38af7a1e47610d836fb085b09838ab
db95b249a21a28a00dfb758b56bb4a4874c43875892f43802caae949fd8be3f02b6d4890
821c815ab4b08e237cabfd801d71b652dee9812a51e899465897df6c4787f3bc173359b2
574ce0669136c1cd03c00bbcf7a6a8760be09f4a9b2c3c669293187049b4cf84c7360c60
536bab79adde275c8dfa55798a5f3491c589e4cd820162728b3767602ece4a67e1664e43
7e58e59413b049920e6e81854a3a5382842adeaecc541bfe973fd063f578b0931a59fb97
828ff64ac135151a2c25eec1d2ae5de58c32c09cb43cb4e6b9ae9716ae9d44f0b37c2530
b3f1e1e7550e8093c78116b6bc93d31c417c35bb6581445546712f95068c43547e352a08
0d28a2945f4ed6f27c852ca6cf78e9471777d446f87f352b1f792ee1763dacf1e754fb55
88948e5b18947b46f073570f6627a03312b8852624fde7963be62f39b1c2eb2774f6898e
e60ffdaeecdac6e607972a4704f9dc9b89a808b25d460dfb36c23e8d424dbf098d17eba3
0feddd695fa36f919d21ba7c5fb16ee47ddf46fec0003de759e099ea3427c99e9b6d3b65
70703472320bce2d98d12b1842354a88b8050b18988d17eecacd678987871aa4edde9e9f
c479a5c691f6ef6bb35a4ffe108dd32ff3448f8f4e37c1eae9e7245489d1ed339388b8a7
29e418cdbd7d0cb7ba2f843eca24470a0671333e2cf7fad214a7ecf25e997cda15940529
51b5badd05acd4c88e786d224de91e9ef7f480683cdbbd796373ab426b506ff28863798d
abc908c43f0cc685a8e78bc726648fbdd7f186196cf533c453a8d83854e8f0e3617d69cc
9a6043a7af79d350b0d781f108421dec9613b5d14572496673c366716a73c869d2f9b576
1b22fcc829210d7483766e3c7b33ee21dc511bed17a7b086d7bba981006d65813d7d41b6
1205e1c4b68fdb43bbdc63c1a46c54bf64f8d76d9658d553cd50d0572a8909bbf2c236af
7428dba1d6e4d20c55706ce3fa5fd4f0394ec479b9bac4c8a1acce08e1dd5af291381324
083cd9e935ef92b0c3d032d3c816987fa6f1546b112d5c6b1c35beb2f14a48ed8a02b3dc
c1e5878d6bb45f036763715702fe8a8c0975e5f7f44f4a2312c298f68cb01b0373fe670b
20e120c50ef92a37cb84b4870d8b272c20038dbac86a39ba25d50ccab3014775f9835f22
3fa9582bffe1d39aaf83723eb48ac6a2000c08d1fad6de05cb5c5d79e60a877687ab44a0
b4ea7ca031b666eb278df7002141d9200de564e23a9abce99194fffe75ebd2fc84f401af
787b19f35662f5120aac088ac01a960751afd92a27e09588e77eca59105e8b1644af42fe
d6c32b7dad33668ffbd654b9e298524d093d74f38915083f2fcc98c6712980a5a56d72ba
690e9a9767f16c589fc668a0ca9333c6f97e123e9f4697305a3e093a264942404c77e886
ec0ace823e1cf476852efdaeea3464b722cba2325bc8486f5c8354b06f99d6aeffc1664e
20f9fa9066ac642b30137199c71e48146488ee16157f24f13f2f1822fd199d556cb95919
d12e91b5625e1b2a8033390ef3cb4a15daf113475831078f13fe97ab238c31e84bd0bc86
6dd190194b1b0f33899d10b35dbd4992c44759bae00f09ffa47d2afaba3178bd08ce1943
6913c4322f12e352f1294122b29a73b1ffcdbac641dea0a5a60c7342197e1ab426f022d7
718726048eb95090019fe20810ebe9a546926797c0ce45a336d77602becc582ec61af0e7
aef878441cf850c8a1f4736dcdfd2fe13b001727b20079c5303743621b59d71c55e34027
fb7bcd71d1f5337649fd5f1dfb17c3bde7464a469d0b09036c0daade1bec17e57334a1f0
a4734581871252753c4f606a9133aee7b897c070a6d496893eb401dcaf1b43af8401a476
8cf034f9b0b7d34db1297e685a5bc821e160b2fa5b51259655dbf159f5349b5d776ab8ad
dbc7268558ef4135a13b82e0e4cdeffa984115d7c95acf45db9547e2acf4c901217e98b6
165d368e4beabd95a319c8387d82752d9dac987a34a494685d3b9b28c98c11af98ce95a3
18026fa6d20d03824287f2300d53d48736d2d51a8a970b5f2f38035dad3af0abaf224fce
dad7148fd5e335f39481748f925ce3e759a046d19f261024ea912f71df8d3000b8b05be7
02208aee264a655b1ebbf62e707f94acf04203fcc630dfe991b58139ed80ca7b1c7b87aa
559281333e79b7d1c2b92b5daee728e511556c7905ae064bc332f8cd4a50f0b29e8a97aa
5aa9387d58b6924ee8486a1e7dc33c08c9b13c3925293987c168edab098734c57016d311
42325bbe9c2584f6ab462cac709b657fe2df99817da2ddea65d10840beeab4526362d0ad
fd4da4bcf1f195ec3fd8f839e4a2e4ba8c2edb168bffc804eb94aff2dbc33d559af45241
3bdb8bffac4dc4fa82a2cfaa64660442b5d94a9a2da2d45991a330c47e3de3079ea50d2d
73b3b948568bb1b3889efaef6176ec8cf3b738194371649ff30fd755cdd98cc5062a8d39
57e7942ea4d33947a5b6af8c77453e08f6cc17a8cf6443d5a017fe00739a803507379387
20282da5bc895968fe579d69362a12a478f64603f585cb41d2d5f31888999f6b9e263741
663743b48cf7ff0a08c35ea7a4be77e398a48e66b1a4f68204dd39b247e6dc581c41a033
0fee9744425675ca6ecf3fbd700c685b2bd1a95c90dab9b76b397448a06b1ac5ae96b2d8
7807015bb8bf06f479649b7044a52f7ac9b4ac0f4b50d80011eea753786155468962d742
e2784e3ce200d325d79a480871910e53d467cce905c04dca021d5b7489e3b5d4565e971e
b2ee9f6da91073b1928c78f236b7759837f3c37eeef7958dc22d5b62c8aa4ef5919a3b31
79fb8fa0221eeff304990d51b188d335b66a3af04fcf3da381946e166495d2dd88eb77d9
8445a55643da43ff8134d20a98621c2c10a963e23e641cf84fc054716cc9b419499d0e17
688e699e118d49b31d2b840a44146a547bfcdb0c69ed53b1bffc8c9150e4e55aa3062713
34db32709688ef4acdfdf15b0d91904b840909fa7feb18b6a44a57a29b7351afca122de3
d9e322da9a7e5102d3cf7599892b5c0c8c41368fbd69ed2364682456f1623e2b20656137
bf23cb2fa630a811723eae6f4d378f3bcf850ee72465e3a6cbcf5b0abd0814acc342b6d1
b8f76b951b053e850629486cd4904f8e7db524d26a70e7f0d0d2e4ecfc1587e959ca4307
6eee8119813a417a7a8310c689dfcaa51ecdab98e3b0b7bdb946d8914911db720bfa246c
15aa5fe5e9c9c42d98b3a818823efa5f624cfbf28fb085fd4e859bcbfe9d7a74ae399b9c
a4443f5e466ff6fa6a0914b605167dd26fbd96c83393aaaba7ddf4f2ea6e43a0198f6424
0cd6b32e69b68ee137c7e7491769a83badd3dcd6b7b2d4ebd34aeee89a279b0f0e33e71e
998f39f8a928b903adc4f50e56a5052c1057734a4e712efb30a4520e93f1cbb59ddea375
51283914310c4dbcbe1cfcff1815481b4e188bca53be206deda52ff2e09c4ce28810ce2e
9829fa78dafe7d1e0f49fabcd57b19a72c9dca0b002716bd56c156ac28bab92d3651d1b9
3d9eb6c76ed2bd5506812b34f3f530f15fabb3b1635c02e45adc9af54cc69aaa392f6880
65cc6450ef883b9832bd8f9efa27558f5eb1c86ef7c33d97abb9a1a03190b38c943467d9
6381a41b1acc50ef96c43b5667d69f01821a16fbc293aba7f0245cafd98f4a5f8128f55b
50de9c63f16f69b7537a3d44b6ccaac972b7649ff16e3e38ab29f5734ea0bc903a092177
0ea3baeb8fab4394ef90e310e35229209801acaa4aca5ea382c9e772df93193f6bc4beae
d21c687088bf70254c02b30200cd9cfb9e5a7d9b145bf0a95c16a17ea0c3c85876b276b7
7f6b053f8e9b129619e0c5c733410dfecfc3f9429c1d60c8f20d869c332a54c6f1610ebe
abe9aba10e4999e8edaafeb9efc5c8a2b80c4856cf41d097bc6054c2f461da8cc9b16fe7
53869cb9972468a46f45f7ad760e6001d66be40c597f66eaabe6768b90895f978f54b66e
faf353d7c1809a7e675c4ea7ca42cc0611e34dcf73e12960a2e4dd111c49751e902cbcb0
df8083c0faa8cb9da23171a49c5d9f05127bc7ea373e9154b439b9aca4c204e9fa101876
be3c88562f7cefa0352412d36059833a12bc14e4ac59d465b770dab9b4cd25b423d7d92d
994670be93362155d2f8f2ce36213a2b52dc99976cc34cc5b97a86cbf6bd1442b730eac7
0fae02ac880739104616d0dcf702c7df87ab6bb71b14bc5f61ee9771e553ddd2cc4f445a
d4d5e3f074108506731b0b432a70e3d0a354a148f5495af5245bac35544d65f2ae9c3ae0
e8c1b556d69ed248b6c0feb6c50c2ee2f919e6797bbe6537a78ab8f72da2b351d19ac320
459b190f0b9224e3706a2a7c46379a9617d751f7abecad9da60b3693873aa7590fd43e27
20c313ea4c66ecff70c3efd5716eee7a84d033d1b18d6c83eede98b972ca094835ac1aac
44ea2459953b2ea14dec4a06238b6a5c411809dfdab5e61e644b1d4ad1c0128cc5fbb7db
16e3c763a56814ab1f008d7873d5ae56ddc8a803f6ec8cdb1574c3ab3f73c6f746d3abf2
8159e7485b5b03fe6155d4304284940c715beb6cfc409978030e4d22b57786c1e1d46c4d
4adff8f8849d62be28bfcb02a7c65c31423e2be5c8206bafd42c3a249559fae70377b376
f36eec6cae15094f741876766c3755f79e75c6d34c54c5a25fda9e72cff37d400e6cc1a8
ca1176f19ef0e768bb736dc05377c61dcc274726195b250256b6ff7e41291c79f5af0709
06c6173614e90e172c8785ef4c70d2e315884da5f5148024b06427a4bf07f6b9e3c4fe66
cec3958958542b7f9dca06afe53bda2f604610ce32415c024d0cfa6e8d410242a0330257
78efc2e2cc20fb2f4ac04d9b73aba10498e8a45e78d8eee8fb938959ccf2a31fc7699433
4885def9e377941c77a254de2ad7924232993af10484426e4a31cdedf3c423323925e1b7
b31be9d0f225da5317ab7246827395fd77b11d3dc1c1f99807f437df296df838fbbb3f43
bfe6d0c4e6519bd49973fbe857c4680feed95eaf293dfac889ad557b88df0f46a53cef7c
f28af5518045cb7935aa2595e818762d1d77423daba0c61885592afd2cb23218474170c5
63c9af291ad87e4e8557b7ca5dffb92ec176c4df4f2f21ae4075f194dedad3493fee2168
a4d263a1a1e5b34a32251b68a95e0af494f8d840d0c1ff470becd667907f9684159c9323
4d03345b9133a12285cb3c94af83aa0406ca20bdc23ccd61defdbed05b885cec3c1222f9
192607840fdd62b9ff07ac56cc906234b4a280e26635be54c8cf15f866cda1d352d41b39
612bdacafe58c8f73b24f67c740bfbbe3f0a98294c98805491f01a694dd231a966ecf5dd
23ab40c0a8c6b1b51065a9574cae519738487790bcacdfda7630d7296d5e29574b32dab1
a8411463cbcd09d3d185312e0ba31935efdb8c562978a2130fa501a95d1575687809c1ba
d34cfdf4534c50cfacc1771f1a53ea8235a3ff274ddffa9dbed5d9e67fc298cf23440a3f
9191c285210e4c120cf555168dc4466d0e7f39c1887d990a2e14ff4339da8f1e3d9fcd0f
475c2c68571d101503e03b669fd69cc81bc382650535d7bc9fcf7cdb0f0b1b869969c330
37cef43918e3703e0739e038284433786f1fab9576856c4dfe6100c2f179e753afc192b1
efa4aa93d8065bd94689ac309852c04d1bda3c9cc7bae7ede9a1db5003e7fb7bd1d59d8a
4a568426c8b360b220b424e891d49016ff9726e1f8b432258f286ad02914d12bd7574580
7f84804c9fcef882ee91cd76edd611ea9b2c080a56199cdbd1e7595ae93bebcc6d5f2b26
44eca49548e764cc8e99c6e97c236ff127f4414f33c27007e16a0592aec5a35dd9c06a0c
26d41969ec7bab4d9a66d05fd7827170f11e653339f6a16d83cb7e6da9ad60c1770a89b6
b063fc854e97b038a0a9ff8ebf03f667fcf9119a656e3c15e1d2e74f3c0d6fa27a5fd020
58042231e11ed90ac04d7bd0e4f516f694df167c28305a146e821e8caed12c9e4262dbf0
646d74065f16e42d2b8842e561be68f84723746e081ee5b694c4d75b05215e363ff8b31a
1aef7ec940c4def12a07493b22ac912cb58067720ebd14c85e4bcfb7cfb8278cc871d142
6e90cad182fccb47b3e4b0f6bcdeb6c6990b1479e125fd1447a05d733e01fa139155a188
0ca458e38074463a9e971dd3345475341b0cc1bfc09f66ea297fff56fa44ec1d71aa661a
3b6816663bb32d6cd469975111d5b4f02319101f20dbb0a340801d21648367e47459f354
1401f6363b59ff3de96e61175c902fcd8edd3c77b08b0b8ab975ab826a7fa58089366e58
ddfb618839028606b08dcd701420f92d06b46a8c7423ab458e70e467c0964ad9a9d79c96
1642ad1cf4efeef5d7377e4bdea9837baa2f4c088caae8e443143849023cf5cf99f9f51e
b9d5df81c49adde84ff0f0b663caf3afd95bb1cb751febc5c0dffc9640ad0db4426e0e27
7553cba9c026382c9c6a7c7efdaf5d19dc02133f8c8e9f74bad0878120300b2b50b21493
a5e060bf1778c71033221384ae356d0ed5a18a8dbff9aace33ef1256c3a625eedee23336
633393c6dbf808f96e3e906f18da7340550e2935a2897a77ad43dfec99b92c120d6bbdb9
edb448a6942ef0dd3cea84ce50d24bb269678ded27596ed1c74ee8824dcef1154f4b08e7
4954058ce3d90065400a0062e5a49fc6c6f67489072bebcef214de22d8755d99a55b5401
a86a8dd8a12839325f3b5daba7e86924ebaa53627f020b735a64fa498997a5b6c39ee9fc
8dc5db2f080bad9db5699c08e4484f77ea85ca39a82112fad823bb1610f8bc7a99f9f427
29bac8f723f8232136c2e3771d42d2dab5e4cc93c46d0add34c926726c4eb2a1d831e5d7
aff19e56c677aa144d7a3f45be152db29865d325e0e894c2cf21ef87cd82a5172d3db905
cf5da66216755478502b5faa1cb7f1d53d0a3d8980ba7058ff1a7fe7a57e554cbc798224
028043a78693418725a3cb8334a46c4a43e8e1add614e243a709efb1fe9c6b8f81be2c1d
00a7f5f30a5251456ac31f6f05da8bc81667c799382f761ebdc527954536c99888e36227
0bcc10674218e7b85b830064af01947a45ede83b5d212ae0c3231586f952336a284b03b5
24172edd08b8b023be1fe106a25b6b3511aa8ac1e33cff151426566440bbf8aebf0fdc9a
30555f372424de2fd7431387e37241e629257d962cc5cb1eb0d0e35f66699a384d847e80
43d43b4de29949f171685d41a40de8f628da66621400eb9077e711e68dcb6cecbd0d5a6b
b81447fc8826bbf1c304e6ae776d09508970de4866c5f6fa2404ba59e5ba76dbb02ed2e6
32f124fd662708086d86ef053a427871c0665639644db2b43952f5ab89de83ca5329a508
d6b78ad0dbc8c8713ee5025dec207f3e27a0d8eca6adb36d64ea11eb29fab84085f71cc0
4246a86522e02ade484bb648b89054e79aa13675cb6e78f635edc01f2a6f45718833a366
dcbe03c87546c89fde3794dc90b4fa08803e4f495d627fe2184bcb950b6d994af85ce754
bcf3d106e8d1cf84212eab84bab31ade692940f2673d284f198f5337bd72fbad7a90fbde
9c5fce1d6f37a58b6660042bfdd5fd012356550d4d094242e4c0865c7f2c49f7cb690423
7d691c49301d23c67f2f30455eec5d46b78d089b0effb6c9bf3c030c815fb52abfc1dc7a
9b0aefbc81b48170622a0d7319c5635f22bf5e5f61d9fe0bf6e2b6509db1027109442be8
c8ffffbc06059c800ddf7d888606032e3ce978ca0b4aad0ccd51c4a37c137703435bce3e
dd01450355bbd521f5710e0fd4c0a1fc70df65aa288266a7039ff4353cfdf35546be52f3
ed76ce1e0c1cab0d7bf09be0e4042e502717fe8b0a81c6a86b41e49885ea6258f091e586
8502bb1cc3eef4ee6487a7afab3233984c8848801c51358c93f600ff53e095d985916055
aece594be389bb9ee11ed4e07f37a16f2f974f2e70feed704237b00a1a89bde8678aca19
9acc498b52b87b138fe622ed08d10537ca15e5f39f3ceb0274c858cbda196021e16bb97e
e8785cafbcb580ec89b1ae10835c2fd328080dfcaffdf907d3ee3d208686ebeb6e40bb03
f93203eb1257469bac3d9b06688be9d61dbf571c46377a3fd53070fe7fea63cabde80dd7
412f3d94e156ef9a7cfacb13731937068b2ee2431cfe426d8137c2b188b6bb4927e650e8
f1bb8df078b56c6b61b11ab4d8cdad187e875ae5600b17d501e067b8ccbf88aff59ead90
56085503bc9bda871d5ad2728aef5810710b8a721e4d92a49b46fcf012b6db4875646942
d7cba158734aa4b57660a10b93615747fb0c7fc92e9133d5bebccdabae7f170bfdeb0f1f
2700198561479ff86d8f31789fdae246d4261ad15930ee45fade7ee76f7d90becc845ccd
436466682d225b00313a3ebd07286820e4e56f2d33e03cbc56b154a3ae40f70a38b76746
f68edc66ec23959c03640fa8ae3f36df5fe63274b7a5477f14a2645d25d79cc8093430d6
8c2899555150867e4123bf36097bec2498beae32b8896611eb311a015a643cd2e4038a9d
c1e2849eb658cb29fcf980d46e4a076483c7cd1d5132091dd8954322fc0fb24e33891a58
9aad4ee562028276b91e571999f76766b7bc3a2494dc7771a489066cde0e39cf4777b32a
6219bcdd1e3e31fc09dbdc210317dbc63028e177b0b5826bc31be836356f9175c9802002
5a6ddaf5b1d9b479382a8def2c9a96f979ebe2a81dca130909d7c8a0086b7cb34abc9885
faba4acea7749dd992688c09c23ddeb75f81aaf028b3c8ee7a0bed97bb74a2cad49c143b
c4afe21815732d93055981e4f817fecf88f552e8918ee765b0b95460a68f52ccec6ad413
87ec1ae796b7134ac77d044e7443746ae99c3f0cc0dc3acf188e2dc37ee77634c4327af0
2022269c1812aa8c441fdc16e132e317d6ae53f56046599e10f77af065677859f19657d4
928db6a88c981c1b04963a13e5b32c2031f709dca1788370be2b9137fabe1527d48b7fa4
8689d87ada468c8a24ce50f2f173bcd36b3adbc6226c097fb6c577146c9f70797d91216b
b1568f16cc0d54fed89bbf5b85d2433427cf1c24b7f80221c41652b42c4a5c2305c7ebc7
4f7ad1c22f2359cb566fe24bcff8ff0ae74cc5742c5145dc4d406fd216bf4dadbb6a2d10
e2e5ac8ad25281c24854ee1e6e21266dc44a76febe2d1f11865a4f79c841f92900c83f55
5886fd97f21ccf3fbde43b2916bbd948b52f7afe41bba41e93703452c7dc7dee02679c61
cbc3098e50c0a01228ad8dcc7bcb304f67e327bc82df13c82a85dbb8e92507192cdfb26f
4a0b592c44ee2bcf034756313624529e43c15a59e841b523f9aa830bc8c1466e2c01ed7a
8e4506afb1d7532d6cba37464b6539bc339b16b73b7088b69dc1c54bcf62d0f0fe57a627
85605a469ab2d2885293d57cadb36fa4cb53175a5c99ea6d218643fc64b25ad689cf5bfa
080b0f9faed228bf49605f69dd2877cc2c079c617204e670066b8cda65456409766209f4
81c3456ea6e980285ce8f74eee5d1b4136b1a6e6dc614b9bb9377253fe18a3926bdc8c94
b64cbf2a1078ed7a486917c09ea42f31cd4856e6c3fa7ffd47a74b196b54034796349ce4
b464b13ec4e770500bc595d238108af40ba8f7f464f615f3ea487ec987ade612d3ce19e7
836d2ad7b5c58d4993596c33a8060ae78329c2ae905c478704d5e46d7b6c436a678ddda6
add53f0376f2261ecc688c1a29b8bff639e5f72647aa783b7f71fcb46c64538b6301e9bc
e745124175ddebee08c1eb0c16e44561f11b3a14a7371b0f3aa2e7f573f38088d2b043de
503df2e52807566cb1778501da18d2d532ddbe9ecc7adcd62e186f2b452ef5bbdb9dc155
190ea4dce40170d4808b9b7e17ad60f4aa1bd8414a8683629336e2488cf827858b0b5875
db5c04a66f4dd673db74e88940ba0e337735e87f944b9afbec21348b22699eedb5b62c25
81cd12796fba903c5877a734f2e443fd10fe8ea131f304461425bfac017ce9d54ee01237
8276fbf2cfad08f04d6ba3bd5a77aa788eb024179fc3bb76580650d7a6574e0d09811f92
16ac62b6f9b0d20601126e3586d369b7e45e5f25f9d07b20c8fb7eb4463624b1cf6c850e
27579852567f94594c7bc4a6dd241cdf06fa981233fac4daf24d18851f933c460ca3e907
6e01fcaa8bf640b437b47cc52b342123e5eeade9369d9fcdbe38710593112020bd1aed5f
805c8cdbb0da6e51390ef8bb86f368ad4d4eea0a93e2d5dc0929257e38216572111ff827
8da1212490e14684d390a53d8d8dd2eb63298052f1841da343dc6177f52b3c85cb42bdec
5ca76e8e786acd8ddccf00562d709c70c7dbb3a57636d59b9741c209c133710e65333a4d
e38a8fe44115f210caf9edd192f175ffe144ec669cd570b8f1bb660e95d6406fcbbfef68
c87c42b353d792b6744b9ed9c713449080fffce0d8c85cad2507799cb692b6e58b362d39
17e548ea24bab1754023306c2c8d9b030a2a2bc3cfd1b0388920db9bbe00454b32a8cfba
3774db8b2d7311b5368ae7dc93a94568fb8172dd866a844d6c9fc2a9814c7cba16e5e019
2136d2a1cfc1f6465fbac84a130afc3ae06178b7d475ee733bd95ac32e415f60cbe9b257
e32af9de144788b9f68ae906be547390a1c4e6cb89c73b968e284bc043663af7967442f3
e6aa11e443e5b3b3227bc7782ee69b7a79d4cbe2d979aa8902edc5326b3919f6d3dabe00
d5f45ce95bd83fac6f0fe3241eec4d04ded5ecc4a76a21e004949e39c1196f807664c964
33340c187b76b4987847f1589c11ad7c2d09c8241e9b63acd8429da144ad0e0159e63d2e
b1141cf870e9980c40553d6589a0ec91800b3faf0cf05a7474aa8de381e024932619f33a
b993ff3a99f599385e39620f211015d844290689debf6c08ab6499deff5447f646fad1de
f0d1b22b73b9dbf675d0c4c213ddfaaaaed3dbbd4b7b6e0daa018d4cbdcf83ffb35c4f65
2c315d7fb4b7afeaa9833518228705ed2ee382e743b89270b340c305354f1dc4b98c004d
0bbd25275e0d6ea56dcd076530d8864e112b457bf9146da37f113af14873e2888a41a35a
a6c7c36002ce2928eccbc728747a7a15ecd03d1bfadd4afaf8654507157696a7e3c0aa2e
d10583982ec3bc303425ffa1170a2d8e852cbb518d01fbdece4e501f361c87929ebbf34f
06509f67511109c8c84b43d8bfcd2ef279d68bd3b792975a7e77d8b8f9041c67e82b14c2
f47c0ddcbc963306e15c21e540f47b701e13fb32a9e281beba93cfcdcb2a42efd6366b64
3d9983b4defa54cee980dcba9249ff262c216bccf53af3826ff90b2af0cc3f9c7738eebb
57475e194f16b96977f2567b2bd5f961f8c2f897e163098ccd472383e8e91c2a9bb97fcf
0878b8a74996f03a1db088fe52d9b99ece09ce1d51a9bc443dba55ace2d6bed81de7555a
d4a428e49b1a7ac8347393b2c1aa53f836904dc19eabe639d89b015dc681a66962802d6c
a4aa2d5871600280719f98914e8b00b6983ea662fd7c91de154fbba6ee3affded8581b62
c65c185d130a086c05552a2ffb9efd9b76752533531a48eb6708bc61cc229fc52355273f
7b8df3af0208ca588ba2eb484d3e739fa55a2d7885093fdb3e4147bc193c1c244b96fdc5
ddccb4b266eecab82b44c7234e85dde5be0ae050179d2ce9937b2cb5dcc029be66e8b27d
0302daeaf0785a28b806447f5a5db73835f9177b30b5de5b91f6e2d8a3415701bc81bc73
d41da925ea577d314f35efe7b2dfcb7b60237cbb1bb82ac3fc20a873eaa03d3fea029d42
9f5e59e02896771123ea3b9579e53ea9f24f6c86a3a201f1d33616e415017454d3789078
b9e6a15dd8079d8b02dba16c114b0b87dfdbb89c91a8017056df2b8c896a2238717a4fc8
127b3d52c59802181c674511f3184cd99257a27d8a29e5aea8b6293381b594b812e61930
5a7281b28186d7f3a0cc0f9d7125be83417c51e11bbaa54bee92f17de4646593e970db6f
0d717f176e6deefbdeaf74ad5b9da54e098f784eedd3a2860e367887f1a72d0df6d246de
b8f67bbe404c8613a045cbe38c8209a4ffe1c73cbddce911f3226f4fa072d59ceb529195
3b2efa3e86578001905eeceec488b78b081b8fdb826543fa8b62951a900a99a7715b88e5
fe8831a5d461b698a085b3b599eaab7bff35d8ac484a15383f2c6488383d26fa3e109655
54bbe58f497ca734675080ce801e67a1a5af75d7195132ba99ed438d107cf65840b85d54
1c17dae1a15c098b469c03c3d031dc8aee64ad4282991b109225bd0cd9242ed8494bafd1
91547930c19beaf505152a81a557c8a9e04cbb1b9b426b762db98627f5861f42c06d4eb2
5d5e477977acd3f6e5de93065fc76e9d91217879edef7813e8d89eff3719aeef659aee1e
ce9e4426204cf5d38a249f7cd4f01e74b082aa543184720c7c664c7baaba89f89f560587
34f38194854212f8c20b54aa92d1c87885fe85cac6844f9b68773d0b97818423b9931b66
63198819b8ab0829a575bb53911b18395535f3ad1d26347ed26876c242748b37a4d16314
d047e0b903ca6296ccfc1cc69d1dde07d56a17fbaf7b926378fe1548841f3fcab6e43f3f
67166f5e74d221728d98036a69a9450e9a49b541d2870ca2981df1219a85b091f8ec717d
752a66f8b2012e0d8660ffb69c19c40d5761aca907367139835eb23399f5a42e60483ff3
198ed1f2c9a053cb61ea42e78f3e7b217db7dbf04a309961d451d136a4c0cb347757ab28
5c00a2b80dce4d435b8f5564f6667f4069be319f12147e52c51eb7bbf0cff58a1e8716be
58148b5e312db391c2a4b875ec46c18bd469313c866d20a5c6d976581d4dbf2be0400049
a2d3caaa522d63cfa11ec5c43390446864756b6f010ff5bc1167b705e825faf53dfa4bab
1cf35b9e9a12d96beda873beeabfd1bd77a3baa10797d62969065855e150401310a26d48
036510c62a5319660ec06631a000db3e1ff272c9a95999f01fe6560f8a83cc99dcc3ccee
9a2a5c1873f423bfbaf1eaad5c108f6a3d4b8a97d00a00bfd88000b589a2d74cacbe5563
cdfd6596261abcceb0e29bd67be23588774bc3aacf4288831c1fce9ad1a901e7c21fb260
c291275a39c0d4895eb7c86936e2d4f9c34f41a58b922a2d9318de8f6e22dc3e64524f94
8699d7091c1166a37dc2d6b3a8c9313167df32182ac013aaedac0da54168eebee58bb8ca
2599249e869ddda655f3527ba388964dde6f8ad7bc86f8c5dd38306a26cd81abe94a3b54
2c7bc9b6b9f817686eaf8ee0875d024f6d35e60ab146f04fff90ad53278e23c75780929a
39f3b7dd7e020253aa3e292f76b0502e7af34ba01c948054a3d1416f825a84ebf9bef59d
cb8a11db5571379dbb518907ef651fe26c262bc8b0303982b1820faedcbbcb1a4a6d0848
91b56874ec73ed1c089ad00da2f9efd858d664c22cfe23ec039a351c5925a71b7133a06e
717335e5dc43c3fb8f32ba8f8239712c30b38f78979079283756ac0e38fc84c21560d6ad
eeadba47bb2dfe669769173b98e22f47975bb1e6226bfe891a4f830c8dc0802622c983ef
bc22ba9f48b92e3456a4dbe440520b27d1ba71f5d07014b1f3f75bdea49f3750f998c2fb
8cf7cce1f382018edb58b4bf61066a15726f0b8c968c722803622ef512d061c9decf6f57
bb4d552abbbb0adf97406ccf176c731658f6245944b8d98e859cea56c8a2c66e6d602e2d
8304fc096e10645e1c28cee15a6e19a94ee549fe57d706a86fd609b51aa2da237e4d0db4
07e6fe89c160d1c9ff7f7691270e831cec7f5642c0f36ca2a44b37dbb9190309578def8d
e2f3386d0dfa2fa4ac4b0724bcd736de9581f7b2e2a3c10b8ff7e57f3ab89462f74b82d1
53875f9d0ac709b275ba8f62cfe5d9d6516727a7998cf235d7fdb9e7cd548219aed8f8af
11d71f3cad191b3bcdf8f5eb90d8dca845f98094b808cca1fd7aca027b99c470246e6f19
896a7085ab8e3bba359dd5e60d1978996e6da08915838e63a656407272e422a9f1f5df40
75f3752f8ae63fd07a017ee547949b1e3566d421f3aa12bb4a2f623a9e199f5af97ca769
08e7f8cf17dd27857633d51afb9c435f3120f3d0d08efa51bdf64c93e9b8f8f582e91ad4
2831083a1fc1ea0bf79ab13094d1cf274b7cb14b6fb2547c3951e1f523f174e0596dc7ca
5e0ce34ce39a54b1ec66ac70a88346d293e79aa899ac52d94b786df7d799ca0c26584a65
8ec24502196881045ab832f889f24e6d80a745cfb08dfcdc07dcd5cf1a87343d61405f71
e81243e21add09b147d3608c10a327f5d2b37ea37f13d19e6ea3301e0c13399f1b4b16a7
98229bb743be972801b0521a2a80b7bd1059ec4b8804f70a0cb35f0aa21f456ac201a96f
6965673b492f22dd5630e34c598dfb580cf79b4e98788f508c6d136fd43f3ecba7fed695
543277b83edb056d79187f39ccefbe58c73954d8a7a487e617457ae55d0d9405fb855be3
0bc474a60616d7e2dc063b7dfec378aab3aceaa1ef36fccae8a79606859fba5bc2582241
5f9b414a453f34eb41256e3fe71b9178e421fb05dc5ee4dfc7adf3d1d4e06522a165f666
6f38d8cd5aa324cc1202c6b2fb4bd60da2797ede369739e554032a039073c7db9797316f
276759d5b7e8a2115ae3aa5767f0b93134815aaa2759b3c4dc6520b9b62b36f4e95b5d54
0e4e48caeed9f25fdd315715a09f0a231566f6b6327ce1065ef927d5a2433ef58e0f8bbb
87e25295b8255e9f453e61443bf8b8ea312e43e3f8a9bed4e0ebaf5758fabee35d89b2e1
38a26e3e7c69120ea0ee7f10fd047655e30bfa6bd79d255f8949b91d72c4236d3255d883
6b8d5e9ebc79f436b7af265d5e772980a03b7fd6d9107f32181ebbf225fa69282d94c627
16be17ae44b44c25d59fe0a61146c62ed93c33292a285c1ce0b5d0292ae29c08c3b017de
aa66b6cf243f630e7927aa5781e68edf136e1f88f8448be977c56e0c4575660c025bf4a0
64b36bf8560df3f609c7cd2090503de21553cdfb06048e0af54282e42bbff54f9df1c216
12182cd349819774eddc19f51fc366f46f927b04af7fec1ebfb12e23c3157c7cf3ce1120
33653b957106c9826f35b57e83aedf414f88650659a605ee0917642178c4cae883d7f128
37ddb125f68ca8fa8e13b976d125317e25fb9c3cac6a49fec1bf9bc5c81998a4840f87c0
1cbab11fd01fbe50d627ddca2e3509ca857069daa9afb93a550042f312a35de79eb945e8
5a602a58b12f892159524e5ea72b7a59491e2a4466cbfb46d8ce6c0b1e36690b38b7c0d4
2d47c94bd7b512de7f32d8def37f46eb79e38475449a46934f94c0d6a8c926122d211ca0
1ed295cb67dd5d4eb3b230c3fe95584d3239fab798f4e6fa4015b365fdf8035cbb4c949c
9b425b6f616ecb601add9dc0a59f7072bda0a9575cabf0adf3f78a2d96fe275c17ab75e9
417f5cafd1b3a377530a0393729f4453d27ef2cdd6470800d406ed8cc5c5370fc4d9eba3
69e727fb23b079ee3bfe40cd5cd0110d01b83f224245f34994b1f74efde06f0db60a4b81
8c6d6d6eed1d72c689167eef769cbbc875e9e96a16e99a227e44292c9f52c70760ae1082
b8536c132f035b5ae18be72c269b11058c9ca4ab3358603be7ea830a7817f2af2283f25e
2d10bfbf5582f844d4c91f54b2e8699968e05282a7b4d63534c26e7825bb82a5bd4d18e3
0ae0c4ce24d34ac135f599c46db2917599ed6f530396d179da7d6263401273ce1c3096e0
e15acedc7044761bc324cd25fedda91a15785f6bcca0ee1deb9663da8c55f6720785a2d9
e6a7c5be08b2b94a9a9a085c2c27e3fb7bbfeaa7f9d2675a3665c33f17a4cadcbfd875f8
a3e7eb177fd15ae186a452fc38e07113d9e9a606f670dd77d1993477ec25db2c2e4a0a45
7b09d25608c36fb88dc9d9f5052536b0298d513aafeb2c303a5c0f5525806ca5d166aa8c
dacd7a7bbd39cb316ddaa021143141f2a7808d3738fc6e283c5da7fb6e42528d1acd0cc5
f5727e5ca496ce6a23dda6ec6e1b3efe47049a1a0f6cd54ef75f8498fd6bbe59e7999e19
38e89d176e76de09b887c304bc152cafe6ed1175dfba17cdd340a2a8e23c82cf1faaf1ec
2f7ac8dca98c1fc04adc9bb5c81e02aef70b4e4dad47303d77f0c8aeff4883fc06c01d4c
dbb1652a04ffdadea4eee1cc9a53d0aabe97aa704c4735c2709209a57ada4a56b36cc76a
9e3dadc270383c00c483c88e18d81ac8ad8c7749d879cb726095512a367c25058f20e18a
0bae53e2c9336e19b3b2b6b087f19e444094d10bc2edd7ab324f97edbb7f76ee7d605d3b
c4acc25852bb3eafc342e08381e445307c54d7e957aec298658d4a04d75e3c1e6bc92663
b4ae996560cd15b7767ab518e05d534c53a20889708fb9b7084e885dc10ef39e5b5a7e42
57f6571f06ff6235d323f94b441c01691fff37d539edad1f87db5723b953d6737f5f563d
6cba12753e4c61040c6c2e14606e97f18b648175456ffafa804070c663086ef99db3158a
099da900d73f437a72c49dff08edbfe7bc4a3ee326ebe9039ae7660be7af2181c762c049
a3cf5fde4039e8a7c9468e022d62a7e5c8ea945a8b149c8a4da256db3cb9df1988e393b9
a21121345a2bfe8ca1e4896bc3b1592f80214f1be73f171b1741cdc68e91dd7e7c2b455b
9df3dccc37a87cbb5c0c91760153d9f88870ad757c78f42edd41d759db8cf5fa228ff7eb
fa032e95a19e83208a34a0cde495bbcd162996bb2f3f6624d131907c19d159d0e3b14aa1
7c3b5324c3d83eeccdb861e81cd282b1ea4c26a84402e4d922998da87fa6279b57787f36
ed0e19cde312ffb59340e3706f019a013a20b8baab949ccf3621146eaa1322ca9798d365
d28e9353554cf7147a5ff10baade6524808c50340ba51842ef56f10568672ee5c043b8d9
4bb3daff99cbcd35415daab06a94ab4b75741a1eac88a9b6c31d2ab4ecf3faeb4b40bf61
f2f5fe206a7aa467ed1223f9b57d42fa1ea3ce5a5522e79c046dcde85e06740f7e2b5227
a44aaaff72673f0412696a21be86cb8f18c5b74ac12da824204b83a1da556f68b9fb53ef
fa6545169283ad3d52d373c1bbd2b3fc924d0181f85fc2aa8e7df1a8c600ea2e6627f3f6
b03c1a29b9791bcad63de254acbadd5253fc28ce403e6de919756b6288864b76380b5b8d
136a1d5e69b6baa8a1bb22097424ffb4dc72088d2757a1efad04cd0b5c4bf1421e9ce87e
e097ade36362bcfd2d71fadefb8f7002a6579d7b37cdac4a173dbb1e7788dc3247e05fd7
2f4d0c51298dc82eb620bf1cae6074028b3699655bbaf90df23855a0a653af6921bed511
468d0ca1654c1663c5a52b4d9f08e83f0f9559b154804214c97bddbed1fae80d3d84b64e
e2f04763f78add39dfcb498c5bc8f81e99adad7f9ffc7f58de473efc0efd7ea1a695e9fc
df5db905145fc7afcf2fa0cef133d91808dde49984c41e87b8009ba33fed6d3d0731c4a7
067c07013177ade808d3455ac78bd3928ab0c7ff571e696d26adbdbb8ddd4606efd352f4
20dd39e3ae3548ab2917fab244e5bb57a15eab1e3cb7aae90895f9d3df86b102261b9e2b
bf0c9f3b2a082221e53aa980be4bea5ca972a3e2dd037695a93d7d5d48d08126dd5bf316
88bd939f6719a44823a6b626c6c6cbd8158821cb67a4640ac2cb5e04d4aef53526730bbd
7112d33aec13d9d815ce9eeee365913d456cee25814ce921dc6e949d02aef938d57720f8
ba545c8e56bc475ca37c9116b874d7b3ee09f407bffd9a93abe191e4d470d133435f418a
670cfe6edca97721e4215a54ecf2207a7a9883a1bc44ec1d86ed2e2093491eb529ffa89e
ac8328ab21d37ce9e8ded5bc2f680237b9ecc5c3666e9785e3814c84a203999f25225dbb
cbe1d8e072a723c1f37f4f0e6013ac9d5527e6a02ef3369bcdd4712f691050b7a5354650
210fff8d4e2faae1190f675a8ae94f5611bffdf214f8a3c222ef8d9ea8e0658c7029245a
c9d4854e5186bf17afaca84588d5deaee24fcd3ad24fc1d943a708e8cbba0a31abbc9f01
7f93fddd0b31cd70f2c52387d16ea636a6b30677b20596cbedfaf9929226d63c38913668
1bfec2f60965b7a66313ad7688a8be4dcb5263609b6a49f43d1b6c889052b2f47ce37a38
751d63677c616fa72829188316cbf9fc9743675463eb5413fb75e54d78a1b02a9e23bb46
8e3a5e0874f518fc6e5db35f78a3571769bddf8dde606316f847846fb0db06e5daee4644
2ace4adf04110ba4bc1d58e6590c6b946bedd27d3b4f6ccad4a1dd13a2cb189ccd6ee884
d413e46f8c5f9f0acea325b8a47981cfc73431c0077ab6365a673c967c7840f1627a58fc
0e8d3f2e90f3d929d1fa08273f7a2a0065f7a529e5cae80ca61afed7fe1a1d22f1a28a66
4e8274564969e377ab24c6afcdeefad703ef285b6efe3a2253fc051a35ef2526ae03e25d
b5a733c5f57495d2a4d988bfae69eefc359703d9b6f20a4222723297c83b1cdcee82371c
a1c54dae52beafe0145af8acd23d9cbddcdea630cdb56f2581665a7bb28ebe5bc9bda517
52dbbd8aab7ac38e657191ab95bd66c87f21a63affd9b20a4aa8d0852070bc289d007538
7db378f67d80bb134fd6f16bdc6d9eebf147f7487319b9fc541d291d4c2c864cebcf1db7
e36a96e155d78d3c86df30d1f905920cf5956d72117c3b7a6acd15dd4a2b19fbbcb4b60c
e1882877e1f4cd382efd0ae9607f59fcc21857c940c5ba0281db474de5f78e0fbcc09936
58d412afb29973bcad1c85005f29dd972266b998fc0f9d31efd13f153e1d5eaeee6efe19
4397d09e4ff3c21fce9302eb9c25171e4f0235af78ab55cf2d935cbf8c3488bdc7b1b277
907300b96c05030f69fb9374e3d8c9efc793b9518293568b6e7c161dbc664d6e55ef60aa
9e04c79903a45ddf215599003f3bea9f4a626de5901f22cb24ba0d748b9af7facc1f3f83
55511a79a0fbe342b250111319b499bd9b684184f18907167df88daf5aa5f10d9a115200
44ec9c2a0a8a7ff3ae44ee1577f94af4fcd3c5d1cee279c799ad2d9da120ac06ea8dd31c
2cac918abe5946fbb47b48b89b484bc46d3c2d0ff6db2d950391e2eeaa2d1bb59ed09123
8529e2c959f8ead766bfee758d3f83dde1522d4d847516ad015c3fffb425c9ebe1294d0d
36627d820d42f299911f43d6680552827d9130499dd678ef4431aff9b30053cf828d30dd
c800ffd28d14d5247db9dd7e41e69b177f37e8860623abb4402f6579c386c8d6a3b3e8b7
3d45b5969055a113bb2643c8d52658dd5dcb94fa983865a143aa4596a9b286d61f9c21e4
874012a95c0002d206dc94286a74850ac73ed24a646fc300a58f98c8b26c02d0c9e01e98
58f351617ad468fd43d60ec2132b4eb2cee977c7a0a18eb0224264fbb2ec8bd2d6a628ff
9eccf8e71a8d5fd0872b0611a0c2c8e5f904b4dcd454fa8f131056203601fae23988bff4
c6e4f916a3f76b6547db0c59bf3e2a608b1986ad13035d1bf01d5c9743100a607dc35735
eff1bced194af132dc6d8acfe029f1f79193f98457d33846ad0f3c4ed2479066d81d499c
3bf71cbe8956d65ca4552d09ae3319fc7ecc0b9a493a52ec5fbe8c4496f064ccb9e3fb85
ebb3aeaf188cc1a8d8db2ed67c9a91cc8b8635188b4d332bad0ddd41c46471436fe25be6
5641be1761ace5cf98bade21799d6e1d19ba91a1e9b169017887015e7d0fd25a05b71269
f369392bab622c44961e689374b275c6b346e483a7b38392a0f69242352e5b92028ac298
4d170b44a72ee290b2ef5b0eac21aaa29574734d537848c946ffb7b4104368cefd3415f2
3c92b46d383b9f5e95e7677e7b9c022d12bb6fad4939884ba7d3a952245145df5a4f056c
d0447002da5f8167ad23f660b3cf78d17e895407111326b4fe1e722c1ae28f83fca5d7db
09208b5111487ba91d32a006bd539bdaeaec8bb80814126adc5671b9bf64869e49937497
091de0f603b0e81abf515b5ee0749fc6149e236a9299c8e252b31c7ebb6d181b0b035e1d
0402cfec11e6f82324aab7a031bc18f43c3bdd5b477acbba6c64bf117b892b334fa59e43
cdf072dc9a4d03bd09d97b7f9bf83fe332e912ed8e4b076e95d1e5dd22ddb53722349948
b414ccc2cf44eba1e3c77358d4dff7f5d28651446472d0a37bc9d0ea88cf31310651c851
21cdaa4cf3f59bfb6c7f93c360090c441a80aa88c468e0db4973eb3635f2a64a15d42875
9f7ac8382a83015e906c0040efcf81122d36a05731706700b0b584f95a1710334729e1f7
b299a14c21d08f398791c97450a19420df5b4ecfa34bf1fad721f318c8a9fe8498a0717c
9fc7635bfbd9a778f9d50826b6ce6953d2ffb5d9d0682e097015ffeec59bf2fc6482f0fa
c2b2ce88c0d21a20fe32621decd53472c73e19b8836dd15cd7e9d079ae2b43ada0cbd334
16bc92450187beb26bd8c922621f5315b56b07190d693a4c33a7f6e64d4c2fa884b1910f
29645ad25861902a185c18aaaa3a3cd4138804637e8da8cd1c8d14160f0816dccd3aa4e7
2826f4cdcfd34bbdf7376e5e4d82f68d5a898d2703f44191888b4c442d84e072c7a6db26
7da7192dd3d5141315e0aac069d8ad1beae5a0f06e93184bb9310dd789d1bb41b5427480
00ecf452784466d33003826f06a4223745d18acd5e27e6289c38d5fa5bccd305f6c2b58f
475b8a7a41d4d2c461f7eb94966631dcd00f0cf1828c0ff066e58a6ff6d424df8081fbe1
89dec7b7ac107910ea28687b62e66e8f96e31497c37c6a2eea95d625a8f01666e1b89b0c
1158e6799fcd4e501c2636d7284a5a31da9c110ec3fc8011fd81c9119fb8f4e9f727e990
51dc33e9131b5cf8bc1cbad7db6cd1edb7afeb38610bdb9344a5e2b66f5ba11b0a54193d
1aff425361013c85f918b4e2431b2c0a3179e7f6f62ba7014251bbb0f60b4f101c4ed8b6
fd5feaf23c8efd19b333fb7bf41bbc40200d04191ac5fc9bdf891aec0fec68a38f3f5af8
e07d69bd2278bbbb22b8a6751a7073a9e91360659b10c60be2a5db8472bfec33adf4bbb2
fbf3e1f899d56ba46fac0c4c6c24158e0e0b8ee9b12284bf146d469be21b0a053ab19c30
658600338ec8d8c0baa4c2d069507c63bb8691b56b8a8f249637345bc5bf6e5f298d1f78
20f6fde3b351f7b0ac9f712f00a64f0eb3cee53f65530fd26ac49ff1a800e4e1eba041c9
34427b24cb3b3ca02b9a6655d66c92d9889a364a5429f93f36bcb1bbfba0ae526ca61d8a
ed28b9e729706b784513dc0c4c57bd766bb13cf5d846a1940efeb2e0442ffa5a611ab877
25fc5a5279040fb7fb6a16dffec9cc4f7b86957fda138b7fd87a4b049a8a8ec6a3dc8f05
ad2fa785a60d563c378da5e346ca21ae8a73013b045fdd04674569b0ce48e51bd3c11292
78e5f9d82f1e3604fa407cf78a0e816660fa43a0e31c177f747f2fe1a6d39ac6a11c33b1
c2ecb76d18fd8551645ef4a308e6e5d6619bc4b4e71e5b9e0ea0d9e4dded2f5d06052558
f7d2fb368dd8af1c5034778e9d82c01cfd429a0ea56162a867c5494ac035c7642943807a
f23060f3dbea82a2a1afce6e7650e2b64cffdf34454d49127c103f5f0dc45d25d164c9a8
a122afe94b3adb69faf24215bb4f48d9a7fe34f9679b0fe315a80e7b7f9522a015e51e95
626943aca7dd8a561e0e9e6908ac960f8505d128fc8aafb2740b260ef28d77578265b834
a87597e20286aa810007d8a0dd4b52e9b63f79ebb1781cf27cea23843c6e2e8915fafa93
180e66677cb495a5992672f26c9a2458cd5a3365eff765460dec5222a1eeaead226310c3
2286eebc04f1243592c511d65fbcb10742553baecd66252fbded581c44bbf06e5f0547cd
f0eb78d8d86807a397f7774b963e33975b02a7ee9852aabf740bb5e41fda0e05e636ad75
112f5440adc130a23bcd70ab90a5bdb59677a00fb003e763883e354cc6f0e14a8cd7ad5b
f145be6905919b0ff39bdf51c1cb0861ae0ccc11ab42f06a1750cb543089f807a1f2cbc2
cc65e223a6816ad4fe055f83df079d8b665c7fd98c868f2303e8604ae7aadb5fe855ca81
4fa0dc0dafe1d3f2edf8122ee81cc5153ae87e83ba1c1b3f4a0db92df3b243f8e566a8cb
ad0543d2a9691146bae33cb22e604c305b16eee20c3246af10185c1de6c7aae6443a45ee
251a1421442b6f429db1573a0a4d59e5e02df02d0b2311e408c7b7a41afba9d12d497319
9b6f33244b83ae775198d5c0ebacdfa502477c0515bf75eb50960e13f660b8264ab357e3
daec84fe3a60ddaaea71140eb4d8c037bb46a5d9bb3c4e0a8177c0fefa7f12746da8b8c7
53a4333295618114a2c2711e5ab863a9e27b51e7eb13ee7e66679d6b04333266aff4f266
62df15a18885f51a222233a2963e755b45d8d4e5d4c38c772048d78831697f36a2859fec
b19a26a2ddf3db0c8fe861f2aab800f7fe1cf70c281e86aff54303570473d155a072983d
a756a0c7e6e466fa62570af77e34099da80d922351d70b2012df1b76fd123b5efed71d8f
53d435f8ef942d0632cdcd0dd3daadf3113dc2d055aa864949fb740ec7f318851f6be7e0
03b866dd2f3f02acc8a12ca3241d0ebe79b9a94454e1a9071c5c0962ba8049c8f3f859a2
118df13ad36e4bc16aa554fda659a618c00063ce9312f10109b580de394fd25aae48ed3e
6f08d1f12ffa7b7d07e5b5d1baf29a2e4845f61c25811ed6e4ae30114cb741bb61aaf828
a69c19afd7a33e88be2247a63aed17d10c359350f9294e049d48e9e8f964e8e231ec7927
24c77649d8f500fc7556a574d3161dcac397dbb3c468bc88173e62b19f4b6ab7927825b2
c6baeac2ac56bdcbffdf56875eb0d283baddf32f8738fe638b138663e664f9c38c12d09b
1849d86cf68640750d93b790dc59c32f83252d7abe11c74403d8306011d061411734ec35
711d6176ff6c97960fdc9785a17815db4e715eaed741c1dd34ccd8f4d557dfba86462049
cc8bc91045a3735e1764d145cc1611910e42178b2363519b68a356a3ecee5911aa0e963c
c6d7bc27fd00750b280b4134c1242950d2b1cf8a8df9428c51396d265cfea48bbe957de8
7b3ae55923e469d49d6bd7a2e1e385c34162b288ed4856ce4af195cda9fd14b4d034e07c
009951bf5e34f8ee1781ede52b351febe95f5a4b03db02b3c584cf4c63f56e43516cd8a8
148d753721c20d1be6aa6d291b9fec22d2698da1f0bbd9db4c702039aff92d314508916f
b2ab6edf29224522dd1ba0331426984c370828cd78096becf873c8abb7322d7066de922d
e3e653292180589d829af105d604bc1137a326726abfb6d61ecb42879a53a6d1358306b6
3f794909e6c51c955d4b21ffbd8a6cb470d399529a916cf37d8283ac3bb6927ccefe9b9d
3abeedbc0cee6130c883d4d5e5e6e5090b651333e7c3bc5820f27aa4c08a0af4f131fe49
d835075f686483bb3ab6093325e9928d24a2753fbd3b15a75684f0a02f00308f628e5ada
5316018d004947a3a0e83b130e8d062dd94c875216a25e77793d0c5e58b2ab16e7faca66
23b6753311c2ce14b54914bc7894f508f2252e641bbf2187b77d5a5667d494b27b0690e7
1e8550485e5fb51ac74757199f004e13d4301b4f98f25cf03ffbace831c6de1577c20015
0cf9396027a5c7cf41403ddb8b0d49eb2192465f0fe87dfb6156ad1fe33bbb9548359680
88e616676a373d954f07d65c4ad4affe12975ec106eab15056012a20c909db2134d74043
ad904c8f69c68c6dc0135ee9696ff55e66b999e33b3bb6bd5b5d84cb2886856229e7853a
d0fc111a23a647c56cf34bed47393e06b1998f816c0c5b48875415bb5266808778b91fd7
58ff3e889fdf2ff86205e89a4a15a6ceb7333ec5cfa097a84ccddebb67f449ee176a0c87
e530d77897f3e8d0c55e0ab42294bc9a76827d928ce6161b60b95592784346a164a1542b
6b5417da88c8174ca93bfd408f2815a113ca10ba3c1201fc28307538be812ab139d122a0
eee1ab6a8680076674dc93d9a99aba11ae2775034bc6962fbbe7bf014800a84bfe1bbcb4
7101efa4944d4ce9405c9a5f30d3ed0dfe0dc14f17a6bd7b6cec8759d69456c1e1edba3f
0ff7892d1cdb17e7a2e1ebdd99366653790b0c2f191e8a30091449fb333461fba557261b
1d5ee19c6e9ab19f23814af9292292c36fb6023dd9b1b25e555e6f02057bcc78c0a4b4f3
65299f5b2e675d8a3650cedb787896c6317509bfa8dfa79754cd1ea20e70dfd957427ace
98a1432228f2c789d09d453afb3960966ed72a95421b6fd77753f3c5119cc1b308e3bf14
ec01a483925a14c58de7ee7f0c4bfab495a96f8a85a9ef69efa852d4881fd9113a7bfd59
b81af332777c576866eaa920af590591d8a0d02c6cc8f430ebc63c0c7de69326d3fa5654
71cef3cc6f14059d6b360ee280e131083e7bb07e7e7318f5206683f38738270ad723561d
1de796804aa50c70598e83e97c1d4eadb8937c1e142267332485180c045842b08733ce11
de9a6ad3f899b6fc285061d97419ec0725003d7b222059a8e5be5584d776d767ee7bee78
759c3d2edfea029506103fb94a3b2a70b33fca2162bc93c8d18c26b3924c6798689d07b6
88cfbbb57c0fdb1e1016edf509ca846d694e656d05a392d01fa689c06107c18c315ce37a
3ba92a97ec57caefee27a6f2d070e58194d6d33248bcd943d242b2e290bc62d2098a013b
35712f70b9be7f94c0d14f4ff262d95b9a1a664ea480a7a4bd65d5602ec4ab6029de7722
f1207dbc40ae37dff6c6f6480e0a0bda956356285213283e11bf300a6bbc65046ef16048
22b3ec8801e4a47e3732984cade43e1322aefa4ccd94dc1ce4e2c11f37d6900d03ce1d1e
ce90a7169cc52b7968bfe20c2595623f0a18df90d03cc83c03614710adb229c72d151fd6
fa9101d3a16e4f352cf821a7f2b7268bcf2b7c0d7219208def6a79c72f9690bd3d032184
1fa37389c38cb3191ea48a0befa65b876d47dd52ee3da5ee4a457fa8a5b8c8ab2317befb
0b09ef1ad90dac907af8f20d188d18238da1d09b505b671d0d4f9ec16e1a4aa5d406edfe
ecd0f175c8d43d8ee0a225a4eaa55f05fa732b7412f1e81d7477573ae957c7f8e85fa6aa
6994240979c3ed1dcd4992acf7cd8c68c9e5dad2127acafc7faa3a8546386b503fa947da
a306f9dbe65297f1b6a717aa1fd2f947ff16e4a6906871c4baf51000c2657c1af1123aa1
c989657a7d8f6059729bd834024182e80eb06e8f98c788ab061412237d52726fe4f9cde3
262a5cab4dbac05a0261631350e262b995168bc5dfe95b0fea26c37ba8647f86f58c8fd1
733b708e2c3d8a3f8b5ee624e14cb64391dc76603f03ad41b980baff9347d5bf8102dbc5
24a6a04768bc782fa1838e7af22421a7e62bfe4b6b2eb1cd9a76c185f240866d596357e3
d32b15d25aa88e5f38aa87167c1eecdd7a579b08e795e5cd4ded4f7530d4e31b55b77ecc
573db37da1341c9c9821b87f2b250e4210ce7f8fe0fb449a1ee6af32bc1274f2ceee2496
12c82b916299941fe5f5e0cae9e8835e73acb0bafe52627a1cd8b396d2092c063e970e9e
2d81e74c08fd53d6269c4f37149218940e530ceb6e3a29cec8d28e008621901d960a367c
010389b08fadde2814d7e0048d1f616c0f728deb51ccd493e562bf6d07da7ca659b9e7d7
c09767583601f12ab6b875d99afca9eca517925d366c1cea5ff6222ac7c5d6890f27f3b0
6f7429cd09b490b1aeb808f82a299850e3563564e704e5e4f932b926c4516fd40ca5f6cc
a324fe66470831409fd33d48ba3ba44536d3a822df10cbf197e4ba7d9dda5a556b6d3310
55b72496559a12d6f7277da5779e377e15ac50b8d5a6204a357a49307201dd80e3a9a4ea
18a5f972cccfe1dd913b16e36d66475375ee959a458195e4db8cf52a1955bad024edf71c
1cc3563fbd7b84d6bd2581d1801bee68896c9f4f544af0360f0189deb405e572454b946a
a3b034d97b8a0dfaa50c967746b0cb6ce1c970500212ee8f794792d3a8da940eb5073b80
7899a819a80d2c7a82824178d79a9c2e4046ad6fb954603bc9a23e58592f92fa686f40ee
6a7daf593e7608b43a05414405d558dd7bdc0e732ca801b1fec47f7795cade5e983a70c2
a6e5f70cd07d6d89c1f516d0d77f522d6bf0435f2b025a81fb99b005fd928066bfa43a72
a76910141c68658672092b3a40695879cd4e06dc47f0c7029d51ba9210dacfbf3334bc01
05a4ef0dcf997c41238a92c95b31f9ba1c43542525f25e4bc29122bd6e15555495aeaea2
7a4c48273cdccc80f58badf8562e1d30ff6279a4e477acddf09d0cb014b2741388796a21
207410ce5949851bb6797d541b878a952a9b44fa0b99475905a3a711298b0a10e34b20af
943836a0be58dbe6ba0420414b7582208ebce02f3e9c82e16f50e0aa46226c590ace7e38
82d54cae68e9e24e8f183e54b541de77501ee333f9f953b35ca339ab63af74b18893dc94
ffac8fc75375429a5fc3c07f4474458ea69b5ed53a5a1323ec0ca9bc2bb749dd41aff8d1
f00dcfb26660cc3644c8b71dcce913048ac77b67f6adcb9f3b5bdfd522be89f8b512bd47
c300fd0b819584c388b4e83fd971a56197fb85c00420c4d3e76124f7376886e255eec2f2
75a0c1537004b1cc580df2fb5e1943202429393fef7de7ace5963ab017da49eaf2f82bb0
bc2252e801c8917b48839a5cb1bca57522fe3c62ae6a8b2b558f6d8782b8852f4a88f6d4
02757edd34609705bfb6a03c5b07d75c92c507b3178004a6c05c5eb01eee3b360fb6b9e0
096e40e133a46cf781f9370b97ba93b4ab03efc62244850467126d67f7a6e664501775b7
baad3477eaaf9d0c5f9792854e40afb97146cc16ceb45c2d54ab396000f3d079a3cb2abd
19a341596b5e8f0b962280883891853cd7cc00a6371ac9663b877556899083f8d1c67d47
74e1f77160150a95a3d73fd2b1cddf17523d85623276073f4edf5ffe62d15168af6eafa6
ec15b01b03dbfa18ebd60306be89a9a7c2ff0bc81ab1e6ab49295f1a4143ffefa9f9eb3c
7d07936172351ece9ad0f6372bfd6f80b5b15a3a5c15fb653865532c0d51179bef2acf22
292ba87364be673e41c4937ad3bd5a5ccad4d99ca4d5755ba52a53b7d176023a588f5d44
f14df8af0ef2e8b7e8d86fac9160584bef11f4faa0d80a6c06ab2abd3c14f2cb9e346f7a
705def720ec93ad14af15f7eefb34cfd703dd91af968afd57575ea5fa8a2f2147e782089
0afd92e1dafdba07e78054d2dc5cab6b4b33d3cc22d9ec66723ad20f6cd86efffefc52d7
49a28423dde7001e559626dd7c61765e93886d494401669737a3198261a109483c19eda1
728c3ee7e33ac713a0465964572f58c4966b4e0889cb9fe66f49395397f41f64d949ba12
33163401b65d924d52d3a1316406f99b5ef47c65e47a2d9f2ae4cc1ce16ce86df9ea6773
7f7d23dd9df9b347381da932fa1404e8728bf424af4dcf3d7c190a7468a8ca6ff7ad013f
3b9087083dc7c0c76abec54be7817421e362c7c8b4a67314f0ba33cf76946dd48cdd51d0
62f807eb1f693187907f26621736be8cdb5a5027f49ea5394de85f2d3286d8a8dfde0446
79b59de24cfd33ee4f03992e2c03b2f660236bbd32a480dc7212e919ce8f4cbf577ff30a
8041f98843260e6ff7a91e821cce34bc3d10977603179eccd218e764af20260ab8685193
cc256c68c3578081086fd6298c22c47a6e7f3b42193855b5ebd3f50fe17d95cb95807da0
523efcb338c299c65bd781708c318b58e0a8b79e1a3b6837119732972d9eddadb1aa0d70
80c15cfd160da5a89a655f8aab59effe6eb33364a9c856a53d02cae15022a0d9f50d11e9
fd1ef9fcdb6a591a0a0a74fcd3142d80b368099e9b7a4ffab869b937e2c60a7582d33b73
4e691bf0ff9104ff8deefcf8957cd9a3ce9fdbffbb018131edf9e314175b83e17264c223
692c226f916838d3a80f5c90df6776fc9dbe2f134d446eafb9a493713e641e57b300848f
33a696c033354c5f12447b4fba512b74e21e7036e9424ca009f5152882cafd87005e50b2
081487c616dcf874f2e25256055adb5fcae9db5398d998f264f3be56160ce0b3fedd7328
15ff00ce5ec2ab47ea65e734da93feb016c56cc24d7c4a8c81228f4cdfa11b1f648bbfb3
cb4f35e5a7983c5ca6351efa20dce2c83f97615292145edaeeb45db70aeab1dbcc3431a1
3dafa11a1ced77be4f77383aa8d8fa1fa87b7f6dbf00cc4829dc1d053719bb728b4162d8
68c46fe3d30840b24ca223f9dcf0ac84e6b6db87aff108b0d2e4c978bffe8ae5a6118485
c0791e726184a31a436fa6d853ac1914e5c7540698bba4d58879e7c15db883bc7a273edc
b019cba6fd60da733ec85d1ebc87f4f6411c35da5ddca5ba87d03a53853d1c5a130a26ec
d3ff5f94d582e15d3687672539e46ea517210e4ef46c532ba5d2aecb7c1cbbd842770cde
d65a9db3515edb49e65c3537c764685649782b96bc69c846239b72c4a69d6ae9edbdb28d
a82c08501c6523d75cea2b9a101a05141be3fd105d493212589128a83086c93a85fe1422
848dd1a1360dd1c6d077f0638b296480d8a66f4ade76a92e89a85ba64a2b5e6fed78fe48
c4908046697c297a043ecd86b0ce4812a4e8548fe1edc4197ed36b54746c3bf44593be5e
cb3c951a7c039b12c101c3dc57bd8dc6f1dca3c0641b741f4647e24fc0fe8f30f5d5214e
8f05332f58e6ce5430753c8966a67f2f8f0a78f08900f4d242693062daad94e4bf3a7ef0
fbafab611411fb9cf458233b6a6f6048486b551468314944a3901f97b925b1f7a8de40b0
158343da0ee61d1ad6eac57b1e4d1811133b75a2ff27419c188b66d7357e58b40213018a
e54a6294693ba454978c944b588b9d48df75537e4e7d9dbfeda3bba27c6a563acc556345
d6ecf19a28f0da9ed07e3f8cd03f86f28e77f4270c0c13231047d1ea5fd826985a32a9cd
4ad033fb581bd23b636fe7cbbef720ba913e4ebb969d7ee72cfb992aa02c1e81544fc551
044c332ee0690f991f726aaa62d46a8c9149dfe4025937db01dee22a5fd876b5a83167d0
68338961353b3f5cc52852cb8a56562d048369cd9274e25048afb4504ae00fab4d312587
5d970045555a7e392bee61041c8ded9dfaa878ab371872851f56de61139650209c433f2a
431e10498419521b347596c6d6c3e789d2b53e9be2d939ecdd801af8646e363b44d8784a
edcf03c2dc468a1b9402f0996576deed3e55e55f7c32a16b1eb2166b251f9fd0ba9715d4
b6bbe5930eb6437bc189dd5e4441c2e61c6f58e7b56b5192a0ba38d78c51ec3a7f32c1e5
28e3144ff54c529e6f66e37d44d847bc78b9732236e053560a954b6cef6dce73a83600c7
c57bc4a7c01a442254677bfdef1bdc01e98cadc956e94538f37770eaa9cb4b3b8404a81d
b7ac991ec5b0b27e60cfee2387bc07843e0562399a3a3fb3f3c79400090fb51ac1fb503e
37749bd50993c0de606f93af8fb19fa0da12ac07bdc77c24d4d776b937def7bc1fe4ed79
6a27045666da654a9c9c8fed6db3562bcb9f362bcc1a55c674397894835e6848f4df6c16
b646531ba59e5af6b6f6354f370be849967f9df3b09b0877ead40420c2314405646f59a5
d3091080704bdcff20f92424d5a856473094ec4801f649d63f0a86369c776feea3e7c45d
64e73d6069c6b913436bfdc406ba5b0a16d661cd2801d8fb65f9d020999781cd56336397
fb5698127ea59d24ec3364aca458b9f89287f9ba68f09781341cf93b7c33b0fa16c93ee2
2eff06567b1e6d60a8eb5208753e7081564e73416ee54ea248f1d0f3dda7039b9e0b2557
7ec94277618637b2ff4f048816a5484f60dc4a0cd631dfb83e5372ed0ead6b6cef620cf4
33e915d1245928c02800d1cf0c4bb70123894a929f84c55c5baa483fbf1c455a9adb315c
98587910f913335e3fabd42e1bcb13c8c69624af1e46c10c9ce06b4c9be4431a4e7c7f2c
8c95e869d01eff88cfd075bceaf3a9c5e2a93c93c0033af84f8378882974b30aab62b5cc
9332370651faca6ef46eec54694795119d89cd5dec284e39e355cca1642d0701cd429ef7
79f252da9341053637f9f29a8e6c9e0b503b289c3e12f6c12481bae78a28e585e29b4d5d
30335c3cb2a9561fd232e0798046e273b6d0eb328b0d89704fda5ba1555e38426fcc5ddb
0b09fa083ea28beeececb0a965718dfe651ca029192391cb4c1d1e2f4906f8120722daa3
b7e6b306ddf23c340180bf97f201c22c62956b7c63aa76cb64f6e73258f7737c0bab230c
eea4fbae87b9574dfa00fcb89babfb7872f39380c7797604605e1cf76f246470e3e4ac76
10cdb0740a51b87508686b247c5ae859e94794c886143de5c217e4604b280e897f764c74
22ae38d83192ae0576b33c80154e39ffd9d1e8a3b50299f155e40f73a79dafcb7bc3582c
1e4df1f98cc94ec4142e652b24baa18e53644542e90d1855034e3359a0194e000638e005
10a84a005b123b02d205ea9c5bcced5b75ddb74a1b2aed1ea5d0389a8cd67c64f91d5a0f
ee17d7483376404a008983b8510c46e83c4bb1baab836298e9fb34026cc5bbb49fe507c5
7be3205de8ce8a1499fdb88ecf391a95edef857a1dabf8c85d9234b8627e49542d8556f4
fc885f7711d4fc69cc55f22b98847f3f2736d91ac5d03117fb91c1fc5ef34eeb370650b6
2dc1421a7f1105e19724c71917870ffd1a9fd770c43da32ec277af14b9df89f3dfcfa0b5
0bd86ae1b301ececde0c50fbabf8204675b20f888c49b9cc6596c8864c39c97d2ec195fb
251ef3656702caa7803d0dd6e130bfdac3edcb044c7fd499e76cb17b511c47d3b4326d26
052cf97b1fb2f386e03dad1e5addc08eb60ce25fb60b7fcb60aff269169042bca9ab110a
bdbfc85c673722da3106192c3ee8bf632a1a0df72ad4065d216fcc6488675b9acbb0aae0
21114b2a4eb49cc4e49e09c51946e1b952ba896c9384a8f119f16d078707e2f07373ba87
f0c4b1d3f77fdcac863d4b799201caecd5f8bb3b73a4232c26894f0ec8dd2846269f88ba
0012ec56bc04d4f765d8605e3633ab3dce51940e7ebdef200fd4faa0ccb7ac8986ff3dfd
4276bf9903aaab536ca99711ddf6cfdc88ee5563f2c696d73f6bab41dfc1bc6624a46061
534e898203799abf6dcfbbc4ee765363c2b953fed58c5eebd60cad387229da6aabed6832
2b2769199ab1cdd6faff60171569323b6f76208b673f2e1710d8de8a6e104aba638599cd
90e2ca0651ebf25b1bc43381b06b114629ff3848bb57511a18a201cb6b46b8406eb27828
2a7d251d744cb2909e6c4f599f5ebbfb903c7b1e5db765b4214b528c76a1f69b3dce0ec5
1ac7d91a144b646661df87acbf878277f266645a52602b429cae132ae29ce174a091f4e5
cb7ed319082bf322cf94a8bd4eb1c34b9713477b35bdbe04cd9624aeb7b333d0bab413f1
6563a67d76796d533c964476e87e44331f5f651c275e9300800ec9fe7f9b835ccbdb6f2c
1fb735ba83fd0d97952b3ce75a42d75da7c543577ef26062bf31dc3d5d7ace58d960f724
662d92fd5d6d46996c8d0e9172221682ad4e4c0a68db8ab4e999655c05037a484370183d
77a2f16101ab917a8b5e3a75ef2d78e3b1242d83063255ed5011342f42c884751be0b75f
aa18b667a4a3ff874f3a8651326abb8f3c22d7482631e939c20be4d220bc78303e9e0ebd
44d756c71d1ce1917b155f77f5e0450a8646b162b01bb2344663e51be70242596d9c8e81
ae6d212737a05c29b000d8e76940b1a807b9016e065fcbd418dccc10346605bee9ed8c61
7d2b7100bb99a937df0e44e487542f003d7ee111b268da41b6b242d9502233397585bc0a
14666135de367f87a0f12310b62716460562d78adeb15b9b2f4b56c5576413186b834d4f
0bc6241ee576457bfdc6c736d7eb90f08ae557eb6824289f88d06ad60e80441d08ac9d1a
7060d18a9b39c784637c2d23089c1b2a629eea846947c578de778df7dc48a38307e34b1c
0ccd81f69f7707d1012880028a0f5ad2ce3f5bc935205785d945b1e824fa6a885cadc428
5909af01934aef8c900b080735d309cb684f96ea825b27c3455d3a49aca0e7dcea0b5d9f
6dccac6b46ea56ad6e4b62158efe4dcd3aef8465fbc996543b9bbefdb28c2da6b617762a
632efb9bb3c5da72cd232bdffe87198cf27b66d43b7114c629de945fc3cd60bf63d83bee
09b55cbabe9213e6c93f7fa536172ae6541f490d9016860667917336f06981b9ba72663d
f7ad6fa9fdf2618ac52256fcd5372b00b34a461a160ab7857f6b7a84f8d6ce146e029c7d
97f8985b59c2656c396d5cbc329923f01edf9d9d76a7340cb03c75bae1592ae60ffcd585
e111126138a85f770341e4ad2eed87bce12d465994bfcd7fd0402234200b9f1deaab50a2
5158ea61904b514bc7a56088e18764202d942bd87f321987640c9cc15b2ce08640b808f2
079cb789b1c925cd9d89d151a321c541d2b05f7a0e7c39190b1aef3120a72c2df4a8f410
c21903574fba82be63c8d9e48aef7a13ce11213caa26eb26132de4b7a505ee7ab0d80f5f
ea36c922ed9c194c62cb00b00f0c08df754ebf4d0d33c35dedce333a590065f5cbbd1eb0
35c41de77e77f261b6785dfc6cfe946ab10dd42a962e80f7a3fb11701bc7d42a69981ee0
1d78c6e5725da2b7c081acd0cca941431294a05ccff46884901b80695f3744a2c574b35e
59a9c05eb46f183be26c04290ca4a084ed9c52612ab2feab28064a1f6b7020a4224dfdbe
4ff1c77c06a9f5283ac5199b874dbaf93a2dea1891387b61ef0cd8c04d1079351e4de49e
6ea41d5ad34ec0198cb2bde69f30f93cb5fccd150b913165b9133a0b0dfcbcfb6e64762f
127e7260d1cc65636b2491650d33519804d8cdbb3bb7fabd36dd8c85fffa742515299020
c3a2159ab16a1fcf89b88616c52f4b74a3a6524f6c956f5ff516d71d730957ef2395a62d
8b8b0ef280200dfb928ac2f127f08e6f0f1278f418a179cf160c3964c068fb2a9762b8eb
9457dfe578e97c7f2763f8ebd1425793791f084f6a0477393482259f9041ca49e3622470
27f2163ee84e9c119d9a6f0ebadef4392519c119c64890e1b1badc26381440996170de06
35434b7bc587a6fec945b29c499c386f8a335d36bf484449872e3d11eea2a3164c3a23c1
fa9dd5d96eee1f87ec77abbdd4a1fce9e3384e0f4a5d1389b7bada63f7b691243fa571e0
09a16bb0cb17d71f1537dd0dd42e0b6b0d96dc27e74be160cf3bb9cafad6be3b3e706409
4133ed43eb0a85a98b06c710aff9043b5d762fb1ff30057815d70955b7251b94dc8b51b3
52d6ec07f06999cb7ca7679e58257b5064d9b4ea8283ca5486de9298083c7827c11e058f
e42875ef19e843c798a23891b0a1e1ddcc6bba6da915238fbc10dab4f0e5e926e53637e3
09e6589c72289964684a22d14b7cb69a3af3283a7105fc1b3170b3057e514c1b7195c9f4
3d61056e5c8812801a166141190494bb839445f0bafb6ed57392b8163847128de50659dc
9695f9dad1ded72797dec9634ac81b4df2a93d4a6b635bdfb52b6e82c0b9d6e17aebf025
2122adea7dec34088edb67a28f61a62d5d8bf44b91dce85cae4f77cc4163e74997748927
2a30e6b1d6c8009f62c9c12c1b74bcea001c9a4ae517aba69c60a05acddf5df40926668c
35777eb8006d4fd4ecfffb2a63063cb6b6bdcff4f31ab2955b3514034241fd497bff582c
e3d92e518d8359edf026e95d95ee5f3054ea605c31635107bbdee4f0eccd5da4e7d2cca0
54a8301ae7917b3e66cd458f8315eba1fe784229abed36b8a05c3dae30743495f2844417
c20e8a0fefe3855a01925cf3e860d77f45b48790f5a53ae3a97f17972951c6be338c920e
b9e740475a6ec81bceeff1ddbc4293e54ab4768fe590456e572bfb8a65cfd357a8f25610
abb14aeaad887c91b612675515bc0ed8c06449413bf71e9293b520f493afafe54fcdec56
4d083c2552061da7f0082936ecf23bfb438bf3775051bdd60686c3e68f5fe41fa5fa77d3
a8c8ba8927ba934b8811b4c5e7a90615c9d2ef9b411eebc31eb91fdf4e2f3f037a877f45
fc0db88c8b04ad391fa1311c4c0e93e30ae6252011b60bbd336fb3a3ff62fe8a42b4f7ac
d16fa9763d2e3856344e3d63000de8b6b3a377a41ce73bc1908d19a2cc70a9e622da2b4d
463583ae10b7b21f900dca41059dfa5c5d8a7f5f545fa5c99707098d8865d37f7e4c17d3
9f678de1deb8867140b78487b9cb36362ae91c5d41e2511b88596fe8aa3757251b1d1fa3
4db2a22bc73d135fcb3c3a073a82ba2b33d2a3ab3e2f9de41e91cd13cc0eea9177be6946
1b7ead426bc38d006608e490c22339dbda6d682f7dccedcef5958d4682a523af2c74d198
33919eb48920f9f71cb516d7095c09a796a1bca46bdd5629cff90da5b669fbbbc12c7f6e
d3984ab1259a0787a1b4438236b9b0f64e9578a0c6bb2ce0e6bea8ca1bc66d68b756e940
6671a4d048c68afdc9503314159956d3716c197b9f23e58d4a825b2a8db0d067d0415f96
20aee9cb17f3085c3ed24df3e2d71d802e79426a1fcff3725e4aa9f466763d56ebce9550
15fa6448ba9c71d8b72830415b905a5e317845c56ef21938c292cae301d9b85a93f6a978
407b82915593b5d4c249591fdb2cc6d0beb81db8e39f00cdb51968e6de806c2a3d744f68
57ea9f0260c0b5e05b23b4bef76ef5c0c9d060c0564daa75a3b7842e87a7cd05c2506f81
6e62e87bd27e991a5b981b42766f59baad66dbc3cf57d47c89308ecf256811fdab93e30e
45924a9c183a0388f2a4f3eb671d60bcf75abb2f654639ad53113fba1a6b9cae1cb37120
bc60fb6e97575efd5988c9092b13b92c77a91684be5661f65c9d5bc706f0c5e9f69d4e38
69d329f1e72a8d7dad7456d74b80c8ca581ecb6f31302b8079d3fd32a455a9aac9213133
c1fb296dc13b4e655bc374f9b3df2f4746b553fd9a60c484755e26a09c5247e743c2e53e
79732e716ad87679ccc7e8ee937fdb1bb39cd7a950f484d9cb29719b1bd243f726460f83
477e21c9a1ebbe2973dcab24c99bd5cd994db1c647b2e2414eae0ad0da4f636fb9e3dd92
803ec4948cbccf4b4d64956da4990d9c955d7dcb29f94e6474a7c282f00d7c6a0dcf0e23
a8841948fd4c01545c9d219c784c9d67a283bd0402e5c419206fc39a3d1aade7dd18df71
714e9f7a8c04faeb2936e145ba4664cbaf464482c78f9ab3de8df730dad948f54646a93f
dc4028da8f870ae995bd3f69cd8359a45f59481c5d7b3778b8b75270688fe11d2a08dc0e
4f1bd4a8dbc4352eac1a9b076942fc32872349da131e61648e1c158b06cce23dbc241d15
24696c4f7786ed09ba81ce36aeaad9d9d577aad2e5cce225d11b5b68ee4c5bc04c2d0b10
06bbdf4c15b1e812bba2ae14862f45a39937ee0d72a558c5a313b9cf08422db56f282903
0d688986f3def66c8317438e53ff64bd86647137f523f46ca9d3bb8395f1c5ca7922e1b5
9ac71c37dee53123145188b567fbedaf287bc445d44fffb9e389c763a363b9b65015b590
5f953bc08e84acbfe16fdb28dd436ccc531e959d0f0c4bbe8ebaad8df5687e6b59081152
b450651161a5325b27a066ee1442e83b95893fec20523a77e14f3f50cb07b48a28573064
dc36a45f834b3db5426e560deb4be9e6fd19cef9ab7b8f3525f7cd6f8d6ede85f1cadbcf
0fd8b1df90665ead75e7f347a44bc7edaf4b13f5dc478fd111bac328fdc31b2c7cecab5a
ed4cbe02affd9f8104379b4087a3816e3fd474f829e6bd783249c08cfdf8984581c050c0
0ab7356488c82d14201763736ef3a1418eae3b3d2d36e7557f6a21ff953d3a213e9d4872
0d47373f3c7a36eb1310168bbad76eb18eca2c1d5f93801baa47d92aaaa316fcd41b2d6d
ecb1c062c4cd6efead688c88e6856911bb9169014fa30b454a20c9d8ab1b22550f158253
74fcbebce391ff120bfa0daba224cdaf7f6b07a127bf6040b5a2edbf90cab16408687326
21602ed315f011e5dd7bcd7f9610fca81f32b1ae33621e062c45094a2756333aa3204434
49fd74fb6f0994525eebfcdb681d18acb25a4ad995ce0dacfd9c550bb477e5bfed507fb9
651dcd5903151bfaa8eae43c52d95510bbe663d4b12434e22664006ee270636ef7997e8d
69bfada3daeb092965e9a7c20bbd6dc0fd8487c328c6fa8256a4b6d8795a46e2a6b3351b
1c37302475c830fcae57cb69ecc5d49f9e22ea8911acf4419d41a35f207507f37cc39b48
ffdb8fc36abf41c3a368bc53d7597fd7c43887070c9fa22378224b04c97af8b2c4a51310
4ad5d044415212869ac42f932d25d43f12e8b818616cc52220ae3f530546ee75192629c3
2ab6bc21b7d81e360dc82b63692ae56e7038629c526e2dbf484fc2f9beeb7b0f9af32b85
11331524922ba8fb72a17ff8220def19fb82c35739b9c0ee89bf1e8632f67abb51724ded
8b63ab26f8b9cb11828b11697a61d7712c7887b3433a355fe22a44325a317de885679247
4fe62a5e02bb71180cc200d3e7c813cfda78491c746e55c8d9fdf241915f65e3f157fe3c
ebe3aa33876cdf6284e8eadd6b6720b178adaba8247509943b2108b1da846e886710922f
dce63574f1cf51ceea3d262ddd850b68d8e09b901b2634ac64e25169a1f788617b7ebf50
07f92d12370a97dadde3e6c957bec59f69520681264231a5996b7e041287d41394ce2cb7
c82984fcc0ea4db9e1c527277cd72e1fd5e74904465150d2d6d35b41f1658da4dc887c2b
a6f178d6b36235c84fe78a7649d19cfd1df1f1f0a1911ad15b2366fb7ebb044d0ba15335
9111d7e6c65c6265573a2423f712fa5bcf44b7e9df46f692b06b4760b279869e578854e8
f1fcf060ef7bb50b3556bd4f36a52a35041c535f0f2e114274f14c972edcbbaece464e3b
09d6d1d003c751e6d31fc35651396f379de340f57b55eac82e2a65490749f08604a92dd7
ebf0b3599d6e6541da9dade003ca84dcbd3fb339f01b3201dcb100d39795d88e43fbf300
65cb155aa57ded20a056333d6f9fdf067b5f5395463fbc009847bd86931481011f9f1cf0
3937ee63d240cf569c8e782f714685f6977443dcaf5c64dfdd76d2d47791f33217b1dac2
993c888c7989facd2fbd203cc426a934322b8aa2f35f0f36aa8dfa4d3a09eed494793b0b
aedafc51fa26674cdf9c4a1b5fdff344537518a9b4fffbb11720c35edb3f0fea0c670d73
099f3579d332b875564972ed3b1a1f4ee101ead380ebb2db0a28ffcd516b3cef6a53e7ef
4904ce06b518d18caf88d24f5efea636b8c6c96cfc1a2def1299e2eb7c4aeaea8352874d
140a560e158c8c823036208675ffad368f2e56d8d8d7920a37487c70100d53e39793b5a9
e2e9c4db4c2f5121fc353a54eb047fa1aa2a42581dc8e21d383bf884e30767db46b6c92b
c496fb7f8125f9f759af73da645648290a104aee8d69b2edfd6e167d326ca139e3840a8f
14f87b8307e958ef3eb048463d4ba321716e0dbca4ce29ae0c8c762fc744260831ed8f69
b411f839a3d9ffa85a83c8b211eb2a8ade326f84cd7e6b40b734821f0aa055386c78859d
62668f5802da3e82f50997098fcc2a82548a1f10b984a78ce0d308c2b65e5067dadf6ae5
c2a22cbedc663f0530ea297330c90a113003275af5ae9773b8b8d24bfd2962ebb047978c
190af6cea5015560f0f124572282f5af74135c64a3e27066fedcc805d6ecdf168a47bf5a
17afe4a818a17e0b83bec65e0a10e58ce00a4435ed03627f2291f3c5b61d2eec98dfbae4
70907eeb2e67c095829485befec7a772e589c9464776e9a10269737ae464684b65b7d923
7922521865ed065509fd81ddf26f3bffa1a8683838208d4df35ae2c4ec8e03833ca20cc6
fc42e79cb2e8886ad643e7e8a4a3e3f66da3045c29b4326759fc798dffe1639a342036f4
1d04bfadea56c4f8ada53be7f07171b69b7145478524329c473c44bbdf8f4b0653f122b6
0d536309c19aa332c779c2d21a4a9bb3ab7b71bd2fd24e4e984e7731cb42618deb7037d8
94ad37d116816dc9844d201743eae746a99216173b2a5d15ee3a4e823b630c5013f3d2aa
6845ea032551b17f462e05cbaaa42540ec297dbbd528092a74a54a7be897caf74d030ad5
e75ccb0c24c5ccf0ce894b886e9b837a289b3ca8d62ed8a2cf541530b6ef11a365ad5ba5
943b4a3a0848093060dd6b81a159145f26ddc2d5512220cf12965ff474e923d185386c91
dd7fec7f73e3f2034675321b14f03b340d008e7390d0b3d04062ef03cdc64a31f141c782
d673f6b0f8423bdb8810d3276a0f2c8e01112b2dd5cf57eb09cf88ffe6b6a50d2bb9239c
77bf61cbea7f28692b06c63a0f641f2b760505bcdf026f58e7bdff3951fde71cb59595f1
05780557814d808b1dfb5e05e24fd9a10ec63e54f0c344c76d51c99714ae3a1e644a5e76
27db87a1f26a03d25ab4e6e2ebcea48de63548c8955d2b6643ee2b4fa698d6ea55407cdd
7bb974ca5709fab186edc782fadd7808be2cf095c3e5ff300aab8fca2270fe6230ec1d1b
d5087ed08896c8583b1f815b6dc62e127c96b19dc0d0dbd7e99f2733a0db4d94c388d033
ba8ed844913b12b0aef7b51e7574529cd7369688020a34dfcdca252a45f1b3e97e4f93c7
55ed756f4cf5cf6b3aa9b32a4be22a5756487ad1fe006da3bdb76443a377929e900ccea4
34776b14b2fead843a05bfbc752ee36813547d4667131ff1131692ea13c73cf72addda9e
c291a27b34d83e61c94bb73ebb3e08800da0f246242d24e98e7733fabcf2436bd86087c9
3f9bf1daddf3c22de9629067d276335963e146a65689adf72392bac4650e2317c00a43dc
94f69128967f76c743ec2ede3844a3776d7cf4d1b05d967f8ce9191667aeccb2299c5e65
9cd518c59e7c4c988ec939441321bbd312524d6d347cc6e68b76bc2dafcfcd8e45bdc491
b8a799890d0689b35bb019e04349727e1661007b72a7f75bfe4164a29a66e268634d2c77
4695e2eb83de65637147dbf521d60b520fd5f49ca6f8375d51ade05f5583882125e13a79
98a1cacbdc3e281a185e0ece45ad3d3737393acb13650fead31a8ce73ee17a75735dd37c
c6fda1a2521b008b03ff11bfb234aa0408835719ec840adde8769eb1d73ff05fc9085a82
5d9dfdd469e3c0ff4f2ac7f26edcaa8d66dac1373a2b177b97c4cfc5e9d837e0ecc46929
bd51e4132807c258e06ddb8a81f3c135fb5984c60b0780528efb0855f54651f6949f45c2
2573f227880d44fb8b85f6c88e7c5da952a2ce4467ad4ec1f3d22f59a3236da967c817db
6b484efc36116cc0cd5d898cb4bebcbe80ade0d2433427cf1c24b7f8054e34ea9414dc25
8b56124c3dc6292101ace48b91fd4945d3133a4f01b163ab7426f52213f8d5dd4ee34f23
39fd3f687229537c1c6413d9b2e5ac586ce8c6bcae0ac6745927bde8bbae8009091b3296
9d077c06990c5eab764345fbf3f22a23b65b052e6bc7eecd1af9e2ff278408b100112abf
e515c635ef4799c14b7b64ea2e6bc8360f196b2471fc6488306aa73fada8c63dc5c4e8bd
244c7ecc1797878e31636ad3212cc44b77c9a2e10d7c33fefce70d32f7f6c95e844dc3df
99f0700a181eaf11f305823d0359b9dd32e06f8f1177f30b5fea446d3e231cbf33263341
ae90088269efefd05e51ce93245be7a3edde484abdd87bf3dfc3cba01158b4cbb60877f4
b3a861cfa0d808aff346b1ca78ad1ea08f2595ba97a475a23a8c9e4413dd3b42280861cb
e898ce83e9be747f9ec0241110a8607183a1890ba78750ae3dafcb4da7ca171d5c2d7ff5
6518970c1e53731d53ab9e68ec537def6f482c868f92b8744c4da8bc856da99faa2df080
d260071703c0692aa14d8e14d2e7c689e88e3e571ef937525f208bf2362ced4c88f8f5cb
e2d0aad7e8f930c249710813de2aea281edaa06b90d7bcd009e075f5a90f32454902dcd2
28125e388f2b51c9c6f05d8a2b0657541ad9d4c15003f3ca104a2c6157d604b71834e615
e5952005b418faa6d65739cccf3241249782312a1939458e8fe0525eea96befa62d3f9a1
3d8ed934439fd78b0206812c052e1a168d729de2cc919b8737d6ac54112ea8c6add1bc84
91227a1b88e579b68011888f9b9a23e776dd6e747550e9e479fabefff9c3c6fed8085939
d36bcf9d2b7dfab9dcec62447163cda9c976f68c2d82e16a1c3c93057165699584c157f7
7064d7e613374728f29b100a7a3f82681d111ef23bea6c729684e99546526a15292616ba
95931606579e3aa766d809090af71c646d6781bc02f03f5cdc0cc03b91b01efe41777f40
95b87393af0bef0aef950830de279796ea6c09fc38b8179095eb867af93bad263d7e31f6
93a53b82739b1965832d72554a63232b777fbde9fce4d473ee99bf6fb6ac3959a07bd710
746146b223b47879bea1577fe740b3ed44001f21071d36736fae8daddbf93405ce3d2120
4021fe2cf4a70bba556278518b6f446de94c21748c4e95075aa842a6dd7cc5517d9b3294
60182a9f2a8266ff09e82947e9573d1aef7f7500c76ac48841fe2e90a9c3b270fd06f500
11886e368e31560c1b810b519e53a0ed1c3fce23f523968ef053aa892be876f76ba80c12
51b7f78576dfb59a29398a9cab14aab054ff85b17b47298cd40721a7ab4647912dfe2540
c009a7e66c8eaa53bc9869423b9bd932592c4f460ab9bd09588f85b8382f94e894a75f0e
d30e7da48ed65194b2367beddb8e74b08fa96fe1a4669f78023c27c00d3836ec3dd58d9a
a258124457ded3b789a25a2aee06099c2301da1ed67b1446bb2221ecf9d1c15469b493bc
33c06077e594a35d93de775815688d5af1c0bdd4dec9eac19bbe69b042ac351a884b4c88
04dabf37ddd66eec110cc1e91114b7f9a1ef39e162e3feefa010cc02cf0862bbc5a06ed7
724c0263911ca0e06a997f2de62c4ab502629f00b814e2ec4812d251d7520becbbd514a3
33999dedd666cc9b70001a2ffa420a07972e2e745df34b4f073b529dccc093776481289f
71fc6b52be6d8387d2c2b30478f9270236308baf6488a551e5c97bf77bf9fc49e74cd9c9
2f4ac9086f0c1d57a9fb414c4ec681a2fdbb07d7855178f0a78c69835989dd8c9fa527e5
60bc23ed644b50590f2e1bb2ba8d0c43592a01b68e99d7d7cd7a12c144dbaf3c1e6f722c
9f7efe0945c343ef2747bf2e79e4dd488feb5fc8570afc9600e790990da0951d66e2c08d
a6d42718c6df1f6daa88f3e4b6ddc40ca7fe999f87907734a1af9da5016231028563b7bc
113f7d3383a28cc3bc7a03bf1c087e12cba8d35cb582ccdf827c30562db41fae0614df25
31ec29d2630130c5e90e923115676c9f522b90a71179721a8e4d6e07ddcd6bbdc629a7e6
cfc31accd7a1006501aad447bcecb9b2704d49c854e6747bee9c5f446b30dd5d2156e38f
700d686f45800f565fc9ec87d9efdf03f249d76699adb17fec4e74500a0fd5def6f4d7c8
d8141056c004ae31250646a049d47348988d02165878d842534b08229831971894acf539
40d8ddf9287098f6e2e19e14b139c0a394a2751b73959639cc7fb8fbc0dd9d39a694e88d
7274527606e5378aa5214543e90b8c3e83839eabe18774906bc3fc3e688242cd234e5a34
5fbd496201d6f0aab6c7954231e3f7ecaffd245b1816865780564550448054df1e52c038
fb095fefd0f8281adb4d03e17f46cd4447cf269d10fe78184444f93adfbe030d00c399b5
7e9072628658830e537d68a4ff9abe05393bed00302eb84d05d2d6772eaf0897ca808503
50e755996c9d2d0a5bd0db27d3c47fb0a8eb6f0242764bbafa657f6c0ee18bd37e6cfbe4
fd9917068e6eeef2679fd5803551dcabe33507fe649757e1b5f2be1d25d5c8ac42b4a91c
361a43f3f5cd164254afa7c2d83d765ca343d1731e682f03b3fb917cfa236f75a9774787
4eb6bafed2a4107444f9216f91bac64c196e7be7247959894c2a374c136d5f833425d12b
5c13b9d6e0c167c884b9180f49ba9b9a908890b8312ff64bd39e7409840ef1709704f2fd
05d23694b86d57ea6df83ccac7277b993d0a486d5c8e752a361e349eabd82fc8e93570f3
def31bef7cbd332e84006fae7fd8767a3298cf5061d6a296208df8b83ef93d4ea1b05863
742a0e5109bca4be297ccb859922f99b5d76da14c4ac4ce3106f3b8940da51288b36affa
9250cd6de92295e135e4e98e5c893bc249ed086edf683f3bd67fb2cf7bc34a580bb2b31a
540f7bfd4a1b4130d6243898812c488e36ed95f423febf7f43db8eecfb3675a44a030254
4bdb60dd393144f179b8b76d83b7a30f46331825a8e95732b6b0dfc20660e40a58eab5cd
bc1dbefa7c713dc72b269a99e158d23d2530c9f8dec7ae6a5c182c4618c9167690bb16d9
a8ea886d7168834aaa7b3e408572ca682ec537b265d6b284682b54e13b6088428ad70be3
3a674c7b572dec9c1653dc0920c1b917c15420878d559edd053400cb843ecaa671d76a67
8407c0a11aa0abcafab40d742664cb3c91e60f2a4fcdf102ea7fe944d8f1c52836fb2fc5
8817e076aaa8fe2d557354d226d2dca64bb4cc5f93dcc50578049bebdddd2af01e7e7a7e
88a28506b7bab5cf031e5de726d580dfdf76ebf666a10a41223fba1ce8c9c87aab2c6233
344d2c392910390a0e32b88da8a6d2061c461b5f78803acd2248b2a5a8612efe564c1d63
e16fd0def1f03e0757ec691afaa1f0146eb8e6d019e5df828090c8260e6304b304a513de
23f6b03ee01ab5ed89392c2d68a3315d4c4006df2900eac437e9fd47d0c4dc96a58795f8
92ce87de3ee975bc6663a8797c68f06f876bac799b281434e7d65044ff0fdbe18029fa27
69af1a14c52c75db678fea471c27c312223c49ca4688a2d0b23ba2365e900ef297806901
a164b592d80f4762749043b9a94fe8119a2842ac01141b25d33e7d332621712b87270070
efe99a8232c8217e924031e745f03f79682d5cca231a263d346a926e43ba7a288a4c6e84
907372baa71aaf078817d38b146da0525efa0d3b2c3fddc2f2132dc37869d8f32547de2a
8d192b46d59fad50d0dd501fe510ec17e0a0a0535a0d20a9eb693aae2ac256577b884e4b
73aeda740dd75d88f681f166d5964ffe98558c6a25eb79236fcb97ee46e6d6770f14712d
277765316ac41f073cffcee59a7614a0879e7cb2d5fb5b521f0a3bf19ffc89f149319fc1
51122609ca8dcce606936e0ec02b041e57f9698539cf7d294b7b6d20d4fdddf444bab2c5
8f14195314c0281c8e535edbb6d73d9fdc356ce6e1f81360247bb4d87708077953b199c4
a10bfb2fb90b7133a4fe4baa9d81175228e700f6ae828a7723385a47fbf4b8297b1d295b
9c4bdb5abb8c3f7da449613e65e7ee0418da7d01e1ef2c50e6305efcc26b4c816a8e5355
13f117a91f63a53ef77e72e6ff5a963d7058df24474208b4486d02e254dae5e51a7bc5ac
8eeab94761dcd24a237fc014daccf70718b8c728fdb6100af0333310ca2e74f86a9ed4ed
1c473fe2953cb7b0beaabaeb322ada27bfd128aacf03d2f240723c241ecdfb996ea5ebdb
f09cf0b41b78a367a0b535dba9bc2e13afb82f853b796fe3f6b5db594485d8e2fefd1de3
ff5ab65cc36191964a9e246ab9b75adca0b7154fc2cec6f2227eb159b217fa3581c8a67e
b009dec251aaa677cfc05dbd64e4743a8dcde117121422a0cddb30ef0f4dacf87177af5f
69464af3d000d50a56a804b5a2ffe379ce3a509b5ec45aa0863db04eec04c691353a15fd
bed521ca0f53408170bc424c527ef03d2ed7e94d38264d0797de0ba10850c87f9a08e4fb
3feb072afcd2098f9641838ec9ba1ebbf304145755eb216dd23ce72f4a0e5644bb284110
a7f27ac99d5e4cfb8762eef2402126db248b7742ee6098f27006913d1c0d76fd694e5ace
28fd4af2287036fb5167c4e8846540c20a87276009f44de0af7fa5a39b24cabdf422d0c8
5a5b2f7110183bcccc8c22f4514c57b968e5af8ab77b204b89bfec46da602d0cf778c960
4f2961de9b2c4bf48a9055d4b84e52128945dfa9d58222b9aff593d3c1351f140d2ff1c6
7afd8b29a05c5767df91b73a469a07bfcede29d79f6f8ae6e2b2a0261f1d9083d4fbcf10
3d9ae54df95a416c43f9ef7a0288487f8e9826fc673cd036fac45e6818e7ad2b6520b7d2
798fb4002a1e9ddcfc93877a04fc1ad058ead0cb713ebb9fd31f484f13e399e6b189e9c9
8e712bf698347e7e7d8de31e57fa877c4d68c0622f1ff8e08f1951e27373af03df279188
2fe64ed320813cc134d2592778939e85a779e572a0c5fe18c21fc0c850f365e90a04c52a
079e1e51e77ff464a51dbac160dae7877658d569099d7610eb175471ec2ede909e29eceb
e3aad1dd50f6edb7ab106afbcb710d253c95e68246f661990aebc6f903d231872911bf1e
870801224001309c19e46506705f4e5133a8942dade59662494a786c2c138f2e42a3d0e2
d4d28dcb4048e1a12fe58194c40e36535da3e0257fcf084071b74e4d5129f23a25fc8a51
9c2c34819880d415861019bb47c84ac198626ec57baa55084010baa8e86e224afb5dcd13
4cc34a120409280845a6cfc74ccbc78cb8f2954187b3428fa0053c22f71337a3bdb0d6ba
afdd76b2a80dae370d8353e7a3aeecec7a7ef03d07c2030429a41d12fed70332e7091529
1418e18ed9a38ee535f3cc24bd64edf7664a5c3c381d7d7dcbfa63bd09b923a47462d7d7
d9f36555df44112587297b84c15581e37f7585643e76520083b83d2d1633429ac8fb95d2
7507cccf445c5be2d95ae89b5d19084f8efd7ed831ae8302c50a6b310d54cf182ffdea8b
9c7e82af7a7e83e71d266308098ae681c94ceab4f51951e768c7a2dd9c61087de79aef6f
2cb0a137345962d439fae5af6e158357a6b67f41048230b3fa132c3a18e9cd338f0e60f4
7c759857fbc99d74fbc7acc0e05163b8e521dab04d75647a8be2854c48793060073bb054
89106694e8cbd7228708bec8742a5fe7f6339fc8bf7a7cc4d4518aa6a087bd8a10970f68
56c340da019c8ef59b904606678e5d5e260797b267dcf1698f5ff5df2a0b6521a18ec77d
be5b69dfa7efa137c3d54f930080d1bda0bf1f4e296400e2af899333814a2e55d2342000
d8ee134185aed87d0b98c80fb77cb660f9c6ad7aba78cfb2f8b8232573485b54076f4f35
8265f9d8c6fbbff179bf827c7d9e0c5c76777f13337146a17e78403d43e5b8cf49ad6ace
8bc4968bafed4349be450a801e75c0b0c1e80897eee0f8d07fc4df56a995523da823b7fa
cd4ab7f00688d91a114538cfec9b8d52ca956eee79b3b59f522d6222ff1a06816c4cfea4
4b228f54e0902687b40ebdcca35d0bd74bc3c597f81684dc113a6ac787717dd67d1ee77a
73aad22a0f483a7ea7a2ac6835271dd83f9fd65cf1d80eb5ccad010256453c726ed2bab2
1bc935fa45666d3dd05881bfee284d9d3707741afb26affac6b1c838186116a9f2c96789
7d9e5139527dcd3b26c6367053990bb4f4c42074a2d48849b50b5bb5286b1a9224a7cb64
d969be485048301759dca4ace473659fce17a0a81edf4836306c985f73a28469453442d5
26eb44493ae0a0bcdd448dc42044485f6e813691b7bf304eaee20804b8e542ddb4ba5570
63b526ac81246ab1b2fe0d9351ee17f8cde6a8fe3fb32dff47a406dc70a75025d50f5d93
8e81df4a2a33ca56c728897f99cad7589d9f04e339d5d44ee0d9589a71c6ddd6a656dbf4
8c938519bdb99b27d965755b9b40a6d9b6783ea6ba7d87a14840ea6541d7bb27e73cad8f
9f34e03234569a1b121e9505dfb50b8b88b5783fa8db911212112ac6559e6d42f9aef80b
125ea6afdbba1fcca356fec81f4bf7273757dfa3eb24cd3774cde32569aa7b63f8543369
096c80092cd5abcb4271d597be0497206d48e67254f82ec0c5a0cd9808871f76729b4960
34e55222304939b0fef3f54bb91c092d83756372cb1f451c32cad1fafdbbf05db66e0430
14e29360bf921e5c20b7209d7cc38ddbf3a12950835631f5ab7b628da8a283673cc29c8e
771b7596c74585446c77a7a87f867b630549b45322736ddc8861488aac55f62236e0547e
c41bab9f8e6b0eab3582561754d86ec653f14fd32f7bafc5c9c0bd1e8d21f9db328de625
550805ca276fb6bfe10b5dc1eff72f7f86116ba75f7001957dc9f0381c6225fb3b13a276
acbcddf81b2d33a34b0037696f5945eb674bdee80ae80859cf3a8ffad2df0cd942d16359
700cc5bfdbe14f7448086a59c6638b47432da722a58b37816026d66d9edcdbb02ad2c95d
809ada8999d535c88b104411ee3279b1ffa3aa62a70c9c520495742776d6c9cc4a4c2bde
9442790332090bad03ee45728b4caba84b696085941cb05f146290f90fccca1ce4a911e7
6dfd076af4d55c3404c8e05f12537f076a2b45684b4ebe11c155c875e6b22c68c7619a11
ccab5ec7e9e34481376f7962b2194a0441a1e047fc0305186ef02bb4b441d4a1311b307f
330b2e84e318e2ade364cc7ba3224419843ff4bac82a6da651203b5a4563ecb386fcb66e
4aa08f18242e3a7844cd4a4560b890aabcecd4b773d788bfdbe70c9a1d82b3f17d78e54d
0f240447898986806555b94a9773f03ff6274eece2201c3899647ff01f2141eadf1ed7be
3047d505fd79511fc1070b0602cbba7f5ad4f10c99ed8f17aed190d63a9ed9fa97bfec64
acd8329a3e1babb898785cbcbcef7243c4a77888d249c14be89575e5a435e983591abdf0
28b8354cfecc8e7d9fa6fc530cad9246ea8f85338b496ed7a89d067e01c2f4ca7554b841
e16dd6883f67e89cc245c97bcbba3256ad3e0cc77dda143793027ae52b7387169bf7310c
18efec97572e1743ce52e28ddefcd20ccf62f57d8db7e6f2b1768a9c2bdf1d9d9ed182f3
fd3b6f3e6650ab2dd0adf0e421b8242d6341b1d4f588263865a750b8cd8dee911ea1fe6e
ae48d2c99c6d4725cdfa6d161b70c33ac3e4d868a10ddd00b3e99c5e1452639ba950c51a
57f36ef635483315344d3c592d96c206303108ed1a547d6dc793db11ed70831226f0e6fd
427d89732e05b93b931f84a2c1bb3f5d742732462b0310161808b972d188b1d0eefe4dc6
208506d7a07b20b479223287d6eb184692baa2e4117724748c08e4a2f81ab463ef7c9a15
755836e1daaeac86d72d8b71515879131acc1bfacf6a8c6ccf49fdfe01d0a5f3ca466cd1
e37904b0faab8bc0a25f9c0c0a3f8c5245e432237e3ccfd550105b79718afc8efdb9b248
2046491bd9da4f76dedd8c8952f52fa502e5d5e742675a7e09fd143a7507db5c3c129970
e4670f8b5b82bcf29191c19a864ffb5edecba62bec189e93596295e80eb7e433bbda1f85
27bd60d61ee1e4725ba326c51c6f1bb49bebd805cf49bba3b8d9213756c20e9cebd7bc38
857a16529fded3c191bc41bb4acbaab5afdfddc2bd0f60a18726583fb079a15c9bef9a69
e095c6dd703e2b3cfc5f8c5b8a96eb2e0e520034fa5f2766d042b1a130e3ea39bbe808d2
359d45dcf4a3a2bc4948f7757cb32aa723d337e4f66398f47647c753bae4dbd076f2e6e3
e977ff82e3cb3b1c1d72337da23fc45abde25226a61a9e17df69f63d3448ef91f94c9adc
1cfaefbddac8442c2b85d5f41cf6880439c16be3d0862f690830a5a43edd507ad202fcdf
e6197794eb1a57d1028d78e73cc33acedab8a6ccad82414778b830acabffd6c630c27591
f7178c9db2f8b6a74f7b538b39cc7e1efc2acaa4e5968559d327c049e420870695dd816a
a493c43cd76c3d5ad97b6b02de53a73991143c61ef920bb64c537094feb99a8940546002
9c2cb1ff0505bccf2223b1d91f185b7e11deaa528960c06e63ba466e50ec9d501f58351d
05de4f8bf79f0b112a65953f99ee5d9d4d0e6acad900af3766b28c078112ecddfce065ee
34a35d5c25b036edab9b1cc65163586c41df31abdeb93d37fc936bdf67010afea4832e9c
ed983b4d9fd74787b73bdc0dcebbde980ac5d5550f4310f4aec01dc27cffa4716a6f3d80
2de19d1421aa3f0c4d752a1d91d3ecb84795109691f26e4ad4f8139483b6b7efbf422768
57e4774305430e32ed90c8446298ca3716b8f089b09898f12e7553110c0a6be7d5b73c55
a1887996e924d6dd4b12c52e0350b5098cd23548122dc586eef045aef55e46018fb087f7
07f52ee7d42f38a241ffc4eef7b18761713d2d280a43cb63cbe73fefbc0606d5b95f72fb
8b4b60d960e2b3eb28a67cdb9f12e0b4617153f9772c63349f52f0adf0562f9dd8f5b6f4
1884286b3dbfeac958974d97c4297fd9988a01bf5f5eb411d9770fe9625d05c3d06a4810
dbb8b253999745998d2800d59074686443d21553424cd1b47564b88959287897290fe8f8
f94e0629fc98d3e53e08133910976ed9d464915bfef1e80a0f4e9178168c343439569d0d
0b0916bac15b9da0207d2463fa56b2b608fb458f749fbc356694df5fdb8a69abb62615be
0752b1783ef3d562b46a75344ffa347dc12fe2d2b9b40d715ce9c4a2070dbe73406e99fb
02ac61eb9e99c7ee1555f05deddf306b31a1eb2f77299a92bf773306445e21e3b261ecd2
865bbe4cd3b2b9d49f3c62f0863547d7165f3cec609b1513ae0eb64c742c657f0b290995
7265314b4cb6eb484297bb7493a9d3d0dcbb41d3d87863dc1d98fb931b6225ef733c998c
0ab2286e18720d01787b35183478e8b049346a1e477bf038449185592415dfb2acf6a425
e04c7dbdc935c4e4eda182735665c1955bcfdb8a065cad68b721e795e0dba7757eba25d3
5ab15274f5f29c04afc75cc007e470b11f7d8f5d50b74a267f41ea15aa323a512735999a
3c1ab0c18f34f86a5992715f733c0699f94fdffdc64e9a2ddf277c7206f7afef8b26d1b8
60609118f3aeb63c89bffc69783f4e9b160bfb37e5eec3ae7c3dc0ad7b773343682a3307
0c71c62af33db5bd12c2f207669672d6a17248eb07dab676cfdc17e296f84753b513ecab
e0a8fa89b0950b2d8a95e1175368c74e22c490567aa7c5104a23df9ce6469624940f7960
92c514bf12528eb37edb6abc7412b4a7238365148dfcaedd5e3251588f846f6d7e1eee38
90c0826b1eee43c69cfda3e21cc7b4aade778ca4fef04ae74d4fb604a7ea3174ca70ac7d
d2e5ef803eda1d46b097cc5d83fc0cb35fa33a78970ce6bbc1ae5bd9a41ad1886b031833
3ea80747cd0111571b10094aa137d1385d19dbd094c4bb4d2fdf72b941ef02db738e4d51
caae40443cfb0b04092f3bc876fa77dbb2b2b702e718eb5f1c69d94390b70ff359dae8e6
7c8dab6defd52089a3584959720913dc395a395964cce5c447699a7bbee30799d61bb0a8
b6c08ae9fa347e8952f43d538d9b4489bb2bb5d8771118e5238b1a92b3ef82c4baabd35e
ae8b2ac83d71d154fa5e22d1437c0c6a542e61ccd5a9bd881694d47c1630fe35db431074
ea1d44e592bf561d2d2c8b1d69786d510c22bab41ab7ec1872d456b6aa3e1c8e575122d9
d078b9d53871246559300e08bfa72a541d42ec2de2b0fb849203169490ee6160931e0069
ea64adcf9f7cfce408e8fe13b6e56a55c02d71007a3e5ca9280cfc1ee17869d8e7e932f9
ad93072c81d34fb34fdb5869b2994baddd75ec673bd8045e25ffcbfa2d17f9c9f5df9826
b718da2db651db26d88efe3324d8d33c54b465fe86dbe54d1b4dd7a7f10a8bbf3fec1104
801a50811a382f4dfb8e604b835137c5f0172d031c29a0ad2d8a5dc8a6e5f9ad74e42c6f
a50a3505a664aa3bcdcddca2091e8ba743c9768c4dc968d85dc4f28d9614c9873caeda79
36a0af52f1b1bc2e13348fca5965a134e5580dec0ce4676b4bc85027aea37ed1c5ebdc21
991792d54a38582d117ef685f63b56f66f74a521d22e3fa707871f0beba8434fb86102e2
729d178c7c4c5a922e545bb18e75a6f07960e580fdefbdd9dde624ad4c13680d3598b18a
2f7924135546bec40832a269a8a82e4ff6293d005dcb0db1f6b0c6467ca7c04d4cada55e
b2af53d5c8195598ec7a91a03ecb038eee2e7ad59ef7e72b44e60c6ba30c7a5604bdcb07
4347af33ade5c0368f46bb6436799ee39dd0af2d52c7fdf36c5b8f9f826725d2e7d6aa95
7ef68b106660b255165ce406317bba9fcf2625ba847c3b00c25f08b5e109a5d27c9f08b3
2c5e6dd4c957850c780fd0f3cdb9eb7086626d436be185064873d8efdbf61cb99234e7bb
3bd9a7ea120c200e676f82049767b83e6d349e721af2bd8677b4ddf1c06a151184db6e71
7b92f42480ae06f9b841187bfb7794e0aea38cc190404aae40f1ecba8fe121286fbc923d
bdd7277671a63d6ad0924b5daa8839a4edafe2adacec2068341c893944cec10cc6ce61fc
1df6385f6729dbcddcc38be7dd04e9372a3a77db05a9b3d60b6ce709bbe5da75cb33da29
039aa176b73757388f43de317321f3ce0287f7f987ff53a0a3191c3812918f2659373c4c
af772e43da822f344ce8dccd8dbebaac514120377a9f394469106e27e572612d6398586b
a0d1543f36a0759468a9e78c05eae65a02b9867994c37567b1b527ab43119cf46a1ea7ac
502e32324dda8e019e059e4cf68a6a013cc6fcf801ee5eee7c173b5f1b4b7594e719b178
7462f72d98a5fa568ae78c3acf60f9fe0081ac28981a6795301cb9de29ff335f52a28c48
e2bfa1a557ad5aff5f0076d5d61d0adc1c9c8cd87d357b218336a37d47ec38726498837f
921e500647595772ae6fc3ac9b7ad84367d0db5c5e86cb8a2df066681789e82e6af9151c
4404c9d0cc954f0508fe8136305fff5ed3284f742e6fb6f959a056688ec4c69b67a445d2
f8b1bf95c8831f84be8e15027de006a0020131d346a5b38b06b740076e3c1606b28578dd
8798bdeefc005f737e736bbe25dd9320b47ebef8179c8d0b6cbdcd04a6f698f4de0cc2e7
568efe090d3d622e6995cce9c433e6c848e41eccb76e39ffc5f9dd4e1118a76ac0ff5f92
1a98bceeb50056c72a2b36dd3b1a5d48cebc3d1a505cd28d2cac2be8b53ad8bbd86d4a2f
594bcf4ef60be495f8a94596d1ce6599e48a0535e24df534a50490a7aaca5377f649e948
6e5329b1c76c6a02235e65078e9df1b48f47c992f351e5408feadba52fe7769c52e1067b
06a2ddc88435891eba85078f8159b3fda428ad48fcf71b9d7351b158da2b299d91cb40ea
6833c27c3c3e95226f4ef5889ab6e803a0982802e97205a04cb50ea1c38a1883773dde58
32dcf4ff66e9401a74cc8cefd92a88407a02397461607dcf26cced7facdeaa5f80ed8fbf
fad885f2f187425f769f7f5bdc8b7d6dfdf5137df5ce56ce114177e599c1dc5e5c6b00a2
f9f22c7b42b7eb2a7e2d13c7d3756d66b84d10727571b0e856608011993855567c1cbd00
1697be4a2d0f67381e858eaf4159c06241b41c7fd1850250e34fdb010cdef9ff0fbff717
95e5cec900a461c86b5be01b6d3057538bbb26bdeae8f3eb1cf67b21be3089e4b631d911
c6399bf0e64267c0827cabc3e0e613eb0fe4014f7b30dd69d01e88a1512ad58dc61e879c
ae54702453fd3352b36b4f4e7d69947196e8f98994a102b205a760f45abbb1f2e8c18171
0f843dc4463f148b6330e50cf8dc84a78612955bd4ec5a2e0e7f0036946afb3c956c7aab
5bb6e386437683346efc0a35bcedef859d271f9b4a53e8e8dd31b7975304ccd8d02b2df7
eb2e313476cdd581ae1c5634bda307c482b190f6619334857d0c4341cdec2e53796a2222
23e2d9550be82a493fa5293d9b52bf3677219825d397c770731abfefec0ba45c6691760d
a134ee4d5a09ddc99acbd31fdd4d4a285b9bb67553d39c8d0ee8679d4b00dfa96cb0a59a
9160aa343fb0c608458da8477c3e9cd7b65ae21803a83468f9a0189c09de4cccc8131009
2f0c41d87017e7f8f0c7033b87363dd7312097d1062de1bbf2d0f6bbd6c26540451ef965
7b09abe353bebe5e5869200ea1188c3539e02c0b618ddc746862337f3f86b0f8ee67f3a8
68ad10f9eb63b2fa93c1f2725a66959955b90cc27bdf2942a1b0432d6944a6b0f627c970
1ca1ad6f8b726ffbf80c1cca57346c95c8494b007bd2fd5702685d82bb61b9e56a3c619f
7b1d71d5ec5a2517fe5071e24e87ca8cf7d7d8a72b96f8c7de2fd8a8fd6b22c9fa7ec663
2a0c1ff2206f8fed37b67aa6f81a16b70458584302d99d3e0f880af09778b1b757b18dc4
42dae94712ed2d96e970a1762791bbb4587c60e2a95754f7e6a78ef80dbd511fd4ebe809
aad1d31c280a8c556e38c23a5967f4efed2b148666884fbec4ddb8dd0c2233d6911fac7f
4c83113682c26a430c86d561a12549327c8eda5826aadda8c934a5fb332a7b673ae48d84
6356343d3b733ef11095ace10e73176350610fb44b1c9cc901c507f237bbe731238da706
e0f68152d9677e28750308a8c1e3523e90789f047fff612fc18153129ae187a43f008685
cf2a7f65e8fb96e15209c30c56aff386005f121869039f892107707aaa063a380b0f9f2e
1c1d16c46f445750ce17fec88fabb5137df4395daf636ce96d7c7c6f92e194b788c9d9ab
839ebd51ee99673e83d8a9a425ef07130b8bccfae7093c50ca65b0cc92a3d842814644d8
6ac9bb1b114f33ea917f4ad91261f878539183013b7a1ab33597d45355d4e967cbf93e8c
27675c6a907820286dda75180fba1f399e36f53f77f24a425ec6d04b53f52adf65232ad2
9d3c6a9f7ab7d5ef6ad4125cb1c864095c4c74a62e83c383801d1899cfa71fde55566b8c
19c18653f4855f89aa9f0da7e3ea2080bf5ffebff6cd46f58e541344e1b2aa70b5557143
76cfaeb1a20177a1295be39cadfc728e3bc4b2720838095503d09652ca38dec13caff5da
79ae619bfaaa201c620f954052f4496043df24358aae6ce83a22baf287a56601b0d20d5b
8b5354516439d98377002c2540048f269fae4fa507a4c2c0e4f0d5cbf80501ef0ee9a5f2
43c34b5c20e507f1f870552495d43109ba71a5e8c5b04fc4a9531748e1b3f421fdda4d69
9d503ad6a06ef4f1c11ed249d61167eb8c904d3d770ebd2c2484cf1e1b59d38ccd8f200b
e7ca182bd59af0e24af770bc627d9085efdd7895b988c38ef040ccc4468ca88300cf5ee7
ec9f1adceff4d32d4b159caae56e4c92888af77db17f282ab012f6fa8636af7b5f5c89e1
a2070ef7b63854c8769fff109aadcfc489690cd2de3c5f890354760b7376a24e1995bab3
8d2d6f74f373706d026237745becd75668ead1fadfc95455e4763ef1753c1c5bab25cf9d
763b8912bae8f1e0728f4a4d8b46465c2f4c3192af367707df1e657d48a60909eecb9fd6
a73163acdd6bb5cb94adc47c2fa008541eafd2cae1f87b29e7c685137c66979f9d77de0f
fb6fe7e18c5f3e54c3b94acb636afff49506c436b1384f156a0faec6852db4c2efad958d
9e3cf295e076395d2e8b5b13cc727da241c793a0e90f38c8ad1fcf556955866ecd41f022
4d025787e70fe2fa061ecb6ddc5986d564cc5b05a70db19546898c6cecc648d8d0151d5e
8dcfe24d5230243346f8c96cddffd986dae6e1f9ced130cdf9ada044391b1e47bce6b186
269d4def93b5d130ff540351809553d86b6e500ecb7eba883bb6a3f030e55ea4126dc971
2398df713b04707bf61a240695ec56aed4c9d9024fed093fe6dc46bc14c08b9769b0f78c
1f0ec5dfd8e5a8335e1bc8ff8910c64e4e66b27ece77c6cf664442021fbb162b3a5f7ecd
5ff144bc63cffe3b7c9a2e456b3ffc3f5de1fc5f2e0ab29eb2953bec6285e8c2fd844624
bb39df1a7de1123f0eb5e5ccb7adcc2a0b790ad1388d2f5f758998fead6cdd4e48394ed8
6a4371033759c4a2bdbd2e469718b2026701854e8c4177aef0854a606f2c790780292323
b9e679a4b0d940f92c96ca373230ecc04158d8b93a7b876c65e30dd7ae0d50707f91ea0f
6127bfa75dfbc5d8c5e5538875d75ecabbed19435ba2951b30c4d508aeddfd713ed6c51e
b7440bd1a7ce13b79c43f22410c19c92e1edab55d4531a0d3ec872cd5067da350a369b4c
6d1f5ab23da8767e7cdb83ad0050f80e8cd5c67f0aa406ae56d9c730817263bba7cafafe
01e076db029a9bc9c8a04e2d9387f20306c9a009dbb2b6092f8a78e42613ea13f6b2ee5c
5c7405819bd86fd5e3dec7d138f3be163ad1fd22251b8bf00370322986313bf542191cfc
1aa352fb79f75ed21151c730b6bb00755f9ef09ca56a0df30475fc8bce4f9928353a5af9
e41e6e0796ec8c2e3bb03fa8b9264de86c968f6f5d93b4abdc4364dcc22cbdcdd6776c73
06fa8a741d43aa950b6f55b0ab9972603093cd520d6b11335975ced6b87a93f176c32534
3fa712b6617dca040d31762d4923371f76c72b40a66323a89057f642a448a5479d5febc4
6c67ad03d158bc72aba0adf979ca1a057851429a11b25447e40779b4906bd88e14f0e949
537990706c642761e934b7f04e8374819aed98f26360a0e052c016be399fe4ab4863158c
e25d26c3d080ded8a112b5c52c9d36ed893650fb27b27adadcd8634e7b51437557e6146c
286d6212cf1b2d99e1330254d51ca5a5b380df4738b24e2bbd94fbf18a84d8d08a1e311c
6c09aceb9004f9b89386c7c59f72bc787c1ddd7de14d7e9f91131180d2691e1b9040eb1e
826034fdde5fc3b98f82cf7c80d0757b1f30656a6834c290f7d017bee5929dfdf9686fdc
be8347e3c89d71e46cf9062a9bed57c169490fc4ccc0da562ee8462b8f89d934156a5371
c60d75d19a39db1c0e97ea52f2989abae72011201b218b3adde6543ae22a33a906b78d6d
004c1d6203b97c04200ae36a772f6aa6f65a6ff2692756bff5243c160a4e1f22552b4077
ab5d3b746e63b7394f626d001126876d44926c1891175b062a81b7abb7ba40436501c7b7
f0e83934a0bf9182e9f5602843716840ebd571ac60ca198572bd0a603e02bceb7065cd1a
02e15de837fa8899825f0daf4358ad9357912d5b3b658dc89ae643272bcc29d0012f8163
58d59fed1b36c33ab4f5907263ba0af722ab320d7d9a86f86f905c059080f9d20f2a1cb7
8875a5b0a0c6fe3dd855fa01932e71ca0e8af781ae4b1912aacaffac6b2bcc8282eb970c
9e58f4c01f5804eaf060aa416165d9d1bc5410f78630c0c9deaba747b1740613991fdfc6
653915c7144c161b753d5ec61a27e2d2c646180b008d5890f7d4f3f12f7dcfb450744b40
65c770468381bdc427da9cf45d4ec30890f489374af93dbeca620444aab729cf5d26f912
37863581ab324a756dbe2ef232c5b6c27255dffacab75faa8695850c85fc1d840e487d92
6ac1c90f2bb354113b4dd3e933c3074d5eee778dc919c2eac8101abd7b2dc31106c1c122
65566817ad3f38621197404a142aa6f244df7401a5128e2ef09b36f020ca2688817eeca5
41f1ef9f6c6f70f87cb3952d1f757596be80114e893d77d9d369f9a50d6f7f55df778eea
4132c5a04a86f281f8dd2fa43941f00d8e29ea04d3d8195401b0544c9b45b0b8cb9a5b33
6eec6d2f680da4db1248e718d0eb5b9ef4ab86edf18df4957f03e7fbd62b826b146a7cb6
15de7619c881a70a0c7adbfa59e2ee654e292bb8f978e03ae4d20eafcc870f1590c0f3f9
2d758829614249a6fb416c3a80b3a57106e6bb10adb3c25ccf4258546c86c6827aedebdf
e42b2ac56550573bba3e6e8968a8d4179314ba2819910b012fa2ce995f42e8588b09ca26
b461b65db17416c471f81831a1217048777bf5105f4d74978e3d473b7459d8cfd579614c
b376e84f71a15818d1a7747e2ff8ec7bdd30cc716f6cac14c6d1ad0734cbbe426d58c193
f29f2329c1db1d5044d6fa9cc743cf418a5c8eb33cd78105c26e5022cae635b182acdc00
500cc5d5d928a1eda9ae4c5f36725e917b4eceb6f277d093c2f2c0ad6a93a49418fb7c02
50915de95a342c03e899a4152a72bb3321e1d0ce36ce55509ba7d8fcaf7d20e2a5773881
b0f85141f41c6d2eac788565de26e1b6a5a3c3d3281cceb6575ab24837088b672857f03a
4c15d6e035d7385bd0fc0c69e86186ad3a6b640dc9d2ee8e37ef001ff41fdcaa4fd561a1
4b172c10c53ee5a253659030fe0b79cd2cc4496d71fe3e96cc2f67697f66c2bbf715d1eb
93b92a68697aac5a4a1da1e67a42a5985cfb77c54d8b52b9f0e185d0d56a0a0dd2ec781f
f67206f445974c3cb0abe6d48b4745499011c5d4c31a12aa55df05e1f0333a98c95fba45
3f6c3683d2fd3868a9fdd5f3c556176f930ab41210afa6bf006bcf9da65a4af9cb74ba58
efd8977c19565f112bda04a99bfc49b2f6b4dac2630acbf2ad6ae699acebee968d961a91
5a307cfae8e40f0c9321c48a6091b4e4c9c2db9dab0114d167b1bb8f67d8674cb725076e
1cd693998ea8ce5274afdf850f3c056e721d9b9ecba2ae85574689eee69bb37211ca0ee9
ded5fecec3c13545049e908772e7eac5cd447ba50c36065b376592ea7b9e843d427aeb13
e9d78f8510313f14e05e1fa80b8f699bb4b69e5154b6209cac6b0fce230aa12b6397b3be
8c60217bee96cdca4415b0127ffcd1cfe5805c510845a2e36b58c2289b9b38f0ede55683
0e5c17b1e57220a838ee98825c789a89bfe856ab4f8c785a41b6375a4f95f70e5fa51a3b
696064e63aed3d0d396db338f22240e4e47b3aae7ad761bb0eb31c4aed2df59e57f5a610
ecfcee22ee0b9c4487c61c855dbe65d2a969f79a2db12dbdf64450d21309c648e5ae0f8b
97200658cbd9bbcc5b170e865ced45aa397c8a097e6206cfad493f8a2a94c927d7dcfe71
c99563b7e21e31bf63714cf129da1ccee428c5b8c5e957a6c4b0445f926eeb3d523ee212
e3d008be881ea45dbe6784128e12750ddfd71cea738ed5f5f21a3447d30ea014350c160e
ec6cb27e3e4371c86d12e623c4e941c2005554e7bbb340c68b8b42dd196dd04e53f9e647
286aa072fd6d2bfacf96b9262aa926885164e49c0d55c58f5e96c539e5543d830b9b0ad4
9ded5a92aaf9581b4046a0be1494ac06d8254a8892b85e932a7f0c288938270b3bb83cc3
2d8149061ac5ca00e86f192ce2e30d867ca56c6668832aa19e0f856bafb79d33b7789f9a
078a2cbb714d89e34be99277766cc875e295975771844c405557662c5e890e0e175c67e4
162659bec9c7f0267c95900c3ecdb7b2ec3d625472970a0fa3ab888e5721635aa65e1796
efe40bc4d04a90c2408771fa7cc0856bbd355d7802c3f0bae01c8ef852b3d4b3fe5e9246
c0201e649c8ced0b95e2730f2b73506216407a2999d1b095d9e8ea109499bfa9f9125418
e759ef6c9a1d5323f841c4582ffc164fc9b0dc2add5e9a5c54394fa79fb4201908c8c18d
352207e226f76c1491690bc86507d7467381c45536175599039eff203350fcd051e4ade4
3165429812a8f2d7ed455a915ba8118b185509707b652e882a007b7b2404327d19da91b5
97917c774cba594328529568d8de25aa58ed8b2a7a2f467f4ae3ec6473f48dc25fb1c1a0
d19568183fe2af85fe7590d06c133a092f2af564c6b3b06b881c7a35aa2098bdc1f6c1b6
7756ca461932d6ef0503a6f0fafb7bbdb4fe949f78078ef20427b55ab377c6f8c1bdb104
0e7ed0c229287e09261252e2fe344e4fdc2bc2aa19c14ed5dae3f8b9c2f4a34bc03fc0a3
e8968a413b561678a619150b46a60f56d8513b348160eb61de5b028aa251cddece794f05
cfd6290960bf304f552cbe6fce8782b0f5811f773cdabb686935821fb4eea8e51f69edf1
1c31b0c992534170a8e38862b579967c3da08dd95bd7b8b507ec8004317d07a2cd49e620
34605a7a6e771b0eb5b27f09d9559082c802db5ef8e0e7ba814fdbf93cdae535c040da99
d29fd2d75617c5a6bfa48a47f2bb3cc6fdeb6366f031f42de2290e60cb898a9e22c732e7
c8267cdfcb928ba30c1dacacbb2056a06207fba5a7fee317e8edd7bc973f7dfa7a7278ba
c1ef672fd69bd5ab773e8abe7ad653fd4e3ac594bd160da8ee305777f8c83d9dd49df96d
a5efbb2a283f08e9e78bcfea06f87050af4f32ae61431dc06e44ef1e579171ecc77dc45d
1cdb54b184026b142c07175d7e5436c60918e5ccefc1984a436cc62debdfbf49a5462c57
23b5f3011cb50e872857cf6fb4a37b2855964c05d37af44764cb172063b3e83729fe8c61
ecc58a6edcd31f3b8a81c3fa03f152728cd89e35a86e7c6a844aecf1e5c761d66cb9dbad
7a66b62d4dccf926a788002fd2250aeeab50569d11e4a6304da26377f6f79e61ab16f3eb
9490c61fdc0effafdfac8cc3c55769b3fa7915d4527f22d0aed9598cc18f800657774861
6ce1f96d12b2d5e130c07446c69269747ea093ba9bdfbfd2159ac4fa88e49e681e15363c
10ea5d43b3029c4d2985c4193707f3581bcb4dda51a029fbbf385d32e69c586921d80762
a9ba6727ae60bf22f710859bbf72e38d794d95d01ff670604cf2c1fbcf0c7cf76e4fdd51
418c8d397f073e3bff1945312dde6f61b3c0d40275b1b2afd9ec08e5aacd5cf91043eddc
d5c65d630b4d7041f9556dbda7a70c2182f0ded5e12b29343072e8255ba0c000c253285a
7c4da17c520cca7a345c151cf3b9bb20bac6b47158ecc812cc1eb8457efec6462be0aa8c
6e71b666b35428fc49cdf3e8b53da8d3f47000d0933d4a9dbe800c370516b5cc7d73fe7f
0841ccffbf3a1a293e330b59dd003e3c6e19d5cdac4c8d9c0d5d877c256364d3995b446e
68491538553b97606246226e1cc1202e5ce06dc808c32f39e7d353bdf189bb824ba4472c
08b43d626ab643343bd06f3b16495082f4216b3cc34860b86317b92671ab2af373302467
0e2dcf97568a5886dbb46fa98611efb746088352bbcf213a407caa5f0e9e2eee40b6527b
25686d3584002585ae6d025cb7b1cf4eb3a5d49b1f81ae74ac988d0783b1a24518f88e8f
d4bedce58552eb4b976f2a0a7236b4a21a1df758959f18469d3778877591b9da1bdca927
35067066c6a6fa75da8e94a70594b3b44272e4df120908c2edfff904684e28ec4f136d74
8d85406cca20b1fd7e02fa76fa4516674700e2e8ac6454969234661f8d6a4b94087ac6a4
3ff2e3c1f778d3bf8d0833b800a8e3c042fd16224f2b191d0c709fb68c6f15c1a1d809cf
7d2c4e2a397605e09d3d91d185f6ecd9a3389d39bed9da7c1a07aa69d64a6b0d68fa153d
1788bcd41f247935bdca0877ce7d6e11913523b832bb556283474d6516ec859182360104
96b3bed91ff815df60f334d22ed94dbe7f095b1321fe9e0ffaf1272a9195d682ea00edb0
ebf86d308deb26bcd3a21261f9b4df2199f5ef1fd1671faf47c36a01ed17a2d6e2e442ba
da751f69160c869011c3613ffe39a04d6ac9a2e3f8750acd6a3ef767a829d7ea44eb7e39
76c282bcf031d14f38579216c1e722875e9e2074344dec1fbc51523fe986728ec8b72435
a0ffcdf51bb2a9d35c7eba2f59977e233e293b2316764de60f993cb0b5782ec2bc38157c
6ec2b7f907e2b253ce92a8861b6c0416100658d11dd084431ec0bb9b5d669958c61ffbf0
e738911da38330ae1fca91e90b285bafee67163eb4f07c3e73cd54bf325655249e96cf13
ccca57a43e45f2f9e48e6eeb6bb8ee697afd48254d81b65f59954775fa8ba2efcd4850e9
bbe9730b0c1b68a280b19adfd1560c6a562db65c14e1e8907b17e42fdc4ad15f573c3463
fe560469d307ca615e28360db091ff21d3ef40a2d4764d84d6dcb20c74ccd6bdfe979a62
24ef7a706367232a07428bda59795ed3004d436d28bb3d2fa2aa91ffe7da41b9795dfcec
95232f1e2ccd7f22b1b03a02d4e5d4b262b6d164dd3d17e4bbd191a6b786a51b73b5fb18
73b9e220848dad147204de63a1dc0b634882ca7d2970b996af643e9fb2500b24060720a4
dba2f834d07ee69aa5ea25cc67b3678db1a1e8dd939a3cca3543f8566301ec11d4826a9a
b6bb806ffffc826214fdf4c26f342e8c08a69088844934235d158ea48ec297bae5d55de5
597c102baad9d6f584d4b7662bcc20c06a2410497f3e96f944a1f4c356a59b12de777ae9
3545abe6f82618d8a756d38621126c2a72d879de3bb48c3a396c94961d8d053930e3d561
94003ace8066e4c9fc4296779de652ae7c173b35cf84007a28928cf6c9d1357c19cdd2d4
fb8ebecaae9a6ed5132cc07cd0b8446f510b56a6592e15d55a0c6afe41fe1f0f7d880184
c36484dee31f22e7dc706c897a3a4140e8ca23e7ee3060b811346ef5c0a7a96fc91f85dc
90dda567a84e418bb3984707f27b6f895dd120a8d8ac26fc5018351f45b83842ce0f013a
54a897cde755efea6b6df6881e4c7709f99e3cf2adf3a2a057c694dcfce8ed3d1c0dcab0
a31363103bd1cdf30b783c654c69a0c2b0aecd230efe66351a6ae31e137bdb2bed40fbf4
f5503e7d01d40893988a7e7124d9a0dd634b2bf10ec73e53be65b11a4d0e43c7b44a5ec2
77e76003e1f7a6a867846579a2e235fed76c1bf556df5c72b6e119973383589021a66109
6729a15eb929edc1d8622409b8c77661f567e48c373ea9fe4767210accd01336d2b0848f
c101444b6ebb5e50b444cd46f575a855dcfd9ae89291b99b261e116d103601be86e1efa8
ed3a88901b1629f150345230cadc3d5b6f27baab1459b493dea93881e4ec5da768a6b848
3b70be8ed7e5d3ffcbe20b53e862fc66dfc975d40eeed3201e92ba3cf37e52fa75d57e88
1ca480ea08997ec7349521f3c9eae613b0a4833a812c52f22d7ae184cbb78573d1e1babd
5aec0c4b1b779619ae0f6763548df2d843d5c1a87bc605075099888f5256073758f4a106
e7cc2def342609131d23b37afe7d066b725901e8459a8223fb1ac357f106b80b623e7337
90512c9645a6ffc2b3a3b78602ecc972ff042c91b601bd9c7aa60f183f8e027d66c96d89
388281c2b954c2908ff3f7a8805790ac10feb971cd56ffb352e0c593171b4d22f12eb6c3
189f54d4ffe1411f20a7661b0e940401514a832cf4bae4f26f6c4b7406f14c5c52da1161
408e6f744b0a73807d865f8594c0e5497c8eaa1bc53b85563a0beb2cedd2b1a3964d4d17
ff0cda7c5fa046c0239910ff6cff575b6933bb994e3b0cccc545e4bc436b345fe09353a4
b8261e4cd85619568391e0d0ebbde00ec0d9a2a3653ae2365fdefbba1eaede62d12fcf23
deb696ed17f437084a5b2132e20fdbe1f0615e1cafbfd01c725a96c7004f8dd2e33ccffa
384a9de23c088287e20087d884e09a15227f8925d42e450c1d8fd24581f5ffbde66afdd1
18ef9df38e40177c9faa45593f282fc93db0629341fef88e90104b08c2616888a9cc9f19
95ba1fe0294a31a0b7da0485c1fe810f438f5e2cf999f1d71d408f48d7101777982a6b97
31c86a94567a08c61749c8f8f8d071a3817f32c40190bddfa6460b49226c05fee26de895
2a18864838dbb1c08c70e2f55bfb6e49e39ef8518d2b7bc5970d1750347a30138942b978
66a04a0757efcdb43e7021cebc84dbcee34b90576c6b9876fa92820c12eaf7c9ebc71df7
19e8ae4cc819b38d3a4b77ba3bcfaa540f41f72d5ff3fbe896511159b71c2fae596da194
e630729f8845e38daa6779df23a2750620245f23b0b8460c4494bd33b1324ca15ed5112e
d36370fdd69122b35b78ce908cca6ebe452fb924bd3ae5628cd9ae02019f166b70f4e8a5
5077b9b53c07477b6cf3fc3a6223e62e0be5c6d437f7c7ce4cf14cc4e6b2b5824b339eba
01fb80550327db7f94e72bb9095779edef77cddcd6f5b1b0ab1d5aed9dba4e9ae1b11271
c1c0534243b2a6f7664b42331ebc5776002c6b9b939ee1572ef28342460777af3dd724e4
7b63c355efe2d99534b381ab56e9663b0f99bbc57eda99a422940ed877ce0c181f413d1b
db44f9d74b25b2c5e9a8811d1569a3386071e28cfe199571b1f555898963ef703c81591e
489f8825ed1b7985f68c370c0c614b318ffaf11f2c214057a02e7d1fa533e4c0878fa261
01ab0429b2f5e2e3fdfee71f2a6682b0b542740236c28fd4387ef94eeff9ec44a6031173
0f7a09e6867280bd161d52047e62b9d7630c1fa7371592ac2ca49686efb22f90a91b393e
4b792a07fa8ed68b6bd353ab05ac365936d5615f0bb60722ac410ddd8c691712150316e4
721133f3e9b784841f6ba8062ce009876016dcdbc3b19e94a6feffec0097cda497e7e1e8
05c58eb04456d22cfa0f5d43d8a74a417ecc83fa0f082fe6580bb361c8399bc457017ea8
722911fa2b9bba4af8512192ad42a71c07fe36d8524e25959d949c63b3e9d10203c513b0
13b8331b94fc255c67ac2bf426359c6d5ea4e0abedd8c2d906c7d25927dbd4dadd91d11a
412e3abf32a2d4d17357b0ea304c2d1665d9abda69d92d8249d85e5ecc6e38d2db16c231
7ac197fb63bcad7eeb1d3a001e682e5fdfb4d147d613323e7691491abceebe123cedfd6f
ee28466158a91676ccfa3ff37e91abb44ef6d243fc35207365854a82d1e4e83f513de47f
9c1f8c7b9e867cc16a659d22ad1a17f2be2a8d8c029b09f63b90b70326a3c3be4dd40b7c
40a5fd886dd67241885adbc790179165eb86729b107b4b2b8dfb3c79c166e6f03d66225e
355d29c9cf31261be5f41edbf2256f14c7647f1c2925336ed29f31613e51d33ba39e2365
311199b84878243641d2cacbd1c7d7f6cb65a88a1299b891b2bc0028a2e915cd9ab9d881
98ac666a5d57771372d6fe1c6c49bd151346fcc662096a693b6ebb09ea60fc065d8a43a9
e5134e06282078c0ae8aae15131a9a326215d78911ca2e9af230b1a0dc3ea9dcec85963c
72393fcf2a652144bc4a5f8cf2d9087d2b9ffd3e3754905bddfa1fdbe297c08f76f088d6
9a4136115cd65bd941a07ce881cf38b728bd0e45c5fb5b2e81399e040ed8e50b24d43698
8b08e952f09c373c56799e50fdbcadc8e60e41af68a4ce0c3355fc68834240ff655c961d
64fb46aab2f7fef5205fde552d90c5af89ed829c100868d857f2b6725a84e31c474853b6
0f6046cbd2f402ffa6d9ea3372172ec03668036cb5056b7e69a5c809db1c75c7a11c1d2c
3e6a3d331b99bbabeee6d3988fba6009cf55511ad2a76d6aaef002e33204e7d9eb46ca2a
ca14949b7c733bcb81e0f2167f65e5099678efdc628d3d2cf4982e5200f66df8d103695f
cf3292c44a1ba36120ecc0e1880f01c30a01d5360f1b30d94cecaa2b6d630eeed9e5f70c
f2bfbf36386d256cc528a6cf3e5e817fbc4aac90db4b68e8a76c42aed85fa778685772d9
8b54ac56594ae4bdcdd42ee12fdda057d3f4f9b4bd388a6a78ced4457a37b95b55454f31
c61779604d2d4d9b44982fc550551ae11ea03791ce57e3571721e51365ba132475c78783
48e5974a6411590fa2404ad7ceaa55b246dcbbf3ae4c5c2d123df01e323f2d1547c542c7
7af6a27d78c84c1d226af6264bd89eb4839ecf00f18da3e6601b23423362edae1ad210eb
746cf7cd04a0c34e6f9e0fb4926eaf8f56d8fad4e7447c3d23aa543aa25bca85215916a6
e55f8c92035f0087c74d7de490b06e5219a9be82bd8b3453fbf48d06f2f9503a7845338c
e0050f21aa175af401aa95669f6d1df190101cb3074efad694c492cf374c71b49ceb88e0
b1f0b38e6dbe67c0a74bcb0d5b389556d496ea4933bf6d887b4e61029859cdb74e1c5255
4db7334da06ed893f8a451630dfcf6d81fabeeb42339916460ef7fb1f0ba399940d9bcdd
1c87930438dc1233a8cb7e8db94a728a5b2ce5f5e0ffcc99ea252c0b8a12a11e44b4d0f9
57ad2902a27378533b254d2e973bc2227ced4380fdc4ced37a1862c541e6f76fe53b429b
e41f5854cc2dfee67a5466e48dae190fc408465d54a2a37295736b91e6c730fcbdc8b2c7
728151a3ae19ca5adba6fe0084cf94d014a661f1ee4815876fb998734ec51a35f1877f5e
6f6f29879c4cb762f9a9fe7a455e77a96a80d54d4acb807a6e7df796b8b9a89c4fae85c0
d2ed38e943a3537be5c4c4b8e948a8e5958185843dd981ecbd70042be452e487cee88399
8765d42d9ea27047ce26cd98fe8a3a568287d66d5480574035d9032ab6f7d84f289d9d27
ef8c0352246c69177211d5a8781c7b9f01e9b0e584d57d32d8fc9a6e9b1d2891ea92f2f5
b2f993742db2533c4259e66fd9ca4a5c1543b4a90ee37ff49cdabf32d3f2d5487813af18
6423a843791e95bd9bf575715c85c4a9c091d4c0fc214bc968c293206e77c20f6cba5f9f
0772ce13a383fec9b5168170fd18827b5f9e207f327138c053f37942f145f279ad3e9df5
dbc30d6cdf566cdd7d306c7cf975476422867a4e45d4c4a70acd37a00d5f4d9c226a6e1f
173b1f4ffc069a23077c3d80be8f31de37408b40ed25909c3786bfda10e6b68f6d7878a2
dd69df11491f72ee28b92f757fb81cbf4fd1774afb72aea08edd28f5a698f62dde6341a3
15d6fe7dfe026b0f8cc3b0c10daa9df9415d50c301beacbc324c6e69ab835e760df9938b
9358f2daf269adbd4c2228339e1439b1502c0ec8afad1ff03e45dbd8a00c61f346dbff6f
c5d2e0c2c7c1e57629ac64ebbca9499603b418c289d260fbeb49eaa4df929d339da2507f
91ddddbe0c42018d1d02ccb5528fd38a9343b0b2c11fd0c122d937a32bd6dd3005d9bc49
9213282c8fee44efe871b45634a2ae2317483cc50bf747c1b75b3566fd7159599fed3e43
5d94c486882dc8d4f59c7dc0e32cd6dc65c6f2ea8633b26812f0483fea85faaccc9997ad
f1cb6ef2794d31c93f8973cfc5f685d389d72fa8d3fca23a0910ef74ed2b62a6156ff823
fbe0f07957692d073592a866c4f3d1d65e5984aaaa912138212002e2a27f9e7ac5959258
56f4b82b586dc81fc8bcd0051c656d29cdb7a00c5972eeacca11e825315850f7830f9f27
e109078225bcb768e30d4d9c3ba59247ccee65a615582b3f7ff8fac64a93029435c33b67
4d07eab682b00992e0cf34e833eecb512f9f3ed96044e551dee1489bde9e3b8cb944ac1a
e2454262b6e324b8b14a911a4d6c0a4e7e7bc4193b007a21d2e1258123dfe437fd79bdd1
1634e7c0139151fd11f999fcd6320d96204ffc4e14c2ac204790bd75347f37fc90d5f766
6946f624ec235d7aaeb0bb2d6f5b65a6363e8ccde0e752ab4fe89ec036bf5e7148264076
87d3848167dfe58a593363e614799f66b7a3daf032d0568efce1555a9d34f0959ba40560
75b324f40900453f85b4fcebc579aa49c399407e3568acf107180e1a18756cbb65447d5f
8a52ce871ef7c0afb08f3c9933a3120709f92928b4a11dec43f93b9c738b5f6695a6ed66
156e10818b642a35637fc10b72a71332cb20f2b9310a078eadd837a701f2fa337ebe9751
23209713c3164126b419e563b5cb8fa486d5a5c3becdbffda384498e8975cc11a8bf39f6
cefad5c7949f5e2b18ce35ea14941db685bb57def608a85055b030a63ee772f652bfe1bb
ca5a934ad666dac1c245ff4cb6d5ac7cfe451e145687b0036f48be24c3c243766fb83ccd
1ad177e1c073b3a31f305185be3090cd092274a3daf83a30adb075fa5d6d7ecf3afa558b
bec666e9f440472509dc42f83b4dedc2f1a9066a9c0c3006d2c81bcb446dddffab60d50f
e418253bb740db8c6ad7227c8f6ffd3c6688dac97da7a1de93cc38aeaaafc7024af8495f
b6e64987a9ce39501d120883c23f386c0fb6858de29b5fa124f423fa25fde6ad430ba95a
20bd264fc4b3936d300eaf7b1a52c43414d57ff96c9887fa14008a83eab4ef6d9046498b
81dc954ac86e815dbbdae006c9a3741f5b7296099c36d51f1b5ef4e90afed33f203ad10d
2644f06734eea5ca1ac71f57e9a7feacadda4d7c762b79d9ae18f83feb5b896e7700b3ec
4e152c8f230148cca856ab6ef9a03b68d7264527ca5e7f2a5b7bea55a84b84d73412124a
854938c8fb0c2729218c2039e4ff80468251f8b61c5a9cbebd2afbeed8acebb88c49d7b2
3df3467772fa48b4141a19360774e8532180d6d44157f12d9ae99881e773b819a3cf5dca
715212ed1d80d896e3f9f1b8fdae40aae6e3c6cdcc27f2a46f13db952a5dd83a98cfdc7d
d6ccd43f563c7d1cacb8c87846e2cae0e61bcfbaf0511c64cece7cbf39f41065259b59d3
a7c416f3f8191a574436f472bd1f2d08e12d48e61bf04b996df5f5ad31248f7c7116a3bb
141215355a96c7bba518542ba57f97a3ac4006db00d3aedd788b1374b60b9a60a01b046f
0c502b24b6bfa2688bed45a7c619200d6d074897127ea2beac1143550d28e37937710212
9dc3b7ec2100ad8a7fd9d0b1f4e5dc3602c451ac9b766fd75b50fcce8116e65494f1baec
a068ab11a87e55986b0f59403836c1770747babc16486c7e2bc0454c41cd3574ee7e7010
aea00366c5c0f30dedd20209d92c7fc5ecf11edcffa14fea3a1f7f87a0ebffbb9d020088
eb6abdc5f30370f9b68b014f5fd0bfe265e88feb2820f4f31ec080bcaa441e505cc67202
14e157d524eea9ac2de246410fc48b205c4bf96c0fa2701f2157174b9ce5be642c9b9958
5e7aa7c9a97e4c1595537b57c6187a0e01c2073f41ddfab5f818a84af8a579c606495038
7732faa43bf0f4cb4f503fda1dfe8e320dfd535b83844651bc5211f13ee671d8cc5e39fb
b556db0586b015275f363947b11bb4f389594d3f1a322ef4a85e119dc7341ffcce33339c
aa2dbbc7b695b2c4c7c8ec76faab07519bf813cb9463d1b3bb89ec915ffd7ce144fc385e
37c441511fcccc93f79c3735c514a038e224974bedddbc0568c2ab511fafca4bf2463b72
941f7c6e7c3ee143dd0b8b25cddc55bef7ea1ffc1f421bafb455dd20987133f9a5b11af1
4f683f5a531e081a6d8392ba434d6516f29aa904bf3af22d1bdd498d1e45d686bc79907d
68f32eef0951667d0cc82254d2b28485f031d7152b5a210c7da549ffbf9616fe3ca70a2a
487fcee695a30a717809a9cd13e4ce74e440e64879d581cafc4255506235758b221e137f
06aa45a82c1b04a7e7795624b4042e947e122692795db2694b53c2a65d40f6d6dcb90cfd
bcd2a2b05a51247bc3fbd65fd563e4d3463d65ae64748824e991db0688bb8070bf1b0ac3
f92cf8800241a82232859ad895544aba1059f8d122adef09f1242052e3a7ae41af44c1d1
074679386c1c64df99d1aee0cbd0c053e2bc92e73798a6ee7f10fd047655e30b44f6faa1
ea664aaac31612878af2838f697b1d6701720db2dc4d43eccf53fec11ab85a4cb7bf3110
956dbe94652414ab740d48a82e363b558189fd4385932fa10e2f652cccc80d3e49cf4f03
a79fabe4d501672bb5ffd87fbfe582f8323f9b581255d443e9928f99374042ff0e903ff8
374a0791984f294f20110fbd21ba7d47266aa0c6713a257590fc3000bf5b069952c43f4e
6e981644c93fdc3959b85a19cdd7cd85daff0ac94b7f9065776dacbe38c879bcad8928bd
63045ec91d8d6c898de31310887d8827553314b81ee2f8f451b1f3b903b704f284a9948c
8127114d7ffe3b5f6b9956d6b844019ed921e1eb99ed885f4a886a5d06a705020f682fce
b65d76a0e93d09dc794d6404981b15599963543843db07b22f9d8817fde26c2e9770aebc
dede52d52763fdda80793aff59168cc3095844c934deaf91cdf0a3575a59b2110ea75f89
2aba27563db603e0a3e273cd52bd1b7b9a00a6422016f353f721fb73eadf0183ad9c5d7e
bfa16b6c344b37dcac57d04777b5e6ca238a223406a6d62c5f4e3ac5e95c26fc44ddf4d7
cf17eaeccff7e32aceb2de5309a0ed16ccc3436c3c5e83763f3c7d7fe62fed147400240a
a5845a29ee0cbe8967ee998da968363cfd557fba868bef4d3dfc8badc64bbf085e8920e3
86e410147ee05f96569d15b7be57fc1e215306cf2473b496b3dbed8a03a86786de3a3482
941bfc14c2379d12b13ed8335904da2205796d090b210e5577a4c9370447d82fed4d13e4
93f23f9d2518b04a8eb6c2c9a20caf3ed8863418937ef997bdaa16188e5bb72f58be0dfe
0f53966f68a33b7761a55507196f7ed11fe7ea92454a36a7136a4c2340cf23dfd7c82ded
d2bf24361c7432d43edeb11e82e4f02b44c69e14ae76a5cafe28fac7ec5eff6e0bf70a2c
c446dacde623c71b15f215bc0ea3f29c3054a5e7ed80d251ce954ec3c673cbddf46b0508
03b756fed7f2a3ce9681b02f7237f39ca6be904b141658bad19e440109e4ab2afea6d0d3
4fbcd6949f0173fa8fb26a865bf78932ba485e4eb2e3153f67d6d885829edc92c6282fa8
dbb7fbb9d5773ed10a884b75751336ed4d4ae4aa1445370c637164c4ed8c7abeeac5550d
8fe9041048592f3e3ebd3319ab84889ef5a01492b37be5b33bbd71a1d2d2028004cb6bbd
5c40ecf6d6501db404141f5a4912aa5e769c0faa5f49f648a5e31f016272f20720a88013
d0773d9daef15f019c5bd93436512e1fb2d421779cb98ebb44578ee80dbf5c41d626a16c
f7dcd0c64dfc17e25fdaed33317353870220804b5905a09a06720c0b02b9fec6dd1df7c1
2b3ecbb2c2f3a11890c99c72b24fd2b7c8fcbdbbcbfb1b82071a471864a56a80737bffec
758981b0cae849c91a99f9211dfb7ceec919f27daec01aecbea6bc4527373700543a349f
cdf67007dce107b0bc8154c4b5e0cc1f8395c0e20baf6758fb5924596346f9130ecbaf00
e74f597ac02a396787416143593df55db0d65fa4fb649dcad6c240f7d75bb86dfa59240d
5307d242c2a632a164bbf1c3b160d79f92df17e7f44afbd50ad0c7c347f9a59efa82de4e
7eb22139597e4a63db381b3ec64e920157b3b9feade5b7dfb0e45fdf5152e4474c7cef1e
44ec98e58656944022221323396014dd82cc6415c2e5d84baa960b903b2b015e97004513
8868af70937d7e244a723137ec06434d5a4938b462947d881f5616a43def8b0d5e8dbd96
e1b4cae0096933024d5d466cd20379f3580a16a4e585660f4a10ebc2bc961aa6f8c7c702
ec77420973a750086b0da81c369ab140a974f816e8ef9526f635d234862aef4434cf433a
36da55d1820730e3f6b8b7d3074391f52af568f0b9715ec604f67bcc953d5364d0c59bb8
09722e940dc03bb446ea9ee81876d37ab73f6d7f2450513b149dbfb9d666aaa4b2825326
7d09c16346f48a987b0a4f6d0b94b6678be894b2705ecc57d4bfb8bd9a0642ceb0107812
397ce02d48c95ccdd02b94c5d170c9e8917df5f495469f4eec5cf996fd8b63fd4385d188
0d32eec5619eb68277681c27c346837be57ae361f2e58a166c45b365f8ce5cbb042b319f
8ce1a9bfa176fc486066a42d1ccab1bde795dcd745379347384803d6eb45655085fa8a19
aceab8f5a48c366dab19131d571038f7c39841d904b73d616c60859a712ac47d64129455
dcf2b3a911f9ac1355729af43d81b84858f4026ae5c7869009be98458ce46af1657336b4
e371f580e3984c95d7eb3f4ea7217e3a1923f036ac0515e9ef64510add0dd659a8b01006
ef34eae18900f8f643024d7c47ac37a93811f9dcd7ec0b3e5a67b0347c7367e4cd166d9a
d720c749d6c31732c9202e53094c61c2fb5ac85ad0c74256caf0a837e2667ea086f64a7e
01a503c5779839943d08670b374d66da270b2205b8410dedc2cd4e408d2bc95964098eef
0fa1fef50f903f23b5352748e0a63ff856720964bdd5a82d67a3637b2a502a9c14e4ee75
2fdd6ebb1d06547668d91fee95544411a0e3d0e08851c8e9abe33e81e5a3b6b4544d3f43
cebe029b9a0ad70e9873f059d83da4512deb51cd3bae108db3ce4e5c937a0d66dff0f09a
cfeb15a213c368a8dca6d3870ad36244c732c63900221cb323ad5d4a39a03e650b0e55cd
cab976585a806a1ee15e8e1b161f9f4c38d2c4c56d7df98f1cc76ffd4aade0ae469c12d2
1c08aa8bbe9c613853436ba3a34b2b5161429ffdd0bbc5ee18f17261f90337a2496cfdcf
3561888b0a068b4f8aed2b07e25a1a900b4d883426e7db43e7e8e09a0044b695360c379c
710612bb243e800c12af9fc069a8bebe65e85fdf4f69bb9e82288932c8e71bcc0e9f9bae
198596918a23fd1a844d3d0add4bf29e050840859513fa788a7bdf2ed26278e558c7ef41
bfbe49d80b4279cd4432785dba164e8c1d66ec773abe4cb4859d9b83162aa2aa2d1d69a9
27ab9063686110710396a6c89035c72fdfa15f6355898e012b29fafa5c404362abfbb208
ef77da4b0ae5e667973dfd692fcb2a6172768afa5a1d6e54ef77973da2330ee1a2333333
94e3c0541170992e81e53431b0cb32cd916d2fd2ecef7c6450a65efb7bd5390e779d02c2
23624f8289f05c97b1f5049f6c289d3e99401362cd1fc2316bf023f9fa803e4428f04fed
38f24a41286dbbf6996668c418ede986e121bdb181311bb6047f57521534abc445548fc0
7cfec348d1f38120ee0edd012349a95cce8596345e12d48fbd5b198982f53f342dd7585d
5937690cafa0433547f7cf5511d55572464c287d0613c955ce1a753c94e322b17c5dcb9f
97a4bb96f05454624a2585d0baa4d968b644b6476b9d3699ef2934e5e016bc68bc44a31d
b275036b7df1fb34d9fb7154ce8081cd45b8fea48b0b6d385187e50f72b5c005942f7ccf
9c69cd15281d1d17787dd3da8abfa909d04e5729d5768cd3562cc3a4adae3cecbc8463a7
d461e79bad1704e8f99dfa0733ba2980fb7bd8a9de9f611034612b04046ecc1028911391
966b4e20a06f0a7fa3a7790edd7b0a5fc89d8c033654cbf400355c95cc71c5fd988c1093
7825291bb0dd261c9a15bd46dd5f38bc48671efce1c7166d4631bf7e2d37ae10b92ae589
9187269c7be844593a34f14c22e5dfc002299886e9e88920c04b32163478e94d67cf349a
ab6e1ce0f24a704fc7c61c3f72ca8f25d1febb488275188957a7a0807013c750a56532cf
1ac3d98933923c54091959243678ab0bd9c9c311347a94c354b919904fc2f932b5aff78b
e999d9bdbf0790a3daaede99b75be8434f58b30793f787ce9ea16cf7bebb58d173edb3a2
c874c6459c4eb90c90cc69424964ad7653c1b4b560670d03c0023710ada3e82a74e99ff6
c92fc1dcebf7ff539cda644b33c8817c098e32b171116b6c91b2ebb646d38711c0503b78
9d8f214ece5f572ef057eb95704626ea457c388f573b76d708af8ad945fdaae613ed0074
111046f568a3a52880ac9a18434eb26e23250a5f8ca9e2367314cf061a6389f938a46f74
1a75cc986b5cc1916b0d6b6a8b24fa3c7910d37f6c45c383d9a5cebc383a8ba21706dd8c
c77e41b83ef5a6b2919c8488a2ab531e294e14aea3be5899b2516719c4d42fe0e99d345a
bcc6c0bb3c86141c8df26be16acedf6efcb4c23339054f12259218b65de0d1810c26a61f
07d6081eab1d88267eee45bbb4e4d596a5eed39158fc340e46b79a3dc4e005575adb7ccd
77366c3e9de464a3386cd8403ca6fae069ae7c30ac92a66fbde38648354b920c4bfdd078
cb4e3c591749eb0a95d4312836a40538b0186df69fcf9034e063475005e7166683c99459
f72944c17db7cf17c5e2d7147c41812531bed22b06ae219ca466eae8ac110c777f421313
28d391b06afd295edabd159503b85be751f5e2c73a83843532f3fe09978ad3a9d2d70480
7535f2602d22a9c7124d5189f64e8bb31f0de657c5da90bcd22016a0c6c24bbd2e52d166
b673eb24a11489a8efa0216e5017099064404a42821f008d4fb4748821879840da83ee33
0d58fa9243b890fb95c218df025406bcaf2f46f151424c1edc68cdd7a7f563145894905a
7c1ac2dbf1536861d9c8c49f5b52109deb8d869eea753ef6b119986972baaf5984fa3a92
ac47df9acdd08fd8d96402bc138737074139004dde538001f492db2454acb62fbe69a8bb
ef1b2bef5449b0635ccca137d351951dfd6f8724293ec798d8d155154472a21882869f0c
b476b974e316fa7dff1e27329a1c7fcf9e6ec8f52b6f514e9a24d897e30edb56bc26ad82
c803419764877cdec57d26095272fea8a1d39728526cd39b37ae184415169080f33e8dca
fcb16fede8d611919ff2fd2558256529ac18cf25180da5e1143fff43b62e63fffc7911b8
d8ca563a4c0ceb7872d04450483c9a92d66a67b005f26c76a7c84be5b0de4b5176d272d7
2e8821d944c4379ff76675831198d0f018cc0b3fee5a96c23c620b31950fa525e054623d
4ae2d748229f89c74f29311a67dc19ab38d095fdf1e4f6235de634465a303b6652f97ed4
f68c4c46501293a51ad17573a36f48380d69b36ba9ca959640e054812adcd735a2a5e4aa
6f7e861c5f94cd96f49599ee4ed6109ce90a7e4b635cafaf6fced624c78cb1e33d8ab8ae
57fdb8e102b763d7dc72e7c1d7368e8afd91da0f907ac49da6bb122aea6b40dc91f7b984
619a41b94c61346ccdee3000a2572cab72a9c61f22f0c9f6fe8ace86a133df0e777d7311
c0a2403f22f6f025d7cf76cf336b0460a2cb7c70ca82cad4a34800ff9a3d2544a2c3902a
20479c9c2823b45081a88f0c47937524dde677fc4e0421a12caad111fffd68aae2e985f7
fae3c42684d1828e413c2463e36aa57ba4220915d0df53078e45af3f82f0a96b8ac894e2
3f936e2c2571257316e334fd69ab1bee291a069d97bbf7744f33fcaec090d2c3a2590e19
3749c4ed2d349019ca1c78ba719d0b173c01a406f9689be71b5d8814645148d6427a7795
309c20b116f2d294a2264f85b6442fb53567c403f84b2d5774681eebf475ba5392b45b8b
a072b043361e0faecb37bb30abee8047b5e58b8e62b6a46bb0210589002ba72418b77a7a
0cfed8b2592ab8c836e32db93e8f81c9c824b286c3d5a74908661e7fc3ee8ba6a1041303
a41927a0dbec41cc5c8348fe029c90f1b8bff4c46eb8f9eaf914cb1094727e2a60ec8cf7
beb254b68e39f174cf001218d602f8bfa4aa578e42cf6153cc985d63ee4b2008e84a322d
28d9fdde76d293672f458a00044b8777d3312c25f06947f30cae548d7e62e9df858d9a56
34acab6be183772a991843edb24b152f609a533c8b255ae267a76d037c8b7d51d9c0baec
369e41f554fd80dc19363338269cc32fa6c84acee83e557c4c99d836a8f716d0f553e434
56c028637680ddb4cc172f05b44042979e272025f1c1c4080342f01cc664bb2261b360b1
915d5f6cc6a6353ead704d226a0603533b88085e41daa4e386e5a61f11179f9f46713b49
815f1fea97176bb2cc876d956ec36e3f52573d246dc314e3540704228930625323e5406d
246bd0e4a92ed650a35a66f9d95017028b6e76475c8a89bd5457c050e648507e11305294
790e0b699f292adf65fc733283e10f65899fe5a90025f8d3f3d3dc795350fff9a414d052
04a0e773b83f1e4bc375071bd76a79b37269e083cf75610ada9a3f7f92435348d1e8f0bd
e0298f686f9886b0b3dda993ca7b81440dd0c4a0203511f396cca0820f932a0d7e3bd539
6d3da189cf8b6fbbacafa639797e7ea35bc2d7a3bf86a147a2b442744351f18d9800be29
e1a22a6b94af464ac0e9ae6ba941412d046a6f68f5c66bc4ff01ea823b10695750efc08d
655a210ea3a6f754164218903e6d87ff6feada7ccdf20eef2f2b7d4054860d0f4078dc93
b19753b31b60f2249e2289542103368dc744aed0308a09707701258aa550b645a0c62eeb
70aa16d9d1d454dc21541ea0093c95e4b1ac3066c5ff8a6efbe650dd72d0357b977f091a
1943be11d72526ab5977bc123553837201ac63bd6460538ad9a51d16d53aa3ce8a940f63
68e880d2d398024f81fd941b5efb69ec37f7f0d27d12c6388d8b81d7a3d09fb27d58675d
563aaa2a8bb19177cb3c80eedd6d19918e418797d5fd7d6bb80bf364c76b583c8c2d2bfb
e8babbe15f5ce026d7ba1a38236cf4e9cf4c8cef5eb28c90e3709469708e84ee8b2e0464
ca873617c4ef3b89ebf2c545ab57468d00681e5e76d7a566ad4b6a04ed121050f6cd020b
8fe97d86d507672f4131119fac1e208b8996d0bc615e1be102ef11a36af4e47e2531fa5f
8e77703a729bfa9a86cb0400aae197fcddef9867f082ac92251515b5cf6dbe899026a03c
92c6b0c730d5047d37fe15c7323a91352b51dd84ae186f84ad58b0ff3babe6c559697979
fa8dda9466d0b0c6b0a98f73850d3860396f62d1c99308e87ac65f7f3678488caf11db4f
e25b680bb1c59b523a8b247ca6186bbfe83154bff4ec5837ebb22bf46c9562d9cc8dbbe8
83c2c1693519fc0a62e4eaebeada8cb5ec8cbb07394d0de3edc3c1642dedae3284db2809
e8c96423887603f21a6befa2f9d04a1231dce20e30ec693625133c0c59688ea0cf71e8f5
5212c7a6bbf7477b76f01ae74bddd598c40c667dd6b79a9496980420d8572c0ab33528ed
8ec14635786cf976273fdc4dec72e97f02316a12024db17f19af0d475ad3b716b69c1894
a2ba92c0bc28aa0e48110548cd0ac7b927cf6176910462be769ca3b05ad8738f65efdbdf
57859b378bd5049b724b3e25743e38ca652fd930fd917a33c280547d93558b3118286676
6096d5c03e46685112b287bfc3fe9cb017bfa7cba1daf6c2a2dfa2904725db0ec18b3766
7609745da6f68f1b6d2d3f291be398e4c549553995f31b5cec432642ead5099f921f39c4
c6812273368adcd7cafaa9f430da2db42aae7b70edc6b7292d361f8dffb30826e0d4ce8d
5d03be5d90f8d0ee1aef584ede928f4750d0e38965e54a6e3d16387f9207ba29d1e9d414
02d0505a8bdf1bb2e98849f4674f2ed4b0b925f759366b382ba17104132438b701dd44bb
864b607ab6a6691ad6b990ef6beeb85df7f73453d3a49fa8543ce2f2c79aa2adbfa23d65
22cda235f789b5de8f541cc4fb29a27ea0e5d929126249657f0e1dccafb7e7acc1483d53
e700a24773f3383c4ef4be37ad0afbe33b48ff7dcda46c76e3546c22faac08d8c56c134b
ab9b97bf9b2ea9afb3a02153f875cadbb019476a0dbf2af5355d087b8902a7d608057a40
7bf06517ce4fddc682daf98c1d4374a6e3cc6e4ac7bf734ebfd305fc26e9cee8adb8d57f
651437e75e78f5eabd3ac22b2876a1d80888acb8f7ce44a618ab9c538a7c4add506ad84d
45ed9508502622f27471a8a946a2afad23059bb59256c2ce1468f74d9d8900199311895a
3449c5ca4a662ac304813427a6216076a8d2153102d6a75b54c80b3a63aef272c75d3999
058145c18c877ae55da5199abdcec1232c7c7ae126025fb7820e71b017f3d9463dcb57de
a40a10724f62834234fe95ccd97fc38b734309db5658d40f6a07f21221a99afc1eb1b357
ccdb3e87401b08203f2e180fa406c8bf1e2bcc001c9a10220ac27a8073df20b08448d14d
075a1c6dff5f2d4f0073bbaec9864d8e10cd28bfe7b2073ad043837befeeaef78bcb1167
5d940d62d53367d042d99f6ab21583f37692cb090da6b7fa13cbbc730c51628a8bbf54d7
2d038090059f7fb6678134cfe3c74f63f4db9e2db1fc311d17cb49d2caaf0c1ccd7ad384
b0464e12c3dce3b33b2ceea4c614f7f06dbbfe3b3e4e427a4307fea5bdbfd4d89c06357a
9b53ec0a5b97f76b2fb60230c7f001663efc2705b9f3155fb2f280424a18e66b3f0c19a1
69c07cf7d6e42028ebd7315f37abaea0192a254f411b3e74d178c4080aa7ea00ea9394e6
7479a6df04aae26e8dd06c71abd557e6a0f0ea9fb5569cd9568375357adbd663eb511243
a7dbea1d4329384d5c4c108902a8b6394fee46de65e12e55d2de18171609c4cc3cb69c57
3ec490801ca75f49ae3b4bb95cf73258b9dc47aa25ae5c6c2bfc104e98e7141fbd3bd426
806292b46537b771db552e5cb4c502869c73264a9d27457994985f616a805684a4d1a17a
013514331c2b497eb005c04ebea0774ceb15a389db97d03875694af84ca396802b52eb5f
33a75ef3fdf6cc99d6abe0286190094053cc9f2575cd29e9f4644b37aaa480f867e859ff
2cbcb1fc752581ef0b44d66e2c0e5544dfaa81dae470dc8ac9e406bd2eaab9fa3b108562
10925a06ebdc96a21126260e12f705549ca990b7d53d02d1a2a2488f5600efc1614269db
307930ba1fcc7eb8b56a3e76ea19eeb428ae56fe6e0a12bcabaf18ebdc39a339748dfc99
2940dd533318effd2ed725a8b34ad51c5eb15040be97a76e41766085dddf872bf58ef947
f1d3dc30e5b6fa62d14341d80a9dd1e7a6f4bda7bef5c3d706bfac7d984f05b2eb386fc1
9b7820a9bc1b7cf63dddf1603dd9179ed2ab4e630eec053bdfaff79ddae3c80c43d01a65
7dbb31c8d4bcbdc6238907938f7340ee79fca9526345fcca71659d8702ab4d79f100c10e
b3cfd68ae3dd8193b2d79cd4fc6c10323a72acc0c1602e7ac07851d9993109a548a729fa
6114b34c1e7e5c2de03f00b38189df5bcb9eb53fff530e13fefc41d43015349936313e97
5eaabaa0d50a5ef3775f27bb8578b4f4c218fdc913c6561415390356ab8374087d0f14a3
7609ba1bc85944f45e40f63fac77e7faa64a9abf04b3f995861ad1d5639b00333c3d9534
d8fd769e10935a08c6680b773fe598c74c45f8086531b3c5967feb4fab68a8991a922ad9
5cd1b733564319553a4e0d00b91e13bb2bcf292a52fe79bb43222f1fd382152d9731f206
d2e8b5ddc3ee459f5545e2a7cb8e14bdad71b0ee9a2dfa7eb1f94c1611478e6eed9497fb
0b2f2f8369e09f809beba7fa525b52784476f5905d021484706fccb9d3ae2140339374df
07bf66e806d2a012a45aea23cf526fccd8afa51c1704ef151980e9395b87f920ee2c55bc
30718f313a32eccf895fcf53474d634fd536fbe2a60fcea565d528836e217960a8eb923c
bb8c28719250e6b9eaa860e9bb509b4e572f0f76fc59a0b9b79945326449cd6a43643a39
8fc9b2960ddbf0ea8c5f44e81343db65285ef7cad4032311198c86f11bdd1ad85a32d0b4
2277d1c44b64f34bb515c50ddfeeabe6a6fbe0e1152a0d5f42c25c65b1af49585b727442
d648db535621eba7bcdad1e49009e458b761e6b43cf207a17c90d38df29ce4ef731fad4d
1fe5c9d699019e66ef434f0191f9d2103bb815c9289b8e5fe2ecc7cafb0babc141f6987d
157a6d3f0ce2b0c95fbb98fbcf6631c6725252dc2d07fa365840881783128edd19683fdd
0fbef2924ed82e0bfbc4ada06afd5a3e13e8f437be3fde8b7c09c07b81dc7d7b380ebc03
6fdd136ee3249d26ff04671a005239fd1d34fb10dad13573f8778fe08e0a4535cca182c0
46de9bc86e5bbaad3edf024a9deb2c47b0273fba5127f10e8f16e3e078e868dd92fcacf1
2e20cfa3649825a9f90e4dbae9134498e6be9d7aa7c108b4f74ed216fa81cb93acafe20c
e521d5b68bc810f07b2c0d588c66e0142a08b746be47a6131f0c96cf4b35df5df521e3f5
079e77114ed218095f26532fa326433464591b9c91e0b4e7c88ed8fd28a9de3a0f4658ab
0eee021b782615d101521d8854d17f1d532384f70d420b19d51a798911e9a4b0a02bf1d0
8ca8d8bc73770f2f8adfa8caef4b0b9491128d92172314cc88ed29bb3f36e0d4e45f5b24
0a5866ae7e9fa528141bcfe562bf0ec5dbf6a72928625d53dcc1665ed9c570da0f90d962
71c39bf23386e10842384cbed77a277776a26ad8349ddc81aaa72cb4e5fd3647176bdf8f
b75653225d20e090fdf6ad8bfacb57f7199aebbbabdbbf2cc9fb2bed126993994625bfb2
b02bf4661cc2ff16655bdf9aa0c8adecd588f86afe1f1dccdda5b3ad3d147306b7027655
e569c347679f8e06c1cc69b0cd895007e9ba967573f34bc1bdafbc48ac18784e731b2ad8
5bb8029ff7efa10bc65e65ee8385c373b1f35140174119d371d7208477ea4b96905d5b3c
7aa19315d888f0c27df9ab130d088ef8630d8e6043b2b4964f35190795158e8a2c86053d
735a0b6c09837fe0c7ad008a02645de1eefefb69266818e43d18e9bb3fd8d06ff8dcff00
a08be5063bcff3713bfd22dd87772542b23886a108345ab511ada67c535ec2565e617a6f
a8892fc5dc573175330a370015d3dab3e3831511c4f45650e47ec2b0e9ed0d2539485600
53be4b73f08d4c591c9b9c287cedab9714225b0fd895f8b8be8d38a3afff699af45a1a78
e7636eb6a1e93e63903ed456887b038e254070d2db5bb773c07bf6083c3ee79b4f622e96
fc6c21de0ad70d7a2045a6ba46cecb75ce9336db5135520f638700e5046985dc9e029a46
2577c45f59da5e869f334324fc40e01546ff3a18ca45aba117e47efd4c715144ce2b88f7
e636ba7f567eba02db35dbb10b6bf42c231d17bbe48c3a8814c830ea70a43dab28aaeaf9
d38ed58bef0b44d6c8aaf5dca251987bbe8abf65c9aeea3158d9bb11aa436e84032bd1dd
3fc59d1638bef23d68f3900b72365c8cf7a57d7f5a2adbe9a5820575c8222f6a3f64dadd
716cc41993f608ae5df8b481e57add72799c6e963d0a510673724580032479e4fb0004c6
c0f4dd1a56fbb83322328b868536583b1950870aee6a1a4d9f92d06e9487ae4ac6bc90db
35adeb55ccf92c06a13d402a4133c881726f49283a996bb4d872cf143750228cf3ae04cf
5e6558f5f1a7c9ba3a4faec5df1b42f614fcf3fe63753704720db3b4c1d1749dea705d52
759d58f4fe00e2b56d7ce769eb95a4568d462af68abbde217abc7718caa7be0ac62abd87
6b7dac11878087ea8fdef0963c26e0c408bfe640426e5659499c5e71400fb6bd2da7c80a
c502dca7530adf0a8941d25b0109401d4d0540c1b066f8d1b4c0d31ec486f4deb64cdd1d
d956c1d4ddd05ebd1978416e268fc6c5b9d8d9a1ccc9d674a9f55284ff16e2f17b35ca55
1413447cca0bb77ec7cde54907d3cb742f419de27e449703b59c7b0f8487683afeba969d
1a9e4b6f9b81424e49107a3e5eb571bf8113f247bca1ea72d4b402ca8d9bf0f5346369a8
166a85c3ae2ce665269ec064b63f07bab6ba55ba72dbc31c13ce65687a5211410897460a
e98fe08fbbc9e51d1202cee0b12f330d57d1855dd242e712150942049cd482b527492525
1815ea866f655b5a4907143d735112fc39fce73b4a64ae27fb5daabbfd5c901481f575ea
7f042cdd1e556a60e21b46c5b060f16c80cff019b18f5c8cbc5bc19746df440ed7f4cc2c
332f9a4dfd701f0e16d52086dd9d2e37e0981af9247a8a2f604f22fdbdf3bb01af8c60bd
e5f751a7feb582bdd26ba518ed65e585342834d55b75fd280bec265782f3f0825d37d1c1
0418c4dd081a893a8864819c83e8ad74f6b7e26d5af43b65b9cb96aee22336017cda527d
a8ded5891e0c6c3c45ebedd165f45b14dba25e33ebae72507adc80c6c458a87315d05c28
f1ed591d5802673889dc553188fd8edee3811e9dddbb6b3a90089652390fd1e2aba59051
56c82eebd95107781738c421e135c55c5b1549a5d159a20f141b6be337e6be97d4ce28c6
0dd43b500207f571b4e0123f1108ff6ecf91ee6438b2813a5d641b8a6216be6d9d15962b
fa4d04269a4a9ed2841988e67096b5488f18e790b5cc66a48d6cdf51d37989e55a809c67
5522abfaf26e24f64f88a6d05f85af29d85cfb4d23a7a2184af9fdae0bcaf009d39ddce5
17a9a187e20b66cb6caef83d46be3e7ac52f219432c0962ce25ce6d56f8ac925fc177d29
4695b168acb540fd132baee4dcb32cfaaab825a90c8c2503671617aeee991296db508eed
eadcd4b3eca4cb73417591a5172c10ec80659c56b0e1aeab4d652ca7a3f1940a8f56b27f
c7f9fc373a9356ff73438139a663fb65812d2995089ee49deaa6eb3a069e2af37a78c20a
a3ff8590220d11844500a728a17ff1128bb442171f83138314e5931b7134f592df6b1faa
2e1e827875eb62a30b8f20f5c6bfdff2c3b28005f3308678ac47199b24363caf90e3d119
d25c25aa6886f3c795b916124921a7ec3a7e1dcd5a8724e14b2ad2c3292429a8dde56c16
24c2d492fdba9961b62adfd4dfea6d4c1875b75a9049a1b218eba115606a532ef080481f
074513256ac6846eb1d6e3a9cb6616bab83d6d3d284cc6d6a0f11ab1bba469baca69b6ad
d413a303aac940e87fd1a64025acaddf56fad8d50703b8e0e58170e84c9402d228ee745e
92cf385fb47a4a6a8ab1152eca470fa81515a3cd4a50f0b29e8a97aa5d37d30ee864eaa1
c6ea5cc6a7a5bb7e05409d78d0a6b40ee45552b34e41ec701a85b0e106973e52836efe61
814262895c337f77818a36c4693622bb73e9c4be5514c9a8982d4d59e37bd99c413ab6b1
318e547250543c5ffdaf82b4e9b504803be26835934dc458ae954082aaf3029f26189736
a074bd2410a26dc2c21549fd6a8df3f688ac39746fda04aa944d3e740452fc89ba449e80
7e8c84e30803bf975975d3fa98b5bdd82135023cfbbc213911e547694a4eacfd10738ff2
5c769d90b3c07db2952cf18d6a087381c84e7061a82a8f2c557f363bf024fbf57ed53c15
6adb864264a3e01017af99a8945e281e2f7a09e17620cfb53da16adf0b66633974731e9b
0b5582639c9dd5211387898da17892b7ad66198c001334ca2ea439a91c7175e9c5d2fe4f
2158610e4b328cccfee4f605b229eca0af368f1ae4bdef7be8738b0aaae98e6b90f2ef72
23025fe9580f83e598a9dd98716b5dafdde2826df5ab4e366e7906957b6d5397a63df4da
14533ec0eabb8ffe95f421dd72b2b5775eb823361abf5e7d09c65aba75a0e8f740da40e9
f9c57b14bb59925fc078757ed7da40bdfe27cb6cdb6891c40aef75c6e4faf14e67e78bed
29249a9b20e60e69f35fba2c214fc68d0524fc5995c1afc25230f06ee6fcee651bfa805b
8d605c68881188a82c3766a8d3e9c7b9d0baca86bd6e22d91f084ff8135574b9717cc370
e125cf1b3576d3a4821065f5d47acbc450e3083dcf9c161c309ed85e527e2c09d62f9fc6
75cbe6fd83bbab3c2b7d16f72da346abf963c6b6023f8c17fb95f4bf3ade26065bc40258
a696a9d72dc4d971d0714db1c25796d1cd5edc35f64c4b0d0d83252ae262f48934cd35d8
83dc48566d4fea36355fe07d6331bb4e479a9cbd2a14f4ae61c719214ad772ca3aedbbf7
4710b322bf35fd18a343e78b6451f046973b2a99171e9b65dc3c7d0c6552669c50cffe63
a61fbe1b092023fd9fa7b994d4eaeddf920d2e630cd73b4f4d611f10acd69f0fa2aff42b
2222e5dfc559899766fd61321930b04b4f74f8d85e430dc5d5e51fdf04974bba45439884
f2a8a6cd6e065d25c66797933977bb2a369ab8dadb5f462dee044cc9114c1a2e941e32ff
147eca77566102fe5adaf9d35d6674feab59574b9d26bf574673501df856858581d915f0
97274932c9ac923380a0d672f1ab43996927f9220d1d85542796173e1587f341ba8a74ca
e6d3140a4e7e3791cc68d74054131db3b6dba7d50784647c789141ee3bc82b25533669a7
3029f5b33013b160a1aac2ca9018a087162522bc9daf35eb52a0a615cf5c87ed3d873a71
49500911ff82fd84afe0a8c6acc680611250dd9e3b1ec33f8ade0697e7aea4307d0bd6e5
d5e63c5b71e6ee5a9b6a96c3972bb0a2a7918277f6df810f2d81eef8ddcfbb862cc0ecef
81afbdc1925e982778c55fc8803c9fd33d63d7917420d434a05b9f2356855620d013aaec
cfb2203c56f4334c20deb0dd447832853ef3c7cbdf4c4a1a18a7915501f1c02c2d92d943
e0fc17a9b9c778ed38744b6499e854dca784041021a47cf56f47e53de81dbf70d4c6210e
3983415902359388a998aee7a5bccd58c7c206ae3a1fac70ba264994091e19e74ebad7d6
ba0bee6141def40b12ef360678206be58c9cebc1339af728019d27ee46f8347ff533179a
8a87e9a52cf334432a0c070112bd098b2b5d62f6e6bed49063404558c53eaa6a6a702926
3f95cfb1d086ee73e4633ceb33a1965d4f3903a37bd19fdbb003e753cff73dddd46f64d0
5964eb315461ae9ed4a5d641b59913793da5be6dcc5d5399dc6eb132b4afccced29c9330
40187857a8254f32a7d9c095941473aa87220f10bb64c362eac959c0db80dab291d030d4
b175d3ddac8411b9fd47db87f4d66415e29225591987527868f9f670f23354ac0e07cb25
7eb5f2cef9e958c536822207c7b3aaa47df08afdf426db27e291d084f464c2d92d8efe5c
a6e6ffe45a3518ee9805705ea0eb71860703080e1b09bdcbc62b91bb12885f6d36a55428
b58676e8da16a21113122cbae32eda9d057174521a080e85ba31ce2749ed411543c57887
72bc001b9dca00006a3b18d2dd44608a7169eac9e165c22ad6be0cfd6f8c72986a885db6
3c17f6b60b02ab02409e84edb45f21ef4f6549eba442aad33488cd394585cdb04e5bf2d8
bc7875ea5f17a89c0d2c76d4276b5e1c61dca11a916c104c93d4966123230c77a9e0cfe2
b582d1f35e0e52a4b11f2931b10d4aa7b07b71a0b5e82f887ccdd976395b54ac23ce6ac7
eb40155ed703221c14d9bc597661cdad5d3c51fe43571c3647781026d7bf75631e08d754
00dedc9b3bfa7c2320bdc5af73193feae75315b0c851a56c1b851148455401b91d5060f6
eebab0a7d984c5270b776e9b91aebc4196379a23603a74c6703a144b05b9a222c9a6be3a
3980a065d61daae814000a9921989b67a585d7dc3c5a514d3ff1b542ca7a6d61d1474faa
e8e81f5032b52cecffb3dd23a71f363b9b38997a549c502158b90b0657f9b7ea534e32dd
cd487d1bc1aafeeb2a1298821f004867cfe6cdc810aec891ed9849d94ea750470e784994
24211f9add611e41ab3d945442c06617f6cdccb3b0723050fbc9a6dc20a0340508136f32
729d5f9fbfec8966745272a2938b93307c113a2c2f4a925c4a7227ca4b2c1bfb52ffd418
5b550b1f7d46bd29b58b7aa4626d0fe23fbcc275f1f93bc78e51020496539c59a22846bf
4136261859108e99b39db38dfc65d8a5926f3460d1cda1ae084bfbd867f8662965e3490f
ce2e04d80643e07b8dd75f3b5d7bd601f53d2b7759b28e1e97e0d74a89aaa7a03a01fd40
67cf32e4fca63d904c21ca3decf57a2197a30e8f6ca1ec7a7b97535130ad0f33b1e62361
d57c28e522883220bb99191b2d14e4621145e03cf676fb70531c736c405117510fa3e50c
a3efd8a2562b6ceebb65bf9e05b1daf56dee2f63431f6c0b35d21091a8403cba7f14c93f
65da6b0463df304a11b88731a82224696e8821d20b506fcbb59aa9a46f3a179a08f22e21
f2cf66800080e2445a9f6bf012eb8d0b01235c13845142663e96f26e6834d73719c714a0
f7c70eec4896cd2878318f12d36c41d5e718bbb670fe1813076557618e98cca555f6085c
c17f41a02ff97f46805dcdb4eeb0fdbc80d2b426195d6fbf2a5dfdecccb121269a3dbaaa
7b387fd29c24301bb53d33728afc2ef942a3d0c93c141fe0688aa3142fe801f78e071e14
60b81e955034813d6b72695f82a7bfed18aa36b3888204f65082154c9290570e9985a17a
c7781a3f7c737d27aeab8713f4f60dbadb6c4489f2b65b8d9b37e67d222ba01b73956235
ad85c7f120ae70c8943abe2aa75b9a0f086193b200e0c7ab8a3682cd18c9befbef188936
00940bdb217477ab43c33681685778a04ef2df07f682e6c0af953bf4b377539e8cc76c2e
d4a0c905c4a5c4063d476ea7e936fc0215acf5d882fc4eaa4b4cd5ddfd3dee91a4b9d5d3
88f8ddfe2f453a0644216022dfbae5522ab652648ac24387b247e172df2febd9ec3869f5
1e2a283823d45d27c816ad8df9951680a71d43b5dc2769953a8822dd88e8137396df7e89
8f1843353be5f225ee323de85c40decce4f08497737654f33c0493c94f179fcc48b9aae6
7f833955166fdcdc9f14998f5bfdab78262f0b5dcaf424a1478dae7e04686461c9a37696
d3f500d576c5bc3066f893fab95d4e5e528d24b2729a91424ce955b9d72c36208e635df3
4f65e8cd037a50fd58312434a32ecd481d25dc5b6adcec49346bd821efd02087abde1fc2
a5136a05393133af014c079b5b138682b114c2e888cc088f795a4a668636071f6ae17e4d
1279754f0e665c607853b8581a6b32ac513e5c05cb423c21d4510b848e4d380e33a74fbf
b244d4956e11e3794588117b2f366edc542822b9332fc9993ad977666d0910f33f927d2c
0a3240252dec5600f21de52b9b466fa527d11ab6d678520f9fde4d7d82296fbdd8a7ab5a
07506bd7e81a08d4c63bed8aec1f778d4f0a7ffc7adeb82c06d2bdaaab9b8214f8ebcc35
2b532f5eeb51dd77c0c88ae56539226088722b26868be06aa7e34a77c26f40dc0dcf5e19
410b7844846f842be1539eace190ea35b735e39a80478ec8c41240783bad9d4152183fdf
13fe5d6e18efa26a6bab896c7a5004467718c45a749a58dc28bcd6d93a6438bf85f172ea
1fec82857d416a99b4f3a3870e55c7493f0572bfe01a1c1bb54e27c2a23e134da88d44e1
7ccf97a8f6b13b985bc57f435fdae152d8cb0a4a9a8ac8d84ef6305cf43b431be6380ead
79045014e912ea25ceccd3cac662a0d50cd3346d3ff51d2df318e53ae02d67cc7a3531e8
d62594c7b003a6694480a7e9a779350099a4599f3877f92b013b19d625c813b15ae336d0
6fb26510d74fb9bdb9b7e1913713d529133176489d64b8f804bd978109862799f133a66f
d6e3eb8691a07e3e9e0822c457ee5a0973866f80587d7f516663c559e33ac4dc3b948b2a
312c1665cd9d48d501dfe90d433f9604a1e9f6bf7476897fb77593e144eb774aaad5be54
553f71fbfbeba8a523867f0b40d1dbdb80d9d7e6d5fb97e639361c205c9996179d54c0b8
fed2fda3a6a7be73902659a91200c164484cbff5f02f2dd9c7b29af1bf0eb6b0bd793bcd
af62dc03bfc3559a6695f6a3a92ff825b15ee355c731eae40db47c45192f33de0fcd8e70
83395a90a74bb6c3a01a658a62157c7a2240825e93c3d31384361825f05bd01d07c7c325
2e41cedd0705b66caf706e6e3d01289d92784a4732bf5129c9a4a914d9e7dbe0e89c4540
f69ad3f4e8e13bfe315cdc49edefa773e3cd85a5f7625420128137e5ef931e0d7b389870
088b28969f16aebf32ad400b41a14e6da0622753bfd1bdcb3154d78865725c6718191f13
0cc13f0c032fe17e7bc8b2dd8f1c477910e9e43b0d4184db03c88c54b5b7a2413ce7d2af
fd17c4af31e9087a8ce1dbb756b3a39e313b2fc6efcfe037a33b52d289fb72245afeb5cf
8312f9eaed17ca255d84ef72205860ae72382ee17601d988b795e94d1fa5bedc395fc625
9e41e9cc119fc54c1a53ffb26f89abae316367926c640497b257a0b893a2e7f952cd8bb1
375fb9743c630d826fc9ae1acd4564ca33efefad3e7a517b4b25f4f19d6f2d8022293259
c09d79e40a06f588d17a30138cd634a21869c9b0f4b658242c633e97680736ae5b6ceb1a
a61bfb1b79ca3235c33335da424a6785a962bcb0f4b79300f09ecf284ec0eedd956f1077
09723dd39584b401c09d02340b5d7e452059ff02f24d7aae242898700bb58586ca026c68
e3c47775173e1437ed905d986bd8a4c1abad153b0657f2a2f5630ee3f605e1be2187b444
25039b94da77ceac4e8c325654d7c3f5c632d3ceb96bde41fa32cf343ab8a9bd220e6abd
31fc168ec278bbfb99b57d7c95ef904a037eb329771f61cfd2f67999819ce1b945e239e8
25a10f1402431ee7ba0496c042804ae4df942f4e80de9eab3994d30fb93e5a43264bca4e
876e359e4a945fea9802270347f2cafb82eefc8b27ce9113949de626720a8259d8632c8e
89633f5313571232c59afaf8dbc7bb1fcea3c3d4b521a0ad10ed37856fbfa2c8655a9f59
f6d55b45d358be433600faac9b9e90215ac489a0bf08f2b4ac3b9dc7410a5d5514499ebf
4d1694963fbef771a5a5f76757c26a3940505e706b930e11b58b22f5172de691f3b43b87
44717b7d265ac5b5ca7b5576de5faa5f801e1614f58503e6eef609bf8d3beceb40f7d2fb
a4a163ff559e683776416a90c729d7cf70e3b6d27286c507a2d30ce5feafba8e866a7afe
83bb7f6b4213e35c6ebd80d8efbb3fc6f0872c19d180ab8936a2597df2cb077ba280abf8
f477ba3aa2b0693ded051962c38e2d0b892fd4f7c06d628128c36713a0a6171c7f93df46
d8b59bf77503146f1a7854c89a94e6b65fac69c1c262fd195bb32cdcb01fb14b78dcfa1d
8689a3a8b93965e2bf2cc359702f27c380f2582de840ef57cd7c008798362c6884f22905
ffb15be3a5ca403db0a91ef40303909fc6314db8b5162528b904f231ca1b2657f2abfe59
996be76464621900ab24cc6a9266fe6bffc58f07e1d240240aa933d0bfcd87cce3e8aca4
be9f91e577872e32ca0aba10b290a28beb973d57aed505cc4ac6f13748a961be3caeca86
8f4b1b25e563836ac3f3e1dd354fbdaeb67b8c835c717da4aaf006cdfa0f1a2194972cf0
671563bc8e3772817521157fe629403282d68ade1ba623af4fa96e325862f2effd7910f4
6b7e504cddfdd02fc5fbc86a811c02b0218fa80ff6572d2261d58f290c5402fbf5b18d5b
a39a7f1c1f47b6d7c17170923ac827f215250e2136caac3b08266659b3e33c460a26a665
b0a3ad08e09942dfb391da9394c86feb2183ed0a0a9988ba0c293c8b8a8aeb1243ce0e04
88335fa5e3f2b411bc5893b77839118a1de93f0342ff7e152403f753e4c9d5178cdea4af
84f58845ba8fc57009c42c5357a03e087ba39a082640808791c90d6750bba1a7dbcac153
b2b36c0d36cb69da8203a3066edbc4e2ffca9fd8130303c769ff29deb9d16cd400c22eac
b9dc9a75ed5b49d3b432d3c068cfc1fc1ddb2dc16227444de465e1f8827ef2b54342aa7e
9ee7a42af0fa8ec23f114ea4d9b9f1a76d19952b4ed7b95c2e1d8c1da414dee424312ed5
8178b6774d9063d44c8630a7fcd26c576ca8cbc06213ab7b2a679823ba23c3c5ff8141a3
e4a892d75bf2304ae23ff845fe951eb8a9410d7c9f6f00c11ebf6655b5876ce77a4a60af
1093c88bdf2793aeeea5cc56ce8661f39e7c70f2df06881edb9c1c21d9d3bbaa7bfd6527
54da0cee3020fcd742ac99d2df1bd2aa614db9cd6c2ef6846346f083c78cf8fd8c906ff9
ba70120881d0511bd43468a22fbda61da301ee8bc68dd1da2a85df0413891c299dbd5510
afb5e3ebbc4ba7647bab0aca8649814a4f39e5ac692a141d09dfda20125ee3a606a5b2f9
4413406dab724760dac231187304679fa988ed531e6dd44ab73707d9ab4043a178088230
772c97999d5867cf0d58efa6a0230b05be662f660e539f61b5209bf65b84271bc5c94636
5c99efd24354d2d67c29bd0d23c90e6889f13b7f6c925892e8773c2fe6bf10d0c952f0ec
629623daaa5ade42705cc6f2e056a32bb5c243c21c7406ecca7cf1d6b63a9d5791b491e9
58095ad1fa13729d80b43a1310e9b31a6fed52d564d04e3172fed53a3cbdb54ef9d5892b
7ff822ba2f6ec58b0c969fe812c4e315417d069959cfde38b3658135925376437769a45a
729204b36d3ab48152682ce40979057eb21b8d40d296f272cb2faa3d71487442fde7c2bc
debfde7938180972223093e03db38a4045b8643d8b07b94aa6e3e78b0e0820926766468a
8bd4aa2f199a6e1b1cf5d67aff805677a87d09bbcb072e04e4e0f79c52aa2a284d899754
b61fa8596a2eb50dd44939e709dae7bd8ca64b6f659cb9c3b7495c05e11722ca5cd6e11f
d036a48d4cba9a428bb53f9cc199e74601ce99c968eb2269d5621951f0e63feaf3150d91
6cb9af8d61a7a95958d5884febb8255c55dbe841dfa3b145bfdf844693751bb60e8b8f57
f4e33630d6b1025035fad14a46b74c5612c6886fe91b1359f5c8dec600d7b925b9792a10
92af3f26107f05f52495fb547c26ab47fdd3bab3f7601611aedea841840eb19a1e2c74f2
9d0e4653c5752b8157ab5cd384a4f07bbad7ddc51ff1c216b910ad014d02c9bb1e5d54cc
6c313cca30088b0882ae5d154b199172fd0d74090c2ce5f171787ae6d6b20b8d2dbb346b
8683d328c385cdf183850ad91a09aaf09f1f3404325cefbc8b3ad3a9621e58b55c4c1640
232778a00d68ce5c229126d7c435083fcb299be42c8793804e22fabdba0ef12c7f47aaef
40920f7e834d00145dc6048bc7face1414abbb833f3aa6eabf4039a7949c7b99bac8e32c
532b7908ae9e57f479aec69c0b905bc9dbdb213f84c8c05791fe45c1b691f732ad6c35f4
116a511fc0346f20c24ed753c3a71d4b1094894e245e3cbea91ad4a33b88c66f5efa6aaa
5c3a83ac1fc7f162bb4f263bc88833f648de0ce1ac29b29b7a0144e9244d5aad617221e6
54303eb1d41948efce725e15d0f222f97a34058e837d08eba96d413688ff45165e642761
8fa9a7f233478d86e3a765a019087cc49245246fa87448062bcb1c8b341edaca066b25f5
1d6755541820840b6fcfab58b0a29fc717f721a1fb1790e8530b5019910abb0ec27cc378
1b2f02e8664823f836843fc94601b4051ea8c60bfd5c541fdf05dee4b6eea26b80e442fd
1f8a5d78373124d9a1de0fd120f75d76cef979a0043007e536ae6c0e2a41bdf2041efc14
7736192fa55e4ddb5a24e4e449b088acdfd4341cdec58395735f0ff5f0d8717901e2947d
fefe2b41cee445b089ba88e8d06db8dcd7e68e6b18878c188a0adaec064e5494de9cb487
30f11b14d8b45d043479144b29d2b24a769a04ad903a8dab1aa064fab04e7ab97f221934
876b3bc2222991b28c0da867f3907e8fa53fc8f743f8c378d345f16fa30bd49fe88bc400
5bbe51309a9ca7def1c066017d5ebb6ff99dc44047e6734cb2cf09f51a687d7846f928b7
6a320c6f04ce5961620fbc45125675ee5c91c5af81ef74a3f888f9a1fc8c11146e9aaed8
6926b7ad6fe87380174c7ee521b41ae08fdc93ef6e47869923320a0e7a45fedf3e860888
a2c292e011130774ae0a144c30a03b125db09c8f756ed1f6ae2fdd24921be072eacefd50
83173773ec25c9f886f035ca01548c3f7003a1501682526639a8466211e7363dad683984
e31697e64a431be68f6002026278b089989a667fbfc850769a543a6de44ef6663bb6a8ce
5fcd9eebc77b082c26cf6adf1a58de04a7ef81f6109bda2263104f0ae869838d80408af7
5d7fd0ee6ddf10b9e8fdc5ef11b2007c160a4e5f27826c0280cc6cebca0ee5410c808fcc
68ec3691243aec9d2d11c27199b76840010307f2d3d5e6bf47d4323284081b13b6f07dd0
7b3f666edd7c95be54cff195aea10e7c9b9d677ceb08f6cbdf2bd4e06056123761b0e379
8bbb0b47fdd9d1a7e94b9037a337d53ae0552ab82af21bac3f36abbd9a6501cb8b57bade
03f1c941a59cf718120d8f53cb64a791630dbf667e155dbd6330e6e95130a5fc2e2d858d
588c2d41bf899fa8e616b88ac861b9446421a8ebcc95e9b8cc764ab7544f737a061313ab
6b2bcaecefa818e93b24b81b77dd5b26f1763b9bbf0122f9b6080f1f8cdbbe945562ef36
c68b9b748e47ca9a2d2552180e9ada5c9162a742daddb598176cfb66c003c8dd033c2d3d
ee7d99e3d24c9576efa6d99497f0084cc6009e806e87f0c59643fadb829681ab04bde875
184136013df6afa285cfdba64fc6ddc097e3cd8f509e38c77ac7d8019bf93fabe1eeee13
9b04160b1df1ce39ef794a387ee200899d115796c233590e7981268d34621b44102db07f
caf5fb3811f2ead4c37b5bc2273d4d884faf6140f68efaacee7d5334825e017cf101e59d
29a1fc9d5d1ff6f1beddbd9da9d826fb13947263b0497aadc269b27f72c0b1d4d0b38eb2
5772d00b509cb8c204d8ec4e164ea1c31875d957571970c53164d6881b48e1f78efd6d9c
a4515db0a3987922e0febf0542beef71c1649a708cd31e46c092c7e5d3113dd3e7095909
6daeeb48e394de881ceedad474c10827cdf1bdd19c114be9c867bd0af8b129942deddd65
b2dd8ac57b7f53062a67a103230e6933f2a32f72430f3236d8031f4b2b19daa303e9ee7d
b654b299aa1a8f623d54e95dde97da09906d2c6886ebf96f71fe67196c2fc27c44aabf3f
3feeb3a8845e33229dc1fb8be350b481851dc322ecc614fc2be77fcca45d02952497e36e
7f3c812e50afb7f900222118404d0e074223b781f9cb00d01bac0085ca9c4e8faf464af8
64d73dcf934d55126387e02bed05d21f9911611a4bc1329c1b2f6c89c80b96b6432e22c4
ba634f4c2e9e96c8855a72aa265414eac4c4c7b77077c365a225218cbb8f1d0df4ccd345
9566a0f37e9700b36531ba6b351c61cecdc5cd54e348c59e1f883cad31bae5c9bb855839
7b53fed0d17041887f7f1f7b7de4d65fbc94247f56805ce557f6f225fab6352dc5209ec1
bd12318fa9e7601f62b87184b1512c723752a01e1afae317aeda7d855346700abeb77837
61da723e85b297e79d023fa1b3bb8b78f9080e4bc2441b5de5847cb6f14bb43b64b54d25
c5629d8b0117a1c2c57a7285f43c193eb936f452620ba4db63d04d471bbcfefae3010cf3
df5dca9e08fe24cf9eac3faee51f6fc8df4895d090cdcee8e7221040d329b750dd47c803
fa58e877d4af169ef9d764a1d688eebf7f2e0471f2e77181e3032575f68e2087bed341a5
591bce9c5a5be5ba8a1f4aae7bac393a574824168f941c1b6482650d58eb58ec28c142c3
5242bb29c0bcb08f5e4532e4c7aa57fef6642e75c7934a4e874ee1811a8d1a2111c0f680
77f35ad8707729fe2f9f26e73b01610cad6d7423bf0ac0929598eb94ecad924b679332ef
eb55cd4a49dc8debd2841b2fe30eb9e11a707d3da739860d82694c735e80b61eb1ce1df6
4aefbfe939384473502ddd2dc01cf4c55519a106f7c5f9aea0e153c702d8aefd14fbaf37
69bc5d53714cf8f510ce7aa7a1aeaa08158369437ee7429892caa09687ae473dc0070b0e
37800fc7e6f20b46f1e4545de584b4605ab386069653b882c23c7fda86b2006da81199ad
a931738523d5cf6fec27b50895002a87602a5af0e24af770ba046a0bde9e28f73360efe5
718be7512b4f77b55592bdb08cd4c2e9045b5ff2960b8c804079eec3bb82f2aab2ef6fb5
5177e93d4eb0877252cc5112c5b6c36ae6f9f6d1d9c191ceb8ab0c3709ee873ee707dce9
f7f49e8b5422172ef0ba010949f1735edfccbdff0d25268c465cb029b6cfd6e778a677ca
3ac5c2115772762ee20db0a898e762e9c7304bcebaf1abcfe8c3605797886d16d3b7f89a
d21448bf536ec180351525ff4516dee8d2244e5f4f421695beb07ca7942d4770cd48afae
e84d1632a9063fcbe6cb99c97f4fd5d5600673a56f2553754d52f45f10598f680bcb2f29
459cc1de0d6a624c40abd622c1255ec02bcecba94b7fed6dac6273a60e353de7569df1bb
80c50e7632ae03adea4cfc9e8c3ac56fd0fc9cedc7c0b139781d40c77bd30484c5c0f7e5
fed403879f04a224530c068983d1232a90307d3c1017c40866d2c0674689ce33cc855e7d
3d176c3073c63570e1bde1789f2b4a20dbfa14003dfaf74c175c767e70c7b868e4b39381
1133e40e183c575d31ef208182e12a7ff3319c44a38dd7a58cf0a999e2810728b3c64178
562e5724cd1fb72eb04e6f8443e150659a71689c50217a20974c444dbf0d3cc58f972949
06d5c51344c86980ebcc5102fd3aa7c61d9ac37d59f32822cfb33d7c5c41ef8316b6bbe1
2f8f891b5adb7c24dd49f92e651073c61ed6a98accfc8be1dd215440db8a7d612adb5e71
564e89760d115a148f4b87e67961352264a500ecc9d51ff546f3a2534bb12ba6011b2eae
11643d5c3c759f44f51d9e871ad456e916f043e53e728b1dd6ba4023e99011c8d330c16a
2d2aa0ece79be463293aa31fdfa78c2f87a45de77c8b88fab952038b5a0870196ee1c375
0e60f0502d13448df00bfc4fd0f8c1a15e2f73aca2059a137a0184a1a952e67befd83a53
a6c04246f8338633fbbc20ece82c1ba64309afce8ed02e1a5d05974025b0db0daf6d6e29
cb8348569345673a9bcad57e95e431a9f8d56a0c58d319b940e22b3ef50ebc301dc40c33
6e12ef5847cfe7a26822053429923739afc1bf85ab1f05bfcb3c9e48e510d96d1e3c57fb
9d98b3690813806ce0704ff15637cfb809c32c40059e580fe3aaaa09dbdbc51885091c11
057ec6e78f4d57c8f6aaa2b3e70fb65d6ae9af7f4a850d5a49dc8e85d8e307cf129e812d
5c91041a8cb66190e417711fa6b7f35028339f525f61b4970a73d3b0d46e0a345acdc6c3
371798ee52a1b2d4b1228456a68f006389d1e09e0be4777689585c09b9be626147b52b5f
b8ac65499b19b79948dd284199dd65d797d1a8a39da3eb327be6feefb606097cfadccfd4
debf7801a5a9d4580170671574defb3bfd511626754f8e840798c740fc098b2a505ecc58
75dd2c21f7fa0ed3002ff7f2b8b864cd2e269eea00968a3f7b1f77b5df34d857b826b13b
0468543485747963f60344b3c42f4241c56a4d1ddb49502709be04ab33128832a2ab1d35
74bf7d6d79503e6be1327d3e47ea67b12f8566a0e65ed619eb58da5d7419f3ec1c42f598
a57efe7a80b46e726639fbcb9a22fca66acdc8a237514a1b0e364e733234f17627bd269c
f0402c20e145a94253a9ebf6479d183bae28eb8c0edf61a9e49314d601d6c7a442184948
e67c4304a6f2e81ac19af53301de9fd9220ae35720e983593f9c8755e98f21d7e7824000
e18928d726583c53f669542a52e1ae8821eb8f1115331f1c612c7391dfd6872f494daa42
f2917a42546f79eecae116a96b51cb36c26c61eceb2aa27c573fafdaee53048a1f687720
98a03d8cbf5e2316d62b948c32d6ce3cf7f6734fa547e19d2e627d0f0e415a1d4ad4bb56
7834526ec6783b0a031215727bbc091ddbb56267597ca1a8e8f85f65b1de685fc22e1487
34f2372dd0abc8e1b22cd76ac42cdf9d1c505c413aaddbe2983d17f0cf6e1b8cef264f03
1777d27fc9c22cc9dd74833bf72af04e78ccfc0c607094786bbdfea864716ec5ad13d9d7
26a92d92d3bd8dded01f0b49323537db97d046a690ee40d5a3a6a48241f15a7860159aed
e437f2a26712b8fdb6015a1303c5bf97a17f4fd9056adedf344419228df482532bd2a4b5
21e09cf729190ae5c4e69a2ada2ebaaec90190a71d6b8ef15c893778d309aff6c575714c
4a5636f6f1d4ba4001863b2d81af0614011fb0d35085527b1bd50284db559e9bea80f153
5fee5f7a1fd48d24a4ae3e4176277b73745feccb45a1cfb5eec3d138e1b02e71255b0ef8
beb0a955a1365b3f5d168236937f63fb045c8f571911bb834939d78be5688fe85510bda2
28439b873ba6a6f55c830c7ef9e4a4d5f5e5a4a6ffbe3b52c164ece0410ea519a74d0b6d
261333b23238a12ac1c5b702c2469f68a53e9969621097b1656083df0a752bee4f21478a
2803f26c8dfa762aa15fdcf93eb448ae0ba4d2b01322ab465f734190954d965dba1149ad
ab90f37568900a55561ef439c84ae06b123cfdf15edc0e23fbd8d6e5df085b10e6412ed9
4aa3d0c847100e56bf0184036ae190f8b72858f5cb8dc0e10dab02d3451df4715f33c51e
b8fd2fd2a60704e401f832d53c39fed1d9ceaa68b191b8c584e74e612049c331b389c557
a50c66a8d23641bfa6c8feee4cc05baacb167a866b9fd2234eda1d011e67896bb6ead4a2
1ae792a51bfa85ea351904d6a138dd07d12f6cce7da625c0b9cee573db19884e7f4d6b6f
f35ad3222de24417d106be0576b833b1fe4eb6403645a7f8a870335e0266630d85a472d1
c50dab56f0b1fb414658c17883803d486c5fef561389a2a391690bc8651330aa9d0ef334
2d3d0f9981be8bdd68d1b9646cebef43cabb1536c2100ab9f6044c6a3fad9b3764dcf07f
2aba845469dc64a1f4e9b350db35ccc294cd59597af561a03d573b5e7b16eeeb268c9f9e
321a11141d6492eff864b84ddfc1f4f01310843400e93943f0d93ee59c667455eb03af56
db0290c3be2b923c53df7884e4da1e98742a8deb9461f0b3893442f76b98baa49cb6c93c
144fe09f90616abacf36874e04b8dc23b925cb1d48a26ef62f593d55563c5d16e1327758
bc929035ba96954f0e2afde6ddba926fb2b46887a476010dd2dd6318eea8ca5f9294ed15
dbc7e5a6e360a17b23e0b26f17983f5c7eeefc2191a6a25d691b2585eced195a2b4c4bca
8b2cbfa336f81bfaef9642302341002d7378dd92fcad41903355fd08e567b57a97d0b4ef
fd450d32a6ed868fcb6e315a67f5ecbbff3e0c35684c0bae66688b0d01de373d60a6b418
8029a80750c2123b41a532de3f4d221a8b4f43d72b018a6df5171764903eb3ba770ef0ca
3e95d88ca27f8b118575577fa11d8564fb9dc2125448d00114a39e4c2aa5cb6191f9bf98
dff12379dcf27eb2d5c0acd81a3a49c5e2bc0eccd4d6ac353752d7265d5bce4ebfffd84d
dccca7f75f3b3673bb13ce1f6dcd007b7079e02b6676e7d4a3f92a4c1d45368db6914a2c
9860dcebfa1f7bd9a27d6ce7fd3cb1d533f334ccf7b6d090dfb0cfe2a1b24734e61635ca
f868cb53e82603cae26b9b09dc8cae520e7f5a4476e4b1a2469c2f9eb20de912f756f8fc
9a88bdf5f776cdaad323febf8ba8803d8d8f42042abcb0e50553c0bc2c57fb419311fca0
d5f626c7cf092ef0923cc7960d516aad8fd82cdf9c74b3280c558e906c6194d087cc65ee
aaf679885d07868a78f14800710abf367bf67bb27f0eb99be7a72c81845dd79d9f11a46b
4ace204160a74035907b87843e1292de478d6b05ffaf8c3d6dd76a7a788b234b252eefac
70dcde376b025677d4c8205cddba3a29bb04ad8f65eb5bbe234e35a242cde9367c01107b
cd5ac425a55989d08a48ed2c50e9aa4fcf719604ac35ca5df87b0a29c0f1ef06499b98b6
9e1249543253238ee65b81a5e47ab02b9d0ad64745108a9f176cea0471d12d169a61f4e1
a608d85dcc5e34752f64adc8f46180014fe89520f55e9f79df13b38e8e3b4d7c0666b1d1
8a03ae3c212dce1c8a7b608d75ed3af8bf4c578704a3dedafadc843d7cba82ed58ec9f3b
86b5670f4fa113fa38fc64df2a50620383288a27a50eb6fc865d0cf028fbe081c487e632
41299e02d3b40a9baad33c15ed2c09350eb7698b029ba334076d10d61992377b3342fa5d
f5af33d6fbf81e2821b2e12cec964504175020ac98f49fbc4709e393432110f8d2887089
6e485f6e4b9b97d7af0b43870527a8579139955a95dd6c3add7634120507c147b30a7b5b
d40c5018dcb85846220e1d54e39117c3a95d76c1b573a49d2f74d99f1f5021cdf1f3102b
085da96302c016999603d907b5b9687294f6aef5504ba4c175bae01f486cca1f7cc22b4f
967fdfc434c4c65036b35723fc3e051961aff2899bbb0194853bbb5d420b035221c8c5df
29f7c3b0f7f34fdb5959fc66f0d04ee1a7a0b584a0e1acb51fcc0b7d1bd8a704ff416e41
ed72235608db7a25b81561143cc5a83084be63a2416986affd028fe285d6c1113e4597db
300f914df62aebd33c81d3f9b0b18f117551cfe5f0ef89f11831d1e4f4a468e0177efb0f
7d9cec151d0db76beb33450980a3264f14987b217268f8591f8340cbd54c0902969ae1ab
e21bff6c53a4c85cbd29babb260fa6070cc5a6f46783525a9e82afb0e23ce39b83098fc3
82d2e95f42d115a3b70ddfd398dcdc28cc3b20283197239f9e2c9cb81e76dc8efbd5df32
84003849b21fe3cfcc06e28d25fc3844078ada6f08e5832fc6110b02d798d4856dea0900
cc6fe10853733e89b3f532a0807483805d0e209fd8fa6479103f6e0edb39e758f219649c
26e78bdbdbda2d163a587d35c36988c15c53ece9cbcefef79bf865b359dc4d716bba88a7
67e4a67a2ea72a90415fd366e5af70d9d62309c3fe2a669c50310d7124daef64e9778ace
e7f1445f86382847d7357e9d76c43b28ed67e60ef59a14c57dfab05993b0227968014fa3
207551eff07181e83ec0fd5e7537e18970478ef740e8758434054bcf65eae8528eaa530c
16ad26eeff220ff8611cd7131cc501bd08fb755c7488ab2eb411fde9f7139d531eaecd33
72700aaebc01f602538903abae202c59fb5d39a7293718857c362df087e17c4a486cbe7c
69eca5347f4b48e17d33a0f70e1efd3262b720783df2e378523926baec3903abceaf108e
a7ccda99c82ff27e2d3e5dd88444aee192f4313348034d2f2d4b60d792e1b82444702993
b13bbe24b6c3376c28d55ca0c54bc2c6fb250940af4fd6b3be036e6db22e1ff74d375482
337786d1ccb0ab5fcde71c4fbb9a01f4320129edb0f1ffe98cf321f34297551c2c6d893b
e8f9435011e32d6eb14ca1f72269c8445ffb7d5cfe53b74f434da7d65042e5a20ef1a689
e8dc472d63d0cecaa517272ed15fdb7f9bcc91d22afd2c435291979f30929605e2dd8f85
c6057894af67caed64bec40f53d0fa2a3a8211aca6ee689ceedb9c11cc4c1f029912e756
ead7309269039a42f6bced907c42e4d2eca9dfe4c1393a86ba311c63ef654e5736be43d7
bc068653ee6a43952c68bda41c66a845c1c8949989446cf795195becd8aab0b7c0d379d1
b54365fb61c6f649f8f0e7b37ceb5cf6831f7369cf9be92931747d402b06bf206ef32b2d
22d1e2dc21588d87030878ca595ac400f93e399f172b79044fc04ad8de35c5b1c33009c2
8b1e835111dd64c74f4f3507e417fdcfc4da39b748b56f2c898147ed3e367932fc8a5673
3726ea7d9be9b4aabb11bd280c2944841757117b35cf2e4c098da25e4c3cddc387b91dc0
91effa7a5db4a74c752fc9abd80513a2d46fa06fee72c78fccebabce6396972fa665365e
cad6ffc449058e43997eaa0d59b867dc5aa2e4bd1477d86fdaaeb3f8bf03ff51194cd3cb
3782a641d9591f56262fb16a4d89b46db3ea72acd88673ec16d3fc900db80fd384d536af
ea068ea405029843481f0a9fe9884f7e4b6dacbc01a882b5e3ad6c57c8407c51983be9a3
6680fb49de2540d1d6f11d0f5bcfc5ac01d41b901c8ac0d2423b17ffcbd28a7555e5a22c
f522ed79e9f56656fe8bc23e0ee05f1c72b92db20960b5ed09950ce2162b3586088aa57e
336163a3fcdd173699064da16d0650957dc60606efd3b90362af58103af0b4bd57ae474e
1c8b276307ad8bbb91888793a5258735720163c214340991e4553c86215de037e693bffe
59fb54fb840b6ada89532d15459c327c0e2250727acedf17cfdbc9dbf73570e856eeed28
02813fb3f9411eb99128b946a030bcda624ef2c916f9ae3890f7167806cdcf8dea96f2d0
8343a1793a5de818bbd50917396c60ea7060b0a52188a5581957c3c77453d12d4749b65f
bec0b44c6b0e40217be999e640045766a9435e2258f625bafd253b907068153f66b0ce61
badc0c45ea02331fbd5a478f6b1bfc01f0d9aa59d193061265205085a8438e456d1b8d31
ce773915e8972daa8ade657f65039c26d4cb7cb5fdd07cc5b98acef51f8a94a0fd41427b
13c803834aed17e98fb86e5be32b1a9c6bac0b7851a4f69f57689229ef6de8e3fc2ba072
389cb5873a4ee0603c45281128f6fcd415d8282d8b4be251ebfaadac5b256da2ffb2e76f
576e1f6aaa1472bceb7e3dc6de14297236c5b262e8c16dafa650adef307dc87fbc352072
7470a90ef1ff25e0a6b396ee094e2b96291a4c092832e19e0a2d2c9e14bebfeee9b3808f
809488aba8405c7ba9771b895842b8be94b8662a13fb65f8817472b53cd10e28f43ebfdc
b2f43e758ecf183aec9ee2febebc99a13a65e72ca7c94930b9bfc82b5282fd3fad3d95b0
cf6528167a0f4e6a8f400dbdb35488d567372c1409a326af493606e64f6eb6a63cba490a
fc0bd4dd68a04f7924aeddd14c9313417f0fe11e1e91afae9c54a8d09ebf077bbda1efa2
6630a3bf9a4a4db0dc612c7f0dcaa7e56f31657d15da4d23a68314298d8f21717714b4b3
88d2215f4119e252a5849ff8daacffcfad7737d17472e4d2bf3ec1e1d51e21cd596d41d4
de09e8667c32f7e9521ae1483731760a6845df419c41b664f5aee46ca8d17fd86cd130e5
6a16bc35ba3a778dd34f8aef68db3c7583b69932effad912adbe7a11b88538d576505ed7
4fbb2ca260aa1abc86e48194e0ab443a7e9898f5363c43d668fabed518e3bfb9a57cf37e
faabbbdf8575584ede336dc71526e2a9b80027c05631e87802f6de4e612ff3b379e07151
b8176c85a3507d84845be7ee7512da7a239e485973db542a872aab56d4dc865f6c162a92
4d0db3ff0109a894f798d7711810ab3a64718d18bd2ae0418b9f0d2cd9a9d96fbe5aff9e
37e80c6ff9262edaa2657a499ab94612363cd3cca2787a82a77d4abab21fb98aca601213
31f016902d346493f9895fdb6cd97633b5e568eeacf004e017594c580d6dc358d9bce92f
378be626dcc766fec9fefc399fb493d8cfded715629c1f806d311ca8aa286ffc9c291a5a
d93da02c32ccb53aa31c0498c1c90edaba440f2916980809342de486bfe67169362b2563
520df4280faa41d58866f9f23423a12b9ba8d90ba9c02cb6dcce822ad70b16bc1b095391
b04dac9498221c370e018e726568c5eaaafdbfc7e0d52a36b8496bc38233c3066683c812
193c81b2b5aef01a0069e209eef7c6834d1de7e329f4af7552da4ca0414e08b38d7a0908
e2e2b462ec7632be3aa044b1825fd07d92b7a36be1fd3098da9c640790bcc176bf6f74b9
a413a69bca8eb04a2d70d8ee52c72153f5f316ef4fcde49a9136f58f23bb7c6ba1095d49
debbaf0eea67cf63000877a98c9a85a25784c9d4addbd14169a678ba7e2439478747dcd6
e8d284c3bbe84b4a44cd3527b9895ff6b928a9dc1575d95f2f97e08624437c2df89fcd0c
d5ff393a64e8a6a072efeb9b71d26599ee2e9726f08ac059b308bff15815b5e01623466d
0b40b64c5b1ae12f33c105c6bb2e4d8afc613d5b0e46c323fcc94606036e5eb65f8396f4
75ef620f77b2ba8e40c08a92b71d019f45ae06ccaefbcaa711180159027764c3a9254b73
9529be61e43c83a8c29a250874e637373311a38fa8142fc439722cdf6279c3fc4c68a42a
6b57096650febb34722d84020a613278b1f854460be5ac488e812fe3853f678c4b1eb900
c42f01ad76a41e642b027d621c3899b73b44f0417f08416c9b4f733641011a0cdc008146
1a2551c7235133399c4d0a937fd62eff60a0e33ae8155c3386449fec25de67c6918300c1
7162b4d3cb33db2a37b45eef19bea235b3ae6fa570a227e34b87e4a6cf3e18aa6cddb341
60c97d4571f2c0c9a1a130c951f3720ddf7332aadbccdeac3f5d33a0cc5f400d6f390d23
850e2569de9f7007bb281e310553d2fcaefb6e151f32f93097bc3b2875dfe69e04236749
90c27e4e960fd5354fc001ffbca950f17479b060fa11d3b63544441cf722aeb6e0d7cc3c
75497386df73d0dd576db3c1329ad4e13ac684e1d9c49ad69bd3d1e6d8ea576d93f40475
894f611ca765d62ab6e79eefac2f189a8af456e2db7003990c97d156f453134640ea19fb
2eaf2214421cd83d054a3b3bca451b12472b15fb5b361929b47c11cce194e4c581488c4d
e07f9cb36ce436d3f40715a92d7fc98dbd968678fa2b71056e0f86d1deba968876c63133
21d2b6865cd5e391db03f178e28f5e33f60d5ac8f11c022ef7af1e5240cd3219731590c3
83e4b659fd5218656700d7d2d8988ccda1f50c61239508e798e1773a47bcbe7c74f08b89
140a88fcb0f8cfe4be92ebb72b8ec831777c77c0fdf22ec5b4005246e85ef0769638a020
b0b9bc8cec11e7356155af3b84948e24abd7ecd23c6e5a7217cbb77ef637bc08c9eadab9
decbdb253701466f5242ac23b5356f33ddf4641bdda0201a0debd9de7507efac9d84017e
e8d8441c2291d10fa47e9bfd8422e2c6d9f1186c9f05407a687ca45dbe0c0df854410096
d72d920646097546002da35a557ed3f66e93ae91cfc36aafb3c9280b679bc520065f2a9d
584d73224040bdda1473111628abb4574dbf37cf27a32849535db3d4c7b39d3b8f17c4e7
e4ccae456d71a0c7392240a61df5fa2bcdbecee3e11f5a2b202d6fda1ea78e2615d9a7dd
b062efe5dd791f0ba03169c83883070cb828b9a031d6bb2b509442d17cd109e2a63e2d7b
57e721eca6cf1144e9c269d4187d210e78c07d8722fcbb73391624a3937e8f3005796f03
92cafe8a35c9bbf9e9e76e0325f6b8d79b13863874ca4e19a45eb6065d9b33895c543f5b
c7481e6e11f1859058794812281667f6531a19c287692512193c19ccefc843242f21b520
a8f0825f2837ef43fed220be0001c3aae2785d26b6765537f8ac1216dc4c716490ee5d8a
8482b3f59633e1558cef8a54398f789325550dd57881e38f215cc887f9cbb1708bddbea2
e5e4028862e1acf7b31f788eaaeb395de0448e66b212601e7a9344323726f315a23a5881
279223399994008cec5fbc65d739504993b1759479b08bce0a20ee378b421d4f9fc760a7
5ea50878bf7b19a77d8980a42f17ce6c21bfb0347d3aaa4a71ad88f3fd481951b8a5a9e8
78f7eadc7fd00346c7be8b51d9a18df4fcc1b75a0fe14f96953a5f1dd93a614d521c9742
1aed8483e7cee05a8d9c94d2b0606dd7bf1dd0421dc70d6611d79a0b47a4f9dbf4001c09
d6c5f44ba036796bfdee79a76010f691c56bc082c85d8db20dadcc391adea2b4b2af64d6
0ad2d06253906ac2c06f47290f32743c62416c9b38519b89faa3d4cb6f18c18ec73ff8dc
451130cf36c69d35ccb8ce379e1c884c1a4caf11d9bfd2c49c70659190e1c50578cfa299
eac75c6fd6c60b666ed13e95bb40e08a44695a6f9fa6866f04f604e82b4c2446556c8791
a6bb5a7edbaa8c3e2d6abbee69abf68beedbb95b6715086f7088ea99f6b99c6571d71dbe
e1a1859c131844c3092f8db7823d2b3f3c88c4c7e295afff9f782a18d53854465de35c18
07559673fe8560b00ef3137e757d9ba88c5bd2cfc806b921e303b08ed7c536341ef5d5ae
0890254e80846e6ce8e032c0f638eb8e07934b6f3235e96390f5bfac02c329dd2eacae45
1f4c22d0bbbacabfb7b6b1ac3f2788e074287491ebed718817b7245c55ac924c58042903
d82afa3a9965f87f9849944dda03febb552a5e03c80f0ddc7bd3eee328173f09696b3a11
6367cccead720b55f826f289767f275d19781a5f6a25bc3a0324feb8a95057dd6ab1a06e
68fc22edd472f5e294f97a96051f48b958a46b523b277d18964dc129b86dec91b2590647
34f8d09ce7160f478a071b4b120f60cc0e1c7506dd18771c952c3671dbd6e6f686ee1255
e17687b711250efab913c6aeadec006f2df5be0c151f2cd450520dc637693d3cac164d4d
9f89042c99474cee23be923238c477cb702087fa3b73a0edb772bba394ff3328acdec77f
01cd2d82b7bc6d886e7a1af5e768ecb8c672962a262ac9e2803fa1f5509c1f2f132397e2
2900a792b4bb51bd968dc3a037d27e31ca490188b5474193469a00f47184155e24e7603a
1e058c8479e1b6268c8d7a789fc4d4da6795798b2f456142d867164c02880537456414c2
7533cb485eae210e58cf220dbe2db2c10b74919b6f4a020cf9773fed0e69eb9fcff172ab
645c08ec16902548df694033a93313c6d9496511e039f2dccca1d8e159c390707d9a51ba
99743a177346329da9840b837da9a8b143b80fd09e9a2c24160243a2cc414a73aaa31f3d
6a8960d17256496016c26ab35de42a27f5dbcd9989485563206669ce216e9d34ceeaff32
a516530461006a7e8b3144efc2e0049c182884920dc141a2c8dde52783d0d04fa4b9c9bb
b6a7f63c40397a135c647bac516d79cfb8102693a2053ee3d9b791a0e1df496c7f7d155a
4293864a924683b85203dbda9a9a1e0f9edad767d7018ce3a897460b03ba88f9927e001c
b062aaf99d0c5524ebc599c3c1caaf21dc1bcd87efa73590f84e42426c3276ad5cbb4aa3
31e7da99744ad9207ab01eb3e956492ee3a427f1255cb5bfa38b0764c7d081ba8e971b93
57cc5828a04adaae2fafe1ce2234ca094c2e593bcb74624d385249c50a37211866d4ce42
06dcdbf6a912935e5db8977e94345d9f583b0e249898d2674782a27b74660d79faacaae7
5c957f0a6d6a7e9ba474ccefb4418e739386925719defdd0689a88b47d0dd5120902e870
1063cd7d992f31ef127db502ffd8d9e8e54bb321cc75b48141b9b50793b6b9c578f9990b
21b87ad30e254547bd28f58b8410e0f8e0eff516a3ed41f47ddfc468afcde4cfc3a8618d
057bcf900e8399aefe62333ba7954ac7e630a68cdd79449ef0e0f35fc3015a96c26ce354
a8b89e50cfb944f663a047d584d050dde3e21aa84976a5b909563c9e4ce29a2163299485
762372c66d39c62c32e54fbdd665cb17270cf4d4cce748886af175b07ed65c3b8dc21f6b
68851e7e68b9bab37704485b99a7df32b3fb92c888d5602de57f4efe9e33d2e21603443b
7185855aea1af80f29ee7628a1e967bac86d04bcb24996eb4940af46c49d1dfadfda1494
32f5f72a27935a88b41e4b4561332ab799653a060c760729b78036f5cdb78e5cffca5baf
221b5ef5a81b3e550c5b437e16e2fa50f3e2a519fa8cbbef0da49a5c3639f8d1523c0f59
9c7a85507fb9b143498558fc2aa7c38a1236c27adedf0cf5883305f7194f66b19183a671
8e048afb945049812ebfdcf28d58725de719cc4988ce6acaf33224e98324d0fc0c85f414
8bce0ee98f1ce7954009f60f16e0e7cde85577541a32875adaa3b1b2f77fb2b5f2e32e79
a0e727eb6f1575fd96e7a880c1bb21bae0d9dab1c8126316b9d02d667f9209f5109ecf96
6c1c62271a2d061a3aef9517ab1feca42b9a60cc84ae896217cd707b2d7e8b53c03d8655
7155625a3af48e2dbacf75221426c4a388c386a29f78452f31bbaad2c30ee15963ef2ce3
35bfa8140c6959bb9481b992a493077f31ea3ab78109b7258022f37d9f4f0bb7c5bdade0
8e8c04e5ffd2460372ff8da8635d70eed4f350f2958479e7337f4df0925184bd14e9c15f
0f4744708f08432b8dae3a33195e2d7f81361bf5d8e65ee1f47c24b39a773899fed58c83
e8c1089f9e4bf64c167794abd8cd1e826196e1dbeea4a3b8c423f2e3a4f90304ba87d3fa
72dad9eebe3381b5e61fca2304a022d6986195eb8a10a0b517dea872b52a7d3eb7a4d601
b82cbf35d3bb25096ebccd0b281c2e0e31f9e8772d9dcbdd522420a2fa925c0da8fe8131
a22da60e6a1ce3620288697fdedf79dafc5668cbd76988f903218db956b866eaf2025cc7
f6881dd4940c05e2926eba5ae3217179c7d670767e8e2b641380a6f245beb08475e4ba38
132bd5938bc7252854872d4c3709f12bbb9327f471650bbac937c67a1a1997378e06b3a5
87fc2591be3867920f7973c5e16ec054888d97b0f14ee3e0a1ebdda53cebb245f9a6b2d2
91829b5eaede4d23a31a940e127433b6a9f30edb8fa5b4d5aeee7ff4fe92067df0177842
5a8ac18e77e22cdbcc789f67206b318eab52390ffc9af11965d8d1621da344dad916e317
d26cc392359ac5327ec4e8d13b0efc4d5ce3ec0e9980fef097964ed0348730c617618118
1b885192ed466fea30101464d02c0a182d75677d04102dc4669a0785232b840ad64fb3a2
e57d569ef3f1df2523af8b98d5408f5bb8ddf754ef850fb04f19e18341f1d92bbd643ac5
e206501cef6f4353597b8146b9bd16395c762fce697977595d14aa57f7b00d131272d21c
184515153a8f62d9e8ec814602861ecc6538d1dd2371ce0bb9ca2dfb2ab9b5e78fd17c22
9dd83c1051f66faa167787637911bb6139dc1be592077933369fef61ab284a7b56647b79
4930f19227f6e7de2bc45faaba534064122aff66faef041f0739cf08a450e8aba904cafe
6fa5e06436fe0c7a926014a3e1db6d21a4670a7ba34d4db2c3a142092df49b74468b75f9
3d7578831d38ecb14961184383f7ac60c9fabaac3abf57508c2f701bf65eaf1d030aa59a
18b5ef11f8577eddd7ea197dcb655e4d354244472dc3e80ad94ec0a45bbe5db70da00d6c
bcee24b5feb7920abcebe9f13ded52aecab48df39390a115280ef6dd5d132639f31a2168
bd3695391e290472214181de6121cc63318644b862c6e088188b84a5287a203c74ee6648
53d653b61afa35c1836830c40c3221125405541ccd3c50861544ca4c562a0982da2d2abb
eb1bb3dcfc14be1c67e83f13f554b038e87440af9ed7f0a6e2d728fd52a8ea1198a7f37e
d1313734750e990c987608f1aa6b05f5c5c0f1808931f1f312c07a888e9752a1b91dcc69
df33f4f3273331ac74728f4ecd7b637a26bbfd51f5ddd18c3dd933c79cf16da46178dced
fe6b9c94ba089fcd43ab4c9501d495e97038e89276e18e87344e8c542855950ed16f5eba
4d77e86f5d8b5aed94db392918cf023940903123b1a05a85ae876ed39e811285344dfbae
b04f653768b9a71198ebc53e45c7d1589085387c513f4e65cd99a6719f684050f182797c
5f8ec5b9b532bbcbb5390b783411c2c696165fc80115153cae279535307c1b3c5e581d68
c462c68f32dbb1a025fb0bff174b8ec64bff26d633679b1cf858991123abfacdc0f19cbc
e5ca146db4c993036f8172e1652d879d3eda2bdfd74cd480aef96e9e530e18b74366f691
9742884e613508dc7e601b637d5fe79026aaf2d11e493a521ef83a44de64858213e5e17f
2bb39eeb3cf065952680220e2ea4f58091dd2967659418ff2f149c6907971765f4becbc6
2c259cc06d23a2b7050110dabdcd25a11c6e46e0c0d77c0f4f970322f481afee435ef5a4
52865b9730cb96fa2b2adbd2fe2bd679b3c45668a817a9ed8a8766da1f5d5f8f0b53b29e
3545e6528db935e1c4ea4a9b2693eba8cf5e3bac478c897fa9813533143b4218fd5f7066
4a4914b493627aef074836f9f6feacf9a539a61cf96b805e775394b725f3e7d0487b8925
fb655672650d45661852c753db5c421dc08a13b15dfb818ac01d9604065c67c8c42ed8b0
ae8f1cd70ed865894c647e01919fc657a9aba9bbe315bb107730cec1d59a3e553dfab01c
21911b79ad96deb23b76c7679da85b716e5b8f98b3a53d8e701a8f5c2f442d614a78ba0d
af735355a152e33b5d02d3a8cfbf569536c00634c9b09cd1d766167cd19d376efcf4dbf9
d4756cb5b1d0badf6eb358819f0420d5dca743815245689cdf959dff109d99cdfd0c833e
b6a0f72eb2a06b68f472d2727ff25f4df8961e686dabc33c97ce764f5c500509613e7232
1487937a1f68903fe7b45c97fdedfff958eb835dada039a0887734f1f61b9af74734b8fb
8143fa919e11076544fa13b5f5f17eb1edc7aef330b7ecab799bbb98ec23fbc494e4af6b
73b50c6a1e6f2979c2447d94b315f73c016a40c7a32a93a9e8dfaa42950393b479da4ba1
3b37250199b469ee6fb7896ea81d575f284e8e3c7a55cdb0f7d650d99b540e8090fc3263
670516ef8ec24d9dbdc3e1d5edf1af8630d04672bf4727d2bab91a11f74a67d498af095f
df77f7db21234822c1ed270a730a5702f5c71cf0e13cb90344484f542e30be03718a0534
e112562cee6c8f8b024d824c557b984ec7dd8e8b4906a604b1e9b5c8e3b3c979c35f778f
fe5c758580070cd8ae371567e6e14be8f8dcb648d76ed573078027f87d68da2b7429cff6
d24dffb6ec386c7a772f82d845cc4c71e50f10fc07a5205b480424e4a273b358938e23cb
c7af2c2afa2a01f05d8a325a1283a7cf6286e5a1ca7f71ff340cec006072486ad68b275f
94af56adc687f3df89b0d34c75b824acf1863149a86acfc8c69206a9cafeb10422dd19a0
95c63cf32ea2008aa1f9372356890475754ddc9d98731c56e19810066c2069781869da36
b4f9a02ae486ad7323ef35dfc5ac1a9133bc28cc555d2c2202259b2700c7942e96666b91
b892af5a16e9b8d505fea14b0b88d9b55aa44b56d9dca187c3794565047d234c0302b0a3
6adb50529e91e29e6cc70373df159b9ebf02b8c5088728269b2822d3db52c2012ec8997f
c3b3d9bac303ee567bd6d1e98398f8233a46adffe2b932158414ad5541b7d747a300f129
889a5f0724cd2bee9f73fd2bc13c75d1dca2efb9a8b062e8c7da0b6b90d0634cae3168af
90d6316069dbd998795aaeec5345b239e1eeb5dd0bb1da121d7dea3765e57ba1516072c6
08f4afef9c8df9c8066824da58925b6fea15b144b09bb408d82719b825e31d832518d5b0
f363fe943daaf3d3318cb5fd08c494e062c6a5136135926ab835fadec92fb489d979bf85
8d47c2e2e05ab68a37cf69db1d62e178356a69dee447a3010642047f66ffb3fba42f993d
907b1cbce1ad581aa5b382aa46bb56270a32b58a529fa5942c14754eb22301ef4b36fd3f
09af203d70e27bf6e6c41b3d87d399b251da66090e48d70064f1d54976d47d2023e50ab0
09f643da34c19d751f3f8b53938f6916163c45f8e2b04a3c57c744b06dca64a48eaae11c
58ed0a4e0483e5e15abf48a7cdb9ec7fe84d8da07bdf3ac21fffb2689537319d817f89eb
3e0c79906b6985ddbdf0cd661d477d293b0c3004c370b56b9413cf242dbeda77851a9217
cbd93e142ce718dc72bd56890d99070af66def7bc3da1747d7b6406e40448a7e44743421
3267aceaca745627cee1e78624d65d6d559b962c217a1d5469d1044b808160488c8af3a8
1ce3cca55e80f8c3d043da9eb32bab28f57eddc1f3fdd87c52a3eee097974d480a5ea087
5ba3d8f5c428374243ceaf406669ea65d6fb9e72d0f676b71896ac68e81b74f1017b01ea
a56f478a877d46510179160724eb5f03386d19c740ca897637d29ac9b6fde6ff28e9ee20
f45432cd6bbf8b28cc25b42765fd3d34ac0c5cc2b7f4dadfb4bc53a54633bfa8c86f998c
62b84809b1dfe327f2a538424917d9913bc28341a3f1d5c24b3a800b01774b10bd9a50b6
581504be8a546a8bf5b4da19a2f4740c246c06f7d765aa173fd385cf5750a7355c290989
c9aee771bdf083529c155629c1051ba4d48a4c12799e8dafae2887bfd94f02d5fb487419
664f4a4205d9c3a74c3cd21efeeeff12ca9a89d965c410c33b431d0a959aac8fe54fb116
ef30ed73a1cc7fb6165c930f819b4299d54fcba2c98156b64bc63de956e9b0f78da02105
068076c298cb7c284d1c50c5bd17d87b568635828af54fd73bbb0ba5d9fbf42733b7f385
4c66a8a112c25978dd4b2ac3bfbf02ea9419154e574ea0a5bdece7cd04352445ff58d846
b85b963f411544d45cb8a04238c2d452dee6b569cfd8586b57e41ac2b397ecdbd9c72cac
19d49c1d71bb5a66aa78c82bfb97a7dcedcd48c03039313730c689533dc81503be7cfca5
05ce1bd9d7b5db3dc6f81e3c4390289caef3ec458d657fc1ad1df391ca40c7b7a9e0dd66
01b1902f129541e8cc621bf43f4e8b5d2050e1dd17674fa85ca102ea9b7844cf45528f61
f4ede48ba6849e977d597462d34679f34ff34118427e086e7e29a61d11bd0912fc195d37
5e79a2978e6cbe0b441d7ab6a00eb0417521a7cb24c17ed66ca0b9cdbc4f9d6d1a52a764
99079a7facf467b43600f22622ad07b47fd3082076deecb81b72bb5b097676a4b0537045
e826e551613e55d56ec954d82283544c6759f2ac10118b2e08448f817c571b0d4c105e63
4c71c94950241f60e120720da09568f74bd6145ef27a50c0dee474d212209c3a410470c3
48df7a91131b38ccb8f4a36a43926641fea17a732ae3ddb80def859c31c8d34244a84434
496bfcef0eb3e4196e32bbe93766a001ebecaaab741f40b1785e84d5ea974e0dca3c46ed
2c39720ad092ed5dae8f79bcf1be5d55e4ac07b5d334e68d8d88c1a80cedb391452dc670
a196921d7884ea41f7a9e035929e4589887e91df7aefaa137b1d1aeb0adf1db830ecb670
09580fdf2df6221111bc80fd94e776f235070d32688a082d2f4da1ccb1cbd506825fafea
76f70414a4309e83d2db2cce21cc5f8dde10b867d1ba276c91f0120805dd7458f2252651
514c3437e3abfbdc1c09ae8550b5f9c8a8126e9c3edc9b911f8cacb1412c5d3d38ac0339
6d7ea98b732627e5c9eeb52514f73293f1a17b2ca5d290013b30a737572ff62333de2ee9
e2d242ef8dbf051254d6f5c874b9b3dd87428cb56b02b8b9f6492d708e94dd7eb22291ef
acc2f30f329c15bed7b2d70461f7a18d02474cc1f9e593c4315566e8fbe055fa90bc1c5c
9e55f310e9a70c61642438a07f2904366662b82c1508e55b37d893429cb8b009926c7eda
5075362049a9d812fe85e5399dda888f4c7c8389ebefa61b99c0bc634f785604c8083282
b4cce7c9762d888d0b51fe84d31ac9bc3af89460b332790137857b985b8216564be34133
e328bf561d2d7fb9b9b003c54775dac5cb98e67e6f1ef809fd231280c89891709171fc69
b6ff5065b5332f1a6df6ddb4acc7db499eecec5ba60d3004dad8a83e14950e8fc0d55788
490af2d18207efd1f22eef06465e69c7a44fda307916ecde26f5c3343427adc3d4718834
d655424f088887d4df3d4e5ad3abf5129865b480298096e05945fe99a95d517b758f12b8
f6b703ac3778d9696342452731d6b9a29a4bde0462b233b0f333bcd74bb429f8b6038208
b426315f2a1c2ac5490e2b448c73519af5723c3f8b3445f0758ffbf2d92419b1cf88a239
d523feecf8ce6bc36bbca8c5d849ad7c72c5f650e65b4e9fc746d51400cf603cde0ff435
11295bbc766c3a5a3b30b79e5957ccc0f765281dac330411b4a190a9debddf74b87b06b2
2e4c11452e81e519f65891489e2266f48ced3e4522b94b5feabdf89ba42c875fba561ecf
fe1feecc6fce68064735b81874dc032defd012ab1b43736ad8b87301fd93e40c53a14a1b
962deeb6281d5f4953ec916ec2b46d072a667ac3746bdbf59094858ac548262e9da2188b
cf44b8facbe91735458de94668b988770b7ecb036bae7a0129d8e2773d5fdce765bb7961
b6404bd285dcb2a3839aba97d1cd26b990d6906a81f2d13eaf738a51474d0a02cb6ff48b
01f922ac3cf4c9ee7ca697e4afacc30e6894c0d2c89e87827fb73aee25ac6bcc617602f3
5d1f7b734d33c1cd80c0f69cdec9a961a8a1ac4dadbe9925ded5f1954ce60e82710eed0f
8f09239f4af1341c033de0ddb1770286667e550cf41828100d7497d9f96928ff39b5ac16
107f0632c50764f21bc9ce22d9a02dcfd794ffb85f15859f076d2f9cc30181cb64f070d2
7da01c5eff2864d14504af6f1512665818503f58ba7479cd27ffa764edd753aa5137ec02
a9a7b4f99751f3302040f9c898e0252a58f633710f5f0d2b3211b3e0c76aef8702a0e0b6
52d70ad758df369205489635220248c4d63bcf9cac313482eb0a06f7133f047e45d9fb16
8823e02195123efa098f2ef04d32d28fbdc1b797261d259b2d262df59fcaa4683f961383
0c543889129301612ec123e7296232b89f5ccba4bb142ad931a2e9396979373526ea5dd2
69b661db374f7c352a829455798a66110a3727b0ad4666e2e552536fc6d8da3dc755f2a6
78cdb725ea592111867d8b32b4d9140716cbc0b1770fae4e26f7b6d76545496347e0f3b1
a9aa8821b3ff76543c6bb5a87b1d3241a17dd41e9e7710dd43b21a6afd4a7e55a067400c
160df67e50d094a654d322d7320a42d62eb71be05e8dec4ec7a3a106225dda2f9adb06f8
d148a8ba3fd770c570a25ead13c2a37aea682dd7f13860740309836a40c34ef9e556f1fa
e42ebd3a9ba0c1a52dd347bf0d1614a83200471c674a8f0207f908f074efa6d5321c3420
830db17866f2d307df0fbd50474257c65648c16de1e854d5447ce540f07a79fdb4e40de2
fef4736f5f1ad7ed1b3479fe4b5fb7710bcdafc8f20875b4f8e54ec5fde30188040a0e52
9343d23d59b02f3110018cf296badb668ae6e9f6a8668d016ee1a019aff715ce334fa01e
981319cd56e851245959a81819a34fd178467f748cf4bf59cae99ce2f10d41752d1767ef
1e4622594de141ac45bb59e022670e8ef0846b347e2fa0f5eaae62d17350a3f499f4d5c5
84a9917c8d4caada35557013b5b7a7df045918d9671390b9e1f1f626895f147ae6c8116e
c503e89eaa98be0fdfd77740c62581451cec1e27a84bb0800afba5fff1748a14438cdc5d
e4404c832251f3e420bc154c811c63057fc5a12b61c46310d33d3c18e719a8ae7bc8d506
440f9715712b4b4374fef0a2da8c81a68dfdcaffe1f5cbc4f48f70efa75a461536a0a41d
25a946760854e811d29f8a1a9f3d8f092ae067acee61a569f347d7df3b2b2496828c743c
e9339010689129c95f8762cbce7c7a9a689432503894cf32fe9cc867b1d2bd4dcb44c3f0
445c612d4fb8dc90df87c939411f782d268a26666b5048161c145c9167b22521499ad7c5
1c552afe153e17836691c3c679c6708ac10af287ad2a3c3a67f38b92d3c7da502499dbba
43cdf6d3852756f28d46996c9ec9112cd0180015a32f8b90fcdcf3e85158b58904061cbe
909604f10c5dbb3ad6988079e4afbbe81cc707a865e544ffc6f804cbc50375577262cc95
1d6527362043d244d914538444d4d78224bdb28a58c170196c804565fc5fc146a616bf12
51089b34b9fa4cb9011863dcd5baacc7972960ff208ee08b5b0c152ae7667488e7640fd2
2e1c38e7973fe0f23cca56fee16e4fecf35902359071c6c3eee67d29d279a18ce354c768
aecc7fed2a7a36e7c8c94c5e04ce3e57061fbfe41d0e404d50ed97abd04402424957e1ce
42ae138f9cf0e6e2253988eff81ab55e9442ff814d51d083b01d981d5540a8397dd08978
cb63ec5695a37048f017f20ee4e88891a3d7828a7feb898a93e2857c7081bd5ea5220538
6a2deb663cab26ea04e6ad6a25605f17c89c680201dda01aca119b7d80ede58eaf265b96
38cf0bcc3fa64cfd5c7978785825b699c58785d3a1073dc811ec1d3553235c37ec35bb09
9e1283ceb6fd0a8c7682d7ce306d2f0aa124791cb9d08b6f60b69d61a8cd54721490df26
11affef9d42041f1a74d8c9f50965d2263aa6a8aa7f629e78afb9115a3d6dac7abf5eec5
7d518c596a38fbe7341d8d3bc550ebf77d77149c030f859177f0e147e39cb50b3143670d
bd9be082cdbf21fd44a0b9ec9852b9e540606b9723e5144d3b4648a7a96b9155a1c1426e
d6dfd3ae9506e39f5003a38e728d1f35a8ac61acb65a8dd71f26eb4482514a485f44e5d9
07e6452e97217ce3a42796145589179816c9edc24baa2c3fccc404f78c6fca256af89f93
106365e6ec4ab687169b47b061e3683320de8030ad6e7e9670e5a3af45f4174bc5a51dd6
5ab90e154ee61067a3e3a436b3c8d58b805617f9f67871da9a269dcddfa1762ac7d89f47
eccb40ba3dd4399c7d711be3d954fadf563abcfcd58a3b7720ba136139b8be9c63856164
fed70a62584fbd0bca273efee748a30e386357459e783d400f72adc19a686ab0c18bb3d6
288cc219742bdafafed3927f87fb7cb93049282a32e053c8eb8aa767f990cae2730ccdb3
5655857364d073726a3cc204d13e6838c6f7b8de2bbd8b074d05921a682cc2eebb6c7003
7564917f0f278344137e32dd78bf7b24619a7e21070455bbc20aa953c4eb5109fae82507
eea7205c668dc3ada08dda011161ce9273cf36966835bbbcebefc1b04ea60a89cdf97553
7e6062ec1ac36f96199339f9ec300ed55b585f7337429c4a3393dbef681ade7103c2d0eb
815e6534bca291d95e65c3e8cab8ba7cd9df1708cc539e0da3978708ee7e170e5830d111
caf0e203e1a0c3d7e0852dd0f3393d76b8481514c018012c769107320652a59be15f7641
93056adb6a46b9e93cc48c1ce758cea79dd430d102745602b42ac48d193f72b50478874e
37899b64e2b42e096c4772c2f9a63586469b1e79139fa2dc01dbb30a265808c91657251c
ebf2a17a0789373eb8a92ca982b1b09f3cc8f075cdfdaf185fd49a4662973e790e29f7c7
543118bc3d4716751242c75eba8d2bbe075d1c2d6f239d0eaf056cbf45338df5665eabad
63fdd5e694440599cdcdcebcbec0bae8680cb58d38f2615bc9743ab24539192f1e6f75d2
c39b5e8e3d86b4bb62d38ba843f514040f6cf26f1ace9c1ac29ab40dc4d65e4aae9d5441
6d74c3159ad2c1f9f36c0cd868042d12675ffe161e999d1d3a9c80830b3e781e07cfeda9
c0e77da3ffe2059b3ed219160a0a2dcf597f54e21213bc3248943fd141e807f5ecfb4d5f
b0d2de6bc6d53a69c44d8b3857893261a102cdc7c3c8bcd5becb2185504d074d7d3a8f5d
f37d8d0621b8729069bf1889a96dc682c6d50097ffeef0f225780144dfd0bdf3ef9fcb0d
046a19c90075d2dabe11764b4cebce91c65f255b539d342c1beade991797ca8eede2dbfc
60d5ec5f0b616671c726ae852d3261416856e51af44516e036e9fdd17291ad547942faa4
61c59c5df55a95ff3e2524c328ed1e81a821265110911698e0b458aa5d14403e2e058f99
d9a642cd7605e8d78c2b45dcc93e0059c71d021428bb0dec99d76ce161bd85081d3b13bf
b39e77054441da83da532aed09614992d92c474b5522584802a4e6cd2dfe8078e9322839
92ba862699524a2e61cfe2661245788ed4883cae548bb52060d4ee1fe50b6a73e55f3a7e
fdae6b40955b62bba99920a3da9ee62bf0b99be34fd31d51cb1d509f42f26f5bf07d9931
ea9a9c13eb5a6dfb14ce5d2e0d6d765a8a556b4cd270bb1bc48c5488237db3524d0e9276
beacc8a0a5c30812799b586e1da3d603ba2a9b4f8b62e7bc634451b51443d5ab338db301
43521291b2d7364b36fd66a697c06068f22116761ad328cf312e5c71a1aca72dda6aaed7
6ee51f6c3da314f9d4f81249a14fcf70ffc86c746be097aa5372481dbd8d8d9c58831071
486e1972e8132958e43588e8cb6e349c8785f38340c317c9b1b923fa3460e7eac8b5252d
41fdee970d410e2ff4e72d1f8f510d453d5b346a10d506d4f24a1b61a5688e3add4c9bb5
ab73c2373f7a63ce9162d5d96654ec1fbb400b07c388d5762a90d5cfd498f19d4cc43090
3e8a2fa7a97879ad929e3ae328ce42958ee47e3884b7d2087665ce253d73514e3833cac8
2a8c9adb9b040455adf43d9d7ad3bda4298201505a88d8ab73453370b9102027cb0811aa
de7fc7a6a48b45e0948a63a21b60aa85b304980c2750ba68ec0f04ccf07bc8bfee6b345e
9629761b33fc8bbef10e44597e42897824caaa4725d66eb90b74879abef53a2679a9ea82
a60e0b4824c04dc52fa09e428ffddc1dbc1cc9330ad20e2945eed46d891daeaf67516104
53d9aca3c0d3170ff8a08b9b562bb83fbcf76c34a16cb9525510f7315a1c7f3d797bb9cf
b9f173ecebd7e6587cd415f7ac58b956cc04b52a8dd87f3e4e3f89acc902c5bd89039200
746dc3fc0ec8fa92966d362338ef95f9fe86e695703fdcd31fb2192a7f1c181b368e5af3
f4084204e1de79d6aed259e486c5138e0e436599ec2e7c25cd3aaf84043f4bb51dcd5662
03ab1bbfd2f119f5eff55b6523c503c6c88b92350082e9dda6f4113bd11d3800f67cfc0b
1f192578382748318bf8262e43fc1973e0e1700ba3700b71c73110fcc9d8ff8828369a82
2cf6c496fd1c5f849d917f3675d27c36194fd9a19694495187b406f3aeda3456f5bc6d2c
dfd5ed7e05200bc71b4028f660817db2d22e34779da9e37c2c99bb9b4d4f3f272958f810
e4621145e03cf676a05fb921901bce8b1d8cacf2d8d210d784b3ac8804ce0094cfcf6ebf
784901d13d623bc684883e5acf2faec2320b3d58ea2c8bb33b268ca6da9083fcb456dc33
e5360d99c3af6d53dabd6ab6225ca4f127351e0ec1f3eee9ac53ed955d620df35a47a687
2de72d32efcd28d2635fcfe11040f29de6e600a61e659804e941e47bc335c60abc9fb697
38b1d74a9271bdb0edc72a4115cb017519f8765815dc2cfde61dcbde96a18fefb4dc8fd8
02e3a91126ee89e28463eeba2dcd9758a893643b76ca14383113b4ca19869c68b7954cff
6ffb98a24a88d44eda5fc042234bb4154f0c0f7fb76228bffe3757963ae14abb6ee6c937
7437dae8d00d6b87ae22b719917b9a591a87b7de18738f944a5d9cd3073145be9cf72510
62b883c9a117f7e54d5494e02dcb7dcfed68c3e2dbbe94c7c2dbbdefb534f5e1009c6063
28b7b542cba428ccd377a46e90801a917d74ab354b7a9c3c9fd9bcc271b59dd608b36ca2
5e3356aed5ca6df470fbf835f931f00fed1c3430690d0e8d05d4c26a56f923a07b2c3db1
a9c160aff5e363d67cf64e891a06a050e34ae1ac76208c4001dd276f597a66f0e563695c
8d5b88eca8b5a0aacdcd5e15da33115facd5f4ad7812eefa1ee2162e89f306a11b210cce
6626f990a9940a4676fc67c1681942f210324cdee55759395c975d7443c212dbbb5e2830
7cd27d3edba779528d5955eb37cde21f28af43cef7dfda942c714a4c073fdf54560aa640
d00378e15eb1a9c7b391bfd8491136bbf110c6e89492b121854619c0ee7b599d9e8ead86
7fde3830b911ee82a0fc0eb4bf2fe454351112aa7ee600a065b470173993099fe22b12b2
77aae6350cf4562310e34003dbc466f959087f67272ebf7dc091ed7198426467cc0a7dee
87336d64933f10c4b48a2ec71a59e65e94e633a6790383dc0233986236ad1c2a3d3ea0b9
3eb61b7fb38d3495e87e1a6b8fea5840b758ed91cb69dca57c01e7d9c298ea3667e0d7ae
c4f50ca183e26cef59e8ec92b2c22a27cf1919c7c9ebdf4af178702a9bc0ee0165947d2d
4969372b966f4774086af112d7652e11b7095e221f75f9b35e2f430cbc291a051b06f692
088d4d2f42d4834900d3b60119f8e576809ee0c4b6e49986d8e991f4aae6a8af4962b952
9530e91bcc4e318fe54fcce0661a9aa9d45ae794e778fbacad8aa915c81f17d6f46def10
849e47e7ff4671627ecae281ecfc6dea6faba71bc5d416e483a4d93cd2be24dad7c0461e
509aa099d9e05de52b436d0cdd9bcc52902a4891664dcb9a3bb7172eac7f6b87dbcafdd8
7e2cb7e6f839acc99fce5d53ed668dbfe9ab3baa535dd12504d9fa491061de71fa6fd2e1
c607ba313c9c27d5b91440a6b3c1ca597704dca46084d37e42731689f3c15db13d72effe
ed2de5ed7478e259f9e3e99504a0c9377ced0b158488d45bc7fe17dc2337610677ba2800
c2f6267a3069c54caf942f0fe1f0ce05fa3bf4cbcaca5b0f5ef705955220ea6839bb759d
0abbf054dbe6c1b1db0dec562cbe2fe4fa39afa785453a1ad3aa27b1f9e30564b3b1f4c7
4e778ce1abb4d054f3e8178f7d2530ad8010fe0f4534f3e1148b76bffa31c528e56cbcab
e807b1fdd11945214fc407e68548a1931d1c057065d38dc95f2929266f7ed56326b5c066
6ce3dfb89c3af80a4d94a042093c88a73678d8a0c44a6cb28c4421ac00cd48d091d8929a
261d9fd133732383f970f02cbdff0a53905d3cd683af87149620fbb70a9919c13f0ea953
37076ca58767374439d83ae8766e764dd61cec5faab1ddecd086a8afebb8d1e4a79d606d
9a09b1acd99a9f92bbd5edbb2a7bc7878d73913ad84098c15804c02cf0a9fd6dbc19106d
7a24fbe55870d671787eed210e12f9b00913a0f41a1b9214a9edff47994fd5462210aad5
63320c24f64117bf715f4428129aed872d0c7744c09c5ed499c72e55d0caecb78170868d
153749814311dab63ea35b6a465068a44ca46de203d9cbb18cf71ec721122e1cdc1ae28c
c7697f5d2a6ed1101891dc631bb332ad849822c2703dcaac2a1fa1dbc8d2be8e831a1e50
16095c59e9d253c52584583fb6eccc7ac77b23074628d9c86a5b0297d7afa2ae5719d113
0c5ebd4e97f6d10d389564ea2e69a398db21b5a71855ffc6ea0524ac0950d709e6e5896f
088b39b05453d3c1cf3cf81ffdd943bca90a1b3461fd46686954020a06d06391e2f7fa2e
38a772a6b802ff2cf455269af7136d25a80b9d61d2295a1e4612bb6df27812a1d9658ba2
39db45c7aec135d9506c7c0f352c691a0988b14e90ec3b77e812e9763c08e05d34d492c6
910749565744e197421db0689074fb2e5ef82ec7df47c2f420558e138f8964c35800ad06
6b6de80bedb3eb24460778081ca4a98b26777c25d1499731f32cc24e32aa51073b7c2bef
67342748ea9f41a497e5accf885d7f6bce8ba5f983e36d0db917d312a6728b909084487d
03acd6185a6b602af2fe71853f8d0bba393a66d95bed8322e7368014e4cad28f02191cc5
249caa31f7d91efa04e1c964712d1510a619e383e0ee2825641284ac4cab630d16f1e38c
7319fe051ca4f006be45ed5431dae442a4fa215bf5287321ada9b43d93335fc9a4801588
fd72789787a6cc61fe861775c8d836200598a628cce30e52b2a46d493a60034ac9ddeb82
dc0a3cdfc590217f99e1998c2eb2da41948776114634faa886cf710d366f3b404149b1d4
f6aebbe3d4cbf4ed891f1f830e0d7fc7fcc3233fe4031502fa702851f0fd2b2bca86409a
0b638bcc7be854ecedaafc8846e5b4e496024319886b137748653ba37b27be88ea31bc93
affc0f96644a0934f25ea40f492c9c7225b8a7148f3b3f2422bc38b97d94533a7dd78367
1655836bc06376d8c9774149b750a9cf5175a0c391213559535b776b752f1c228c103c5e
521b1b10acf56291c73a73a0598ecb2dfe45ee29e1935fe132fe04d8ed412dd9c0108e1b
449ed426142e1b1aa95925ce1bd4ac93c06e2868945beb96489148abdf74a96f874430e3
665ef96f6ef65ccf5a961876219cf1e0b1fa0395f8257d50091ec52e38b1612393048995
9ceea796719dc85dd0de7ebbe8dbe9ed631f0287f1c0ef240d67576a23efb699ce7aaba0
10df38c9ee7a8b0f22396244325a6e075c3a51c78eb0669630c6ec769b3ce0bf87991758
e7f18603aa511c92cd92dad0dcf97276387d519a45bda09bb99e241f478409112e309966
5a2995a90034307b3741271aa21ca0511605830bd5f82969dee0fe8542cc85ce074ac1a5
2488af7888068612bf6d688fa0e105a2b3dcd2796a570bd9bac392c5ca5c8d16fad70f8f
25080b05b1cd84bd7841d524ee9b7433fb045cb23fee952413ead18b412e72ab1395a493
c0dddd34c504ff13856b34c1adc31f2b727e8ec773167eae2e19b7620fc2ec94c8d4647a
dae2ae401f1c13b8517df1ce0734e116de83e73c49f355fed73deffe4cef815cfa97a205
e0a18eb9df4a504316aeefbe64c822ebc47560facc7b0475a7a178058fd6f6ba89439723
14b171234f8e072a6906e30457ac72189a49ef5433715fe65de8782c608cae4400d253d8
e6bbd4042008549f1a25bc99da3cae25003461f0713883f34b38c27303075ad1000fd844
d9e3addaae54de33f8a5f5217e7b225ac0a10b429e691680f586f1b0a52562e2854cd3a5
33908e9fa0a943d68be1badd929c39f1ef51ff90210a54c6f8a592d2c2472fd4b5673781
93be3bf2d4c2900d34e9cd53d18379b8054fdbe60fbb9c6a53e254208d43e893fe2112bc
eab719cabb1e8effea350f9b12bef570fbc5caae827029bbaa1b0ae584534b39f4517ad5
78323c8994a540007ae0801e95cc9e15a82483e6dc513a5f7b7f6a14598f01f8e4edec5b
b0cc84741f19e1afaa5107d663d59697f39634181363a5f34a06464e56c333974a3c94f7
74d669df9ddab841141882df510cdae73e64f33bbfe52555929f9c8f7d759e8037040402
879dd6506a4f1b7b8e6fb506d2df8279f1ea8ab87cf4163b62f13bd38369ae82987f4976
4d408f07ef5fd0adaf3be1b925cac2aca1cca8e090e1fe7605798dda05370381dd6dae6e
d76be02414bf125bd54a1b036e727ce961ae73c00056eea7ea84b0fed70a2bcc3ca975eb
c980f2ae4bfa3554584ad393dd4d83f24a4191bdd7482cc2ce720501465d58f946c908a6
487d2ff6caa042fd49c39d5f20b05475353c5d1a5bc50179f1cd69eed6d0a99b5d1d1c12
c0be91fc1e15dd2f588a602d99986ff58ef5b9c75673709fdd6aa1234d695f4fe54b7e21
8c02b6ba6c2d26b90226ae4be014c55529a14686b56c47dba28f3e007ae465b8ed3d1a1b
32ba210bf20bcfbec6edb398241c4fb7b3748f03a0caab91677181cc811feef711b0ceb4
63d945a1fbc56a3144a51d19cef2a460158dce02b2b7450cb0a9755214c1d09b2d7c106f
d6a867be30dadf34cd0503f7fae1c8b001cbffb2a46362b5f0d8a4133a813f1d40d19448
c679397221ea37c2aba1b5cc8213f9c6adf7876d64f394eb6f9f82800a1fae7a344ea561
88480783d288d74d753be1fb6c402bdcda9e27f0a09264932971cf9baaa006fff86ff06a
5a2a4cc12c2b4b070fd3a6b2609825d4a03cbd40caf4e2f4ffbf29d60d1244d845c2c1e0
dd5187da0954c66c0e27f68a8e0a7cc3e547620b47f2b010dc5338e40575692f34166a6a
d4252e6e366478a1e69409da04238d8e67c608b9aa910634438c54282b1dec5811f2078c
24b07d2d15181862b2222357d09e1c5aab173f9c3bb96ca4f588ee3c1132adb450379e02
1c012f9f2aae43e881115816c037df6101a74092d6ae5ff4fbd249127f2165fd14cc0a15
659194dcacc9ad85fc31139feba72e0229d0fc92d92c48643b9c3426e1e2fdbc073ceb8d
5d45fc1eb09217863c67761876224936dd65cdd8887429b071fe2d8faea210e3f9eff055
ca7e678395caf1cec79e16a393c73a944dbc781880ffa148f44bc1524bd90afdbd4df421
ef6f3c76f9bd8b1f8d5c29d97734e2ed2d323c4933bd6474d5ca90bcffb284d7a139dc06
29a072771c7cd83fcd95d52b58472f7e7e1b79804aad155f5ec2d1825dca0312432e54d7
e2bf97c7aaa566cd41c268ab221405ebbb793a3af216eef9ff6e3965e7b5d9e17db46043
0f7dad614e8ba9edf0de97716e3997eab6de5886957b98d7199105fe89a9344495b99792
65239ab60c9cb5884d0891abfeaefd8d0497bc7eefa3f7f17e6d0dc7fed1ee418b6953a0
6aa848596cbccbaf9db221f257c35e3c3e6f138163e7c9d0df51f4effcf89341156e9a3d
b62ae1fdf28604299135f7655dff5de2c3988ca85010e6d2e861d122eeb27d400b2143dc
ce2ca1161beb7a8824045bb9bb65f4d80706dfb3f4a5453117ede566e5f6590ddcba9781
cd6d9106a0f13bf02bbad1f659c4ea413a7e15cf8315d97ddb12cb52f8161654b686cac4
5b82a67f737b0aa81526ca02e9a21dcd460fd846bfcd48b212f5279d82a07fddbc025037
d3614101268e482025fad65530725101e57009fbd8d4c20617c2e8f2c01becbc29d00733
982528d205bda62ca24a5ec8775d0df452ff1608090cdb6d025c1fa2eb6a6d2a4b012fb1
a2dec5d4ad6b47e7f58fe062765d776fa1b43d3d8596434c40cacf77a76bd59a8cf7510e
f4de8ed65dce9a90bff04c3866efc2ff12767fe86cb24d423f339393fd46a555323362fb
0bfd0195a906ea78ada7f686d9f9f8c40339234775f6a4f534eb0a19d10e6c06db78a2d2
8a22df7af630b1b39488807134587a60fde4eda7341d7eabf6264829f572c280d540b9a9
b29716d596f45dc953755b17094cda8c53661352969560014b5710de17e300b5d53d2689
fe82fdd58cae02913a0b9c7ad1598f2f6d7da4eed7013bc293e1d59fdcb2e3dc403b2022
0b9c89367658d8b06e6780e749f676f7c31bd8b78741cb1da8428847313b574d926d0064
abeb39d244cec223d45f988a089d29660ebb54f0237a4e09d162b9c5908f35b2ec9478f2
159e6806e1bbd57a2096ce447ed45b6d0025aaf3e5bc1dc56914981cbbb3e6821bf46872
8c90433a8a76d3a07d69d618b651fd7b8a526e95713fbeefe1c4064a2d153e9967f46ba6
52575dcd2104cfec40c36b095eb070910c2312cbafe7d6570ac0b7e941dc29936e59e3ff
7f1a4fe787220ab866edfefae2b58b4b10568626132ef50e5f38024b25fe61fd77c93a75
927788be10f88e569cdc3b1e0884c53765fb3257865373acf7d08c31cd189f48de5edcc5
6267cc67b2a4a1578e4cba54563dbbdbe05d5549dc86b70f7b598026f6902d3a49c92821
b1d57dfc578494be73246c249f46d5d05d953cba62746be0f3d7c75032f72f766816f4c7
d9cd5d31facf37f44cea3e918e77d7dc5054db6b1169be56c3f07fb990a1720d5498dc63
4bf968b3c81eebbb42ffb1529158cf563998a3b0f2247d9c5945190658719bcfb643d0d5
30f60acb41ff0a4c5fd1b858dae4c9b23b2212c0960df2fae8e2f42dfa5339b0d7339fc7
21af197466340646f8e192e394ac9f4d43eace6425c639b0fb26f3953542d233b5a4882a
822b71f4a910d811767028ceb24f05883c0cac4e19f9e99a2c404aba4f3fee84c5f11ea9
07981f18e198c436cb8b7e01dd0e54eb1b3a70c05100b09544b47f975220ef8e4c9b1ad6
83c1a64cdee023cf7fb9d57b0415b93741a5c87fe3d68cd261c22cff42f8f7abcfeb6423
977f340b05d287591be7c7aab0261d92d79c65302d43a95a07d26f603ad51c76e2b9e1be
69557810271a5625023f373e8e62c5c35e700536bbbf9b306ff57def9c2897a3170c3e70
c1ecbd2b37904f8a46e59a9213e8ed05dfaa9796366c93f29171d0a73e0841261dce54b8
218f76770ec91bd663bb8e7f7b3fc01228f18ddaed39ec357406c44d7eda3bfb75a861aa
740390ef3bc0a633d88ea5eed4d5ca65d990dd1194e64f7e1bb5d865418af2f86cbd21bb
5499f4b78e370d0383a198a28b5a62b2842a7840be4db4a38a8d0939a811e7cf1715aad7
554d3a6de31d959895a1902db35a9fe2847ef72a246164a034de5a416d6de8b8cf9358da
28735c16c2ba16a649031ef380a14756b40296a947db13e0b5e9ebd4e258045c45580029
70a408b25a3819b67bc0057fe1db693f19d6ddfb941b8d001b611826df0ec18230a6fe32
4e402afc612e13ac856adff4c9a992c5196db99ee2f5154c7235399a4147f00e75658ca9
ce1871475c275488ef12904ef920cda1592eef1ff940226a251cae2a9049c1033bc2c828
e049406b86049d3d0b0ccf3cad49bf90df83fe3722d3986bad1971956399f0c55f124a05
cf8e8079d6ee932cdfc28e23b480b502a0500634abd416f9e4c583a54d80f4925d706b01
97325ff2ce27da9841951dcbaf15d5a66df57f9b2aaba5bf53815280d9b9ac7d1058867c
249ce0440c144e3db86d3701a97f2357b2e5e129119a27529b3b42cd7351ea6648e2e06d
ba6b5cf8896039880f75c74b31c403345479496384876020a570a940334e96442d204338
ef4aa7c29c56a76e3f9e749893cdb0a5df1ff675f87d58dea9ccdc2c9a8e745ae3b38e8b
9b00e38652afd36666874b6eb0dc14a8288afcde7674e965dca98aded2207d840217f4d1
ee9774d909b5386da3682ddb70e8fcc3f04227ebfac14955f13257a7ad470bb513965283
a5579835bb5a843d437e9dc84d0efb4b76f373abd4f9c8d8f3ebdfe4d5f75b5a60cd0af5
dc1946ebf8cc25cfecae94e882d8c1a00188c5da63649c3e755bdce999c91d55ce84084a
46beedf614a5a4235d95d9d0cc2838769c33c07fae05a450a6ad64f4deb5bec0f9dc92a3
e6a2733534b3aafc368dc84f158aba4c30cb62646778c00a3f1484041ac7cddccf37a1bd
9944df8f5921746af7f80c9565658e1d9c206ff452d2e514bd032a515be65ae6e5b99dfb
19cf8e0219ed25462b721065c0337c6407e9f609a0d0f7deaa8d791f870c8a8149afff77
38e208ad1083f297c569ccf54e20d4925321d4eca42b4a604fb2944057afaab67511a8c6
eddcd717898c97f7c2114ceaa95ae31b5801311410323d7b45b303ec7168d27d2db8c7c3
6093b8d8a563dedeca6f7d7f80c2fb5d20c2807b0d3fc385f1c6360b2a63976a2caa05a8
589f61a6f8613f2859690d9e8bcbf446fb7704ee3e5130c846e1ab30e6b78f82e0a9451a
4080a34b8d67eef974376541dfc19bdeb436dd9c438cabb42d84a2d1f78043d5657810e9
cd1f701f04def7bc7abf695a1d9fbb7fdc4aea08b03eac604fd1595eb1836fcd8f46570c
7bdcc1e3314a42be87c61c805cf3b0ef847fd855e376103c2a2e8f667741e9f64ea95a7f
5bd3799c8a99f9b2385a2039492c9c4af08be1e4d3041735e71f3101ef1b49aeef508787
07bba57b51b2c644da81f56ab05ce85a59ae3c75f50be808110ae738f488395a7725ee36
41eff8085d45be27f6f82e2407c52c4c75c1983a8d31833f2d8b38baa74fda297c5067ed
f1490250e52d36999482bf74435ce2c57eb1f416bdddbb729cf8d99b94cd23a4fe57a3a0
319fdf79b22d19935c7dbb42b0e3350021ff7b7ab6010c774eb02b547ea2f45a014da327
ff3824247b581a4f0111f2382d6d68324d59cc31512a176f7cb4da5106a5cfbbeb13ef57
c051ab17cb1905fbc25b184117db6e71a12b0138fea96b8686d5949facb2d72e0755f84c
78aa67908a120514c6455a58a92c9c4021558423e145f7d6532d3d23665849ad5b1fe48f
b78cdda8f2f615ad384a305f25988f46112ce75e07801f29bc7f7499f0fef547e1d18c4d
3d5cea67aafa93b85c0dfe9a5985fb5bb42f98c06e6259e4647b5e375a4c2035e6a2f776
2a168a54ff33afc897f917f815cd7ae166919c4f62fdf2070c98033c2cafe82d0c944a46
eb9eefdf28c0623692264468e3fc4d8629bcb608632a35789ad304268b6709a9c70b7238
06e9d63a2d9155472eefb31038421dd15aed7b7143a9aa1b9036360fbeee0cbe4bd53756
42a5ed82d097eddc9722f96a92a54fd5e5e80967c104f694304564a95f66b9db397e007b
95aa0da039efb5b1b43aa0e863ba5e48187415d98f0f299a18fbd5b92a44d7ccffee6f35
f1927611f28a3e5d1bca4cf06e0bb5897adfd30d3fa1356738ae193a66610fd6b61cd952
f6c6563c38507700c8e087d73ae9cbaa4ab2a262898c604a9ec538411687bbbbdd2ab0e0
3df8815207307c485ac3b55d67ebb8dd137562a3bdef6696f5372c9d827255ad6933022f
53bde69210defb16464569aee92c1d246c01ad8a4486d1668f9bb84eac9626acff49f64c
85a6991ccdc67e88333944d063674fef2ba67c320518c05e8541849019be5f007ee8654f
5ec8179458a03fedc1d68f17700abc69b7e3f36f96de627d28f23749a0c426baa004c380
c99b631c9d69e64c2289b0f0c7f28f508d30f7feaa8ef1b28a5291b63de2c21c0aaa8109
4e011b57d045d68294deb2b10847e8c590f6e8dd3653dc265ce8e00b06828be69ac7ee7c
d7fa8c5a481abd9962bcde4ed00019e94586cc51e057012b83eca5698d85c5d9896f2bcc
69116634e895820f4b29decf81991cbf42927fca94de3de9d443b6d45a2a410b9411a9f4
e3d6a00ddaaac6fd5ac34f8aa8f51af4b82b9245ac66bbd20ffd70dc15b2355f8c3d5326
d62f68050251e976e57d56092649fb09b20c68fd6de02c283558c591fffe5feaf513db34
3f182cdd011595e340bbc0e6b6e5bc61ededd9f05ed8b41a3b0d284c0b1a7aefc526f59d
9a27ffe3b272c19288515c9dcfa651cd0b2d350b8dc08d624c0f6db809872b6e0af9ea07
ca92e85157d5d81ecf84c566168fd7534d19fe635097a769a4e6ee4d16be956cbd8294f5
21662f445b7c1b0462e275a356a751cc2b9fa825ad8e1d1e9290ed9fd753ccd920e91a1e
550715c2c04cc98649c02ee43ca3b5d3cc2d42f9a33bf892438ff13241616a0f9b6afc65
71edc0fde42d5043b1b6fca4b53bc3378392ae31796e90374ed4212dbd787646fc9ec6e5
a74b66cf9013387680036a3cb7e8c164884e40138df0beb3989c099cac3ee2bd7cb44a94
4ceaeeb161e3325271f88f954ea00a8639f7f3065b28a70c4100338efb601440e4cb44c6
ca86896fc21633d09b8398ac7123cf74debb497be7b98af00c00ce23a6283f7ef6b9cae6
e3ca4be80c99ecaa9eca0594159817e2b8daed6d6e1f3489b6339ce77bfe75fb7bc3563a
611563d8a795d5e8a93a729e5248db7fa871fce8ea32bd0ab92b06262ebe8480296f8548
0e9fdd4bb50eddc60302227251465af203ef66c6f41e79a3e85a1b645c4af0bbc6acea86
37d189aa62417de04ad641563f5b6d9bb6fc7d7879451c9673d7394877f9fe5ab299210f
465a86eefa8642a939cea9f327890e38900e0ebdc93b607a963705ce2829d1ffbb592724
554ff515ba7c69901798a69d19e2d8e51b006cbb1e4446d7a05017a993e8fca597f285a0
976baf81e47bc225b0656400bf11c10b553a7413a169f025027939bd361bda076d733854
6f477eef905b1767deabe505c65289a33d026ab518e05fa8cb6696bdfe6e5a32f2e7445f
794819068f787f52264b3c68aeea1336402afc44b3b77b6a06b758beb43b1a6113e6411e
f758375b33ac34378906ba249f5d047c9eeb907e289f2f3406c0129cac94ccae39376cd0
a48ac93f981829f00642192ffe8b0994b012ccd59b1d33273370fa240b328874844407b7
c67c228f2ceb96e431e55ab420064fed9a2bab71c51a3f4c3955050c86c7939e5dd377ec
e5dd61ae5da873192d4348b814231f3cb70cd527e344495fed090ef8a58c7ebcdf3936e2
fb62eda42561be1d9ba54cace58cb970b5058639f61f24426c8f70cfe8ce89644e7da413
61ef341fc50ad4005d0e5d900aebe8c6f5ceeed965f084c675be45cf510e0ce60bdefe01
8437ed9104df342056946c6683bf3b6874a899c4f0eb99bb526f60b0a438325a02ccce24
2cc867ae266ddec299cc9218896762298576ad66310d5f2396765b07fef3a0b3695e0f4e
e3e9d2d5a8e2863a32ddca7558752e1a88bf79547edd6fc93f70a84aaaae829e464377b3
ae3787f608353615ec51522dc126455b3b2d67855e7302979654f320a298d39aad63de54
d2afcb6addf49fd9de7a8e662a4b2d2d775a8245ac0a2fc62035e026575fe20dea3f0246
ff1996c3bee4b4e262616be94f2c28600d7d71798fc859c2a1083d79bb038d5e4df3f2a4
cabeae98ddeb7f41c5de029440e4f6bd7332dca84c4916d5e0952320438edc6498f2be5c
55214944a583542b667dc90471357be63957288cf1341e9db89658f960b7d47d30696bc5
11a553813fdcfe829b785bfe7cfb62de64a140b5c45b4e666dfbf12c34fabda45c8dfe6c
d18bf5f483876141a83c5a006d289ad4ce6747eaad7b37aca4a09a42bd9c8fbaad6e7572
ec99a658a71447a23fef06b351f2aec0ef405add22c000dc8ecd341cda84698eb4f2d658
cfe607076250acae0c45dda371da149bbf968ea24e58540a4e1cf68f78e215806c72f2bb
85213c54d6afccb9cf0cf62ce0d3bc5e11bedad4607b3480c23b38ddd9346bdef3659b52
0150143d34e729dd00e547efe1b4abf6c452418502f56ede0d698812be3c1ea0d8277728
73e469e50da12e1768503d884c4bf593cef3b71042b76cdc11569d03221d86c9bcc7ecc4
ff00bb87a5e1481a95b09b51f44dafc6867b5e02300b709933658e44a6ac89114f57c1fa
380262f40288c542aaf609c01a5520aa4c7bb3cb813ff1353662181e4facd28a5c88d287
6213a7439d374d1707727439195ff835c3f93d5196953bdb8c74575d1d08cb9b969356b0
3a7dccb1e2f76b95cea6fa5ad850717b2cb714886163451e9fbf0c1fb8494d4b2a8856a1
0b0f80b200a038a62321d6ee28e041748555eeb2872f8cc9b7c2d53f2a408a3883468aa3
cf8a71349c20c98f1a45f62720bf493d007863812989c17c41a711fa1c378b4d47f82253
b1216fca2d9abafea894e3eb8449b7a6fa18882634787ad7a1d7b3e677e6cf7519e4e169
c747e2ebf0df6e5b6611ac65549b914629541a98dadb72c6b68eaeeb30d8d8109868464b
7c13270fb89784ee3d291dcc7d7918d5443c4bd40c297101dfd1f54439181e0e66cbb0f4
84bc0440f5a248280e9d3e362f3f5faba1e1e9c79e035ee1ead0c70eaba8fe944c133624
7f06e646089a184defa8c3dddfde427ea10fe90a091c299e6a9363d0296315b21a2ccabe
c454324d80fec8a3b204ef19e10eae496addf8c9f01c645e051c5ba0a8c46810134af385
5b721d5661ae00eb1971d7d0f1534d0655b49f2deb30e114b9d0efaf7b957104981427fa
f380b6796142a77b2a53bad32dab8faa7956e24abb2b3c7131e3da718b7c51ff1e68670b
adce03d9a76db1f7e3f0c0482ab765db5be2dad343134324adb6a719a28c5c541e874a31
f006df6257d579326dfdc7c67c26ff6fc1c0132b6ed5b2eaa3b01ce37c7171ad4e140c0d
d27c0d0f43b0bfc5ec5c867d48bf50d9b030a1a22bd1c14b59288d9cc831535222251ec4
bf5667b267d27af6259cda892c539f7699306c400dcea6c2b293c678774859ce8655645e
173c26bd4b8d86f89b558133ec71e364dd743a4f8a4835f256115a4cbec7765ecfdfefd5
f6218a198eabf6e833aa7afc8df400a98c459c52c0d8ee63f74e805e550a4d167518fd38
99e3b858f78d375b145a4e7065477e9d691d4cf3148d47afb4bffa7a7150cd86858c81e4
bcf0c442216645ec71f66ad8b6ddebf9dbf7d8959c6a516fd569b2baaec2120037b23e27
1d4ab9c78ce6d3465721da0085792d787e7cbe048cae703f875ccfe8e9420eb17008ad23
93cb0bd96849c70b74c8d16b4daa466efc4fe884c0eb6b11b1984485b2797e095a841feb
4e5b8cc1e9c086672697bb65dc114362250c0155a13f2569017d8715a775bf2c47121a63
fb3d6e1b897bc60898c63a36f4978beb1c3daea86504ffe1c08ac81ae41d2ee05a38c837
1c825ef2747f0177bd39792d9bda2415884817c135e0a587e3966b61ede39265b7e091e9
ff1674c85c50853afb06a762f3e4c987ba95c220a086a0dff268510e2f8f4ffe4cdcfa16
66ec835070c6c1e5859acc2f610bdc1b6b77bd654481ad4a56192dfd719e3abe508fdbc0
d806ed08b98c4f31fdc4676be6be73322e49f5c0601fbcd1fff13646c0fd2b7fda96a3fa
7115bae9710d68e0322a32828b0e1cf2ce9ed5ddb6300baec0b70f2e4b0aa46f10599c2c
6dac11cdd1f82726e7ed0daa86e9f600611600d8d44bc46506a5c66eb53232151e35f57e
b92d31b56bab1835434cecfa2e29e33b54d40ab41bd2812618dc5a5fdb4302d972dcb191
2109795dcd2e20c16d14a25e997b5e5993745b3068eaa96db7873640f48b503db88d7e79
8bee68fdbfd67e892a7e44ee8d1d93a0d3f8cc08d6e9eb8b792394a6bc658527007670cd
1f5ca59e10d34d4c59945fea6a610635aa0f4e321cb9a7ff93192372335374a742f32803
94a6d560c350042ec00ac3dfa0f6e1037e63b5bc5f1b0c0381cb8f44dd2a694096c17f0d
96409bebaf49c96a4a1b610e942a741772ff2220fba71bdd7e915151b2ac6b457ec669ed
dade92dfd4f69260131f8fee8df30b999461c0453ddf41b683e00d4d6cedb711a2f6f9f9
0535c49dc5a06c7a85b35a4f3faa4a699e087c25b397d73599b5555769f5d8bef33e2b22
796e777226b0956440eb25f71fe9207054813c3bb2fbdb9678103f3aa953575665bc3e5b
a54f1e4b35863cc16bef47c83928153f8e4db891d87a56429612d83cb4ff385138d3d256
dd5aafcbf6d76be5adcf1121b1e434e60f20fb65e3264ed20399507ee493030c9f74b4b3
108e4df3708546dfbb450652cfda66b40e76d12a53585d7fb5c40150691294d020cc9421
39beaabfe8915b08b68d70c6f9613d91ba18d454506d6a950368ee258718238ad7ed9a37
0540a1ab8ec85d12ebbd75f9bcc69e887e1e5b909b96978ea3d42782e35ae9f832cb5337
ceb6df8effea857bf68dd4a71cdbf222e5807a092ad1fe4aebd5fc0f0a7b9c2d39898449
a2c6ad3dbbf0922c8bae2cddda4364968ff52857e856cc9c23656c3c37226eb3547c855b
7239d59856abf04b18c65587f933ee94e3bd6a3de44db390664eb85946374f8e522e9c35
59b0f340acae87de6755413ee2f69909a639ad1d735de36ba414c3767583f83a4deed739
c4794ebc745b2ef875c4905d3aa28c544be271902948e46f986bb7e25b9e5acb3a168ace
95c3886799255fbdbceb80b81de771dba5d77b6dd137d5bb155007122c070235e0e3b87d
2e528da99326864888800bec623080372c10cc36c5b510628b479516eb89c4bf0a1f98d6
f161917fa74db1a5c170942b0bbf1278f3d8f9f4407c8438f2a1e5f024374b6d38ddd568
db5bda6e091bd9e0fb4211010ac7c60e1a134721d5a510b5dfa5b4bd482ee7d9b54a3a8a
8a43140f4409a0ef272bb45c435f06941e80841b1a238ac892385c125b096cd06e04d753
10ce8b5637793d4953e1ea1976a35c5472e3eb75f8867195a6e4f26c0c43980034b4e238
68e82c21e041e0d89e25148d73585734c5666072cff72816970e4723be571f5c8e17e00d
919901ed49462621ca67bc57f5e6884e7cd24568e4f8852baf2c0a8c1ab55cb61dbd4963
c6f1b14a93ef2ac8b631ca1d43d00c80171ab41bc43a6b8ec2f003cc246da29920cc188d
ae95049b1884f5ffda0cd4528b83d4763ae2462ff0179ba60e54ce0f457e553b315bfcf2
94e972e4304aee166fa8d5c72d31d78e9752c78abed348110978408ae2eccf6a59fb0c88
78f010adb229c73837fc605215011a3fffef7a6f1c19dcf71bf98bb2b00e085e895c5741
140e8b7d82047310a46566f12692ce5254fa3406986d53cb6fa3e9dc7d41140320db37aa
60435759ab6bc9815c7b8b6261e186fa00860765bb4e0de746f0c44e01272f35d2dbdd22
5c6d9b8602ec0ea45a8a8f26c961c700b28e7f27fa3765854eb53e4ca6a98411726f818e
b4ef668abe7f90b107480881363f1314d991432ad6434fae08a6aaa36a021b0a5325ad10
b88ee093448eeb0cf2b50ebaf647c1f476516a557fac79cf701512cf8e8d79ed176fe5d9
e2d930a40afe69867ce0783e507976ca338698a62c98c1a41017c41c40b27310cb70570d
173af1f09ad8367c71529e7cc519e9b2624c7ca4a314c305d18cb6f8ee167a6b84f0a704
cb5cc19965cddb7f107ced5376b9bdfba0a6a8949d1af5430cb3d22863a2aceea1e86125
c0dd4e4c306fa6df36d6c2003dc7d57040b730bf5ae9325bc16c3f8c3773b06d0b0aec92
dc8241d45008e84a7a71d550e5b149baec8d020e2e9148f2f64a8b164a48c72d9ab0e47e
da21ffe71e9ace4bbdf154623e4143e509f5bf30c9d0e6c768f1c9fc1c4087fd7917377d
efed6c77af4853902a48f2cd2ed8bc0c973c2468ff7e8012dedaab67e001e0d97620c2d7
b59b3aa54f55553e132ee8dc88c78a40006164bfffab35c9d32e42445458f82a31b81946
c1d705ff8c97aab17ac3162dd0198bc84cbd82cf0ef15955879610f8c6fb5db1e2b8fa79
344a5455da64784c2aba4ac036d31ad54f94c356cabc3f6de558c86aca2ad7c8967547c5
6d590fd739f53f6328744e3f9d020007fce4bd9513e8faee6ad0bd9a1b9ac04f3ed95669
cd5488edf9050da99ea6ae09875aafd4aba72e25b31307ac1778ed6e06a4bcf775549b47
d5f9aa4f317b62aae58f23bf2778c9a44e1ad54441dc2297728d0efc9bc745efa9735a1b
c229de86130c3d80dea0035785860f09eaeb3c09d05fcc27c6eaaa5b3124f038d53355a8
07e65daae1ee4c1b4a8c26a498ca8783189f98224e098afc360ddb166e8c469c96b93726
25f0950741c557f573b318b68e8395c309292a023f8072bfeba53bdd6affae0e86b734a3
cc7f40a0091ec01f969d069df70aa2fec5cd3e764c5b36ed0885fc539023d57006cd9cec
0fe603d2deb7aeb33ba93ec880e8e4446a7cfc8b7ad2c166945f869969c3dc2c6439bce2
20bda7e48a86e7acaa0b92bc8a6a7fcbd7e801d7d98aaad9c46ed1e4c20f7f154c3ec5b2
926012c7b581648c7dc4e667dd3c5b626f9123e0a858e56c4bdb58cf0acd4473b2016ae2
488b04efdc3ed7c67e4955c6c71e7cb21c9c54477e8f1fe2ff37335c85685735c16f0008
3bc3f30cf0df9b7402c0c82aa0f24492c2d6c3e860548503af24ccc071a301de0d448cb9
7a817ac77670cf7f85e806a5cfae0b7073a175f689da8160cb2e574817d8bc64b89a38f0
089f77153ce2728367bbcc1e3592e1ea103e698ca87cda572b94ad7235ee6e3432e94e93
49874bf037ef31e1441a5f98933f5a49d960acb46654fa4c7eb55b301431c0ec43496883
8b8eaaf574b70a3ce58031e9e2621fda2941f0981193a37d9865380c36fc703dd5d04e43
16ef1754a302a447f6cf6f65d4049499b3fcca066bc55286c7021382731ddb8bd123e926
8d8b7575076096ea418f7e21427d644771ce1f0dc0a48fb3833f9eb94117436e7404e89c
a774b02205bc13fd2a192f62ae44782a45171bbde13ff541297f957f9cf37b7f27330ffd
204d31316bb9e26efc8ce74fb54fb6004a01250f6dabef036646e763d22a41d9c1fc8d8b
11a8b9e63dee2345b9ebaaa961ae41e6fb955594c68bae40acd2e48deb2c78ab7b5d0440
b184437ca55742dcbdfff77d4a26d7f9d381ae44df68c3a8e2ac73319a17ae2b13b094a5
a00fa6075a52cf9ec4a680ffd04891d0038588ab39c325896b738e22fcf79ce68649862c
c31d188a95ba73ccf23085c689993596d46bd87d90c08f6d63ebb9892986c1d35d2c0c02
dee6c304cf3d8d90e8928c6447b3c4d7877beac297bf6a60e564e65cc88632bfac71c454
0565bb9c9b68d7368a8f2a613b9b4310fc6e3840dbd718d00ccc7617ba2ccb3a8bf4b179
0793f4d867bb812f90de8feac9288250784ecb23291620668358be56ad12802a23930b05
853d2d9f5bf8f86979658f16945a69c42642255970483458ec42606ab3ea149edea121c8
f48570b5b15740bb042c9c6b921f5e247e61709772682babd792206dc1bea92b3d73d20c
17c5bcaa1d7181d606d197f3db572f518ec468293eb581fb543857b50b414f8d07446019
9ac91a5ebcae1cc461419734cd91158264e28d7fea84b06305bf261885a3bd0470d9543c
61b21c24fcfe448cc344d18044260fa45bc91431e797a05d59d70be332dc17b7ea08eaa5
17fb6c63396879347e5b3160ccc7454f3f44bb93c563464a49547323b6d41ad9e594ea38
98bd4eca803e618faffa6ed6a8690cfe0f59241107e245ce4b8c52778c8dd8146551ee89
3757f2a3e6d9f48538cc2f6699a74c91d5678577aceb0fe98c14991a890df2a57d2671ed
93bb60eca774345a2d59d8c2c1391f1fda3aba4eac5f3f3ce10a17ff360ea31765aa55fe
c3cd9cbf7cb568714f8a9914930e07d19dc91d4be219836b37c9f42c6c1ee3b8d8a1e23e
478d21cac8f1517b0ad37c4a56e8f04a003e23f0e82a70364d5d83689b7db13c32289a4d
739849cedc5f9dd61cc8dc50dc10da1d1286bd3f344f8379091a77dc8ad9c0f588d2f740
ca79c8eb8f00fe5001e53e07a6be337a1d5de46057fb98a9e685abde286b52cfeb2ad57b
284b5cc7838e388bdad3505335bcfa6c7b691494f6605c8fb0a8800cfbe95d48bfabf886
9e34ad187bb67a01374b11263f31ccd6eda675156ddd2f229ecd1bdb7e2f6d509b14af94
bfd7cf181efb40e68bc0f7ea63f7210b1825fd17a2ddec00048351848a5fd01a031aa143
957fcffdb4d7cd1374f55af3e49b2cfb9f63dabd3c56205a8b5c6888f90060354885c2e4
003b0ef9d98f3581fa24d25fdeb1a2bfba44e37726b5fc747a5c878f6f4747c398497e58
a0a921ca9ab52f0282ec46284841516a294bea50e15316d956a5193b14136b0b95837572
64c87cb3320b5cd1c4c805fb4df90585f4712c66d60179e32bdfe0d66909ddda3e477472
746a0df72acfb2124c6249ea20469142088274800fecc5d39226f2f16a16b5fd7110ccda
d2afc8cf1e8bc282ed740777d39447713815818a63dbd9afef2cc921b29efe7471c43c9a
45772349fcd635ea6b17c47853561f12a148e9be5f93faabef1cbd521c8582c9f43cefcc
dd6c488a4df2d10d73a5bfd3307b9887a3544b34eef40dc4c722a32de37daf518d292c98
b17f5013d98ad36c24c15f2e988ad5eff30b3aec852d4d36504036f09f79f90aa32b2d1e
19cf17f8fdd01428d65666fac63b195e668676c6e978d1a5fbb3d5a5516918a833f372a7
9d57c1492a18b1e21a708d317d49723c822aa9a461496a93456c288883a2b860e0f5bb13
5b5a9a2e764f5a5049cddf483c5181bad4a7c6220cabb0cb8b94a24b0ae262f9a0274ad6
53607fc1f1591c7fcba79bb040c2ae147d289f1d2ead2306b7d32381ae0a0e1309a043be
14170a68c9b224161bf4493c7b14bdd31d9e3fce828358ee88acb4f85820b225ea69e081
2449fd81e3c465f48e57ce3789038a2afd9774bcb62979c4aecc87c3a6a3895a27c4151f
3a81e03ce675538c2cbde701090205dd027f1ba02f21a19443dd16242b3b942f7ef0ab27
6a5ac2db8c27bfcaa025e693a2a4bb20b00df38fec4d475c947de3fa340291450b7abfb8
4870fbcdc4f46b938bf280905742085af83dd847344e8c3f4593e8483126d60d181ab544
c7913bcf89d9562482bd6c37f2c9962616606c39c80729671ff2259a3ce11d0986dad2d1
5171bd5824bb39cf7f87ffef904ad36a177b7586c0f223f35dcc120c082bf340dce5d23c
ae6df6f5bf002032067f8ad31908b3391db0877d7e5f3d3247181e2967066a5835c0cb7f
224f372f06f60e359ea42c07ed34bd1a11e3cf2de63cbdd3740bc224f7d1cd9cd3018398
505547f07a883905d3aa8e7d2a2d0cf89dd67a90be30730cf136dc189b041b20d49b9d5d
7361b47e8ee780d2b4c3a37e1c2bb5f4728daf91eec57bbce8373ca6dd557571f455becf
77f4d33d58d07ba1029ba5584ad75b9154351c93b72eb6ac0d67e20b623d31b8523ed216
f4b7e7a3d2e20a683009614f508177a1434255716a545f1218f8f73406a79189b23fde87
40a8157a8b4ec99ea6ce98884e92811f439eccf192f839285b6d351beec7543125edced9
78b2365b5b7afb9aa357e90d3b0c36e0d8f1ed5753a6c1307842b2e597eb052d98f08ea8
38fb22e6b587644167ab131a592fbc772efdae98bc9e0c4c77bedbdb78bbc41e4e800c2b
f16c5cf0085793279d4f958750075843cdfa3e468dbeb1b07c44e97dc1577e4ed240d1fe
bc003c100bf2bc59c373a5eac2ab489b25f1236932ad333b3e124325aa8eaf6ac101c59a
8e1f5d7636b582ac3a73e0b01ed07e5b352183a2ece906d911e85fcc89caf07abb3ccb89
bc0cb9fec580893d171ac8aade559e2e2f4100022fe747c38bb2fa44ee4a541c5918565f
b4f1c5c1afd0c463842e0f122a25e02854f6dbf0cd0228286dc06af4a638e01582a3020d
27ccbd22fac0535bb132e20f87b57146a7a271cb85b805d1c8972fd9ce80c1c9aa12226a
b02047cd975f10308de8b6be5e6fb90f8999aaccbe948d6d009505b89ac18b5fb9d529bf
ec39e3544e805afc3d51b3429952d19bfeb3ffd0305079687f552feeb4e1e6a989c58598
c11a9cf9f648b30b7506292b6a18801d1c3d99c7fc3c60057c44bfe16d8e0cc8e8f7857c
2a8784c3ed3ea29b9b128baffab19337c629bebeaabbd19cf66981fc77e9cfb3c057be38
4eb65a6a9791552c66a81853cc284cca1dea61a36f21f779f0300099a974952a0c413088
2ccf7eab8bc0a46e563910381990c3568c4680cde56a75e8140d90b473a12a457a781030
55c118b6d50a894e6cf3f2bfc8e989f560d13a0d267d1f1a560c0974214c6e9bfd74abc7
96c3a4dd0a85467d53cf138bbcec0012104468eb50f5efe9e01339691b8b7d1cbdc00fd3
c4e5f9c7870bd743412fbfc094b941ec0c9b27305a94012cbe84573009d250e0e4798103
edaf5cf2bf65984cd869c665dab1bb9f1cf94319d6a777e918d6cf043da7ce02d258ceac
9f4c0492dde5a28e53e3fb97158e12b8a2ad1f1e7372da5fe1dd40ca7cd4a95bf77f8521
b4d9f99ef81f7827211d92af0860f2036b244f851bac52c7fe67401942c77b215023743d
0b243ac99cc87b744f5ed0586bd1afb77f405206cc4ef3474ebd88165196bc86db4f5e5a
8c4b8a5c51476fbfa50e9ed75ea82109cb47c8a9b1b8a3a7c591fadd7d7bd76ea2aaa723
175e17cd36a28f90a3c71e62a5ccf26ccc814e5826028f79d7294a36df8dd2ea51a7037e
9ff40bbebd312440519475dcbec4714037c58718a7c55dae16083c2ef1cfc301660e964b
af6a366a63170b259082dda843cba47dc461f9e9d4f03c9a3ce885dba98ce8040aa6b2e0
e04e0919575a4b74a18d77f343ab572f9c99d60fc0551ce513ebeebb4b37edb8866756ec
e44cce8bea3b67146c11cb9e584bf4ec8c3c1666b34a11c1381f910e5253f763eedfa6f7
101e10b00e63e1c062bb6c8c3ece19f71abbb4f009787ebcdedd36188fb833b897045f19
222f3d6fb81096acd76e7b808457bb5eb3f41211624d02198b25728269b59550a8f124a1
70da62b9607fa7c73e10ca02aef5c82e5a905e5039e7185ad5f4310f51ae3243f05a97ed
0825d905fbe25241258346d16cc32590ffee26616d43faeec4cf760d0b3941fb805d20ca
29f8dfe49b28a1f63cc0abc2a93363d30a8adeeae24d1a304895f5feba205761348ff90a
ed5e1078aecca36e63963c7f6be4e5988533b293e5560cb4c45dbc3ad5dd4736e5f27d07
9ce2b2f015bd7758bf0466587d9d4dd913f8f9e13f380537c3bf75e8bd1ff04edc3176ba
3c35cfb1306cb77993da1f8be68af5af11ab1bd7e88e2b9a9aa51c44d393bdc7297f0355
71f004627e1ae12c421989276979e40ebd7fda69c11b008ff7436f4203bc335b1da257f7
83bd16c68b2848006312318d6b1463f7137e56656d21dc624070174952dfc5a177cc6a83
b8cd92f3533c5ebf5975a6ce8774502d50074a9583d198e4fee3c1392d2abd93f0dd2ca8
869af0dd78a2d10bb10ba5356a7dfe8bb7c271deee10902ad3be52861238669fbd34178f
0835f4261de39aa733d07f8d9cee57398ced6ec861682598429ef396f9f65f962d3cbd4d
de044141142cffb482161eeaaf279742af11c617d3d137cce00bd131e8a05a070b28df93
0b215ae418ae02ff54e9310f91a8a3489b6d86db9a5375c6f8cc9d776ca9747d90faa26f
53c17c24b14e2e2bd0ad5db793b9b0a5ace6c7425a3cabc21a5d1979a80fc25f355d9a18
faf34fa18db8b407f4730da600df18c5b7f361929b9ff01b358f420927a50bc75c0dd6ed
700a14e92a04c29bd8953fa64283e9d38f609cb1814f117d12dd58a0c22010c3368f206e
997f848bc68ea93c044ae538fa466b924de84d2ea43fe013939eefdddf58142624a31c14
4c378adea58222f1a4697b9303600c1bf80971f30396286016a443b9f4abd15a4977c033
30b125fb5439de8ba4cab302863bf6f1de30d669bc9af010c468092ec8e8307defb1b0c7
c6b50d3cf548beb024d9ca5658d2caf5df6a877de69fbbb8ae6dcfb19b28b346fd71f52d
c6315aa2648e3f4a8e3b65b25236c781c13f3a72d6b8edc62a5e6bc62dcf543c20ba9fae
8f70d59ccdf09536b336911fa99304343b65b8daa70c8a2ad898e7e1ed47b06aa6df6d91
c4759fe3abd5053ae306b6a9e6d5d575cfa2dbbd68e9299fab5d8ca16d3186e98b1231a0
ab13f43b0137299df3e7ee8cfefd3423a55b38a86f2cedf63c777886cad242163ca69124
c72154857a1e66e11eaba47f8e6739f00c6ad4954b88b52b55fb7907c84b831d5811c3eb
5b0225700cfd57df8f73385aea5613704b0019a840b57d459b7fa74d64aeb53c43763841
bcdc880aecfc54f65d38f566917cc0d576ab74db41b249e07408ad01d3db94cf237f6ae7
77546662a5af57caa371ee1a6803b1f781ee0613d7b879c61e4f6dd805ce1d046056432b
37a4757fd99807b8ca442535f38cef97cc693f17856aeb08564c862de596b0837c95e60e
6b4e6585571c1145a49987a63505368bd6d4dafc2cd66be1f2c93c9ecb4caa03a656acfa
f159bf091406e4ab04931ff4ed4c8a8ccaa72bee70062773971db0e0662a33903ec40962
bcc7d1bee1e894ef5e2fade5c9b4b4750ad5cf35104ddc03bfe72fd623cb511b034e2dc5
6b78cf7c1eeb7689c0bceb2d0d2ad8cb13d5596c556ecba7c33cb940fdb44206bbb28167
a2dc244bac2bf830b53d89e1bd4a1da8e50b2527a16850ecf0aac151933ee3f25060e04d
902cd7fc50e36eb02710a269f294f31bd91a2eb415b98ea6d967c78dbad0fbaa56e95401
50a1518dd3157800ae7f0988ee20601f7273ebcebfc478c6fae92d6c0701404445f25f40
65ffc9216b24e4898ad72c420bc84ef994f11361c45a8c236cb9bd3ec94e46b34c9bb340
b16bfa75471b451a6013381cb7f93a70e0a1f47ef514300c38537918311641e1d6d8bc6b
843d55cacee81ebc726d3075173d0f15d49670fbcf55f998fbaf32dab85ef4a4ecc2c8ac
53ae18dc65ade13ebcf44a58f8d13d70324585a7a9901c361c56437b6e1349a3d70d1fdf
8e1e322e4eba3dee77e86e82e3f9485b556be0ccfaa004a4e0deba009ccd0ea27d2073d6
3728fe6f87ada53fc980f70bf77af1fd3422ef1618d5573e04f1092f98872ab1758baa8f
a31c5a61b551e9fe1e9af59f185327e90bf213b77de34630e53c1d82d7cc96e4e9bbe3b4
7cb0c0c36b9437aaca363712e237cea2b978f82f332cf387598be45cff2631ef5aacca7d
dd96e8c8d825f89bdc6bfa007402df59207e67cd3a76dd881ce634da5ac2da17df2bea79
bc03117ec8333399f142e8f079c497893177e563bc56fe581e36117ead7c89ec0178ca23
64398dcd8dff9275857e7ff2b925e90756c78f5a0a7703a26b8a0d073830dcc53f01c37b
380d2ca8c22d91bdfab2c071575d7ae237d29fcfbce380d2885664f5973a498a511f70fd
06a521e494e04c663785baae19a40b81180fb27f710b9e973f25ee9744866172d95c24f6
d8aca41a4819ce5fb953226a19a918364e4b367ad71cd37320468a48820d75af8ba741f2
944692419a74508af461e02eea8687980b23e0d69db95835db30d0827de1aefff84c81a7
9b734e814d8d4eb5335fc86219ec1a4e23312510af25d31ac077a683d195207513fa13dd
5cf55720c4d01fc82876cfc3134ea5727a81f9532f1e2a4c73573c81ef0d97c35ac68864
50d2109d0f113fee60f04864e7d36f28c851b0df84b67ba416ad587eb6ffdbb8fbf24db5
b1e2f1519c0168cb7f64e97bf0d23b37b951d6ed616e51754661a99ffb84874ffb8919cc
c6a9133a3d683d76e85b706dd544c86ce631ec4fdaa355277d2bedfcea530e06e6531666
729079767efdafd1c54c6542f4880247bc4323a29a56565b54d01a634ab2895ff612315d
e70bfb4af744c70f462a9598c1006c7aa14552cb659c38bebb6bce138cd984104733b06d
20c769b4057d1aeadcb386cf8759580cbf2aca84c2740a2afcf58c6ec84b715f30e92684
825005a1c2bbc3474e67dfb4b8092b0365278d22159a6c95f3b362f68e3321910486e04b
edf4642420be596b652b04f1537df1fb950df54cf8f0295bd156e220f051b28fba51780d
b7b8b89c068be5ddaf590864a7bc6ea4df3b63ac282d3aeb27c40f8f4fa0a9ec90fd6aad
53181655fcf244fda0382dd6107db81eaa2ee3ce6786579d0036999c7f83428b547a57fa
99373366ff9459ee23fef6b7a49173793916860061af00935bbf081588dd102329cc9cea
2f73e4f0a4afaf2e4c50e004a22ce42ed490d5b2cb11943899b688eb9f326ea8419acab1
fbaa69855342f394e8f1aef796b496e0e9ba99bf5087fb261d651b5a07ae7bf4e4562ae8
4e0cf47880072c31230c8ed9b069da4cc85a6faf878ef43bbe5724daaa61f83fc8cc26f3
0f1bfef8d7ee4c91bf1e5a68145d9e5f75d7eb952cfb06e292b10b8e5f43d64539c59cce
af60e405883d419c44e6dee8343332a4c04cd6b17e5b2dd92e3851f44aeb8adc19bf4340
fb5b95a2a52a35dfed5fd13574170cf3fbc637d76f952c4f58c08325bb5bf91727cf4d80
f09769f3df5dc72c2333a64efadf01ac5951f6921ed74d92eb59bae12aacb30bd94e2c8b
1187141a14530423b8c5851238bd3d3f6879321cce04f1a36cf91f3309b735485efe5ac0
bf1178b034cc726626673d499fc81783e113d61ee362ddf99a823693588daf2d17e10f17
b66622f2b209b015753c815c43156e2172794e1dfc1ef904e4ca225c8a05c50a3f3de1a2
e87dba1eae056ce81c921138ceeda87b8dad009ac85631f0a8b31771deb7b71f27b6850a
fe2867f9f2038bcf82d2d761215ed30f0fcf898ce66c70e021610dc8195edae2f24774d3
b9a1a6eaaa65d1d60b17eb0c80c2e7e16f407722c03f647d0bd841980156cd379efaa859
b9652f814ecb8e2230a682bcefae12c12e8454337a0a329ca1991390902a19fd21a9b211
ce84cf0c21c3a4333583cc9122304c4b49d09b6e667b397dfe49bb0311dca0e271810bb1
645b20220cb11c7580bb859f14867fd8c9b3d8224a85ceb6bb1c71427c708df0ba547210
590de2e1d6fa01b3006907982135b92a9ea1d327ccbb8cb8a0287d7658110cfb1f950b86
65af56f1080302fe286fd63eed81c283ca3fc665471a6d54eb835c1ec7f3507b8d9e2cc0
57be3730572c46ffd7e7705bf291f6a0181538742f328ec0caf89b5fac277294d18773de
360c6b09652419447c0734dabc1a7dcb125fd1c2930ace1cb353fe982ca2dfd1ce586491
30812e9f114c0e7223e857d71fb5e0ae613fae80089ed851cb280c3eb3b96119fb3d3fbb
bdeaba35e0f5a10e1e0a1ea4af93e99de9aa0a75d511815df387f16b8bae266e2f1f0333
19e854cc1148e16e6881d4bbb248f89566dbda554f3a9e9ca985d43f833cf1313638615e
0c3599f8666f649527f18edd3146c1b6247a874d4042d6fe5820d1a76d11da2dfa8ef258
fafa85ad2efcccc21f5e9d1abc16a1bc969e7f700093ec3a9c3438f3c36ed3a16231f5dc
3e6268a4d9a194ea2b33ac3f06d6f6b96190b08208eb81cd4aac08b15fb70da5e4433119
ffc46e99a089f7323ccc6f44efaacaac1a1980a7977148125cf753a7a56077fd94b9ef91
2aedf267db5399a6f9c71b1435a9241456b2d522f29672891229be1319bf96b641d56218
14721743909e560e32ad0143abea96339185640256164a382ecfea01c76f36bade44200f
3f41ec259dc11fcf1afa9ee8694455a1718ada71d38500c9673389bc9d6a1f8f33a348fc
9e4f3f575eaaf7dafc865e34f9f3c56dc9260b3700d1a6e46ff36688149d6368237be9fb
330cb8a76b693e5cba524579471936734ff4f1aa0bf34a593d4072d9f5136316e5597692
466f36d032afb0021adc1300fae21c3f6be73c95c36186f0745d3f74a059a2759bd78095
177f61ca7fec7365e51215b8f4fb0c40adc83706e777bf0292c14bc547d4a360afd55575
264a94708ceba019ec562755294ebcedc359e62782a0baf7158ddf401f0bd7dec9c0ddd5
9ee96877fd5565e447d0c4d096230c8806b695b4bfc33b9bcd6492135654af9744414b51
754a77e60b55f6782972c6d99481b07eeb316ae476e1eafb373d2546a9c983cfa35d1150
a637659c1f0b09826a4417b9c7b42282c7d2617cb1125ea9421762be16ebb66b48c34544
9b1e68bbc17be32778a9d467f62c454470b606f8374dfd5feeb3ab765b9704b0d6a19184
19d3b53e9a21a324b67e87cb2e00d8d271326a910f49f0388162a179e06c6bc91a8cf213
e4bdcad617460a595d71393b4bb693722fb293de2be30c6d2253878a46f49adbef1587d0
9ff1bf5ed86bb388d722f79125697806a4b75326fe633468485f97887137918268fe8678
a0fc6b0d0aac45fc651ed15e24bcbb2573872ba375ace00a87281dc92d4b27ae0c245813
ac45a454a6d0749e83368571d2613c69d87c5af928ad2af031391b099b502f1f55c84919
c57eea7e2721e8996303e1383a236ef76a099366aec38dfa4a71fe36a123d9b25053fd27
f847f08690afbdd7f04c83b507f78b4f750acdc9d4b184cc1d4a8b06d303e1e3acb7b90d
ce36c427d430f8dae7d8b17f90ca3696d591a4283a280cd8976be8dd513969220cebf0d4
d5250e468137949fc6d8abf33b63b8f400297d20caa74ff64511ae8d323c400319146c7a
98b9e969fb0111045d1898154fda3da1cd51e00e594735bfb29847bcaf2b58dc2495abb8
45f291cdf7dd7fd6e220aadd4397c515bf4e83ff094551e9037a2c71f5290a9405043f3d
276ebb10569f03027f47cd2520b8c44ae47e046f72f3aee932c7023daee0a43056061f0b
06af5422ff77d2709209d3bf71378333efa990b2260a88be6219734469ec0415119c83d3
2996401b0bb258e4832d60e9260767d5b6b0a6d3622080994badf8d47a5560f606c4f215
f19ceec5691b1b89e52b76dbb55767d2ac3bec39cbf09afc490683b14a0896485e76e6f4
9b2b1935c4088a17bb1d3aa81cf655cfa72c6bfae2c7853a316d0e91e3993ee34280229d
3a09280451ae17aab7bfa34d234fa564e4357e2361528b9d55247f42230a1b44069397cf
dbefc96de7aa66797cf373587ad7f4bdf2a886428424dd888ade4bafa768c7d49f613691
a8c256fd6df247fef5e0db0a9b48f90b83d65593b8622b9fc8013e4dcc762effdfef2866
ff9b8aa4af2f5b8caa958883396d776e287cf3ec553e2c9b9430aab33048206bb440f9e9
2e789bf35ed9a7b27f449a4050958cbf2e1bf1825b6427f703d34e454744abff16b322d9
b03014d8beb6e1809e9c1048dc157ba94eba984f0a8e7bff71330ec529a59e690dbee739
849842ecbc9a01f5a1293213c697eaaecc04d5ad69884ecf19db05cf639c98eb3290046b
e4527a687fc1e0b794613f537ca6293201a98391e3b65e90178cdf6c61d01f5180d866e2
96e99b972714ffc30373b816e2f1dd272e8685c5ea4fa701a9a729be3bf992daf16e8a20
7afbf13a3ffb07eaa43a697f83665c8d8cfba68cb2f3f07282b84f674d2584fbf4436b0f
cc4ef3da40cfac6d94a7b982004a17b738e2cbbbcacd14c9bdf96673ba3321660d8f55e8
b1cfa0021d27ce4655ef1c77c14fee05215c4bd7b47dd3070ab214e5dad9986c391d2d40
8d69cc5e87c10dbc86fc35cc5f25ea25e6640fe2e6d004426a0769fa3a34c1b43235eba5
4c0f1ea9efe26e6f61b54fe96a08261bea7819ffbdfed8bd0558800b703e4f71ab1ab234
3c8d69badb8dd6689ec50c3fe266a7e77b3bda71746670d7b2b1bb801ab12e32f5736e8f
612a4e56a4f1373cb82f44c130eb3eacc5048bc641b68dc53dd75987fddc87a7b60dad26
94c754fda6fe3d1703dffd7c3b762153c39fa9f0598701d1856bcd848d939fa65742fc86
ffc664872325bada147a15ffe6f4946f8f6e0cfdccb6cf38a3c4bce31d2dfbdee1074e72
906203ed54de0330c3a6032df9beb7cef67ce58153336c5b76571a998c8bdcfa339c5d18
abbbbe2ecc6cad9d5b324272761ca052c0beca825bda0ecdab5c57135c8720b5073fdd5d
017f9418ef2429d052762e12b2674b1ba9b42875100fba7944f95a87af17924c110f614c
437790f2a151051a75878a804bd29cb4117c9d2b7134f1ac838724e4d7c50a40804f96bb
16c1283399b4d4694315a3a2d6440478224e092a4cfcf9144e49acb76f967784d2e6f11c
a131a5ee82a7d57c1fb2045ff06b03f2dbce66b321264138829aaa0d30992851c1606a12
60b597438fef87dcbf1f741e3ccd0d0fa3fc9ce9598ca737c64e9335592ad43360b45a9a
8feb48f7d2bab8b57e84bcc834194c0f0457ad47c60dd88fe646b49b4f44426ad0fb2380
a0da329a8a619ce3b80aa5d3c8234d9fe12749cb98defce872415e86adb91b0124e9bbf7
6716ab1b75bced9cf2bd8300c921c05a7da477006c9ce21c767b9f9fa6199e713265807f
6f71fd8f2c49f1f1b6ef638e36a47b25d3727d24df4cea634e1919e88f52306490badc2a
d07faeff3377291e3b19088e155af95b8fec605d7ed8e6664f2b7d20cd9351f6f76baf1e
bcdccc207638236993357e580963b393fb0d57749901846f27127c75a7f2c3a4110edac1
1eec9429360991620c41cab1b5dc22ac9f6ed3ce0af7386cd95c92646a0de00ed84c4454
e53bc14bc3ecc6b2f44fc2153fec3aeab954ba48e016617bca2862f7ec65337ee2e4978f
a5b70a68723125b790ed9b7ded0deb9829cd1c2936219b2c8f26cfdf710ec974ff98f549
bba4042314f68235562227333f0316df51a0ea3e8d1d0c737c3b4a8ef22c3aa42bbb706e
7bb8b5c70034c70a49cddbfbf0e2471ed65c0a9926cc42a59394fd5e5dc2ee6d6689926a
f9d612aabde80ba4db5b35ed8fc422ee29384b3c13d615d817b2d0679fb6b66d74106f0d
32f9e566e5cbfdf533fa9bb63abd7a8328bbeddafe1c7c9b31d013c2de5cdb0ab5365d6b
1748a56266a630ba189e281a546f986e0a213eb089e4c21461604cb98ef9bf1be6fdd470
190cf01d6459f659fc80b7cbdaf1aed83009ccca4705993000b795178b2d0e70050166b6
55a885b1eb289d506a6361815c12b8b08b9f7a92018dde47c4b4d4ad8bb1157c4f5e29d5
c243fa338ae4ebd90c6eb1e32c02dafd178d78ba363680472e41cee73fe9f21e6c6eb78f
023265eff21f695e9b639e20d0d971121c4fc22275f2ea110dafcb90b8df4ace22387c6b
4e88b1ca6872765823a58eafc1048931288a0d92f11fab9a3c3bcc015eb890d14e3d4455
fa984e9f9ebf6ef869aaed37949a21a1c329e15de486036f62ffe4648dce3eacc762b888
869c4b1e048e46ed32a7d8a007f7b256fc6971c571d6c5a3e0e075e36625947de7b0399f
4f06c58ba122669156e1c21de2ca2a646392acc24d3de94eb9f7f23b00b14576ef9941b2
541f2541541cd99117966e219c4e410b3e3bc09582f1ecf3d7d3d88dc855b2b51338a0f2
460c021853919fbc52cadc9d031818c12edcecd67ec88e492f42d8b52e9d241df275ff4c
7404038e388aaf5fa0344779f95e711ddc82d8243fb00fac6700b66e7fde172be8e9c9dd
e92897c4fa9dcae671bce25693cb9959d9bd030ab8b6b2b1d982c73ae08160e5ba044c3d
c834077f8abfe300d6a451c216d1695bd4dbbc63fd86f992197cdaa2ed1fd47eeaff89a0
77a84b2b170e38d6899aa0e753ba00e766dea85ae5414df78901f96783c466681b533c7d
2184c38514787b435be298b430c1f26eae04fbe0a90385ccc9a026d6ec5d9ba2a56b58e5
e38c0e0c4d5b2c4ad6ecb883a02939d3f31103ccddd2347c4e72420a80a9042452e20d50
4b99a7eb2f1956ddab089c9d8f4f617bd5db950542a5c0b060b231c8d6fbec699b122b69
ac2611a12e426973111efb5e3a7fbe0029f8ff7119c7c69574b9a08fb9855837192c66ed
86edd382b284492efc01dabf5ac4bff6d5dbb3d0f55150de129dc675ea36a7faae07392e
dd3ef25b24c4781a9545ee47add07b47e310a122417e369705119e0cd04284cd76c0e017
65606479f5dba40e2d97cb09ebfefab4c05b71bd420585ce3c267060ef827471edbcf79f
b133abc57b85b0fe649820d2195c8eeaa0f048a45a6b83388a3356f6a1252c85580b9cdf
efa4010eefc8da78449e7bdb67b8eee5eff00bc5a45cc055131c8dc4c5457598b655f4da
c397f4dd3cc1d3ac4a822b51dce2df2e4033d80e1d5b275f16da62f4d4dc357067f9055c
737023083045a99f9664a8dcf38de6e03e6c0d785ccf5f0f821ae8e0924cb72c3064dfc8
34d1b4e06718ad1b0c8f51e199c52b1fd97b01d85e1961fbd8dba996f6d5fa5ba374aa65
e5f9cef9b104c93c69c562c076e4bf4dff4b270da9bc92740331cedb18dda783bb75f1c8
1b892274e6db39dd2054d20ae0932e6b35f68b27c8c89548435e8b5ec53ca36850ab931d
15060b47a1d40ee0a0615868ce246d42d76bebd3e8f049aa07d068b41b809bcf24e40d24
7fc0c9d572c0c2d928272176df02e8d3eea7cdfcc2a784d64d97835fbd6e45b217a0fd5e
7da8da7d2cdbfb1b602db9891958f64c9df168b9ef1cbdc2412044b039f0fb5c57d62c8c
cb14f635df0183150b95d3c6b411b56137c470351de340b97d899db0e36affcb24db55df
6398b8010178b9eabc81c6a2f16fe321cd33727b81ba8b3608951e32984ef807cb8a3323
1e60188cd5bdecfb55cf5ff5eca75cb16f19b0f579ae425cf403fada1d6e8cac1b25c2a9
155a1ca1cf75c6b7659d3445ff1eccb5b8ed98c1cf6ce067deed8cc1307b7e60ceb58f6f
080f83bfced93d8598bee59e0936703cfe9098cbc24d4e970ede735a8bb3738fa53d1bb7
3848b32d568da0013abd8ec17a3baa7acf7ae6fc940cb180d429f4dc05e71fede89a1ba9
6464c360a4fe0f46743926d13555a2531c5784ba92ec24636b02b50c338cc0a88bcd608a
3533e7ba7ea052b12164d73b9abf1934784585b594018cb46822850a0a6f8fcb49e3f76a
6c6ec07b6a4ec62bc831640e2a2e44c612343df6364fc3969884e99cc93c60b3957cce3b
629b35bedb240ab3164dcb5d63405e1d4aca5ed5c445538c1dfc78b88683f0c590d7cad8
44095a5e4d0c2d3484bf54d2183eec5d560052caa62ed448f300cfdb2feeeb64c3409635
7258adf8c781bf931ea071d41c1b04291a067a094b9a48529bfab0c11192d994a5941a80
218a350498edee8fdea231f21f16cc1e28c9eb49cce642fd8341f88cd3f0056e270b80da
75935e8a04986139295b40c85f4150ac0c5a639052c351263869e9e710c6010019f3a28b
0e1713cb974e712e7f1a20e552d4a0769086c0db40bad57b227b5b87b59cf3fcca29dc92
de8a98db7e63dd6a85a3446264544b6a37344fc991df60192ff5baffa22b3310fa931b41
7528199c59d8172fb1e533eb7012f1790bce22ecf74725de897d09032d9ad4ffdc337333
44aeca676db1eacf2773648a762b996eb5d142a8470d025ec0b987ac0ed12f6a2d8661b6
34d1ef3771c98ec59267747d3fdbf93efd0f58fd875633c5f53c5734fb071cf480562fd1
badbd0858172fb60f2e585969b2b18906e6b83fe76b7407b166e9ac7e034c87fd8a93c5c
f1e6b0fbbe4ec1570cd3cd9068320e0cea84832135750a08869d52877525d82394755fdd
fd2218fc043be4fcee167753c2f055b351fcf1c74f66f5a862e6ddb2fe3dc2ca2e215000
31263c55037d1a375e5c02eaabacabde825b08218e568eec0c8163c99942f7b573c5ecc1
b1d5511529280bff82b782fd9e33d168d96e71f05fb6f611e14bf2d6688925c851ac5489
ec4cf4bb65ceb1f31f24f387f51cf40eb38a9bc93a7baeb5fac3d81c058cf22420c81001
be860141d1f5ff0a19b0ca54858d7d8d4482fa022192c49bf31be5052aff32b105145791
6678aa7f8ac489ec08befb28a28af37cadaa5596a055073c1462253c3d5f20bd87838d03
f6b05170f0f15a35340d67ffccd8d24a1fe1a15b3bc10391db8638893f515ffb16b2c151
9bf6033b0a7fcdd801b4731e529564a1f097fcca273089334b093ba682cf2f61dc25d9f7
6f952a675ec0726849c3172af8de36e75112112279cadb0800ac4eaf17d9d117f23fb424
0441879f75455d35c94f92d0aaac3d53f5a0b7179269d45bf2724df5c20cadc71afb1c9c
35e4a88b5bf2296817117216b7213b3340fa92052fdd98575610239c4acdd54dfb52740b
811692999d98968209acfb045f11fb5f45ee9cd9e4901f850ea0200afadc5990d0b4103e
bba3978fead4c24a2ae070304bfe0f6ff0463cf4d67382ac1923060770a06a992211ada1
420a36995479c2ca38baeb81cda3e91d7388cec077292efea2c683ab5fd85c25d6c5d455
3903a4e632e163dc7d6ae6bc70ef05f47c4055ce745218ec3706d6e723d4744c64162b37
e023303abf20488216058d31275254a28833f0948b0731bf6fd869275fbd61aff47cfafb
d83d9391d6d70f77d35e44c539ad76b12991d484807d26cce723a7338c1d71440b4f3744
574b607a193f82a83d2633a1c64693447b972fab2780cc34d834282995d24cedba722c44
72773bd53d3ab0deea5a866a99266d5eec06f75a5cc64113596b596d9ce9225e72256f0f
495adaefb5a13955ac735c6cf4402b590f7995f7c540ce102a03f2a364bcad8aa05d08bf
9634eb8c0feed01dc767c0bcfde3ab5eceb57151a3c0f42929bad0083a331812759b4da4
683d7c5f0e6960bf51455ea3bfd475f297bdce08462c4047b67af6f492d3a67da453b31c
44a8fb278fac0e41aa1bfd5533f0c6f1b3f3b5e3083a91fd03657bbd46f6dc9988911dbb
d8ee8c28594a1e75f430d01eb47dd0d0f199405eb5743a81ad12fd604a1d90b30044da50
23c17bdfb9b01afd3a9608677831e7dfff75dcdba3d997259a15916beffd7d38b1f72af5
4e4968310077b098332eaf30712f42914cc44c6410c00d2e0f749eb6e5e34ec8e6da7469
3d537a26c12e28f3c68629dc5f030b9b2ba41cc926342de97ef7e1b03100bd3dc9ea6ea4
cdfedb8b5dc8b3604391be5d18b61074b43429e89c22fed12ad0a2741af7d16d8cbd7d98
eaba39a5ee78e54ea1d5b809ed74b0265c0f1a137b5d554ab2119ff4221c9eb1d69b092f
03a7f6c822bffa8e26a2c353518709917ab680d4dc509435a45831d42a716220eb12ed11
3a37c38630f624dd0178d7ce2684bdd8761a3de2b746064e047be44becf15f9f5216676e
f0332723e1692b1a4c1fc208b21a073ac47c17c6f321ca7a7e0e539b9981e249d7a4a13d
ab1b78b3a3e26cee491873f1a9d087fdb34f59a2bfd265cd19060e2cc9898bdd2ccf167d
be158bb9475f96c29c04ba13e2dfc7900b71f2b31c010143f55f4dc2267b81e8b62220c5
b23770f66f9317d9886d81fa97b54a83be925dbdae624293d36a8e9185df69c90b24c6a4
46f95ee810c3fb92079f533c7b17a3cfde9adeb426c8b57b90fd8199abb5b1deaf082b25
0c882a30e4f8f792387628fe265c93909ff38b3fc63eeb61c5405e3f1b382dfc88b5cb96
f192d1423a7b81dabd72b70f89f0f4ea46376abb0b6fabdb6df2c848c6f253968a87bcd0
63e3f453cf73e6c7893c15f3856fad8bf8d8681169572f30016ce718880fd8fd3c1bb1c4
c8b21c5af8ddfda1ae83d3e2248df3827b16ec1fa049ebce3610af845024be2fa6d58910
35ff94860bfcdf00cf8caac7b82adc0d90b7a1d3d729c54bc829aae392e88bd4fd6df925
deca4a1586679b4da18cb0236523a7778e83ec28e79900af0482c0f97761b5467b05c7ae
7772d9c92df435ddf3cd4d92b9e54fa44f9c2c7fd9a33c41c8f6dbcb72ac1aa1a03a5842
adfc990fac0af0740ba331ec76b012e67b033d56b52e35ec595d43da725715e095b31c89
f0087700f6359322fdb1377656367ada97eba523120c2d300adaab44b97952192b9c23ce
0dba68b8b4715848962ad1857cb225d74d35c8e1390ea39f18c6ba36e476ea51ac64e039
1412ad7324315521c1f20c4ccd458078b690ef297a2b90c6f28dc72e01d7a6a413c11a71
924cb252413477b56c90f3b2faed31813e4e09d5a576f1dd3c7d839281d5d6f33788b90a
a32197688b1c6a37dc42488db7c96311d83768648aa1b848c50453e305a26283ccd8cd94
b6e7e7febcb59ec638a059cdc83055897e7e47c00943782a5f3643bacbaf770e42e2f5be
008ed50f5acacc0541b7d9343c31e39af201144b60626e577bc590e4399400d2bde04dba
6211322f1cda45d78e64787d06f3ead65b47b6bdc4448e813f319960b2a646d0ee8c31ae
d97af76372177d04743d1980f133e002ca110f71827be174b7c2e1c1fc1b41fa4094192d
4320fb666186af744dc60a3b5bb4489a00de941dd736ae1e27784dee2ecc596930643d78
09b978b396d8766042bf3c1c9bcccc5ce3e55dbf7effbf07c47ee397e9a224b396add703
cd7ed635dbf4ccd98cdb1d6326518e09c82d08f1bbff0a9096fd51503f51f74bc63e832c
915c788e2211772cef9bf8860b630fec383151fc9d5deca3b4a483cb0903dec9c6b4e917
e0bee7dd8d914b96af48e0604c9580a08e18dc651ab1108d8d879e7a765b3b59bf806412
2de954d91156855653818f896b685e364146037239a8c75959fbed1432d5c2b14821a9eb
e7cf0054d520b3d29f522d251c7a8a15d1f20d3ff1d01e618a09167c49c1ea21d3680f74
fd2cb18177ae6e71afe78f77d97e75257880bb8873cd865f39e307eb1799316f47bd8f27
9563e100f608861147c585f6b38aea7032075bac11a53204aaf608e595b8b1f353d4076f
7143a1c00b5638a0d3aa0a2f8c04773374e0281325d9ea923445f5e2e8b97f699725750b
df8e26848854f89a2fa61fb54dad46f71692396ac8e41c925f1b8f5e379f4a4f3da8648a
da7fb75420790f8a30ca4abc999b58ba9f97b2fdb2721554381be4ccf4303d64c20d91ce
4b99a46c2a86e87673ef512ae23ba90f181bf4df05e6553cadf5e184b063cc2d796a40cf
d2f67a2d67b70d112f42bc739c6c433c2bcd6511465448eed9b0c57d94fb555de2023427
2bab37baa406b4750da91a78026991fad48435f9082cd79ec2ab409d9d8af10182201944
5c966f7eec9336e4318bcbccf6f68f98f2d35efc3265955eaced58d0e4c97c0180c24477
f417378e67f009da2f89ae705df8360be64f6f6ddf45d8a0c22b99ae75c26a6b0698ac38
0a50d81340bf34d39ea6f02a515923ed7deea746a6f45a50f7ff69875082dacc5177e50c
8d6b23b890ba2cc75c4d348321616fa5d6cdd29faff8c6f9aab5a0f29b24ed8f092152bb
aebfdae59027b058ad0e6d79d0d5fa9f0f154289b9b928151a3352ac4f68c2a46ca1d194
dfb77bd62d4e751eff5ba8fc36c0bc1e213d30ab2cfe915543bbc9a93690d4aff82dc68d
4b54ddf1ec2b69aab8306ae04ee442120302e3856045ed381b2c6d4d9bf0ff1f285d6369
c42f666d182556c0e444b3a8d83c035d7214dba4b97c3d27a27485d03d18b413f37c991c
55ea5ba5b308169c9fd22d762ff6511f7d5bb116f786b3ab5daf1d7d453e9ab7034066b3
92d8e9e4c59abf64e7c1991ae955e5ec84c7124beda975cba1217a2899535a3d6f94c133
24cc7905afce11138e20981cee42eff0bd04ab850ab55ca93ad305e1a63b64448dccd3d7
4c345c92435c8b27fbf4dbf448f753a3f817240c89f10e58945490df30a2c1fd00f17027
d15d4effa3767c92665c27b62ad070459f92cf2d6c0f051aa6e9cbdcb71aef3f03ef6eff
0b61ef663f85a1fd6cb4694e2d9fa0df195fdeef2a4bff8912a0b6bf71bcd03bf0b99238
2a3dad4409252e8f4463cc719532c2f11cb71936a4717e9580494e3ad26e5c3df1d9afc1
e1c9004cbcaa08e343806b3ebbf4bdadea411c4d6804a56a029ac4a10b4798552752cf0d
dd8f4bad3e77c83b90f3a68f68417ae07b6aec89f1bd5a2e8354e5618015d97fe8dae68d
a2ee588f64b3de1146d77dba4c32f269aded8b741e4931600c99c0f3ae2a723f909a5711
66e4bd3ff4702c717c2e904d12887f3ff8419a39a15292038d0ed9bf8c1c6fe67bda25fe
0e9bed7a1d20c0f163542dde12725202109c1870bc064f61301d22d10a1966efdd64b4e5
f3a0fff2f64ae3ec9bb43306512a2740279f3a9fb266977f8a5e5e56d22d78ef22d82c23
161b1ae8890adf241094c723a2d6585b81f1e9e1fb80947f972bd850498552dd4de5d12a
c69f66f3b949b8357bdc12c1641a9b56375e98cd3488e765a64d90a8f771c66d29dd5c68
1c3f405a61fe15a9e7ff9cadf0bb180b4a78de8477dc33b48b6a3e27ec06442888382d15
507b365763b1c17a3215667bda6ac15fbc3b4ccdf7fed654b82b7ae48e274b935335cfb1
38a0f37b29db1281086268f00d78bf8ff36480e530ed061dffa88395430bd06424442979
556459c6207dad4769aca704e96d485eb240f379c8a216bc28e969381abe30a9941ee292
85a16ae070275e8368ae9b2e32cdfbbfb69403c944e735272d02fbb10ed10c3862c2946b
9acd241abfbe797aacc0300fa1306def0f4b3de3ccb56b4d78aa6f4d830c8e7aefe63158
79b82c8fc3f4210f3bc7f798526397f48312f66abe6b32554ad8e71ff3138bb050361cd6
63db7f135a4665978659d09f53c3f2bb4124375dd446dc84250cccd261e421d32970f13b
6412c2df5ed55735331aef424fa1bde94bf84aa0947ca337ac69a7da46cfd9169ac31aa2
4b355fa09a0534d94da1d5e37e98ebf5cb7c3db2d1a1263f01e6912ca4f41d4b13444553
a856ac4b05aa43a33651a07992e35180509ccb3b9cc1fb90052ed5df6f3a6e0a53d7dd40
d1ef569705f2427e74783f12c2060a042803f9dcda9d86d6cc61f4a95e1201bc459d01f3
522d311a5cc1533a09bfa8dfa7924618da541bea548ed45743c3097d16e396b26bae4007
59218f806535ff74c37595998b86e00dafc2a132b6f956342e6eca3884168e7e4f37ce99
da53160e6cf2b07d543d6539f1d1d56e841318643b9e41fad7f03f7f89c5a96d2fe42ce5
54ea54b992afe692b501d85543e118955ae9a84070a26294c04aa00fa6207af3f138b5fa
7897bcffeca826a64c0ed56e9aa7cea726e4172073474d5cc65d8d9d3d1930ae3482c86e
f7c34f59860e70909f632ee1d9559fad948f4f1fc1e97be0346188f7215ba48a3b1cb246
efc1ed1d13b2831007f8e436de94662708c9d1a3c9bce5f4814bac32fbe449cde22cc753
80234554bfe9d71cb0f49797e081f53b9b57f12a0bc0e61f09f967e3db8192cd035931ec
763abb38d9ed89c3882c39f5cea4f96895978d32babea14d40a51e91633081e10bf7c6bf
6d15f504a4ce1197753c46c0ada59d248df30645154707f5d982a73eaae3b27a7202d7a9
938c25929a614fce892c535584bf5c12191d071017d78889e6af6cd79b658df7c68ab50d
1c10fa6c240b15a411f925070e10280d504049d2ed0b01b7947003085aa367b26c26b65f
821cba976a7c2c139c940dad0fa6e3ca05b83f02166d2f37d7247b3d394bf4308969e68a
431f12e2cca5e1843220afb14383bc04e52792413cf9376404c7e776b3d20061220a7952
567da1703e54120875de0f720af6e0faaa8b600f685a6ea36051f1a2e807753a244a13dc
bab734e7b8d5ab831f8f5bfad68beb4c1119366f2a7e9ff53a6c8394f15781ae3b5cea10
9c07560816ce5f8089b142bf4ef3d1b3083ad44de3238fe50e1416cec555d4ed9ed1f2e8
5ff8024a9abfa272db0744e26caa628d889a7909fcd082302faab20e9201bd98bc474733
53c8490e3d7a5f959226e6d35aeb5ff4387bcfda9cb5322f980d69171e5ce474d5b3b8ca
65c56b90d81cf3cdff19139706888ff178889fda474a7cc4d9899a31360d57d2cf5756a3
8e985feb1c01713a67b26024273e662225c62b7c591fdab6840d6cc034d991212594d992
33f3559c367a4617fe1b1f429904a0e7b5b457c30d83e7e154980a2bc47c62762cf23e6a
24c4231efb01fe0aba7404df61848e4d8ed881809456e74e394c32e88a7c1279aa7fa58d
bef9e44514e7e5b7acf69e13705077466966f1ad65ad249f74ee59bb4020596165d97497
20941c16ed570a85b9107bd17c1429c775d6e200a8dc0d05361ad93beddc941bbe21d83c
0e17d02d14b2d51c176978502d86c72098bcd32326787ed837225bc6f09882ecb94973b0
91bbba28de2da8fe5a7a2c376de09e9a83f19db16fcf904f24b2e3c55e29cd5858b38be7
54d33a45be12abbe0bbc13727c22360dc74f3e14f8c409000dc9ac79e303c7561861f538
024b2e848ae707ec804107f08e9942a7d575867bdb6dab21bf09020a4c32570d3a355542
f360e213c0090b838c83b451fc63e0d44db0e1a84e3ffb48883d610152171f53be9a5c69
1a443699b16943417d897cfff385e41dc8a256627a9be01b359504b27a18ab7e06400f96
426f75e4548c55e1cfc9e4800b40d13779d9927dde58a65be0b918c8cd03c479363f6283
727086ee47c6bb7660e5982be6737670ef82e68bd1588d1be090d40332fcbbe09aa7aba0
8594e404e97a7ff9e48f86ae53be97a8e583a8fdc051e7e41760c5f2ba1c12610c115c93
f27b69a3e90c5b1671d3be6738b46efe36b86fb9b72b7353fea38f5ceba5bd0e1dcc44c4
b09ff092f07fca9723e18941cd77399da8e3f3e8090faf58e4b479368363326bb784712d
65d42955ee2fb9bdfcfcffb891539757f49189d37a17b3e848f8972900a135ef9d96493a
157a29c162c941169389b431387aa8e8b2fb93d207d7bbc4013a787d70adc3e423ebf39c
3e36f3cb1152322cb3ca2a985b3124ad6dc04c9b66df0e6fdfe302c6acab37f9dd4fbb22
b9665be681d231d46525c365007c9e86d97ffc9f2e6e30380e328a1414e04c939587973b
c66cf3033b226395e3b5bef6875a75c85bb281b34ba7af328c01e81df2a850c0554a534d
1f98db148ae6f8dfd40d0b60959bce3f8100493ec8fa530b6b64847900b2a12cc4754d09
b37ad330ab5abb2e3156a34fdf741f33e0cf503e4305392c6c57a83630abf1fdb6ca0f74
6cc76ad4d2c411ee5e64d8f22f78468b5a8ad05ee400fe21fec356cb27a639a6d42effd3
410ec6982d7828f0b8f6207baabbe747b0279521ebcc1c20e68070dae87fa9921ae407c9
4e9e5cfcb81d9ea4549fb0da5172b88107916d6e3e38dd9e89438d5f9eec232e6b11d599
cdaec8d8f5cbbf9617ca19deae37664274f923c58cb83cff51d72e3719313bcb9be96160
46c9c390ee2713f5c5818ba73c73fcc70d130c8573c9062ee7beedee986fbb9b31a79a36
318d855b91d4b9fb4ab48c84bb544b1fdfd8d25a9ca9d928f2a7dfd1eb998cd85555d750
693aa7bb3a650adca39e52de299fe154e9a65c0d8c270e059f4158b98731c5f6473e15c2
1967bdbbf6ed0473850fc2a35d50d895bcc9e7f0f2fd2d7fc5bad986f3430b0bc2a50f31
d2864c8eb092a5812a1860f3e4a53a116a5aee96c9dbe1773db4cf81b687c694ef6257e2
f2bcc8d045e3acb14447c673b9a55eace0ca69ba51d0ecd633d252f805e1e19462486e43
0d7511ebba98e9baf9c7b79f87e94eed89d6693bb5758ae115aaa50fa0ae8eabd3291bea
bb3a0f8aae785583df28e1dd45b6806f7ec724288598483073c00d717789e1a7b718d6a1
aa5e27d74b01cc12fdbe8466ce860ce0113b5947c30b1f3b58263ecf61f3696108938fb6
2ac1d6a9c381273597df348182d24293e3dd71442f0e9b9f879378ace0a01fb03156e3ed
155d4b17c63bd319c02ba784ce4cd6f3e4c55126dcc32e3a44a80543c29d445dee80204a
f656fe0688515a08ab58fb392b305268d2267fbb13551f9bcd1e829cbf8cf415c5f6164e
39c67e1ad20371bd3308c4407a23ae644c70b9aa0540b7715c7e0ba92cd839292813504c
90d80b4dce5146c399ad6cfa9160fe49022411db6f91887090b7232c27df6a1a63af81d6
a6454a51e0ba29a8817a2c13612178069321b87164cd6b9a6f22fbfd85adee7626e69b50
fb740cc1de5cd4e0cefd4bbd3c1825f9d7638d21189a97461938527a6d9ccc49b8958c74
24a9811066cda10d1a27c7ef890edfc108a77030ca35b129df1e91a014b1a4969e672109
0421ab19559e3ecf65de89c80bfaa2b300bf2c3d41ba00b21aaacd3b12117bb801e1d86a
d2f30704b71b1148a718e5bc020b5ff27d8cbf982b0f35a11ba4e1d5501245e9f623464d
36e7305029ea6c42e962e5db9264fb59c1ced8acb3d65c2bcdffa93a0dfcd8a6e9dac421
dbce020109ee3a048730b6b05525be4c3a3c98dca32e6a3587bfd652ed78324646b43b3f
cbe6660db6d16b7cdfcd29d0509b2c1c84d5bc38fb8b4fba2a195a61664c7f69c4873c90
6bce947876f5e4389b6647c0d2fa13011f16c39013bd5d50e013d4ac4b347ac816c229a9
19e370fb308eb5b2ddfe05e98424121c6b1c13b5c0125e2650f8b737bff644d3c9f4a81f
924c5b53116eb4814b8f72f851fa5beb61115437ef6a78be4369fc638871db89f636dacc
1daf7658d5efe35c073a714f7c396373414f10b7a4ad14b751608e3fe1f4ef4f17b63be3
bf95b82d5344446ec691c3bb6803954ce590929eab50b0b032604d695315b359c9bc4baf
df1a6657ddcfcac58cdb05f4baf40c5fbd67ce962d2960e12a89f3a58dd6b6f2625d40ad
364ae17567eaee7f31698a96d1331240afc13ddd33ab828eac1ee848c38dcaaaac110f07
0d7d7ca2f6cb68818c3841d1a5e9329304954a0bf2d0474e1a7b907ab0043d0e1f185c8f
d6b2e46ad44d732c965a5b1d1b4eb0ec35483cb1147cc7a5a9e41a1fa55956e5e372306f
b42cfe75b4b59f0e34d71e80eda15c56b0a45fdc4c7e6d31fdd6d79c2ab1e59853a4c2d1
0128ed82d34515c79c925dc49d347de92309f96d0d86a60561b2662b51b7f797b8171555
92c4a46a3f8cd801b21e29f59495266f12cc0c93b961351fccd71446e669cde85b2e1735
ef7407e5b9fdf3413d58d1666946c7b7d6bc1f1426196716e41e072911d834bead28292b
439d84aba2cb89078ab3f3d89c64ec9102d517eb9695468bf6087231995040ee78d8f32f
8c1908d1b9eabb503d5a248ee29fdd519f47d423dceef3a3bddd05b6214a66ca72dd123c
9049dd5ee6bd3fe88a4c6902d2c8dcde7e86d2bd74b55c9020f52e25a60b63f9ee0441e2
8490066ca3196925a40fb1830ace9e9f326271b61f74f7edb1b11e1968da64132992f1fe
c0a198fb60b006229033f717d4eb8f793879309953c512ba5ca11cdf95f9133c8aeb19c1
f6902a01ada30f588fe38e95c8c64f5dc3a937f5283cf83e2364d122ba65623ab517bc4e
75342da9e4f6a78412a3ba1e533b0c93448c39952a5f48d7ec5a90f8e76a0f292c226f3c
f143a3bd331a54dca6b2ceabd6c647c9dc72539105a9d59c47964ecc7320cdc9c2c80e04
a65650b82ad10e3586b4aa92369c9c8a06bbf7dd1fbe757e6ed6fa8d29edcc01bdba0c6e
fdf3ab5f2c8f38da3d1471f1c8f4890ccfe856cf7e12e2a2e772c4d601d701a124b1bcfd
49ebd4d91fe7a804806c8aa80fc08ee74d530761994a4c339d3231ac65b6d48498ae36de
919fedac113e8ea995069a778f339beb4aefdf8590c0a4a1fafbcd515cdf76f8fecc2e55
dd3a22c2428ede9b3efff64687701f42fc2514fe3bc75e8dc56e81636ae17312a179f0d5
77b5a2b8b946a47e1617f189697454db5871b5c39f1d35417656b7229fb252a132a93793
bd24a2787c0b1389830d383629260306b8e08242402a3626563f607de388534e1a1ce524
648cf242b1d6e777464cb29f842474bed1ea75193cdf368927f61c92e7aaf1bfae47eea9
99db93847c74eecc07bea7f851b998ceb34a9aece4e62e0a4a2c2a8f4b154c39a4cf73a6
6a02143d936a4b98e2f956593bfacc51cc9a937deb5ef288db500e90bc9d2c4e53dd38e2
58517b62e01bc9468359747146e7d3979b20c0a43773271ab3c20d9b6d7255f796b00cff
bbf15e1b7d38f506fda63979669ab4e6bd0dfbec92fcb6eb2e143d3a0a1897ff286866b6
9d89e61558eba238bd3fb1d379f088af09843ba8bb4645e69bfc241a375df93dfcfa9c82
697d8e7aa008f0cf22b4b992dfed32055635b31dccc00e354f7d67f65f39c56609911731
382380a2c45e124fc24771ae9192687971998403ba365b37e466005556966a3aeb151616
91f467f7c018a52fc6b2f32751bd46874f4ae560f9868a92a264f5aaa2b48ac04db41b1f
445dd9933beaf0306b81f2101702eba47cf9ecb76d1b03ccf88b5efd1c2f6fe65fcb8d80
dccec82094257bdaa602d1974f21bc67865ad7599883ed95d60e9e20234b679d637d49fc
a6356b3f8e853370014e0143e9d432a1f2757c2623396e1559156ba38a63bcd9bec04ee2
2b86de7e20dc49f7bc8a396efa1da4f16e40add4f2dfe8a32caf2274abb9c64bc891d1c5
cd4851f5752fc1821a6eeba9e95ad58abdd52c6ddee3ef34f808a5cab619f9a9056dc52b
9a30a9545e83310a03e087c1b2cd065d9f154ff6db784abbdfd12ef7e87fad21dbf83827
7f04ca4cc4a495cb5d2ebe41a32068c94065a4ea27c0f3c30f3aa29a3bd300ecb76907cd
bb6eb883f4c12ef89fee6fa976dc9ddb206d0c78dbf8f3f3dc95a9e9fe196705465af091
63676731a9972d35d781f35d0006eab8d085b84ca96dc5ee82e9f07e44238ee17434d35e
10aa9e358b80778cbfad12fb4d9d1dd613db56c021dd302cad7c0778a1b8b5f8fdb21b48
b916f55835a2b822a567dfd8b76d2563968462c7a6d74d0d5baa09d4bb621686e62e0955
72797b048f015ccc8b1d6ccc18e927e85aaf5e4d96043e46eb6d11075cb8d9e918e287c2
3429f371cf8569a08f95e39fd14f23d9a754d44930c47900f7b4e2c1c90be820e2970745
8b09633a190bd55b169c23c6c368f78e9dc28e1f4dc099057c22c92f80d65eac100d4144
0ee74575f59d1873e4d07ed93e867de9fead5a3c25fc0643f0693969d26b12327470fc4f
2e5fd658cb9fad1dd9e41537a804e91f9b90f8828f159dd47a3406da8440097eeee7e812
b7eaf375eed14b6a9e98801b0d2dbfe1904a15d63a54ef6fac4606ae713011e6262117b8
92b583631f5714e532d9bf85f103287a90ab8314a737351bdc6586d50cf39a9a41ef9502
684ae140709d63335af42b71b955fe33e1037f1cb22f380075232dc7152fd52a4ae4cf2b
74f6a86516c82c40ce8aefeac62f234ffd7254906b09e503dbfecad20c170099f0084215
854d1e754bf20bf66686d022b2df0b6513c17af0b2cde2947abc2805ef0bc362d6685943
619434665d7061e706496fa3cc51df2e27fb7b5e18851b0aa4f57539f7fc45c6470046ff
14b95a677a166e34f7c1e80c7525645cc952cba7582c6ea116253c2461a2138aa6fe861e
21c167c8bcc829015512e692b58fff59650239bdf707bd7bea469e370eea7e22c77ffdc4
4d0e590aec2a95f74e1031c847d6391272f53dcdc1615c23f78571fe57aca70d02076849
62eca735708d556b9675a7c45d245070438f772959ceaf0472d95ec963f6edeb7bf63747
416662d961678b7b478e5c9a48409e341e5e8f89eb6ca8cd625a92f56fe1e7641fe9d6f6
34e3d27254b5baaec64914155bb6180708369ffbe2755f9a50ca4f86ba19725548b2d58c
6896d196d017497fd01fa324278d0779a87d2ca59c18c6877a7801f0d92d3720c964bd2b
b66d277c91f7614c0077bd088c7b20ef9804d083f69c9c6192902029347eac29007fa7e0
985e5c9d6dfc2d9895ad8bb544bea212aede1779b7da082dd09040db274fd511b325b6af
3673f148ec25a103bf509632854ed78e4532d5d5e08a3242a4d52d919496fe20db67f6a9
a25369b63a7f3249b89d448d784165f7ac1a3b0984eeeac201b3c57d8bbf11ecab6c1408
084376270a33d87ed6d0c7fe63f2d6096c7042ddce4f4fadf3286472ab6be4b27ee2da8a
4a6651eaf283c902d4988c69bd1e5d6848f41f24a73cfff0cc2253c56a968628b10876e7
267e14065886238033cb548324c2dc482406adb22ca4b4d4265fc65801ab9ab4ec8e48b9
1ff169519d9a8a796d778349bf928a9114a6571bc1033bef0dfa1c10ca21f1ab15682118
988dee00af47895eaa482be44f51f51cc10562f127751d8e8b5d163b6cffa926117df6cf
570537a2743f93b0d264b4981848b1fe1bb2b14bd73f05040a08fa18cbec61920a4eeddc
c630df1a969bb4037ed80d037aeb4e68e1a898dfee46cc94affe9ad18ca8210b86712685
671818ffa960cb95bf9536f74f63f9f224c50e77472d0de9805ea4698b72296bf64770e4
4aa51ab4b40fbe88b68a5ba0abfae6d905355de3d91e4b29e4ea05559c24b4d2f96b5032
0f759afd4c59919b2cca8a831520bdbbb27e45296eb456320a24e4b0078041d0ecdb90cb
300169689b2113a5eb125e70e8965cd30578f49471e351656d4dbe989094a279f7873dcc
fde40ddca3826e3a3171b378ce4e25229a7bedcf43e271c415c23ef0da292e29e2dddc50
8b486ba7c9671e02f345c6ab3b5b94cc8bcbb79a8f5b0af1bd05aef4c1757700f2ce9dc1
78f917e1051b291e8d7d63aabc6e0def8c9aa317d1221365d91e9c4922d6f7045f01fcc0
1c6e4b5042af75a26c48d32e61383c1f400540e0f2a9ffd1312ff753f6fc0a6ac9e64254
5c98e38b2525d56904bfb1f4043c1877f657753ab3ef9040e041adc1fc157fddd89aa7e0
db32a6849fb7eca288be2eb45ca10a9768e110afe1ed1ce4f8f7860115714e6837ec58cb
4393305d76526c9add48a97d758e1f4904c026d88c7b541c67dd00954468b909a52cc4e7
84000711ddd9ae699fe0bd6976495b144ca3799ddbc498768bed16b0f4a1b691b25be143
69fc09c8b682ca7de6259a208825a6e045b5e929fae267b4e440739e35761c9b4087b8a8
73fcd0339d8f09073a767e7bbc2df1f8f9816b87192dd6c0777bb51e573b86f48594329e
b6e89f32f75054ad67a92b39be858ac45d866fc88e9ef582c872869e1c9ced9156f05a2b
fe3385a543dde0d037ff391e3d349d68da22b9b4d9e7580ae189b7cffb9903382ae434ce
56019efedde475b664382fbb2000184ce5ce7e1972ed745093ed9873277a313bbff8fba5
910eb40ee72026b5f31752864c69c796ed15dd969f1c264d01d54664ad33fd98ef167d76
956f85a0fe7ebd73f363a3e5d74b3a06e1f92c1924c9c3c302a61848df83230f3aebeaa2
5957c4e317d15a7a5d5577e1a53ffe46f241273b1348e58e9361bd7025d2f7d7229edf24
9b56bdb57e395a6b4c5e93ca2b7d32bc9985a6e5738b4d12b8eb60522b173c45cbaf934b
671dd5d4a51bb10a64d379ab1a081deef2f8d164c4b13aecf4f29aed9b5c7c05ac82bd68
70e7e57afff1acf45ab299ef6ef709f59e63c553fcb030c2f48246f3d884c3ca6942da70
c419afb7d0b9d95ca2bf1dc70ead8f195038a133759ceadec1ed950bef1cd8fe105bbebe
e886fe5752161f746337ba2a86a5226f3cd7e6cabea4591563a13ca087a8e30d27ab6fe9
9480631b51a3c19f0449eae4d8d56a6939b002a00f338ae919a1392e06d9b15f15767504
aa3b4b0682588505800fc0f054c6b685043abe43d633cad1b35f11d99ae63a4fe8a845cd
236d4df55e7cd59c77231797f6d5e042bd642991e19549a478852ff4325e9f4c4541589b
365ef45115aa9e44780693e26ea0ffa00addac6f0c0bcfdf0dae48c6aaf11753814bb60c
87b03b0dc543996f0ee526945b1d17b9f78bbb009048dbf1686f9337990f94d3f52cdbcb
8e504f0cdb0836bb00b8ec7270ee0cff01140e1d19834ef04f9c1d7dfdf701d480c1c22d
df72b0991fe5261f0cafad93d68bf8e77f6a6fe797ff9f63eefeec8a07e36e820c38c046
7cf90034f5f832879fef3933108b1c3d91b05548be19e503026034c0259ec8a99f0f5912
9de7154856a17902c0285bd442af346305b62b5407cb7ea63e1154cb89945103df9698c5
20fafb2c21261c30ba567ab45a220dd01f1f111fe17764808d18ddc8c1dcb8248baa922b
9e11fab22668002cd42c4d7126d2a9e665ad68d6c351f51534bc899c8f90571e5b18ad0e
183975305b42c8a76701870f5305d69bdf4d4b981d07d3ac9df92f299cbc06c7e0a7a22f
df30d90fe49a151b895f4089600c830e6c0be7c437a75f8d1163550efa76360c42014bc0
422f2390bd5b6f7b909d4282b55e7833e03623ab5475098dfdace6adf6a1cead04cae351
f9926e58f57b166405bf963d1bae031dafbc84f9158fa4d9de015b08f9ac439eb714eec4
868c51dd41fd28f6b126379adc7e89c200e907ce06807b8aeac04cdbb0fbea36a8d8ad1c
263f8709e37661b8075ec25bcbc03babab06b0b1fa342ee2d6ad33fb99118f6defe94cfc
0ee865f13a7bf606963e1264396f11bf1b5ac9395d35b24e7a42c5b2fedee5bbe6fe9178
c1b44d3f41fc9290d236ba7595f372d3cba4bb1569fe3c907035fd44369e580b8431ca2a
a534c878a016f5e8c5eeb5206ef73ac211aef877b90449002b8cd7e5d459f8ae62e4c97a
1293b8322f7071e8c960db4e7d7a78ab1c6d1eca4f5f1fc12a7b5e398525277fd17afbbc
26687d8d85272c38d8e80bbcc5b237788b7232c9888e355c39f8f3399757752c124c3d0a
caacd5d7170e0206d49a4c83e900f7415ff706be9064f107e2a17b6c0c6231c6060af05d
c51831026b4501ef667ca9b0c702e0d01ce0631c4c73f4a4cd078f1ca30a0a034ce66a7a
3bb57b76bed81cebba8547fdd3d03648bb184a8fb1b1da0af09722acc0dd8a9734433638
fc75b58b44b5844693f21d0f0cec3dc494141b5a4e5e9fbfac23fd99d858160b18b0c410
54d126f73af1e4263f8484f1d66f2d9f0ad94ac970e8e7320c351046d13ecd1f15ab6362
f95fa4307b367bb0c5ba0f6e78c99e0eefa2a8f700aa76781696a3e49646935370ae9896
145da42bbd3d401a1922d6e1479daa67738a1f3e3f36462ee40bf225c07e32669d91fa18
ca42791d79901d723090dae09e6a732f5b180ed6bf7201a5980baa7fa2b3afa828379696
d5f85ff881a9ef0e8cc8240ef1fe9ae235ad065544834c9dd9f7e84474ccaa7796e4cc19
57e33958fb79564e531bb5db4348195ae041f884a937569eff007d9d4e9126883ec756b9
167091bc3cf7640f8f952b1f8aac2aec46896af13b86c666bade1026dfe8284d20900268
f08cc30aa337e4d33d288175b1c4e6ee9a9de31288b48190f43db76cabf1cd2eb893a334
5527f8d554cf20f7f1edeb1603ed3edbc7e3dc6b483e2753926a1ba507871ee44ab6cdb0
66674ff130bcac064f66679de43bd5d3a925ab04a3159eef53d2260786a593a87e396f1f
fa23fe56418bfaabf8953d4b173371e8217598029b851de4b2653712a98a75c30ee7758c
b3d5b9d41a3cfac908f1c1ed5752a4c3d0c23ec4800e7de851a0936c23b1789c4f56f123
63e331472a95579e967695f79622c069832d06200c8bbfe837a2015c65faf4308b849967
d1d243bff05b0d8e588814ce2f39d6623e486b204b1a0e8631e1d20595f1b699a97fb542
c7df94a7eafe103395b57d01b875f33b1ccbaccd9f233418198a7ac91b0130a84e72df14
fe678e4b8603a5c5976254a05ed9e33dd3484f9f471f84809a22dabad8189c2bb80b7be1
c7b07363f08371078b3d8b41341c89582c22041dfaed738c59858dc285b2a9bc57446ca4
9683127a37290908e5214f5a3002011413f8a48afbc43f6e3f489113288c618de7cd016d
684887188f9f3aeec0b8b41b436cd8c711d1eb0a06c0a733a737eaf9892795d29c905cad
53a33f724979da0662cd04157a2e7fe2e8afaf4f956441249dfd6060c80a11c132f3fa12
905ca8752194df0013f368aef38f022c662e0786f5f3465b7c1832ad811a38e7e763a7f5
f9acfd8454048b7fe6a2153a360dfc30eca8672cd4fafcdc815b2d88d995c4eb0b048505
e1e12207b25026e3ddbb64e3547e76fb4c5fc30a210e4cb31e99168549fa7bbd6a1f0b20
81f47d17589005eff16aae4df2c40ba62d11fbfd99157f252cbbfdf27298a66a0fa292e3
184114450294868f6a8b40f21d195a5d651170c2fc00a7caf385a3eb4714e98b29921d9a
60c47bfa0ae845759ca4bf17bbfa7fe37b122cb36d3269123a7b1650e0b921873747df55
ad515b13b34b7dc66b067e6f19fdf29bb448b2c2d495f46aba6f6d15e73e7e228def6118
fd2ed34e83d87554cdd8e119d69aa83c0ffe6d18d99d7649e9ad3814f250910ddeb979be
d4f11ac83341866bc73ec9dc06debbb3977ba49a5d340682ba471f6df52f363baa668ae8
5bcecf2944bb73720adad1edf3c578402f15cef3125cfb8d49ebc82c789906115478c338
a3bfaff687c5a7b25c987b4a0a62bb2e34dcb3327164f8f5774f8348ebb88082565c852f
14b4f8a7013f33070e6704ca3c8b0d524a2b32925f3e88aaedf59a7dfa6766159183165a
e72b725ecaf52edf7436ffdd06bb5411fe506898f320866738d7324c663c6387f51a9d5b
597190db130df36e334ecb78fb8f8fb79b16879598c6b55c1b61dc4b68edd65d1f2fcb73
100144f34023b20d17241bfd62fa8cb120ee8d1f01cab1ee3c06a60927bfc00cbad15733
9c3adeb7c1da407e32e11979a498ad49d397719abf4aa5fcd42ac2f201c4da56f716a51c
d8a8ee4be6cef2905774a3751bbd0f2f5af8e390bfb8296a73bf0c8a2f0c193e67696f99
71b5ce9076b57f92339f71505e7fb1b53427eb30f620afb1997c665602645bc14e2859c7
edfa8af28998eab68d64f3c1e5882a8f66d1986ef9525a9d8a59da81da0000ac881bf9b4
2a6f358e170b3d24b4f12f4971e85d0215eaba158d1ce60ba949a28b9554208994834e6d
0c63db86c5dcf11ebc216e30693bc447fd7509231424998d95d6c851a73bf2835ff6a9b1
35db7b8b8815cd8548f00606ad67d14fff7aaf91be7ee8ce698f78507cdb27db5ab79410
1a78168c41e4745692deb87cc39a8c14b125aecf790025004a7d90f95c9efd01a33c71f8
bd5441feb3b4a4f6e74195e621d51c7da119e8e26121fdaed965721f58ba92f577b8eefd
3f41e7a0bc1d5fc8c583b86c701cc91f5efe0b4c8e2e6d10ac81fff89338d27f888447f6
3ef9ab0338556ca65ff0da3ea292be5bb681428643530b8139535a46798e76abdebdbd2f
a41b100db27404c4c204dfc5c6b603b51414d0e0d495091cb5a272874ccab08af91b3f28
eb20b7a7168551c41f2915a101270dfcc8fe79d976c91c76b8928688536b919f70c15c00
37532d4686ede5ca8f361e68f479c6a185118643c0cb346975b1f93924679fa03673d08d
a0095755b86a208ae9554237c8f11196ee9a205f96c6e04fb982a1a3c48c72210a50c189
b1fdcef2b462beb8dbaaf6a6e35e9480ca23e0babfc7aadabb47ccb1f83388a1779c33b4
1a78602410b6d9b02ac5fce4170472118fa9ee1e5a91e950a6676a789edb8ba81f3b859c
96620ba657fc873ca943b5daaf4459c4baa27185f1c94613cfe0b8ee12a35f8aa281c5bc
4946156d1451715066ac392bb77dfa45cdeebbea8c254c6ce3152dc10503597f2595ea82
96aa1bab1dfd092e4e04b5ac4f112f3be5becdcf7bb2d9c8236540a30a01a6d1d2771365
8c5ea2d531104632c9f8576612a99fae48007747563ed9358eb2168dc1004f8c5697ee99
e64bb820cfc60624e048d7a0bacc7ad97e051046cd19066ab576d92ca5e55ba8c86decaa
0c81820d5ab131ea93d2f774acc6e6687ac18e6f9bd1a0aa1066bf6ed124d6e94b554267
52e0fa055c4fe522073d5aece470049178461548b881bd0816321c658b61f2ad16885adf
674b327cc4ef35de277dde28ec7b44817806ba89fc10fe09c065c5462cb6c75ec3d90571
64438aca90ee704f7da1860dc360b06e07025aacf10d6b4097b95ff5cf1cbaa99f2c303d
c61962a801d153e7fa596b69444f8eba603e6730d064651296c0cfd206f40649b88b5740
72fa41f9dc8b561970d0574555222ba8f5811424d3f94c51d38e5cca1d2ecafd05dc68e6
eddfe5eb71344fb8e2a74be46d01ba19fadb0c7094410a88e583d7c2827bdda8a9098802
b226d0ef712f10d86907f00de93c6c298967c623c484c8d13e34526adf1e532ab098936f
73c1fe323fdbeb7c06994ccb80cb3c9a76f7f6b1da98897a2be4a2afc96ec116a8763868
79e807c7283f26c5f32cba703d233b929df668600638a4106f8d7a7d5eee0c5301fa0354
64cae18a44996843810451b0a8e4ed08efa0e17d4ec7ee2929100112161bda8644fc8520
4e167fee4412999f6aaae6362ae940ca7edc6abc169bffb8f1bcddf153040c112730d9c1
6dd7dd5a193d5964c6e505b69385831f275fa60cf63f6f8e210005b3434a5980ab7139d6
e531477ce00013ee1683dc9a91929c0b30361df4aea8656fa3c897bb22bb529a244a59c5
1a64d19a9c0aa270a449db6efe936c70b9c8459705518788a6e9eb9e93235af4d3a04760
f9704cd1542773ee8872a4f70a28879559ab48e48fc677612a14b7e26398a560e1841177
760a036144e505c84eff7ca2799347ef87373006f688626c75e19a24dcd010cc734f227c
fe15fc0de4e85030cf116819a22c1ec89394b96aa42fe2554c2591b42d239060d978491f
b71cef37668125c1f2e4f1297165b8672c5ebf1867f6580455d2ff2d24059dd72471cb63
f972a2824044385cd7e9deb1122ea357de49e98ce368184cb50d5c3d602399dde5374f7f
44f86b38d04b8f17afbecac760a3e06cea9043a4718119fcc178f152aa88a80c807bfad9
645a4f042580556234ea603c73f48b65b59f68d93eafc6d320fb77b24fb9c09235f1aedf
f31b732a42c901f2735d3c90c7edbc728a6be858fdf692c9abe432858efcdd4f48bc1b16
c6b156f6360be7e3eb6771178e984e7521ef9953948c67eb3194d84e865d018c67d0d03d
049fd9dc55fc2ae143931e8b43e6a639d971c34907bb3752ecec1d57745df1d4e6e13cb6
130ff0b42132404f64461e89c8451096f97e2db528f25588fd305eb65c82144ed9fcaffd
d2e306769f2c4a16c86718341d37d5bc68583b555fc811542c2c743cde480c78729d4964
6c528bd345f67c3246a64c638100f412fd6ee529b083a58d6e048966602554a4bd6a38b6
72e13d5e88d3ed83a1c87ec5d5883f229a496a0e8b4903db846c9721cfb520ab9bfb7c0d
74761f2a265812d5c9c83ab7aa62b874eb14d77c88830e9de6055eb0ed5f9eb24ae67672
fef4e0e58df45b9ed761aec4573d99b5f99efb65809b02cca71182c322464c7bb0621aa7
a09d0b69d992414cc366d6dc2b6c08c1ac192e4af1874b35eb639ad39edc88a09763fffe
4b0684ad4e851d95c881448fbb48e53910c66df31fb31db08536346945301ca1496af7b1
aac8b06d4106999cf78b115e7b3ab8a200a17fce0875d986b039100018b32813f38e2d9d
5e43b98001204cfcadb9b19c0f1babb1f027364d2cb15dbe0f9b5d3f809c3adbc8ab756d
c27d6dddc9702563399247ff0ba91d8154d5a04d5dd4bda0c1497a5dab528d4c8daf98c6
c757cc0d7861157390a5a8c16d30e03c2062e75a44ee22bb942d14bb7b80f30b3b98ab33
0778a6f88fc4910db44ad3893adfb306c291460a0703eaef677d6458a93816ed620a897a
d3cd10823dfeb940ed16c0ea51909e2e2ed0b5af5f1b5c17c9479390ddd75592bc346fb6
e67e164a97b7b1312e8b7ed6bbc1734c816e52aa893b43adcc02d5424245f167212fc71c
5fde819e69fd4a26ae7586d50af114c8730f5eb5feb727bc8b89a114ca9db568edf51d65
c299d7dfc4145c2c7be83b52ee49885b0f0181183067caa8177c7c509334845ac2bc7df1
ca8b0a98c11f32484d22ed4cd5f63a8a4a6f8aed591ab444bec8fdd6aaf7beea8d462865
8b9bd92a9ead67ab77bb37a292ad16dadf114e8288fc818e42ef2589b51d8574df5fc53c
8dc5f91dd57fd24350fb30f576665503fcb6c38108f573588ca4bcfb0b4064b15654a5eb
678ec8d9e566a273af66096a442a0ffffa3d5a274130684b85a3c106690ddea3deee9770
db79bd22c9f7b503456628bf17d724562343c035094876af8c09b2f1ed1c351f34280147
d7467e57d298536d5940d739794d47abd221d32e44b0759f1e6ff127f48a9b747ec594cf
05987ffac0e7477f23531d30eefa057b02a45069e8df8c6f9a2105951bf812f5e8c33d98
b83532f50d510aa13e54b65ebe63da99c5c95eabbb44d7ede904abc2f20300ca1305217a
ec1643cdf04d9510e9c7a0cbac1e3c134883480754d6aa0e747a8982cc6eb5729aa68584
1737daa5acf8c6522925ae6c2ac2d32943c80dfa22d06fb821ba66059223a0a942807c50
d2e22f6ba5d6b970bf1f845cfa2b6ea020739a7c04dc86c8d76e6cb2a81861a57b263116
98f0260ef57eac5afac7c922bad09cbd8ef2353d91358e61ca19f70a231d35885a34f357
87b45b585a0ca010c8cd2fb33bf5f8fcf0bd1957d06d889630fa2c50748b68d819056269
23e8d6fd7bb2b67795430de04bca1ec3309b13dc53a230cce46bedc306569609e76e9aa5
9ca6fbbec6d307bdb55c55d8cc03a0523ffce1c1fdf4d4fd7becae3b75b1f1665c68fe32
f724437ae792cfcc0a090510cc659bb2f7600acb7e907974e6696b46e230485bc78f9085
7d762118dd5c7cf76d28087d83775af4f84380aefdf16807b9d5ac1b23f2773f9a5a94ea
c665344e46f7382e5c0d6c46e97016207a04bf561594a89fa3c4487143aad9baa14fea4f
997bf7d8fe2eec4bef2711d12b374d5d477943418290f0ee3e7ae5abe6a46066d631771a
2e00e500f4970149715940abff64b323d3263c7e2a4dfce45b04eb9eab8ab265c73cb30e
8042a065e7228ee28489c67c96b3ae3f743c1d084fdf90564796a523ab9cd00658260273
19e2d93a50b5c07b349f71f51e3d3ae54d4cd9018b579f4eeb8253fe92422621aff113ad
3e19540b3efa20625ae49a3359ce085f12854ccf8668cc8f7854ed3a6367c9557fccc88b
a1f21d328b2d9abc135b80fe38fcb491da08d40f2b674fe5850b8dc9b17168cde515ef62
c76bb52fddcc569dbe95466fce41b0cb3b0b72daf63ffed25faef5c22f6f9dd056b353fa
d8202ebf9bd8e821a6002434936655fbd850f20c9cbb1c1630fc4b79ee1e3023de9d9ca5
ecab13712228124e2ace27dc601c0e40983c50fd0d0e888bc58baff35daa2c357fd826d4
3a5942ffcaeeb2e0312528a39410b65553a5fe2a845755089052f8d747d93da796a9342c
72a578385467cf6e963014b36f52531ae1b3379bcc9c61eff00a6d5f1621f29747a68197
9c14687b9b98a383d893f714c93fb19fbb5af5174c8a84d682a6ce9ebfdebd11cc80f3a1
e973debe69ea255d2ac1176ee74336fc9d961e4fe40d034364faa58fdcf0a46be7047195
56d1f06d59a1bf95db833f35418638403bbda75dff3ef2e4c4057319ff0fe81c594e315c
9aa2116cbbb88687d184b66e6eda772dc04ea1f36c45a8f6744724fa707fc6f1f4f74048
a9ae74d654ec3862530af52c50103a1c448504c5543f227ba6a7992319312e80823ffb8e
9f28b93c17a2c32f254dd2015a1b87068fa0e10be93c448e5a53cdd821c0921b0ea45b4a
16c6d84c689c754584e68dade2910000b0cd257fba58521d883f85b52cdadaa1a8456cb4
f59a16a1669416b4ffe16339b39239e59e151819e1741da5c7d4461c23b28ef3d56490c6
332ba3eae3c77b98555ded2f211084368e1c8a331a61980e0f1a900f543a8a8d7176b42f
71afab9023b34605cd43ed270295f93f4c94a5c9641861b84d46b58757146ef383c965fc
235edbebd5e4dea91e3e8e0ac3c501adb6a1ab9ef14d204ffc81f231f51c932a96fde6bc
cbc868518a2f5e039e59ded4b2cccabc965101c209d263c653c9c5e2c553ddb1c8fc9660
460cc730ff44feae04766417b2a51ed15411ba162f415484ff80e7b01a41a8b20e0c86d2
776fa21962af088f3bc8c129924caf0b5d6f795a87c6f9bef82190775eb7557876077d04
9c74f6bde0ab112bcbc4dd5d7ae50894abf9e752263b7e054af83e805620cd58d90e5cac
c9f4ae7ac870540e22229f3d2dc16045cf192b5d2d5990dce8b067aefccbf6f5bc50e613
d721e56fe765b4f5dffad2991ef274e618be7f7c20b7ae94676e4e263c5de58e224a45f8
18545d781657ef3eae7345e34984e01351eb323cd7011570854cc2067d266618e4f573b9
02539136bb88ecf8d392679e6a96483f1b5c37958867e531acbd0930b8ddacb59766871e
9109664e46bec7fe8eca183a3b904c37a9205dd963aa9a54857b1d2fac18853bfa4b2697
45451576fd90949c55df6ba308a1ba485a9aa1c6cf12de5cbfa306152d16e5f82be54992
a3925fc59ca21b85d2e560cb3f87d5a19296de8e525c720b18e53cfc8f84873b79f821c5
44ceead4a9edd823db63df8541e8b8564c1d6de47156063c2fd567b61b4189a057db35cc
c294586ea46035d5f85b240bf370c4bc1a95f58bd5625e9c18b39ae4c72c1dc1c2eb91bf
9d9962bc542e6b8299134f5379550d4dd2a0c55a435416fadf05054ee2ff860867868409
97e3cb907a28f2003a8bb523eaf7b2c37af10e09baf3dced0f48d7deeb035b219b8833c0
7ba937429c1fcbb7b507a7ae2e4aa716d6b982eec75e26b31ded8f45cd09c999e0a82d83
103a697d7f854c72b569811c91e1936796228ddd12c716b5df772c43a6e5231a69b13336
7dbc76bedf4340d2c872bdc4a8c2a637b299441451d582f85918fbdf370fb624a12e2f86
1bc9ee64a93a0f1bf13da8aac6f96ea9eb4ff42645b7e70b4bf889148f781f1ac611cc1f
337f7e2d6bbdd21e6e9b55fc4bc8e0430fc50e28c33a4efd9b7f8d12a308f38cee7fb914
8b0104c36386255caa49ad6d778ec597e08c40e06f54d699ae547965b2ed0e83b62499d3
2ae6e6732517fafbf32e27e318ddef6b039b42b2bf7c33b9203b24c0b0d558bed7e1f38f
2e9e95ac017670f6312328e5914831a1580b28f4d65f17228c6405a8961b889349996080
66eb794109813ae7f1c3b18e45d7703a05ec904f439bbe1264aae5fab5b99a485826bc90
83a92b2e133d51d168232b52b815319dfe13244a7b6d4ad670666e52b453ca6f15320b44
fb0ec58fc8787124226310a4ef0e3d8b40a342f13e3d3c15ee3f74a9a3e519f63e58eb5f
0a64cf2cffe185d8e23ed0fc4e8432fc0aeb69f9bae08a6fc678a6c24d0100f6dda5d112
aa3f0839753dadafb81ccf31e91e01e55d889c87b39f04759686fe7c524b56138c20520c
83c89c18f19ad850de264288efec13ed7bbac9bd368f3c1bec0bbdeac1fe092fd6a12c4b
336633eea159cab2fb9b003dc72b7ccb492be6a95802c2960711610be747a642a67d7b83
b6d1c3f6bb7a676b8b3143b6957e6feba7e3c230efbf8e7afec491cc43f1599c36521e2a
bb597deacea712b897d2f394287bcf460f71cb7a33eec2709bd790fd0e789d8a9cb3ccde
4fe06467ceeb4dc07f7fe1b95e2947e4de9cd879bcaaa012f0672cd8412615041b51582e
8d3c46ba601d7b4271a99317d5a19fe786587ca9d6edb60edf0f2ede81e992703c4af366
580995256cf5062ed12f846bf6028347e77bcae7c9e2227f93a3f7f5103808323c95b943
456046916b76f70b962e64b189d702bce297142409d60b50ad750828e84dbca01fa3669b
418913ea67223bed4bcd2b31ad7feaf35c1f871cdc2f1ae568973d1d7a224e0228f6543c
130a51998c6c5ae46d44ece6862fbdeec6c24dfd8bef3d2c6360918a9555f1e87c9eb775
45cb240392a7c0e0d04fe66ce69f7c20e8027c90ac638ef0ae3779845be49e7b1432108f
c6be0563c3451f90ffd5897f953f94fcbd7bf36ba85aff7ca9bbe8946c3084b8fa251a8f
65fa2445541319b0988c87ddcd834517502254dd97dcbd9b06087f13a276b2efd10a1f92
2c679708c294c481f8beeed3e7a0e35037205d6869276f934882012f941e725eb5f1a180
41712417b1538ef3ec2381ccc864d0656dacce6678525ad74868ada2f5d09ac204a9796a
c91a50b5b38ae383155b52de6582efeef95c5de92fdfe5cf62789ca96f8c25cd117a92de
e5c807cd98607e39f0ea4eedc88e8c995eef8b63efc0b2974126653f4cd13813a12879b7
ca278d745feaf937a80b2cea3e8fa73c21dbff2c4d4ba6d35851eee196537eacfd896177
c083faefc1f6fb3fae38091a98b13af0eb15f2637670d508e78886962caad990121f7db3
5d00a67b1cbf403b2a0f6e64418d642545e6ab9a4ce8a0e11e20932d45ecda9b2a9db0e0
b5d6b694bcb7744ceb2ef9fd3a055f65221899d7bd35abef269165ddbc86542d7b4bdfc1
1117c48e2ae1625cfa35aae5bd2a9737a0300e73e99e0cfec038fce8b96e18f00b457be8
d2b2e4f4ec7a3ce49d63f6e2f1a73a9ba2f8be4a62b3369085b8b54d823ac489b14cce74
b1dedd8079a07b0bf66cf35ad28d0013a83f55a2311f7864292b7ff6da14197594d41e70
626f6f3b636ca8dfccf92f790655fb45011489dd8eee663971e1e2908898ad7383088077
719b50c88c25f20b59424843f16f2f538270cc7a024d890d8fe389357229867b63f12e90
536b9cf42bf189b72f49aaf53a8bafc1a42836dc0ed8ca52a944f3185008c7b25ccd394c
607f39b392be279ebdfc659b5458baa94d7668451383eba63f223445484480e91d1b470d
f2bd9325ddf11eeadd295df04bcddae063f8d0b9995110be5b1ab9690fbda29d1c6e6be6
449b1abd833cd8f4348e7357b9c85a122ce2f48b52835530528ef65ff2b34a4a218e3666
9ca6aacc5ccb5afa5a58fd295264eb029888eeba401229f93fa2587527421163e9fe9da9
e41b38eac65973b433b0852914752006c9d46113cea41b4c048c9498f51ff858e1434aa6
d9f28f6fe954792175b363ee68a334c33343ab8e3b134d31c02f944971b26665bb50890d
f4e798f6181503b91f46b35a7d2ff297221759047733ed422faf0cfa5d160dc553e7bf57
c473ef977c4c733e3d60e9909fdfa15d1af1ea56733aa21603f49653e315ec03e54ba648
9c49e795c5552443a0b22328cef1957bf87563552de125b8cd1ac4c2677b42869b591721
e61807a3a563e0e86d6f555fc6e09cb6694b76b660eccb2e7ecc83a6447eff9aedbd14c1
3c3720895abf9546893e51bb76840953d47e5325f27bef5c73fa8fc361ee97cb235c96c4
8c0ec315b5e1e728b80a5c578dfcb642094974517a1d9186b425d6b70b27d9bd06724c95
b9dc3423b6f633cdfac023d7126da9c9e0666f6124a7b727caf212b86f87989c9f7aa8ba
bcc9e3d3ed449706738c17a4982512cb8d6d1a953a3c3f379ddae8301e2706774b086a58
789c912a7c8c5bad2b2e9c86fdf0299d1df3ad1f4f0295ed06a1b7db6c87e01953692eb2
5c051a1c2832e84655a04a75cef26e23f1f441cde34a1f24fa31102418e047338e1c89f8
04253f196a852f82f12798b6492234c7a13b3a1f7c5c44042d5e5e969604afd0c4dda4af
4bae092804a938c5c7da7e04a5a0f305738285c89e7730eb2eca013440766dd8ca98f805
838c4d702137107f03dd537b9bde3f3af6f64af1f0661322a2d63a7945d5ba64593f1aac
6dffda19c150f590e2e0b1790ec784c3d7aeaac803c4705c0ce506f5a6e9e77ba95a00f1
494c5854fc4b6283085317e8c4f76bc5ad097d0e1a22587bb036dc6053b648ae85154d21
870daa237b7338915e31aaf56d8903608302605196f93c4726b3112657ea49b6f3f8ad83
3458a9b1bae85fc4c98b16595582c9eda5de7acc1436c182af34442b51147f3cb7242dc7
fb06b9e216eaec2e86034abfbb8e2882eef4870797be4b060cc03090c60e1762d911d8f1
8dd68942f4bab6958c0f685388dc783befeb4877b69b4acb81b73b2ac9e200fe343f1fb9
8b64533fcf2b7ab1b29c0b02948dec50d8f82bb143dfc467583b972f469e1ea6717a1c87
87b705887295f91ee84c9321545ce3d4817c302c5bf0e038b1db3dc0ed8d20d4ee9d05e0
2bc243919e7648ec53be82bf18eb7bbfec106cc87588ca6d421cbaffc92530a0b61f50cd
3a82a4e005582feb2fb11464bc72bb29da8f0c9e2bc2278d686435dd28b12bfe27fc1979
f375a785626a0cbaeb27153d56cf7b6a085e91e21003b5c7a61a4b39812bbb63142db42a
60850468ec8a7a8afb13011d5b4d9964da735664dd75ed00d6eb5f46c23dc43e9a637b6a
b388582a1e15060b02f3383a93afa7e37c70bf744ad1bbd6e46b91c2c29a527781467ed1
a12100705f61d11cfdea97f921fd10e7510659b4d2faf4c272d6dc2071ae97a6b1b59ff5
0e93b31f6db117e9f73c6923766b2be21ad3f4d08c8912bad429326386d336706212892d
0922442faeefc3e0ac1d244a05816143f99dd86e7507f1ee903a6bb8c6bb951787737570
bc002260568b95c7b57992257215a360242a35efdda04a972a42336ec89f5af72702e61c
dfd9b482a26869dca2005dcde22f2468ad81fe48b92cec6d1f07d788eb06a8242c15896e
da205f9c2f6c5c14813d7538d76baa2e3e1055212f3bfb8706d1e8f0734db5375f36a421
34716b89cb3d12933d432fb95c8816a1c01267d87bd5f912c381ce3e818a8188793405d0
f55c77d31f545ad2dc99a802b68ac4d2a0d4b52bdadcefcda38bcf78960fc2e4eddfbf84
72b46174ecfb0659711411623cd0ba99e24c2c205de5134fcbb850a25cf1e74c8b529c45
f5f125d4dadad955d00cb8cf27ccc438c79f5fc6a89f300104be3487e817929ed519c60a
4fef534cda2b3ae3a2e5f157b5259854398437f1a7affeb35f9646456ed0350317251f6b
99f775edb264973f01d7d30bc162180c84bc5975e76628766d46cba0733f52922794400e
1f8ad7d18c4c96173fe7300237337a3e63379a09dc48f98f8588d310384c693e7ca43558
cb6c5ef5f00ca03c79445db3b9149126b44077c014043fd214e2e26c9c992901e0dcaaff
108eb83ea3b38ceb39c315df3effdb954d23f7048d86fb8fa7140e1ad63e158cb2aea612
12931c0adf86a0c86865b45f68854bf681be4f060027aa0f884f3a9ec2fdadbad2b43435
f800d3530024e9dca6d1f0ae796a732fe7cd6bea3daa473865a43bfda412bcb1a3b2b753
748ab214e29f69c164bfefa92ff59b2855cf1804ad43baf25712af0dffa64f4d45732413
e1007c39c0a076b9aeca21d82366434a9cb0089ca0c75636390e0eb36507995808f6e9e1
73b43a04e606ae928376e7d0285d83a44f60b3154a3a9e66cbd13a1faf9bf13d8dd8e699
8910f66a1f5cbfd1ad9984c5176b56716fa16494126ee33c076d51c1576f69a1543d9816
1eaf9721ffd9523da0c21b70dda06cf6e389892b24a2b2a92e27aae4e323782ffce90b2e
4b115435e937949d5c2704a38accfea791e7c18d5d807573b63fa9c22fcb32db78ecd8b5
b87e798d2f19447c58f62cb670da6abaa962f1ca43cb905ec2f1510cc4eb9640b250667a
4016c1bc8468069ad7b93f70889c5d65b8fdbd523c1ad58300a565423bc7a3f9ee02acf8
1d64b44c005795b6f297dafb398a4c66f1ee57d07245f501d453b4367a68ad046bd072f3
584d132d83d59725a405cc709fdb4f7e901477576be70a2c31ac856a285514556bfbc605
39c386f42e5fd1aaae7e321c3352a5ae17cb0c6d4d0fb2bc567caf5bb79c163f5d865896
ce1168efa0381f54de3c020fdcd1ed17b772ad0ac837102680f410f2b09b936888fce82a
c70fcd3f081f2e58d379b9187aa2c29cbedb004bae9861c431178ef9c79585db2df5f74d
fd0514cc635ba7133026e8bd1f6ac7ba4b9356cf7e9d9a89fc685dc39db139dadd2b7cc5
263a5998385bb4fb271bb1f33d06eaff488d4669160e154db875f2738961191d8b8ac4ed
ed84eddf417ac20ebbade0ed0d98a05f4a23161474e731b8aa44ed1cf7f0babcbf9a84e6
804c8218a7d8382596e73c2d283cb6ee906037ed49982bd7189094ec5d8682443a3fdccd
3442cd6cbe1a33d6ce4bdbfa65c5ea5635fdb8d7c880c50845750e437e915a163bac17c8
8b8983fb51162ab193860da7c3a189d636ebba101f965e8e4a311a62ffbfc25fed542d79
bb24a4f7ab82e8028af1223f5f99837670969d65df255bb07e68cba55ba551e2100a8261
7cc6c95218771f04f01901711635156cd62c4f1dd704872e1e667eabf2feaa1f01cc8d86
7ab9507af77e2d21ee02bb3cba29b5ca4594be6f026b59722cc363506d68cd746cbcea47
bdb91f73c0b1bd067da1c24dd9837bf54c8454e9618945008e275100a4b145df757f29ac
5ac57137e2134aa2d0709faeae67af6cefab80b4e751ac3bc3ba54769b3bc33c49ca4688
a2d0b23bd0296f5649d89c3f929b05076d558b134d6dfdf8d4c17ab39f023f43f3c61c39
ff948fa40f1f71a85c2e79d2dd4b8001e49ca9395f075937b7234bdff75c9b2ce3e07006
a8680e46cd71ccdfc3046c9a41482eb61c1b8e2fa07f420ed01230e966827f0d01b6578f
179f099fe41d4bc2ad6dcead7fda69fe2f4f38c443db20140f14efc431bf958d07cf88b2
95fdb61bd6a0f88412bff483abb4a74ffe3e2abe8b9cbe7b1201e7fe02742a40f5769c62
c05d33cf3144886118f50966562ef78bd50d48dadf68d0dc2adaa8ebfea33a0da13bff58
2855b4f548c5c5ed15b819309e4d5061955a7785b4c6d091cb7c8faf5ae40581e26c3568
870fb1d81efa19849e1a1469ab73238b78180b1dc1f1d4391eb73a6146355a663a066b1e
8a61d5ec2ee0a8f0dad476e2cbc030c5020130c39e0bd98fb983615e4ed80a62d8bd1f47
750f2157b47fab4b61f216e2faca0ba09a305175285bc3435cf9c9fe19774a2b89f717d2
296309f172549c844d43fe64183b73b4375b7bae1f7d72652ad0ae72b25ac8fe9b2ffe73
6f1814f47f56b7c724c1ba35886867bfd8c25d03fdbe6ad4f62cc1746c995166036fff19
48cf599d03597af2b2334496380db5d24dca9e53b9eda925e8942dde47b21f5bbf5563d4
f64b8fb39279a46a65468e6b7b1a8b69bf342544876390515c565f4a4ea45fe33044643f
af447e5b0970214d09df7cc725783670d67ff0b30025be8fb574e2270da6092e2d74234f
6e88197738a5f3d1417e6af4f1dc8856409000250efbbe99b923886c0ed935e37ac89f7d
bd44914bcde0a4c49b88044b83a27ecb5c66df745d2db789fef4e7bf25c494aae5e45a45
79099ce7e9704c97778efc429eda38093d858b22eddd664ce3239fa19c575ca7ed97ad09
fa2aae8e424dcb648eea8cefec9f260c5ea0d134c9729d35a7fecc772094cb9040275d19
3f4c5a78e7d1393f0d441ac6baabd2d9955f48198408ce3a86954fafc49d691f126db82f
db85059dfc3bf8776575772b8bacb8e64213d9ecaba54dbeaaccfa1fd01c2bb3aab6c468
61c3fe992188f7b60004c18599dd9265864db3d32c3e5f03b07e7970173ca0b115fdd93c
d254e7989dc0fd3c7634d21b50769211290abafea258822fc92e9066a6c2e31acd295a71
1d3b7cc5e8c26c9940cc998044fbf171eba6a573fbe34b2757d46cb5762eeb73b5629ec6
237c09168f407e48a469997612e9d4c43609f54742df514b012ea5b1578b531a43df587c
af36f6ed2e785c316fa8690cf8dec22242430ee55bc19634c454c84d94715429c637244a
0bb05590e4e832840308da2560b3799e8f4536afee3473ab98929445427ac8f778d0ee9e
49f799676451bafb0c58efa1cb6df26c52f805858230a6826ddc3ca4af4f465d407d1947
d93c00b9ffb559563cab2fe086697453dceaa79f9f55e60e56dedacd50d93e8e9acbf6dc
f327a564c3b7cbaaf3dbbeae7393a1dccefccda0ce80920fea76d225c2c74853752a6314
eb86426f8174b5332a829215c00bfbfab1f839c5e0f68f5fb211157abdb003bd3dc10538
06f1aa8cf7c191670823a514c91821cb2540fb7445f3dc22252fac6939d247edab749988
ec0cc59892d4b0ad465653d5a505f1e22ba2813f53ed421e2ba5c8e8fbb9332243b1fbef
b8a1971345dbc9b14e5a036c58f06341fc892d0b0498aabdc71943ebadf918c3112c4656
e1dccb09c1f835ff655df63ea679cdf8134f5d320cc272329c5c4463aa060bd2603cddde
fd30980e8f6ce5615653269f4c91feef5bc4f73fd609d360403f29d60cb51949959836e7
1adc02de402c0e219cce69d01390185ac4c017ddefc8b28b5039dfd430be96a75ca768c9
ba62e0d504570169df1ed369c021c84855dcc18e98a786377e3e9bd29ddfaa83cd80f2ec
6160053f9a6cdfb9f62cb63d8123461792f7e6688fb959af2b4e67c381c0a053386bfa9a
8fd4cb750daac33a5a98bf914aa48b3d684ecfe4d12902fecbbde57bba685befe7602b41
1ea3dc468fb93cb3ed3950828abe5aaca3c7e924b3144fc0a68bcdd21f8640c0974c5875
e99ed3db8ec18b62bee328ac2ea8569b7a7c622b795e39bf66503e5b050a92baf12fa0bd
f9f4a78599e672139fdc99af7c1da5bb71f94101de53c1beaf896deeecaaf0772dcd1f5f
03f4b85702b812df80755b45153297255f50ca413d07883b43355064879ead536ae1b3b2
d131b6f5ba4ceb30d8451fe4ce0d013fc7c29ea5a569de0189eb1ce913acba843a3cb825
e6b7ea8488236360a0e49ff1deaefdecd9fe221bf6d4587dbdc9fd105f646eb1a00befc6
93c4bbcfa26b28b0ead18e26d345830599396b8d782ecf0a3b26aecc5fa50e7e4d4cc41f
a5c4554c97e6226b9cdacb1b0c1e50c5785b05d958e548417ae219e4eebbb721d74432e5
9748ae5e82ae2cacc29f92d5c2f373131fe1aea377967eea6cfab0e69bc4cc051fd9817d
f79ce1fe7fc93b96fc7e739bb7b858c9fdd456a1906e4c407aea685e7ed9eedfbf79ceea
d629e21310331b15d79990f9d91544bb659ec3811ec64312e0f798214f1fc9a593ae8f44
e5df169c19f4ee61b133b8386f51fe8556a3342cd2b2e64bb8ff46eb34a3543f5f01ccf8
399831f665e41f2ab81958d7b40f29b57b79038af753c134535c057679b732a36448059f
475c7c863c3ad2711708e6192de07be8c9e2f433db629a8d2acc7ea3b5dfacf5567244a0
a92026d373b5f0f15ee81b6c966fa7861570074f343a2370e46865bedf7d50033b9d35d4
a1c47d0b1d07abb8081b2705a8836ec95482169e8a504510bdb32b3f0fc18d8283a33ff5
61ebf0ee5724a0ec2f106dbb38db7abb15fe5b5f9821f92c5386b4e6e9e4106e89ff559b
0c4c94b953c85ff05d4b21b704d5cf193498a48323ea29203d8a5cb7b500f16553166274
825e527dea29808bec35bf3d92a157cd0ebe5ee47ade572d5ac43aefe95b4c8f6b42f652
b345ee297a890fcc72a9af4f707b009902a6d2d398ccd97ae9bfe259fa971e3fcfde860f
81f25e1df1093f8bc44dae9570a59e7580c10e02e80e70b4be2cb7dfdae3494adee2ed69
cbd09f4e4808dbd219772b2e806fa4e3b7c9079d1f841e7b57a0511cc4be1a5306169865
30d14379fc403c776988d0884d27ca7ca160e495424178d65d200a83568ca94bd7101907
6f8d4756a54d521b07a2d87bd286ba4ce8721447d93b74cedab304880be124c6274362cc
91caa7049f37f6eaad3c68bcd7ad81cc587f021eb00bb67f187fe29a2b67c9bbcc19a029
9c4bcc3ab1873402d7d8fe9482794c0ca9248d2e7587e698e88608d7dc3849571a4f3ad7
1cfb65157a668123fac6f59ccc302b9b2b0dbea20cf93fe65997636ae4079fe4f101f263
bd0feb7b7426601184c2c3909da1a640eb35e6d2559df788b94cac84110db6dcacf016c1
63fdf7b12dfd9f4568e436205e8c5b5f326375b1384256872362ff73fdd624dc6490fa2c
ab44ba6c99c2f5abc18f9abbc63047c0e190f1404054182a21f5722e9d36138a3b925fea
74c0b1e7fe9eb87064c253674323dc35b3c7141e2aa08e76060882e45b436cf9a82dbde9
44f805039d34d2832d9155a76845966dbcd43b1d459a11055812991c2533ffe062e33f68
05449229f503864470ab87521d3d2de983ffdb3084e60bcc1480afd1b867848b5f8ede64
fe5a3a6d9c307eac2f95dc6d49cbe9f4bdc15bfb57b7f26e5fefac7e311adcf9979cee6e
e9d8aff86b7f19529d51500e0d3e82132f1fc2dbf08a7b2130ff2f74b315fce7897a27b0
c2307dfa9fada828807214283a9c460a08913bbf6f37e10bff78957ccf8732a019fe8369
ed43a9804b468599f19eea6a9759c4d2eb1288d5127f77f6c31328496f42875a0884eba0
60a56aa3c0b3ea959b42e8ed43e73c9af0f651373680897d86b3558f0786a760b2a87c99
3d7b30748169b027efecb0618912e2cb2c9f767296f05bcc8bc9b18ae7c7f189b417a591
b30d75f91501284816697fe64e1a09bfbc3616c0e82ce4ddaebd3d3a85ef8dcea23adec3
bfc365e9c0dd8fe975c3eb2d10a587c1a40882090d87581dab26b667ec84211e960cafd2
4b3eae09845f9403b1f40ad95fd52e0733f9ab3a8385089d03ffb678922cecda9aa5969d
0b151714300a86dc777935f3b01422e41db72b6109d61b344dc75fc40afbe97d2741de81
482a623c84437b0b53c2e9b23cc9981bca0a9b74a13037dcaa63d0ff6caca475ca5d821b
3901413acd77b7dcc492e8872849418104a4d7291bcef6ddc54d3c8ffdf496f940928c6e
6bc7780febbc4394e8152eba6eb733f61e1d8f62aff41dba41ffe0484e8364701b9220e1
bbf347b21eb95662f3532c07531e16f66abbafbaa6abaaad90f351a250521be4e2c4bb14
83eabed596637c960482b64fac8de099e0afccddd7bc4dc6c3517e40aff4333829af2e38
866cf8d4ffcf616d81174f97c453413334cbbaf8d87bdff347f9bcac48018bf3cf4c2dc5
4e86b67d14566f546064a042186564b639956e4ba1ceb2a07da69081bf15685f8dee4b99
c0c96022dc1e343a749b63005a597b75e355ab71f48c277f0c4b36a7069873bfada5a3fd
5d449e95df133933da0fb45f070a134c8b4b7f2a76e49d0eb2be2acb142db7c9159d22df
3321bdfb5999d79b9d12945df57a8afe4095aec2c225d400e5d7302c8373aa8351f1faad
8e315095444f86df36abfd5eb0c87baecb1a9d779b9ec231fe1ca6b485ce1e16e87451d8
74f7c8d517ccfa14d01c0e01ed3fdd523810561bf08adcd028be7ccde672d12d3f80c39e
7f69456f1a02cd7371f83f24ee615eeb6395272f938a9e298592c64a7fcb1ce9db963dd1
39df0211864de12c341d45c3cddca7de809cdad34249ab7609f00d976a7d938713a65bcc
dea94759ad5ab52a5beb41ea0165a8db4d0f1603dd84b7747077f7e73fe62d44257df3fc
df2c249a761da84ec78103bbcf758c95e0a2564c842e6616d9b54dc10f6e2f8729084487
ffe30c4d5fcf916b2d3de2cf23b994412c059ff1c95a90be423d98a804e00fea89685684
bd10fdd83b5f996baa7a9ce4aa686e7184cd821fcb97fbd5cd1a9148c327bf5ce7ffbf5b
0a79fc1b7f3bae279fbfca6b0dea04ef9eb4b2ba49631ca225b0ccea3e966a2809e99375
19dac8aa94a223a073003091aba3f8fb28bd12a0bb99e071e3140a93d50a5c718cfe4369
f8fbf532413a3105fc3389a3332f30c12d6f5e2e334467e489c82392325459f140cb3c72
aaea8731ed648598ddf43c944891d28cde00a0bc95617f10c42443ecfc0537ccf3c92e5f
2d8cae7aad25653143c5c62b0fe684dbf05cab494b77b515b97a10ef46c219723ebf9799
5a991ca9191e9957c122cc9a75e5ee2ca2e5728a3a569fbba9542a6dd4b290c315241319
df3f6f2fd6068c6f752daa548dac7b51dd940fb7b6805bc718521ab0a33832cdffa3533c
f6bcc282c4292cce66ad6b6015bad66d6bc0d0ea0a6ff2fb7748bf98a989edfac956996f
1ade6a63a84e6a990af62d86ff457a3e6ddfee0ae1bef3010438b18123555ab1a05b7722
334a613b6b8215fec6d53675b5527f4799a3a01594483272074184ed6a2713fbe63992b7
412be3caf355d91bc677db25f1c7191f34c252972062728a38678db35941ee13330f52b7
d76848ba1c25d590c95e88b20759742ad58b6828f6c0d070c1a2016618dcb430cafee8bd
d9f00acb1c51d8c30b03e84206c50b634e72e4aa4eb3a7a9156f4e9b67a18befd820ab92
e8a94debafc730f5b572274736481a1efed0bfc7198abedd5ed3166800c572541025982b
f6b536ed3f11f74569239e5baf4468c2ee621da0aba164528fa56f58790a3f95f0bf2656
32989dcd383e96b7882c8b766395950bbcb2ad60ec34ab03d855c7b8913048a3297dc752
3637a44ce817fda249f7f0bdf32e1728855e0978497527d833db7dbc74ba6ac12434f99a
af83de3ab76a54585847512b6a0b112f9482566e1a1d4b23cc3cf92dd00d6a2b9cebce96
9084f362bef636810607ee6cbc3697cff149cf6a1c671c94ade0906f833fe7bda07d108e
8b84432f424e055a6000ffef515177423020c1a34a20bdb9f3b0b25e4f75660b52d54487
e06cd76e4b7693d72d5561424159462878bff7ed33e48660e68182b17f6d04ef63a06674
2c234f32cc8c194f05028691db02e86be6cb025ff9b4994dde30f5db27b7ee4a907b23e9
57fc6bfef72bb424efd0a22402c3e68023b6c360eccaaa07929bf7efb0b82e9484ccdb7f
d1863529d37b3936051b30e1aa02a51eb97b56d00cd34b87170faf476d7c022ceba3308d
b0a2f9f54d78f97634fa7f437653296c3db41c28c4e23f876270604a12298a856166c131
5a3ce153ac7d156a84147bfd5f033b0eed03988d6fcc2e2d2045a053feb15c2764f0e673
6b95fc220c6427ab444180f4f7aea6fb4f25fdd7614116293961e01a57e00835cd516b03
d3d6a961dfd19f5c24d707f2e3fee089287e4490a6b417838027bedf03b5bc6a83801f1c
0dce3344a67627b461c2be00e4499d9c6f049fe787473a7251a06e08c7c0fc652fdcb361
22e519232cecc20973ec46feb5911dae6d7a29140bb7887967b0502b482606adeb8d719f
d3bb897315b9bf5fb5179f02ea7977b0652e7841caf4505489a10c04dcdb19241cece28c
fa47349e4cdc5544f358c60081877f0f88eca09bee2a7d64461eb13110807ce89fbf7588
cb57cf8e2c9ccc4502c3f3d480677a2319f2af57821e815a2877e25da57c78e64af9a4c7
fbfc5640a87b0f486e3c61963d255a8e5f9ea5338b34aee04c3db03d648ffe1e681db5a2
4f8ec9c21df6697ed871c1fc5a1bb7dc448cc6852b95144ec98489ba947cffa0bc8eb43b
2272cd2a5f90981f08a2193c28cb4c795a8853adf8371a8c2d63ec87e756aa13d7fdf742
ce99629908a2c7ba013c32bbfac6443b2dfe6fa6c72ea336a4bc04c98e1282ff92bb5699
b55201fb068c775658396b50e5618b154ef469551eca8ae6d64e6e80e333f47a2542f5f0
5b3de41c2155cb09aaa97e2bc7a63295cc3d63e57dc5dd3731819377db3bc9f2c8c4dc6c
4cb64c30187e0d5007a266e18992d7e44e8d85f869aa98762c3161df4280e1268541d41e
5874f7c5c8deccfda06e7cc47c4a176c920e14f3d11b0a96837a00e229e662dfb24e55e6
fac68e4213610235642a65dd1298786b148447fd150a149028a895f94875c4319a3f9c73
ce7a91f255c8a1cdff41ffcd2bdfc991846eefcba4f373ab732068fd121b12e0cf7c6b3a
d4c438a5d6cc89bd47ef2eaf06d2379f4cf1a6fc8626bfa568c2eae56645f2f2460703c9
ef0951c4f58b0fd6db655aaae9fab35382b288cd0c1c2a5a25c70de37b19967f1163563d
234dad279f2186f62e8b3b7266345337bef7d3b62020177f9e42a2e2b78449416cb4a95e
4adf97ce49e5b35198b78699c864e39fde3cb7c9d1bef865bba43b769f082b1a4d62448a
f6c70e3a7d5aa6edb546f6a6c1fc79d32cdb2470ae766b4c990fc4f0d3bf5d38f8ee8d66
f365fcfebf77bfeb7ac041196cee9cffa13cd32ac88efeb22e0f66d07ddd5172ad567176
65eaec940445edc294331a69b4ebc3e282205277532143e7201cfd408ce722439ce9dd97
ecd52399d9f268bf1306fec342a272651f32d183e99b2c823dba5cfec076249c1017f1cb
8cc7017f257b63d05720a9a0ff82725ea123b6ab7c2dd01b8ed80113725054e789cfecfd
8a0edebd83da5025ea0ca8b91f98251259be81d1a1894c693872edfc8c84d8334029033d
511ddae01b89637f7393c1ff1b12f617ce0e9fd5f4893752b3f2cc2fb482482bfa25e66e
edce631f1b90c872dd569876218c10cc4634688a6d8d082704cac9a8db702dde69e10317
c2b4be83d8fff4747be178461566252307f4b656d65bc4d7766e5ffb5265b5771ab3271c
2ee8699c3007c7d0b2ea655faca32035e6bcacb90321ac54fe265ca611a60f3fdbb33798
680efcfa536ba1f75b703ee613fabf055a52712c6ac9c01e39c522a88c74a4a6c820494e
f10fe65d809dc564d639e31f9eba11e72b033cbf7639e510db9fbf7b0b50381c503402c9
46b2fa53e359530e386a9c55b734c958d741353c68310d5e6df867673ca35656c84188b6
a1a00119cfb7bd6b6848182d5af4104a92f9296eed2e1ffb8b092b6f7f1385c7ba1cf341
880778ea31c4aa0234ef572830c08884a1ae820ab906c4710bcb065e1d5892cf6124065c
f682d623dca7a43e206e04a497f194f6145c6aa24e3fa22feb7f7edf0003b0dc71624b9f
cfd9ad1101226c161218acc19e9537637cae822bac29a23c2bde476b736d2c098b325ddb
42c9c6ea313b9e01ae20c776ff17d06c1e87f35bb4476b31846f475a902f8c3bfc381552
ce77cc668df6ea17965d3bf2e6926b318ab5a9df8f66ee61759bc5926af6e09d7d5802b0
11687912f5b7045548aba8b3968d6086fbadf8680f2dc1256b9f3186dd885f829d978ae1
23f607adea824832009f2ce82c1776f144e408fb565d5a696a4740e0d13ff6862a8a8beb
9fff839ff6b9fc0e76d7772679608d828f57ff8bcf30518643867f485da6b81c5fe7fb3c
125cde53b3b8d5ba3ddf961869cf16537aa08843cb3d5cb9a4e41f8bc54bf98aa88c3243
a2117dba1aca959fed2f9dc0b5efce4cd7f5a784eaabbf4f89fdb4d2aa5057ebab91fd59
714bd4393ae5d0d29b9e7c1096e53b1122e15dbf961b24082817ca2244c49f9d97e4ae31
8a61d0236aff542b492fb7567f2fce68ddb61843f414c7ab7d0fb01e1617e5f43858948a
102c4617dd5978678904b88ed102ded7c011af82c539ead61f6d9380e60621a08b4ca9b0
b392a912f5dd2d53a9710bcb500d4c05fe44096f3080d994bb6d579cbde2dc4c3fe8b177
d229659187a41ce69993723d22922c584aae414a703b7b6f39515004d1f2893bbc859cd6
ab33d0950cc4adf6e6647e71f6ac972afa45a02b1a48163f7524251ebc78e62878718f88
c953812ddf07de756c71946288d29495c862ee73e1f3418d268f0a23b6d47a85a479caa0
5245956f16a47c15ca9624e821d0fd23b3293e317e8d59c4f64f8d7dbd879f197ec617ce
9902dfdd7b685d71806ea4181c23653a7fb5766591fdd4da54e8c0d447e3265773509030
61013c1c2a0bccbc1c8cb57899c715f00a3437c47097b7a5e5bd805c67c72cb2732f34f2
2b484a9917b251a2304c8ad7f66346b63ee79be0762f7fc175f7b2a6e9afe9977cea6b54
f3e2469fd39a12ead76f315bb3095e06265bb10dae024d2a021638e4d39a61034120f5ca
5656fba5de4ccdee58f7c6a431febc30614941bd5aed0b89f473d6d9a34deec9cf19be49
1266f8dea3b883f6cf16222efabd7e56d274edfe7e5dd2f615491148d00646b2a2eae5d0
7809d7ac6f2dafd057d11717d7028466f39df63dbe87ceadc38f2af7816999bd501d77ce
ea6463627f400c5f9ea0fc2fc78de2255cac60ff67ea54f9ae9e7a4f2e13168cca7279af
b0f1e399c3f522bb48cc09ed33100116f8917e2484237c5aa1b3a55877fd9d5de4e368b8
1381a547f8f500c592b296bd730e161497b215e3f62ac521f6bf4d4f684f47a49552f304
fc3bbfb7f75166e9a45477ff3f7b3eff4b82d2968352a01e692d667adca925b2de13e5ec
f5c43df10dbf3878053128887ad110d8ef66e0cf4704dabae8d8d048ed154c355f7fb77e
38e72e2bca1826ebd3a19c56b2763692199c58ce29fd8883b5d67a2cb00a5c5324f883e1
e2700339ebafe2fb905c65b5d9db4a2bff99bdf8d5b76f717632a803cd3e1b52d7395f8d
09d5777dc3f45fd385e5da3b8a88c59893551a9cf91215d51f95864b4ba1c5e0495bb94a
e9f5e2b35fa52031574501386eeb04dad2e0c762d887ce9b3d416c63cda33b9e3698a7b9
dc4478f6491593961a92bc67f6bd699846bb13622aa8eb5327f5ff54a4e477300eac4e08
bf7c4700c2c3435abea3de4de59091310432d6dc1f7fd00e7f4375cdb23bd04020427b9e
539ce6e62eb2303a6872913c53f625003ddc83be4ebf3177a51df834ca4fae1102588e7b
483fb6b060e0588ccc991b619db64249812714460ffa2fbc2fd43fbf96ab47301b9187f3
33b84310660055de6ba82a51db9439a0e0e4af3b7d0af2700bc9225f206d37d2df18c9f7
383a10e9b219e766a5c0d12a76df839f02d51fd82f046b93dea5a404791966f0d1dc6723
9b4cdfedcb7958cc5e59cdb059fa7353db2fa390d0c8210ed3d6b844b2475082ddc31837
f1f5404b025ea42a867cdf258dcc4e0f2181aa3410c8e52dd863777fe2aa7e206c0bc4bc
8cc6d475590bb6ef7de71f80597a240a663ef5b0a5e5b5f229185a920a4423c05ae32a7b
1bf09691f3fbcb6dfdb3dd5b5e4df3e940e6dedc0d52cfc050c8ae1aacb26e0f1138f322
6f499c2b762ca04b518c26c3a85d77fd511ae62e3b502a6af163865c87d9e8dcc6d428eb
b6dc1bdc3944d9cd4cf71a81cf217d7b8737543a653f8b6e452baad1f0f53b677d026553
6f0bc4bc175ec408d7a09fe67d6d5e48e8a3ce45e4ec7cd04c6c3cb07c1ed04b30868549
3f0035b1a48ab250d1d80aac02bc66141c5bb6b54bdf676fad00feed2f5f81ef1e138373
e4b181478519a23464735c3d7de1f1f9efd06168d3e7004f233191486291be881e47bd70
76cf0bc4ede88bd8bae1435571e82f2c4c302aaa62b766efc445dacb9c7ff78463000e58
6f6d56c09900812378240bc33b33579de6431bbe0da485077af3e3cab214b6ee61905a2c
b032fe429860b8ae2670c92ac2f778c6fdd6c5ae964dd170774be9f38f324b1581425432
b12ef561f017693e7d6758cf85d9bb0d19a6ebd1baf9a9005d2128d722e9b87232f75f2f
f8a558b34b26aad68d584893de40876294463a9916df027c8efa90e71f17d1ce542db1fd
f7e1df85ecade71aaa0b558d9e8a88c86bd182b9b5c75b27604513f27b6ca1ebb30ffec2
0d36d45d7889bb0f28df8cd3e5e129cad77908b44db7f3b644f79f51d9cf945bac64bc06
0f13d72e16a414b705a952a40895f3eacb6af2c50bc3e37fe8b7af4d918fab4aac7b9576
15d3a4de7b02eb2c48534568c40df69a1c3438f91b13ce4efc100a41b1eeb61c618a5c97
21f272e8e5c2c5c0590ba13755ca4b2954c85876de9643b0c63caf58c985900f78832b4f
3930a15578fa286982cf1bededa5ba13e9ef1c1680083f112c54801b2590b461449cb4f9
f3de538d66f3b09e5b943b8f246ccc66eb331e8bc7a678e36be012f40953d329be4ffcf6
2f47db8fa7156f71034b69e587e9fdd42637d7f3e8767eae80ce391bde0b879b7eb0e384
35708b059edea36aa53d49ab6beab2282e8e033c32a7890d2f43fd824e3235648ad4c139
cd2869cfd5da00427de4646b64db8fd62c4f1fcad483a440c82df4a95ee99760e50d9aa3
c80ccb61ddf7bd985e3eba81d344334cc06cd75f90660adb036fe3c486713cc2ccfadd45
14c206068bd58672708ef6e3e2f893b879d9e158505c2a807d82561eaadf6504d57b2e7a
1bf1d968a57a3327a00881acec7a137fb164ebaf079e7882fa2a705e4187f45b3516d287
edb8dfe203c2f2d8de483c00a52cfa4e9a3c8e40e44709ae12b4b2d350ef6746bd39ce41
7e3efe50c151a6ce703745c13f891dd73d6a49d8169113a8e7a41e21378f22722cf1eab5
cbdd274874ea0e5aa9e9afbc21188e5cdb532225ac62007ae22b978bafa35790b7764102
2f7499b5c7ad6a7c2a5e48e94b5e71eae17aa61d5397cf44e986b2a7113b6038afc87ba1
492337119e50b9a23d26c56d63b2dba6d2f6c89f8b9a0c5642ea3c0f3a976b3d75207f86
52e2d4a120150593462638370d1723600dc3d435b1633aa8d94dc2ec3a3692b61de77bec
fd794407519d8dc1ab95ad1fbbfbbf7fd43f7553b912425565df4a9341875e4d014ae50a
1ea6019a7be37ba0bb528e19aeab861c1fde666689b86b90f15bb10f6bb05c6a84c25cae
ffb4a393ffd5a8f7954537f89f81351b2a97ffc0b8ea55e7ce715504c6351d35dacd25aa
9cce9dda4cbce14a1942d1772a919edf7c716cba5a9e558cd62b5f3101b87d33bae6b3b9
b554561469b666b6e7fa5bc908261571cfd6078d285939a6377cd4a9221ff1c75283cf89
d214799ed48e297d841d3973d7e40ebe702752929f4436430c452704879f142cc4ebb76a
0c5f02884f63d31041e42c561bc44edb58aa4e516ea4cc054c0cdcf52e20ac184ae8a744
df28559b8d599f3aee091251128a1df53859b6d73454205e79ef4737a330b2495b448b36
4a893d4514915f6889ebbf2c4aaaa60d63050d9edd844092ceebba7437e15de1e6e20cfa
93fabcd5898a50fb7f7b3ba9e791d492dd93d86ef44221ea428584c99d0bc84e3250e416
c71b283c6d5a3c723a1835effc5eb9368ab2b205205a7a3e866a18e53008486b15d4f8e9
1ceff63a0c424c07a0712f1c23c88e59f678c35762827ccf27016be92b217c07120b7159
61135a7a5d9a563d0e8222c0e4e4b21f6a2676b3750081c7e609d0d051ab6410ebae1905
462be7b5101fa76eceebfabbc3049bb8b4d9bcca94b1e8bdb3b54da1ea56b4018582dc8a
28163fa13d09693632e1728bc9d9627758d4ab0f3dbb86da87a3acfb7dde6d28bb989ce7
19239b86cdd3b75c6d9f6d3ea51bd35a9528626e58fc7876edb15a0059af5bc20d3faa09
12cd353ef14cb9536890ac6af0cb53a93753b3a9e170d6ec6dce5f6e763282cace03504e
25253f12f8051af4c6cfcbe183b042cbf9582c4f1a7107dff5a911148cecd4f3131c5bc3
2928a8f3fff8c63e66e378716966c999e5c2831e8b3c9c4b25703061b2117e4e8f456e68
b8f7c1fe1dd735c6840c467cf229b90132e5783ebeefd77c41a4a49516342200bbd80d00
9a92f27ece10489deaac65b98654647ac7e155bafb68aab0650529a039fa94877dfceea5
e2d22e782fcd616d9dae18d00d4af71f347bfefaf48f4188b7b0b042f8d8d0bb7435c604
661ed5988fd763b6ee9c1627af9a02a07f0b261f034af46f6fdf182a8c73b51c0c30273b
10e8734adf4a630ce4e0afee3fe61841e35aaee407b424a38f836fff486fbf28ab279658
5a1b105bac8d9cfdceb34b8d6d3a922110fc5bd55bc5ac1ad98c84e560d381560c26c68c
5d16a8f3070dfaec39810eaebf3f9594bf3c00430cf9c8cbd729915416cf20dfc9ca20dd
a506fae79827c82750d94e03eb28e632fe97963325cfe284d800b56503c9e7314ccea874
4797a6d6393eef7ca17de9db0e71057308451371e76483d16b7cb23743fc9ba18f89279d
51188b39757d18db38bac155f96d2b5f412d1e213a22b46e129961a29eb3e48961f81550
aa39221e160ef9853524aa9d6b26a9d646f83f4fa30afbbb2872561278d1543369079a7e
5d77b1802dd02704dbe4ab8121e0111123ef943d5b79d837f14f54b1bcc1f3a3a07917ef
02f48e175d5598999d72cada4b5a33681c1b07c2119bd56dc85003ca5f7074f55078cd05
4bd2c61049b94b3aea2e86e83d2cf585fdff7744191a9195e20db8678b838f67b87b4c91
af9ec4225acaf94ecf3e201d333b16ba3ec9006fc880c8be8d5662dfd92ef8470b27beb6
23dccdf24bc9d4498f896c59f93db62db4b03eacb507210942339524ea22abf8c30b59ca
33583d6295e75e8a9caff2e83e66e7f5258ca3ce1e0011102f871ffe428c4f8a39157c47
e953eccab5a2bcfb68204d0bd8252b0df2ff9665fd1736dc84a775afd0b02e88db074245
dbe23255c2ae52a2d82c176e14d40668c164ff80aa36adebe09eeb38218e6b25d9a16dd4
5b224c687fe8baf2b0698784a41e988901ffa3bd5afe7c6daf94d4606168351ed3734208
b22a8cca592f33f499fad5924aabb1bb2cfc38262dda35ef76e491ec173b8ab2dba7f8c9
793dfacd946888327beabd9c5c45fa218a1706bb6c90a23139aa4daae2a222446746c915
5bf7c5871231c8622df33b4cf8783e1eb3bee61fa1e8716746580094dbb9d1b791c6462f
b398e729c9e7bfbd92d476bf884d89e195d40668d8989c42713c3318531e64efdfbed654
f169922e3c661c6bdddef7910d396cc0ee1b8c542a2fbb54ffc448e50c33634b74d3ce0a
cbf5e908879bb473b1cd8881edb5b215ef0ab1b83eeabd60da05ac87966dcb2959920577
67abe1f496fbd9174f73212f819a74cc903d6370b4c3192c0bf12c5e8b7d649e612abca4
e13acadeb091a5d6cd81c9f1adb6ccb9c077ec1d22b7f19a1213393b62c567a6f8e6bcb7
2ce46ac67f5bbb2251074a5ebe403ccd5820c4fb777ce24a0aaafac8cfb5ba7ef7186a6d
c4f1234fbbfe13298924cc11327ce9d017f0bb9d05349f10b144a82ff6981f1c55dc880a
f29e7c4c741bf675a20d0e91b3a6605fdf01aafd25417e788152cbbb65bb3a0eddfc63b1
659d645ec6942ac2fe228bd8f353aac6392217879c867e9a5e31ca469fd5e206de42e6c3
091f2dca8dce24532dbc73e87d4719530794ed8d976ad67391a90f695b2ce6f23a63a77d
88935f8018d7cf5736b921a92edaf967f5a973fa5d4c444ca1e9f6a0cdb3a5c4e19ee407
ce2a41b95ec7140c468fde9caf2a97b6e5539114f304bf96eae82c4c73a4d7ff2d8a526c
8d21b2011efbba52f938d29b26359d3f3402c3271d8642ce926566f1f4be6bcf799e2f9e
5008f8bfed3c905c6077a57fa3eabce32340ecbece0a283b8f6a3d18c74ae42d6214083c
42ba1d1473e7846fba7e618811e397bca1d045213d4b90c8968023803f1e8e2af1ec4107
65d1b99b3273543352ab372ecbd272dcac96a54046b70933ebcd69ac96508c7e8c5148fd
432cbf4624e9e0a3260e68995938109f730e7f4e12b8e2a25c0132a3b97555d6bcf5627b
5e4aca45278a066556ced6f2407a1be3bc51059f82c993633508be8a9aafe34dfdffafba
4817982bf4591ec1a8d98562af11eee1711f85accc5269cd77befa8c7679fc8e886778b8
6b82fb21dcba2754293cdafa7be6a7a46354bcb87c5765ed41b75c68df7416c2c67d9f17
9aa8153ae69579febdf99f6ff15a880d0c9949701891dce3246fa728efdb73df455954d1
9fa6642632eab4c9cac890f9a25d643c6f0adce36e8279a2e68106be448b5149e7b78c49
ab4106303e8eb8905197777a00737db1cfec6c5339e1f42df90ab916992b6ffca514f512
f4d67f6c92b0b72b02a817cc0a850be565ca5b95d82292b2c8b5553ac19bd70d8dffc991
2e732335d0c614c8bde93cb664581337e33174135cd8e3dd6a7af68630f1fdf80f931c09
b3b34e67d5f88e852ea7bf854153e74ebaaae67d0f46443356362b3a7e022bb3e550a946
79dcb83fee9896e25c6ab0ee29de51d916dca52d7807fcbfc05bff884f6538d0d985d32b
0c0625a91ab1a2108f4dc97170361fc43cea622df1e6de211472b27c55aa238be3a6dcd0
e1c4d7882f79011ce10e1e37bbec29007708e05809f88ff9fc15cb1e455d59eec9d497df
7b0339e099f1f5ac98acc38256f5259db1dc168f99d5e5227e97df798b48db18025bf9c9
bb93b8a66c6f0dfdff5c22550203fe0d7e2ff1a1e81dd60e6a6f16ad002a9619088d4600
221f0948f092703226815e61780eaa0b80a5c2b41946493d201796532857376ff8cfb98e
2f86bf34caa50241cef3a78e3a01ce7224934714464ab2667459d43cf0e8e8865c048db1
7f21d0b5a824f9df985e5e698792261922432762d3160ba2c58323147f007fbeaa700a2b
e6e369a939d27db6fe5fb3dcd6f2fcc8b8357bc6ea4262a14d0af9b46356e158205f7d7a
d948f81d1b760923cd60fa48c0e93d3b53157ac607cd5ecfbe57a61d0430560cddcb5b12
277b83e4b9cfee051456b70ec9c7173de10ef2e48513ca3a38c915965a2f42fbf545bcf2
e96a72add862203d53894aaed709e97f071dcd88a00f98d41a4379362d71e112b7705012
6f140fc60fc14ea7a2610d899f845172bb798df19fd38b1950ac88472e66176b0cb54b49
fd0e07d8f731a8e747a1dc0be1727a2294e379c767419c6c30100cabd036d70a546a9ea6
e6f2733de5c9ad71a161629b29275eefde1f0d1eddd1e3d08e00c76cd2838a74184f5a58
d3e94b861af5ceb08f7f08705cc0d3110c8eeb35a54f287c0aad34b0656930003c024e61
f827e9a2480226531d2f66995c164836b32cba475996be0fd60d72fdc9da611c97a74121
cfb133fff5f3f3691b751506331ce45ac9ebc7fb2329aab92d4a5a7fcd62d1812b22317f
8c231f7c59b9d0ec7f7730f8aeb8a6d5fe86b506c77db6b3c125979e0e037e2eb4eda1de
fff9e99b5803612c459c60672f62f65f133ae9d3c278cb7e886c181955f30d67f5dc1b60
7ea841c21078240eec61a71379904fe8c3f917f7235e8380da6ea945e31997816331c813
b4259138cabe78a4bd7644d6aaedb8c1cb44b09e8df2e704171c4e861082e2899769003e
0f3ae695a1461ad0d86c4415bff154f1a7ee3b609bfb0c955e7d162c7c4b6a6a820e2e8d
aa8de5843b21e290a094c4720646f212c0a49b1985d97a89a7067fdcc912a42989ad34b0
9099436cb79023d580ad6648418efdf38baca27ca3d34947b70717f3aebfd665f2eea394
8492857f6ff68af0b6262f97ab1f9de6d666ca4c303986b98300c31faeb8e7daa9b76af6
209bb14dc37efea75fb295fa70e735ef30f0882c7659d0d9adf2237d4990ab59ed4ee76a
a89db439a126221610a91e14e24f44dd602b3fd3021a1cd693d0c33b16d950221b13691c
93a012b5aa16f829999f4addbdd6c290e3ccae8f750a1fe9953aa5da201d3b3d2db80b75
e4ca7c32b5a1399b222e7eab93cb0de3b1382c646610f29deeb5a94d8d2ba8653783f3c8
c4ad807ef4908e8c603b4f57e80e89f5263015c5318c3e3530ec53859216c43a83632f8a
06dbf516bd60a88f9eb12ee1b6c37fdfc22b52f3f1d331d4ca41fe59ace80d25d785c7d8
4ecca32df3d8e6e30d9c67e6c3eea206846fcf3b7a2822e89c9af3c0d7fadf30988b0fec
4eab04b065f53c9fa9a82e19b1ff37e54303ae34bea7e1ce6523f3675f94252ee5a7f0eb
e66f49706ed4b8e74430388a88ae4da87e2527a77ae21088ab28acbb08610e6066ce03e9
7db5b8e023d25e6f2fb1fb5b893ded51ffc83b5126834597379201facf38643eedb24a1b
b63fe9b85224642a1223c4c66b07ab6908821febfcebbc6e72c3959a96cc852b60c995f2
8bf604a1db3f235b2825b90779e7fd6f9f2f7f6381a96a98aa042d3e992db5bb76050535
1c9f3ef129d84eb16a572b5f6f6e3bfc2473024f15d7f9641f1b255e1b5160149a5c5e2e
2cbbe60fbd0d55773d540cc6489e47698bbd8e4b1bb3f3c873bd8a3d964bd3c79e4ba5aa
9824a54a7d67e3438bf19760efdef2bb612fe36ecf31622d70c1b7893af5ba56818ac5e1
3bc6067afe6b2d2d60da1d1b42335ca5117db49b7415ad96e4af346c83370bcaa854d787
0e00ee781669cab450e65ff32c6fbee0bf8dd73766c38f002a54c890b6f93656ea321e43
45a011f67e67dc9c3cade3c155a3ad6f634cc23b1d79de584a454c547861ab0a333a2ce9
1afc40ebc31fe4c9d95d1e8eae964a136d0794ed6669cb61b3eb3e7acf60a75d6d0093f0
13780d816be1383546c93bd505216a2f4087b3011eadfab109acf62a5786fc3cb4a7d56c
bab76fd63f68fd38064e477597b4ea62654114e0fb183f358b914e028591b45b92f414a9
5ff41052d73d836569998e5b882839a6111066d806e615228565b8a3872d9b7163d82bf2
d36b7cee2bd85dfda7b7cf0f73354a7bb6b2c64edd30e90b12f52487ea3e94dcd933ab0c
44ca4a3d7ae3beec06f5dc60f522781f3caad6b33c3dd49e1e151429959ee44380cd75c0
b3d46782f331459f0042978495816849fc6f1ca240fb5f537bc32fef43531237cc9e34ae
0d6cc7212dba7bf6c592530383c5139428988442973b9e3008e8c1de18f8621e57f518cc
338a574aa6c67ed8a52b67b35f1ec5f6c7737f2783d791fa1b9ed54fe0427ec02deac965
1674ad575c7ff9db8b217251fd200929882087bbccd03bd6644cb07b610e7cf6706a6e1f
5ba24b7a0069f52ee333b50b02919dafd0de0462ca42aa3e276d2d735ce7dda5e05aa92c
2c8519d0ed0fa43558136e3682ef030c053d6ee4a07a7545093343f36d29581bd8f86f25
16b99b4e514fb22da13f239c5bc76312c8f332d07e55eb156ae3ff039d4a9276969f2c78
28c2f79c9a43d8db8651e584a1c312c5f6fc05206cedfb41f2590616a9f05915a77a4a77
0161d390bd628b3add449d96d29e2f835ca51cc676d3da615f98a5d4790ba96f6928aa68
e7f335a0725276dfd778b2d7394fd35fcdeaa27d92dfd7205b2820153c2b5d0060411ca2
8bcd00248e52bbce238ef3686d3ea7c1f4e6998eda31679fdc3e759152ab2f678441fcfb
30d63416da4a568a5af26a47663f51947939c66c1a1f2909a4611bb47b3d9d9d4d6b867c
376c07c7e7267344f97b228bcc3a014358646b1f04bf230bcd91123511f662255a9adfc7
740aac64aa6dea4ac8a03103339663ad5edbecd16694b79c1946a75c24ace36167e9fc96
82550af460ad3eae69e4e455e3be9b9c5cfd7e6ee0393ab6082a146ff087756c7023201e
446687e6dd143472f987eb9ac4babe5b61f9562d022a860b9702181b48b754371e4fdab0
f5f0e91652006b4d2c06ea18ee3e0404f6788cefabf7bfd280f0c8001008aa9209d5ef1f
91e09a1dc8e6f3eada94a68291751858939ccdd097e5109be4c661dfaf9193009c4d2f51
a47d4f3ee5ee67ba03aebb54ebe2755ca7377759a2cb14e4a0ff96755fcff28008873529
7b5e2adfd9d41fc71e8608e5261a2392fa0b951d75858773adff44555de00b5085362da4
ad7387a095b2d18d5fa37954e8f7f7d4c71968bc13b6f5a8488cbb8517c858ef9f8884ba
5b0122cb4b1084df1e918c984b72dfda9978d7d08c340d0949928026e481be6254087f58
a54debd6ee40dfe876d46200880b1ab05fe84f4301b7c1a72b757177bbefd98198b2b31e
13820db84dcdf63d743f03fe852427654759eac2856e70fde777632564d1319280c55687
62eb9407b761cb3cdd160b77b9f68a98ed14e671ce32c089b3e78b7f025a3f5f1c1c5edb
419dda28f2e590ae30b96e93f304a9cb1131e79bf25a5ac6fb1d7f1ea31f8bc281621bd0
7db4b5ac54c473104a9705dbb49351b27e0c4a114a39c0f423bd158418a689bfe6202c92
d5f4453baf0f9b7a72bf1d44f402f7ddfcb88516bb732f834b1999a53ddce7c142ef2db4
23d4a6c830926754e060f011149c70f553a36f6849c3d3793b49ddf9e42745267069e88e
b88be8530f2d75a8efb35a1ad55c93aa11ed3b051c3aea6be43b9eee6a03e23c1990caf4
58758e1ea6262e98e3d1137602411818a66f7775846af82725c6cc23e23c7c3828d5b61a
05f53c684b58170c344929db5295149c40b35fdd2f8c99187a11b6f5add258ab4b8a788a
ee6dd1c65c082b44db5433e66a985bd58e41175868799159c333cf970853f6fbae0b492f
f4a23aec0d2ae1dceeba8d8dbfc3cc5e78a5e638b1885ce329498e192d45e1035e0d7bba
fc21d98019b964b9470c0a7d6d66c648f5ad37d049a88e07d3b76eb994b6743404600162
0946a46d3912afa5d9bac54c91510bd107f0958afc3d94f388cbec38af090cfd048f94c8
21285ea00e4dd34836051044465b03191e7daec70637bb905d9efd3bb95509ff08efdc6e
062fc9aaa60783389fc2d7ff76fee2d47d2ec46352dca8c549497f6c24093247e01b891e
cda2f38dabe6c30672cbbbe569a8bfc6c32d150692ac4d77f8a4d764b5ebc9c7437f53a1
a709660bb6961ef565c99c99a5db434e5482ddb775650f312455707b808b3e78122edda2
ace40c03d6798dc701b938b48b4fe99d3d5c6a943219e4f761afe8b007ab388779f80434
51952cd209227c162dcc9dd8571160aa8b150f094aa5100942c8f2aaaa73fc2e1339395d
d76254e4a67189c71fe93b46ab6e52a1e1372ade1bd985b81959655c1ea0e42f3527f92e
f420b9e7a4c6973653777e5c9b36cd00bf624c07f34c2667388d6d6772248c1dc3969546
af9a039cb245c94158c7387caef34b06d520aaf18d888d29669df6889f7f92aa68c0aef3
6bd63fad6c621e0dcc82a174304e43d3da2a47ead6c67e8cdaf6ec9b3a3e8d6d290fd1ac
dc9b1dcbc01181529557f042f2582415126bed0fdfc7b80f783450f65e8d8ac163f524e3
749b92527ea589ddde87c04a40d1c4fb474c6a6f5d3ecb44130b9b4c42570dc4ca2de662
0cdc7b74d6130e15bbc0d0b15ffd901cf4f9bc8d560c57f733e193b862d2a5447c554d17
410a44c798862a14d1e3bc08b1ed01ee50f6f1056bb62673cb00985bb7ca2ecb1952a81c
fe796aa1a1d112aa3f0839753d5acfc9e26721068f7942fda73ddc38d593dbdb9d961ba6
6fe5efe016e108ce0cbd5bcc087603ee6d8e74f9b487abfada30ee61399d9729dced694d
a5cfcb87710dc7a187910fb761071524fbf04977dac1bd284951f45f9a0a1a3c3c63a503
0afd5b7acc8583bef3d5e1ec2edfdb2766f3eb72e72fba4b0988a3db894f8aac60261a56
45329bec195efbe23361250b3d1ea2f55c18bdedf1ec841f1f4b2869fd7814ad622de64f
83c64c8a4f6fdce0586d74fa82c74b65c60f617a20dc1e241083cf7eb738acb5f624e490
7e4841e61f787cd880479e6bb41c4f22c102fc988b6104eb3a922ffd357418fe14c8250d
cd355b259dfdd04a83931711c9b256ee08c48e3d77e431c984f2a1bc88eebd34f786e2b3
66d8c5d041829c388e8bf08481b94c6e8a210d3be208227cf90432df38f30b94ace39625
61678736e4c6ced65979ebfb31bc52a405e70cee74742b76ffed2ebff7417183f38854f2
fab03f08c7b6803de010ca914d65ab318343471e2aed55e24afdae74dd6c6cc796fc3e47
2f72b0f58136d35aa38488875ce6d737327fc285ffaa07aeb89f529d9590a28cbaf16fcc
dbbb0b26d92621a81c85a7a288ca2d2962e682406086fbe1b8c3f89308e08a03404803ed
356046ee5dac7813737434c584a562c8cb27f0c62e75e5afab0c62f002a81d76d36b6ea0
3c6d33aeb28f88dd7513f05a8fba5c4f5e315e22e2f6fa9b4d7db05f738b7dd0e6ad4e43
e42012ee25c19d484828532c0f7360f2c94679f320e049e87039ce9241dcde61c5566647
76c53095fd7d73e82a4a7348782b3c46a99d5036de517e6699079a8fc53ef1bcf17b1d43
01016f1bdb7e297b1e66104d667c38587a89d56b5731e320a0a18c5b4467df6b253d713d
cea91becca84490eef54e54c4518b496b32a8313b87bcb59d162c82c4fdca0af2f4d0c8e
295b620dd151455ba5b593921e6ea733a5a4f470b0b8e56cc7c10884d2c28f69931749b4
19a6cec7565e031593c7cc39a6a04157aeb0761bb5fb1046a5d716468330011400b0a157
264df195aafc3ce1e6e7313ae910fe83fa9a0e7613e9db49e51bdae98fc091e630ac0800
e8e2632df497bad3bf73c3303e766017c4e72a8ff0705405c97692d1ad363e517fdfc755
3fdc9744a1a37140a2c9e0148d04f1d810c47809538be64803a6acf1ef2cb2d7ac1d5f47
a6d1e5c97991f82d757be0c7b3052e9288c3c3337e656502f015d1636efa8b196aaa3815
89141dd5b544a409c83cd729a97a6d6c8ec91e053dc75001fdcd3387931960f14352d01a
0b81046070983dfd34fbbd43408297eb62db16bfd7796e4371f1745c1db54f329ca71509
9649f52b7c1c84b0d910789371b1eab0b229201555486a8f7f82f16bc3ee4c2fe501ea1a
2d590726298ae668633b886a0400ed16dbde0812723e36cc7097b787bf3ad27cea4a2483
e2c7daf05247cd915e5a443cef127db502ffd8d9ea25bf116852b560da26c991a0e202aa
caa9dbbbd879792d181371b97ca2d3a6ad18cffda98267f1b0946461a7eda7f05e31aed7
d699a1db016069fbc0b6e4787f1f8594abd199bb8020725cb97905be0cd0c59cbafc24ea
d83088120a073f541c56f2ead0e6e29002026fa87e92668c3d52fb90a5d1ae6aaae5b377
44ad70806b671f687b1856a3b20e7a7c25a3575d3d31b13290ee255a2352e647ca516a68
030b0cc935ddaa7c4af87695c583cc32ccccca20be0878e96dcd368ee4c8305bb9bd4e1d
1494bad3922ee73939704b866dde8322de5a18a170f9e1511eb8f41ccb12cd89df932c1d
48c6a6c5bfd2efaaa45fc1a534772a1e417548d61eae27023bd13482055d898300b98a48
165abfef1f023389abc1967562971b636a43cbfa7420ba66f098decc91d214154c2effaf
81148200d36662687123e4901bfab655fdfda6699ab8f712b443dd24815a715104dd5bb5
96c9702fb2f72a795aa0d8401d083cdaa20de3cca450f8bda5ea180af4a7472c2fec64d3
79ae8c444f0372cbe08692fd14308dd41b3aedc9d1765dded61c866ddf6a6c552216cb76
09eb68af2fa838356848a0f7bd56ba0fdff1d659520b5287e70239e483818df598ed63b7
e1b6aa92817a04da48e5665f5661edc73db32cef96409e26ca90cc2fe721faa1131b3d36
44f26f01d45e5f4a455fdeea400e4018e93acec17a708377b0c2e00be528450757580350
35a0e65098841c6a687612706e503b42963f071ea9b822707d2f8d9394f9654fa0787bce
bce431f86fc6095a0b25369519bb9e4f891552ad2c92eff5123e4faf1d5d416851cfb9ff
fcd900f3916f2cc560ecd411c4444186bbc3c22c49db3d03b8958cefac9dd93b83b7d642
7cab57aaffb8d0ddc7b3175c91e566dbf8f8ba01ce7474dac0b995840174662d5a865a52
cb7d3f7df5438057e86803a2027fc25a90ded643800d88af187ff96eac8b86d1b2312955
419f86548a37c79c851e365ced26cb78f7be265cecd7883938b792ff0216e85053118ef2
84802873feaac5544b012fb7502cdeb387e3a8832e473445a098a60f9c0294271a9d5c72
6d90a1e12f6c5d6062545cdd0d7129cec3c7853e386a77737f103aca65a01bcb71d4b21a
a88e59dff6d71c6b5ddd600df4133ccdf1f9d55298d0f043c458e1fd5d8e96b5483201d3
4cd0dfdbdcdbb4c4d9c231e5960b833698c2361dceca923dd458d96268d2cc42ba32ed79
8f510a68ab6a33e9faa96c51c64d5beef68376b01bfcbdc5162f07dc9e8f8c6a5bf84cc4
dccf96f3de18c51f9653970804207508577e841c47b7bf41ecbdc22e4abc5f74113ad414
e8376a565e129533d0784ad85de05ca2193efce6e6517d0fe4212d08d5d4ed27fb99c079
90cbf375282826a9d89c7ebeb2b889d54dba2478fb8300887739d129b590c005379994a2
5403e6cebe981968b387a51ad484b63fdd111f170696ebc18b2e77c93df8a9038faefaf4
643055461b3cbacb5623e4fb0d99db4e91a9e715bdcb02236cb161f0a9267a28d59ae3cb
2f285d48a479c9f8fb09f574d5dea71deda2809e5bd1b282e49831e531cdf847b1c73552
f26fc24dee9267057703f7610c50bc4d2947124cd86c446c424c056501a5323c45775490
9c919cfc96f9774d3d5fb6dcb8f98302c45cc4f70b146c20e0d60c573807fe4d6c79c16a
f276acc1f7aa2326b5adacd0b1972fb127d4d69ad6e51a34d71f413aa009c98b4e03fcbc
040576445510e3bbc29caa356b8b3c064b2dee0a8933e4a694f6d099464c3d4a5fe6180f
aaeba05b9f7b89ff8a3a6182bf0abd98b24d157b41c2b5c7ac9ea8f4cc87511cd3f3837d
c10e56a68e1a7787e243db6891a157be9f82c544b369420372e1708ae3a071738eefdace
e0a5e5e3bd9fc88100cea321b96f6c43348fae2ffcb7e60f4fce2631476b7fd1f928b474
43b8a6adaabe2a758a06e4478981f18c530be89aa383c38b532f003252906f6fe821ea73
a1def4ab9a1e1a011ccd37e07a75fd29df5b4e7403def1e8ef15f220c03604b67a6d5bc2
4209654386bc198eeac933ef5d085e8bc12bcaf3fc785465eac6b01b5bcc0ce6564508db
75699f2a7641ed857730cb8d63de16669ecf5fdda16824671831b724faab86598bed1097
3f6c7a6a4aa1500328992338ea71122f168ef023f693d4d17a3403002dedfcef399767dc
82996939d46c57f6c65c88df3895fff034a94ba107e595cca150a3a85d881867b4a3ebce
1dde1600e80463099f1ab5f4b1559ebbc3d87fcd12cec37b6e85098f8958555f631a6a73
5cfd9ff2ab26c69889b952289188630da7ba75823149ad4aa4677aaa524f0263f21cc57c
697251a85ca9fb488ad67adf738f7854e6453f5226b8f6e05eb3d44d51a99dc7c02086b6
e2d6c65d4476b321241b963addc97fa7737734c8307ec135d84469fd199e49a46bede44c
a374071971f33969de4ff937a568d3f753a135639cb8da6062befb6bb2486cf5c8dec600
d7b925b9792a159bd7dd0bbf74acbe3407ffdfddb89986426764679942b1a41a5ae3eb39
54f63b268948cbb6d4cb8ad732361a134b8740adf9518e4c781ba2bde2e389e8cb9b3e71
0c03fa7a25a8b7c5b611e221985751e5188bb2227efa8a6ff7ccfbf1bf492328416e3cdd
a0fd9cb50243a5efd3344434897fbb97caeae9c1239466bfffaaf3fca8647b3bfbe8d832
256ad640de4b346497f878c808a7972662830ae5899cb68d30d9da24947822fd705d3004
1ae4094a5bc28c90213b12274075ff881788d11df61d254696e1cfd886ac04a5716ad9ca
78a6b3c319a1e3158037e4d5cae4e495cfdf40a6fc9f49c8d4610cf423e1ed2157d17218
6176f6ddc548fe903b7cf1ffb99fe1cc31773e1da75efbbb99eb53c1af9b2503539818e1
119fd9386dd0b7cae8e7ea9c89c5b428e5f8a381b766903ce2c103fc306dd5b0227b477a
64756801355896a40b8228d1271d244558a884938c917fdcd1a5ea06e5ce9a0bdf9e45b9
4162d78d3d105e01e42bd1c4ff0097a2eaf74a12716b11c7e5c73f4025542b746dc91ae6
a8b4321c106345ecce78d126757fece88e15ced6737190fadc4637ba9004d0e00012b41f
8348e2ab1b73bdd16ffc299d7c9f4c5d62fecd2fc9a7ce6dd57770ae642095014562b39a
82a570cf4d4ea4104a938199e3829aa0fca562ecf62f7ec6c0fe5e67cf02e438fa8427f6
1e35c3f1f271a55006f4410b0772b1b7908092d3a0918fbd96511f34bb96c8f6392fed8a
0b7a58f090cf66d41c60004d35f34a5e7c26895517864ad5a369ec7b0ee28d42e74aa9e5
a9de2532e1f36e1d618fa20092c4da93115b6f17757a1e0620fbea5d6e8bc2cb18eba964
f4e7c61dd1a21f77998e6c7cdbafd80a9551710e13ce4e6443014544f1834d11fe8ea4a6
a11e992ba5ca086c9e205148becf536ddea7fcb9d1f17157f4cf09afe06810eb2210b4db
0407a248600c013f833375addec60ab4c461cbbf712a4eefbed059938c21d497ae42f65e
344cf50c2604cb270356c140986a2351d61002d3abcf3e2c28ae785db36305a6105f6324
6d762b50e149884188a3510e753aeb0f1508aa21eb6158a7929a176ef536b80d9733a97d
88147f5819cae8b7e5368bb2a8f42d4fc10092e529e94217e5915100b1738618246fb28d
dbef525c9995256f3662c6ad285e8b63fce2645d8dc015944eba2410a610ddc7e1582f92
e0a6f7f0c6f2b299fe5b946ad141c85bbaad6173744de12fc6cd08e1175f71fd786700e6
aeca0b96d75ca35e953a47965bd5fac94b30f71219eabec0873cf09a92820bd19c1c9996
ea338fc050c5ca8c0a1d2336b3daf54623dc4bd34f75c93e786dfd224ad40a0e927fdb20
b331c35a9ddec5a3195f4db9e0c8f504eac9a44adda908e5289a0d6418f823d05d483608
395a2bb54b7481307aa21b0745a5cd30b31632a1c7bdf6e2e0b8cabe637d3b0f4fa88c36
8de35c449ea25726d799f43dd117d73b5b3b19ed00bf16052d0b0a3f95df3a1482919f78
ea3ae82c844c0b1919293d93f3505e806afaf4e5180d683d26fab86d55014ca4afe74c07
4e07094a0b81566f7278003daf7fb7613cf8ac6048ad9f5452b6dbeaec887a5e7c527fbd
cb3496a5788340a17fe3e5370410e8f3defd3250471a967f1fa74c6b8d8aade33995833b
ae5c68f34a9ea64e688eac675a97862b3252d30807a05005a3f4b2ec8d97f18f4ad7610d
66de4cdae871e6ce862770b73976337da126a6b92e932953351302dde0a85831f007c74e
99ad96d29cfaf675a5e03d3b618884183b4fc08fbc8d854b4351dbf797fb62eb424021ab
5f7318ae960113243e214effaad5d57068d4e6adc1c2c411e2e819ad7903ebeae45036f4
b963b4b10c7ab5923c958571837ae5af3f0a42c260a4e7297e22eb0884e2c711460fde80
a512d2565147d581038e5d3c61a353db1ffc6154b7674ce858c641e83be4a07303a59a05
01522cb9f9a45ddec99d24f56166a2852cd3dfe910f9734a016efb4beefd806ee678e9e8
92febe4d7a2f4ed0ab47000748fb6034ebdeb31c3d3fd5c77bd80c6ab9edb9eb51459969
8d14c60ec8d42dd97d6aae9c5b8cc8d0a410f9df43a65dab12dc99e3c80701cdc9cd6273
9c9bf1eee4415671d0ae5813397a75da4d48f0458aa0d928b1fa18ab15a64b665a1ec125
24b5b6346530071b733eb4f94c50630b69cb22131fe0335c5a0e64ccb8800ace7301b9b8
ff4b7f4a0041b11e51ebaf25a810015a9b2a6da258d9a1489f1b63fd1e40a793d446abef
49f2bc54e7c627fb91f2308069fccea6c1b735eda6e0a5e33f62ffe802e2c315fd97e8cb
820206adfae02541a53b39bd7ffcb489b2de8da85e514145097a74a16e3d9e916d4ee501
ef2c6304d70f1e4e0014a6d00600784d773024867efbb856695e5c6aa7b691037dc6a0b9
e20267404651c2a74e4bcc256a7df0d4c6cdf1ed5420cc0f0a6d6afd0320097c48484c92
da86632a39c10a68f3f28d506847d9fdda04950d1b6018e82627323ed7f2d89df7c7f3a3
d014b26743d77ac0765873c5dceace2298c14cbe55894664abbe1859d2733460588bcddd
e4747036f77ad18d736d13782e6c2b8d81812bd8821dafd1685a8f2b4fcb22b92c1f4e1b
bd296beb85e64d834d687f956c385510d6cb98c43ce15215987c4138f7e2fa4bbddaba37
1c8362eda13343612bed9d60ca14cbbd9230b2804687ea16568bfe012d3c865cbdc5ccee
4762ade169710a9df8be8c838437f58927d9851a6d5a35e961881a522a59337123fb5578
b62b174810a279bfdf004627ff4bf8fa3d00c8c343b8d84c7c9af6388a97377ed572bca0
8d36547aef5893bb97772aafed0534fc0df6aa475eee19fe5c9f5eb689146e02cf6b904c
85c5a8549d5322ee872cd822f0c12a673395fe710f1d4f1649b2326f0ce5fa1009e0cd78
6ab780accc7217620eaf67698a5c30b020986953a0a3d3853bd5d07f42c6778f2400043c
16694fb8c50b119bb5c7f032dde1160d076c273ee8cac86e389f6ed47e98dba6d85944c5
e6779dac2231b9679acc8044f72c3354110e79e1f9297b8379adb87b450c02ba60e8cdc5
61f15c75280d12e7150e76fbcc5dfb1520c566570f047f1ee82967ded2cf97685abd8f49
6d443d13eca114cc2e52def9fd5cb0014a450f3f08a76b28c4c4260c7822af306de654f7
74c668440e26e37be57bb9fa45d490015a4072ceaba32d0187417cc786484b22c34e581a
b0d385fb530eb0725e40ad824435f4d93e04be3e309d28f8f1a83cfc5841972b143c94e5
6f33bfd58d54505cb6e26400d6acbec6cd4e0429313209ca2aa38d67cbe40352c905dd47
d8061cd2d1e1a08d9c50e08103ce9a1a0afb0927b9999b20a80b44d6140fa0bebd4dfc55
11652cda832f8c498ccab751637e06f5811b8283095e82ffa9afabd9464e9d6c963b94be
fa431a28fb5acc06ce59f58e838878b1f7dad0e14c2134a0e93ca65c5f4d0b732a5aa66c
a3099cc15dbc3b73650cee0131c5bf312f8e08cedb3f65ddd76bb8dc6fe5c8e0e31977e2
05977aba30048f790f38b1fcb54e3a7ff0ec781726c0f44947e1b26eb6793070e0cd8319
6f32503333c22c9fc2eae7de9e260b64995d22caaa8f8620a541b43d38676a242ef25a46
6f9768e224d285460ce376b97936226aeeff69e1bd1a6481a0c747ccb68bd3f47be0e9ea
0a86b383cfd6777086a01c5769c943442551305ea393c41ab0485e5df856e5b2a36d014f
37d216e0b415e86f54e63cb015e78e6b41e68a43b77f529d56bef7cf5e661222ebd6657d
e393af4e6a559f7030399b1098593c51b7bc182ea7e2e842a88a77d6e978937a38595293
717b749529b526322044295c77f954c51a8c6263e71b162d1748082cf0072877d8513668
53138ba1927882e820554b806b849b1a8a54e4fde03400bd409d5fd8147e3f1b1db78a57
c88b8b11fc4946b7a09330c947c2ee19433bfcc49f41f7b8cbdfcc556519f3ea503e78a1
775fc14fd7955d74ec423a485b7afb0ac12287a2e267a5904f8b6056f5b572a0ee27a2ab
b8c0f6e55f5df365548e9add5504796a934f7cb05827ca9dcf905324dfb2a38cb5dcfb58
c84eb1e79accd73268e34acae978147dffeef6279043b3ab1cc6d728fca82b5870a2399c
48f661150e92611b80ebb534753215e7d1b39bbdf932eb69f37feff939db7426fad55f3d
9d3e3e6478de91697bb678111fa9a50d7af77a901e134453d2fab3f34d6182f8949e295c
3c4e154cec690d47947fb8dd3fc69d03e5020a3acc91ed11da0a3fcfc3943d7747617305
cf2e85a23dfcc24124bcd4eab6dc0d562e9042ea82dff2b5f57ba4bcafb4e1b0311d57a0
a40c7bd723417bef1baab64f39e872d515670ebc355eb8d320fdd7557b685af000841dc9
a264752a38ed2cb4a9ec7fd8d1b51dd8b6dfe3398f2f9a429b92ad8bafea70977b61b839
6c5087c8db1ffa32d7cb7e436a25f4f1978ce746bb10f21a6c6e3cb8ae615e58c4f4cfb5
5b56bca5e99de95e5394e320c3f9506fe6eca39dc45a2618f6156a9a18f62254b1fb95f6
64738a31e9e8d12490f4bc84174dd7df21750eb55d9a2b3c36c5d0522f5afb3956568e96
8da7f5ade993e84fa9035abece7253efae5fb264be46997943dc8637708803da6c4cc15e
0813b65c7f06a60ab523d5cf0691d2f103a2953cfc9ead57e3009fa38a5d70c7f843939a
bd881ee495a89fc3379e9b96a7e3d3e81c4f35c81efb9c358f4a992cc8bec226fd7d490f
09601c37a50ab458719b4a0f741e4d9d2f28cfee8624870f0633753ca2f1376e058e8ae6
f9b118051516b2d17fd3becb140c5ecba71010e2d1419edac5a77abec4581e6e3bbffb89
a6619965ccabf46f017d3f6ef871d5f86488be860de947ce4cf133ad89c9eb6fff6b24c2
65c218fdeff28a7a253e3d45e074ee676d5553008092450d68bc4c802400462fa2bed1a9
727602aaa66c01bcc53402d43213b7be8779dbf90b69f7236098581cb10a47e28439eab7
ddb834a4116489f409bc8ba18dd3a52594af9d413fb91100c246e8ab1024ff255794c400
3b25caea09de4c925ed74ea5a9f0ed80a800b028b9cf2f668c61befe7437f190f542e96e
7da6abc60cc0cc60a7efabb65e8c0dc1906abb537324c24358ac7f6fe4ebb884f772aca7
f4ba4f6c9bfda1a3120057f7dfa529cc0830fdcf2e316636c4a0ddadfdcd45b23d594313
d471ead974d8b38aa3d941d779140411161d0f53f1afa19939913ed129d8d5614bd7427d
7ae700dd8d3c44aab00d2b148dc1579cff3e4b2adcbcebaeab2c1234c1e9ce469abd07d3
2563dfebc669abbc3964c81aace0935617ec0b2276eb3fad8741d92765ea41d5a06de196
cdd0a3c1b1de84b23a3a49196e8f71d0f8cdf766b12346601fe82fefc42827be68edc4e9
cbeb2d02bb59234e33e5bccd32d805a282c24c8765ad8a379639dfa3ac1f57a3f2f5fa75
2228b0bc79b58e6321f6ee0f1c72c49e5b5a199cc635c4693f293a229f594aabbcd23fc9
353deeb41339178bce5d30e387e3690c93076f910b71d2c3d3acb1d17b7114c5a71ef13e
af1ee3c48d179b1b7798967aa194b2012057af691a42f5efd5b5f244816b6887cb198ee0
1795c3d642c25ca1a8ad01730c4e613bbffd440c34b2dc591aaa66888fb8823629b94226
95825d5687ba4ae5be1fb5e1ade513955403699eabb02ee4230370d8423270d10c0e0e02
a91a2a6a4fa48c00bd78d3ab2a67feae92ee2afa5a47b49ddd0908802bc2e500bf15efb2
daf14e5738399d5998d28bb76e10585b0b983dd702c404847c6957284c09c6f8564e5411
8000d6451110dcdb6c46e224d9b9043100379d8bee5f25365048513bd1dad20b00e2a2d1
36e3e602fc51825b3302780bc6c7e8552fbd7849ff3e874171fe836fbe95525713b5beda
92693c019f6876521a1bd1cc61d5a6e6f584af4dbabbfbb0a76a12f51d945427157d7d6d
d23bdc5229043460a88fb9fa41afd8a146072e5c2b760b6ef4f5e191a84c3f5f72d8c285
7650f0a631ba04240cc3555113df28317a65171981c93260edf9e170d946174d90942e0a
d90c04bf7ebc2390fb403cba96377d8fc2fdf9978ef6e58ebc134e559b89c981ef510a81
f598378b3f4322c37e57d4b84ab71d3efb63978422b869ef1d001cbf56b9c79c05100de1
1b92f0a28509d401c329d42f8995ece2fb0d56a96159d3800967fc57633485d76f2986ef
04b524702bbbf0e4e0e1a3ed6f058d37caabadc2ecf65a39d6faf20477787a3969304865
585bd109beeeec96a41c3649caee1215ecf540a67fddb986f2e04dac09eb37893efe0c64
cc844473b245c8fcce95cb04c3583c3449e7078c93224fff91bf69ef52467fc27918c704
e9c89ce00d209093138800fac9bacf9b0a551c4ae8ef3bdcf7fb96abbd5991afd729614c
ffc6763895796e4f9d48b800d8ea0347747c98d9c5877947b5aa4786483c0184576e2ef9
7b0fa5fcd62153d1b915baabeb0d73f0ad1602f0cce57a183ce997c03d4260ce116603a3
5317620cb6dc65f22f3e55eb7ffbf4fdfa5e80661d60f6ee62dd2abb033cf5e7a8ef3325
61b6abc66331b9e86e198efee12d31d42457c1860fe3add5df35ac9cd89e3cf2820c754e
15e327483232bff78aa22aacdbe4d7322408218e7f2f240537c719018803f9218d3ad214
36d1e8c86de576b5da822ac0412ff1769aefae43f40fdc9259497e7333b58af17cdcfade
386ea87848e48a5001453aba456dea2537602e74b70a550b5f72df12c0ca556543f46a2b
2c18e3c4329881278bc65aa886ad5c0de35a80271390754134c272f389b99d8200010b19
08c88dcb1ba31a4e22faea5ade9557943305f979d2cb6c39e54c88d96d0902a8db2a6dcd
50bc8655fa1e2bb46308d9d40a317b27fa4140ac1a83fa218f12740aa63c019fb0c26a6a
6138861ffd902c683fe6b31a3ecff7ac04f958fb7e4c6db8b59ce9a08690b2083d25371a
cc27f86f88f90e45533814c5cdf3dd3624eb0d18132f0c703a78be809a5851387d108d10
aa8024c62de077c795c75dbdb16f1153881bab362955f580cb33b5338dc4584094cfec9d
44df6880a69681a6f7eee4806f19063048b4c15a778376cc99e29dfcac48fda2b2ca2ff6
5c67af106c056597ac41eef3b20b5ebc6d9101d4b818455b1911504261630736be2fa136
ebfaa0e72cbcc6102e107ae2c946adaa2a618f86b07f1b6e786b21e6b57678382e74b791
adf0297d565de43ea43b4ddcb093fdf5ee14df115c3d99e61fc8b697a72cfd534fadf33e
490b970657df57d3e18f6580cdea47adbc7fc0540a85d95f29ef659cd214cd170b2f6535
7ca8166a9886dae8700cfc37fdd72c25298b5413e8ad2c897bc939079e738839fad985a5
38a2889e443589fa79033666311d40d0d0de606f4c9a9c87e16291486c490009d271c8e2
55bd230ae1c76ffa843b2f47f9cc9eb172c96324ca8522e26383c2da4b79b75c32d236af
2bc5610071398de17256868110b9f0ac91d4b06565c740b81af867339da62a17a75121ae
525688678da038c83bff723c478507b6243e2ddf040a96af955f3db07f1c95438c0dfb8f
7b235e6a6abbeffdccdd8fd4f8fb4e04c49de8d10dacdaabc667d80897494cb936059a33
02d6bb4e935a6b2035bf31b535dd1370aff35ef9e3648e517df06992fc89016c9e6b234e
e0d72c0cc2b4f0968c5bfca6f6f42d6a0da08db80d9c6f2831aab53a2fbc71fb38bf7f2f
99bdd9a10fc3958126f8d4554c75e0ff41758a474a8eb576d67a8ed6657d965412c7c67d
722f83c1891ad9c2e778d0673031ce64af655cc0713191510e5ca49ea315af3b756e8fea
d9f9027b374b94a702b5544c0b04769e2e45b20afc0a6b6185c3007186a36bc421e3504b
6ae408d9007c8ecca880a98d11dea102550be0495e6c6e5189410399507f04d50fe1c5e3
a7c9320da1c7ea30b6d05805dd760d7994c496b4f0efa0b06027af338921b10374ac7d3f
aee87c07f07f0dfd4ad960637f11bf55dc2af35a92c8934347741ef05b68f3652c17a594
91df5cd3bb08a30f8a61738a86b38dd740cbad7704da22e5bf88b74b102ae9eadf1cc25f
04827b43e57633a6382fe681bd205d5e1ce7cdff9d96aca252988873aa6b482108c76f5e
770d7814867b0f6a2ae5898b415809d1086a39653538f225b9481f9878246bd1a688c448
1aef23e930cb6eca595ca7fac8f2af9fd4ec58293dd3451b7b2e073e110c2bac0537414e
347654768223f81b3ad3ddb9089b02c0fcb5d2e7d4702a74ac311831e02d6c7849ef67da
967c01a12e84109d5fded0c44c963e84d657bca603fe5f4956a8628217c53b146fe4f69b
ddd734394bfca57561ca433f4da7d8b0932919d5e4f0b2de7b8d4d8615fa96a9cfcb2e13
ef35311447b1cf12116cd51471b0e2dae66bafb196e7801d435d65a0a2533177b0288761
b41e6bc9e0c68d939c12587a78e7509552fb735c1e08cc42c251e3d5c6bc35af9a489123
3d8d30bb8ac77df5bf31512ecf39c4887c9702526bb92b35b54595bea238417527f39f42
cf9bc336f0589502c2532a564859a118e32e8dec1ba24eedd5e60e58218cb8c13f2f605b
94d77c7d931e40339bb113c8ef421d716a821c300c26f2fc8c9ceb5b4a5af904fdc4fe1e
b319582f6ca09b114692ab9932c266f2ce2e9aca1f696164fbe38efbeff11b3b09b6d5e2
21351061cb493055e6a28e48741365bddce814a02b977d61254f5362156cdf26cef7804f
5e9f295502128d207a3d5c750fbbb7373ca4ced3bd7b325129e4e1ad07ac05965cd1ef13
781559cd8bd6524366cdfe45f348840e81e80201befdc93fb5e9d49740119db07564c439
ee882b5eede78b5cd6b6b0b6a69d727818618bce9e57c0215f3ed4faf9676274f59e903c
9541051622f46cf41c8e7ffabf1437e5cf4999def145d316b1fae66153c1e73fb700a5bb
14538fa05c45b0fa2d7cbd2482418ee3e7588df0ceee229be3c0ce075e14ab29233a0cfe
cdfaed1eb540de4123f4a8200626b51451893c431485cc9f1604f2977c72a295e7843b3f
273c83281a6c9dc7572986f1af66b56cb4f1ba635e0510507534a4f524735903a3e7b927
92c275f94881aa66c5ec320419234208cc413dc4834f746200f1aa2f0e033388933b9660
27eed9f8358b9e9b8ddbf067bcc0ce8e1537c716606cabb8093538c8ad24070a30d06bcb
818df96b3c6b8dfe88afefc827720984b17e0fb5907e8874c0170936d0915100ff4952ad
a1f1fce15a2fd064880ea24ce92e5fa087ccf7cddd1fd981428b29860762fd98ef9d2700
0485959c082ec21be0e3921cdb1bc567f09f6f3dcd0582573e47901cad11b4ea39994bd0
c059bee679293c88eb104c1bdd5bc3bd02507dd8486144a23bcc46aafb413fa751bfb24d
e56e34748bb7560f2dab9bcdf68c9bc9899c8c06571f34e8a6809435fec5911631e946ce
9ed3e268a92e9942a147f46819552a384a48b0f9dbbaeddc0392d1ff9ee62790b28b1873
34015847eed84a92be3fe42a0962870c37e78c8260abaff2941a9b3bf14ac00be1888f28
0a162568583136d26bdc03fa4405a8f8353160a73db8bce2367c3d4381412170f0a479fb
d039e3d67fec557ab16c354cd424ab46e18c8bf8ebb109adf182fd6fc8761900f30c4794
73eff0bef270ed1137c81d1026833e5e0c5299515026a4fbea1855dc083df447a2de7e84
513db42cd570d7e2cfbe4996936fe55a4a59aa47d746a6f0ba58684fbc7d7c645e35130e
c513995d84d23f7d5db10f618e47e3cd33528e1bc6acc543a6abafe4b458921d3c9fa5ec
5b7fc0d603088b11c7abd5ff38d33d9d28232651706175690882eedfd410a6ff8e579a23
4f298374c1207c46e44342dc835314ba261b265a263ec091ec78c277c6a1aa94726dd79b
bf2ba7ec3d68f40c4e28479ccab5490e9e3216c6c993788a7daf31c2d0c2284b7cb23cd1
64efd05524d55d3657e13e34375951aa674928fac18489d9bf2b4840baaa18dd19577139
161ac1c1772e96b78c75679692f193bc786b877b7572e724621896afa00e8474f1aec744
ed410251d44b6843153ad3e70363563c81eccf30258fa3547ce642d5c208e540761b7ed4
3d81ea32aa88f9f8bfe7f3e52c2b5b606e72e7e6fbd0daac0d01c9179c7e56a2aa895a05
3d76f95ed91e01eed715146bd0cddeed53edac63050a60ae1ee04d678836cf480dcb4edc
81bf745108342086e17de913d9ead36a17d5109598b3080cae854288a23b54764ffc9183
1127c22e8aae8168a1bab640a99fbaa802bed4d9dca5b0699a7a27d41550d997a81e29ad
97b5b5b5c533b02eb4db693c2ccad48d64f5ba37c9b1e022e262f63608efc2e7e9afe401
40c836b71df153f7411a0984e6273e4ac56920be1c05e72e694d06edf3c5a92ef06c7cb4
d7bab65cac24dc9fe78624f2dc73461a92ceec852457a4609be8ea76ee8222da4c90ae45
5f1a1e45cfdd60c52ab328ca2249ac2c42f5247205abe7ae8efdcc0bec240645b85befcd
2c48ad11b83c7f0de3327840ce37ab664d68b8fb33b2b2631d6907405edb4b02b6680e14
f5e506bc29ce949db1d47af1b84ecb81ef18e8e75975159cee5907f9966755feb3f624d4
4637638be051859b735993f28a9a1fb5cfc4cf9a4cdd5b2f1a879c3baad69c0b8074468c
575edc8eb2b5b2e305ac6d3b3561757433bb06435623c82c2cb45366d6fce95d6bec199f
29e8dd3e8fe8235660ee409fcc14e24924d7c4a22c367f46e08b3092f3ec687186591828
6639f35c62a0a45ea45b315d75be0fb563833c8c55a8ba06f9c63120b13c615f40ca8a7e
147cab6ff0e78693c5e29497df4e68490feeebd4998f7615207435472ca5a80adcc8918c
24a0aacb7023027734fe6eb59a6584c7fe81e36a226a57825af9c61f4dc3e5d66f778565
04d0433b16b00533dbd6c286d8c72ec44986a27e5ba8221ac73069dc01783f1ad5c0aace
284b2f0b7e41d55713974f8a0fdf67118abf3b1040c47f96354cedaf8eba7966ffe003c5
7d1336481e12084fc8f1256cfa0a89d35e17c32911e66d3ab4d0749cb99ff67869ee093d
79a4466cd311eb02454740caeb2849d6f015050d134455c250bcd1456c0e7014dbc92571
9785741219b887025b31081f518b8de091771a8d144a67db6d1fe738d0c57ead3538333d
cf9432aff75ca999a31cf57a184c72502b28902421cbd8aa7288f31a83115f11444d88f7
fe798abdbe97794cda7827d7400edddbb33669eb36939e1ea95448c0b7507c19a284097e
c020b1fec6f1592f39844885bff46293e27a984babef7efe1586f1fc2fb2d82cc1ecb624
29a5fcb1c77bd0a449977a17ff53ac2fba073e22c9939641caacd36db709faa55ef2fc64
82f0ebe56287607fe2ac131a485308e0f689223e093243d6d58ba150163a65972803ef8c
e56b6f07c2328f123a8e1d075636f9707c823f39346fa047742bed4e3135eaf150334832
0cd89e4744e87c617bda77f5f31adb49e670fb4f9dbb3c1b4c90ff50c0f9edb880d98d64
05c846379d47c05b2f6f640659c0dd7be4de2f3d6262fe78d1dae52b837106463de792ff
955720d1b1408c7e0640996b5a5beb9ee17d357d2c132266817042564138a3e3d5ba1c80
5e8be45ed8eb72420404db78f81528a4fab4bac369c659bca182ba255d66b93ed93d746a
a99ddbf641a840b901fd65f2d8a185b4a0c862e0dc8b780e8412105dee55378c75b00c6a
533bdccce0a4aa3718b7eb7c7879ff824a434492e375f746a568e8735ce32fcbc181ed93
a35fc33776beebc330a7b002cb9192d28bb61bfa355e484f67e73b282148390904a9e4cb
d92bb857a487ac2ab42834aa4de55e9290df3bace0c63f7b5422447c41dc173e136f6925
da07a5acbd55bba02148597404901224058c83ccae5c146372a0347d628ca830f53db357
aceb6e114a19e3517aa18383e922dc0ad3653a1550f9eb2890419e858375d97d581389d6
285edf5cd6bc16c186f3d92cb83315c9f749dfa8a5d9413056782fc043e3d19509885877
13a962dc3d01d7f7b21c85e1323c650caae1ef2284e617f81b7ce898f7f9ee37199933b3
8ebc95ac0287b81c682096cb75482924b732a6076b034a24ba7e42cce3e184e05f76fe38
9eefe4ca901a5ababcd5ab9bda68dfe944ad6eb8102e76838c2725f6760129c2f1bb8a3c
4c4997422f2dbe358c576c1befcb1517eedc2e83c2134d31d271e87f1bac5a455f55aad8
79ba0093851c4a8756b8e20b40639ef57b94a64ec09bad17bf81d08d68c6ec92c6197541
0dd322f8678090919b85ee277856a55c8000afa70a6a7b41248ee5ed30528c790b53a081
9c623899bea290dba4e0e0402cb8b996cd9e46d7c05db160619e45b55efd1536250a3d57
1bf06113d57b5ff8f0099f7e47e9ce8887899c9ea42d21ee78e95b976196afdb6ad32fff
c72c0412d288e2ea8abb98fdd54b9988f9f734b8f305b1722cc371927f06fa724e6c9f16
87ecd464a40c7df9d8158cec2fb542f12edd1f80b2fd73951c5e1567561dc0b2bfc2dae0
bb94a953090197463cb4bc7909d85a46644616bda0659f6fde42947d3da01f6dcdfc777c
ffe4ce00c69fca6d9c79201bffe35038ab646199b77a964a1b62b9263e58bb021dc0534b
7b808a2469d66c8f8e40de4060f87a802ce835ae7f3c08076603333be9a48ace65513411
6ca3cb5cc4391f602eefd51996caed85488cd45aeb60fde44b83612d5d162b63ddce554e
0f039c3ee4075d95e03db8beb54530dc54be6e30683ee7fab5b43f5002dce451a66aff2a
575f3ceeb0709ce61d5ec0a22cd1427c6622464de4cd0fa557f01b9db3c7903d4fb389d9
7428f9b1e220833b7729ed45e10d2e5b8fa36baf4fd62da57efd607eae25aa84cac2927b
8a18fe4cdf80aa6dfcf5c3e133778f2c8a5a6ac2ab333f0899db1a8c36770d18f3c54198
091375dd6f6ed9faedac96f80d11b7acd00309c863caf57e81b659e7015e3c994f7dbe2b
e1fac50b145a8bf7349778a72a1a5442f40922b50330218e02f44278198bb229da189fda
19b64edb901237d3ba9503e3954e291d836ace06ba0087123d3b9937a069e5170a1053d3
b9cb158524ffeeaf12a354ab91ce6d5dbf13fbb79d10e301cd4ee47df6b67078b11d6a25
f088125d79a2035469083e0c0c0072565bde380c89e28af9ccfad0b1f45ceeaab08b215e
1e9b11251c358c515b6ba88a711147b254273af4f755b6cd292a6c85709f9f1516333418
2781f5ba316b8c8fc882114a3a993a94aa63a92f43dc0e972b36778cf3365dbc40f31883
d9b541b0fb0d3230524fbeeaf517c64c7c97efe49a1c6ca3e8f411f1589fb8f5b244db2c
b00405bdced4454097d13f9642d83ecc56fd42d226e9df5d1f866611a4556ec7c31f1cdd
1836935194955dc172d46fbb245b9016cbfc8f4006d5c7007342a6c3c6e8605ef0757f21
20d69259a3339ca804b3076fb48b6d0c87fd3135bc9f5d49cb7375d5605fdd2a560381eb
07a5b15c1a8943e6d3a53a9e83aa8606f4835f837975bba30bb8c4164b41681dd58aa2b4
056501d3eee389f9e8f0ecfada1e7e8ab365ba56e894256f926e6c28ecb2f23f216261f2
3a2c81f612a6c7eb557f747e817edb3b5f6cb1f83648bde88f40c7b099a59f80c7a714d9
97ef72fcf050846baac7a22c6433c08c22109b7da09d14c9a5cc3b986b5bd93098e398f5
602523036e975b34ea8674ca85e7ddd525a7f0dbbbdf014be688d41a123fb3f3bee85cfe
7ee8c706d4e7924f201331af1b44db8e38f1959cfdaddc1821750f76bb7a8a86ce54a4cd
ecb102aa59234daacafd4d98b76a51d65db7312e78e18379aca13e43578ca0a7c0a9e0ac
bdfebc19679b78279b5a5643dcfaaad153e8874e9605537c13d9a74f3d1924f99a0d826e
a085f64ad5f48b3b91f479cd3c229b083a3a61c277e9ccfb3b69ea9045b4f2a7b7f556b4
c81d6ca9329b09a3806085080f2a5672aaad31107d253937b74d5a4a48f7fb89e92cf56d
0f4fd538ab46fe13e0e52cc51478c39b9e9b5eca55c7f2dee58e16cd96c2cec9b741c8e8
12a7b52990cd49ea78f0532c50940022531b32d9ee2ffab71f6e8342dbccc5a805124d98
ffbea2a07fd5333f10990f7538ccddc27572f4c73f4b2c9d1c691956befd4af89e077158
990c4a2c4c76298db2592c70d37fa7176895ef4c550962e132a1988a4b6e915a60e3100c
622929a21153cee80e671403bed2ddd31754913de8e25f99cf783bcc124efb65385c014b
00885917dbd5bf9c1be99928161ad6ca040f29f8c8d30849f52621b2e160e8d2f5ed2876
1d167bec6ea1b7951d49606308e9fb1eb7255738ee7db77ad307df104b70faec082df801
44a352fbf1517674929a00cb9da5a45452cd8242ead2a792930af831738cdca3116c0bab
35acf6326db1017e679a4ff8093645ea8a49aaa6dc08fa00129dc71296255c3c1f4cfc3e
97c1496f273fafdbaf109b66b4fe9cf076764d9751a34363bc04aae3701e4388b087699d
e2269f041c1376209ff571b1304cd8eb9b7e35c43606cf5a1023fc1852a5778be010c162
7850d5a3409f479d41cba766c57fed812ec6f37a12457137c16c83e947b0e597ef793106
f9ad5fb2aa0cbef1a1dbf0a224a306fa903fe9cf3b8192209471cfcca9dcebda0aee42d9
6d564d6ce44ac967be925d45488d0b2e9d848d2995d755ac3ff17eda6eb5aeab87078fc8
d1a493b590555173a27c056f2b79ec7579a50e166e61f7ede1b0e805c16d3a73144fa047
2c0fc1c712818d9734f1dc955c91121e30bd77add63ba2b1b8d131d1ac267ede75f50b33
b7fd44054323dcbe2f22d0dc2c6820fecb329c06f42d24fb63c2498f905949a48d355941
44eaea11f0c9e72022eec1b57f8b239ae8dcfb36878cfd250b2b13ffb2e2de6d624fe872
15c1a38f383eefe78856785d062495da9378a4d0695ec7e6d97206cef85f51a14ebc3f68
a42db6f83747c0765a4d0415e4124e18f4396bc2a7ee0ad0f9ef5861a87faf5ec840e74e
e70647af3482a05e631a9f50667bc469e4b9c0ff7f574fe4b9ebb781f85e5f884ae0653d
000e34a809c183c0b6103eabbd8445b90f2cfa6195c082a6e892662368c6a71eb48d3611
c9251e95e62d4b125c9bc5f171a14c622db995a4021657dde515a1fdbb376a3ba02891ff
a75d2980c1fe428502dd0ff24cc902463a53857abda44f115add4d90088bd3408d81a61d
dbb09b88d2ae43cb61fc2506dc5ec0f0fd0dcb8555f428abdd64a2a586833ed8f59335bf
a68256bb2491bbdaa47374da8af317b62179d78a6e27dea0affa8b21b089f9a7fc994b90
e4ac45be9b9f5657d8f558c16acfb3bd44854967d1b96a7fc7fcfdeb0b1859222ee9ee77
ddbbc9022138b1a7ec6de4dc2e4deaadc0ce8484197139e16860ece6286e3881c25a3e85
3fd511d1484f593b769b9b4885ab3ee1d50c5316a805104c1769e6b8b7c6e02f18c0c332
5c7e60160e88b07e95fd21a48350b774704048f3431e896054aa4649ebb5b2de8484e12b
1191dfb005a3b782b51b830fb45b5bfbceb10d28434afcd6d3026dd79cbea66d30a6132c
7763e5a742c5eec69104c5851e30ad0445f44900ddd87e1e6b5220d16e18dc9b42d2a316
dd69b9b3e6307021ec09f9573e180b0d706a069c5744f25bf7143139e8e3155fbfc65d7c
06a6bab5396a22c138b3035f32822fd663ee7ba4dde8e8372e74554de9e500e2c05a1d4c
7f464bb1501229b290a34ca7c1c108caa4a528369bb7a2b0895084a5f172fccd3b7ef3ab
d98d59be8d589898c63c9ac3ef5bdc45138484d7decfb17cad3c77a4bcc67291271b600d
7a3970a1ef26cda608d72359d5023ff0350e48c634454e04c09027316a3fac7f9a20eca8
ba5445295cfce58db3f798e92a18b13a07be15e0ceb62ee29c9818acb113121c00dd8f06
90605a0329c1382a69c40c226f053e566797a7d21c4136015926ab54957b253a0544514e
ee650761ce1de79a7fd45184f8b813e493ed4fd49aa3ce685ed96451d0a3e24f3b77d11e
6e04f67c1760c8e17abe700d3b11c3bf3d412adc0cba2106549a37a541eccebe1bac1673
7a81f248272b06f682fe14e28490a555b637b1e238d2c2f41f2d5faa93d9e235db882e33
5fd817910e1683231cb19819f386c80956701971d4effca23c99331a6d1e0152c9be69ef
ef86e574afecc9f339dcd6cc035335ac094b62842f754fba93156c5f3ce3874733926cf3
4484c4298f76db63ae43c044f2186a844c2b80e557e121c0654c6df89a53ce91a837e697
32b736be9e96aa1d917476da31e2aa82194976e8f60a1aae67180e35bffe5e24e1c310e6
5c6f542c96763e5c96123a8452745d2efeba469f09c24655e040c65831267e431edf8e9a
36765fe374d833cd925ca6b8ad18f6349e7b202917eec2a8053765cce9a55dfb9adb1821
f28377f516ab1fc543f3086f927ac05499299dc6bb41f0d26503bef6b02a56a254e00bfc
806bfce93aaf518679ed1bbcae54f1294bbc67799d30ff8c99fac391d0163c660a1c7e7d
bd2bf4957ef29ed526d9bfb18b43a0e63744d792bdc4f2879b606e2354ee75f14d95e52f
5d5bc7d24c92ac32b705a38af1c48ef42f81ef00bdf0b07ba18062292a4f5bd1c58bc3ca
fc13b413c394352aca74c7d246c634a52bf3f4fd9551e0e178279288846e8fe565fed6cc
677101d9db208eceb9be4ddb3009b19819e39c6a07920daf4cd42b26e34a445e8233a64c
2b09b198986447978f1787c1ff6afc7266e85cb18d7e73b45939c440ab61ec72ec005b3a
87c7ebcd061229ecdb5f1990d2538bcc3f373176000545a0c64aaa50eeba2a5bfbda727c
0eda3e23ad17fe5a41253e9ca0d5196737ff07a5b8a5e0dee5e03e796772592a0c9492af
bfa1a083cb9f00a14be7cd0eef1546ff2901e18fc87916dda7f913362f39813d385e0d92
8a1330325eb8b87a880c5857ef356cad234b029f73d63919bb96a50ae04df32df77dc83a
b9db017b21521b0cf910d803c3da67bd2dcc6f70389a39fb2794ba03c1fbe0e89722aa59
4750575be9ee76af6e15441555854cf0e6717129124d7609ba4ce1deec82fa769e3fb027
ce49540812f729572277350907e4c640c13ce8ec7bb666945d894e3709f26f2cd137a6c9
6b1516d011086ce0de88318f487a8cba6ed8fb4fed0c54ea8b3ca932d3605eb4627a5faf
a79bc5593415b5778b307521c276ea90ed2781f5b6c7cef34d727c1ea50a1ccd09fb4603
18d46344247314360cf387601d2abdfc572cd265ac30e93de2f0ca8c4d086736f1abf8d1
6135d4249d2ffd231ac612d14b18efbeba78bd69e4f8bbbc41d58055566f08a4be1de8ac
ce32e0cf83e95d76fd8aa9807848b9f779500b469244433f0f7a99d8678fca95905e7b00
fb19777c9ca016643106d3ca7e1f1c9fd782852701f893a228c62bf833fb51054ca105a5
dba8a09efad894f21a528c7a4ed7164f2f08a0cc75eda8d28483dc3c79b0c9ae36ab50f5
66a9053cdb4d338fc2e3c547c85d5169f165f64dbd08b5fb522bdde5a086dbcf49f677b4
c2945e18f42f43e89b2e6ecf4a945d555a85a076cb7e03855ab24c74625d468ccdc68763
32950de8bbea9030a2b88c2604c6f821310ed65603b8051f08e8ebcab4eac00f2095d771
c7e209ba1fcc700158c989b931ebdb1800202c3b92af38c5225f130eb8a3b881d02b55cc
deb5da296337410702c5597163e15ac7fd82dcce7e707cb6ac3e14754b6ecae653c88064
cfccf593f297f2c98e05bad4147c1ebbe2da46b9287e0304b419909cdf9902c22778ff36
6222de4ec4f82982007d761cf79c00b61fb2ab8680a77a26bf318cadd70297f0e85aab2c
938441ca462fbd90eae0b3759d081cd44d2803b138837cf511eec5152c1d0a6fd255d86d
20273552873af6c3e837f6d4543be583e6198743d5e4c8c38e3ad442280fda36723c19d6
e9fd98d61ce3fae9de91ac39cea8b8dce12ceadbada1d4ce772ecc821a98bb13e812ab0c
d937f3105467e5d0370ff96704e6dfc509fdde6adb118764ac2c933b5a13ecdab9decbdb
25370140e78aba9b2883656e229319bf8a8e2f3c2eedbf777f708dc3b5d0fb8567d85f97
d43d81da160527dae96af2ca76b10d75049394c3b886e6460547eb940a2262d4c4b6f1c6
9a0faf1775167eed5d451877320345370fb2709528c68d671cbee0d314afeda1c62e0660
ec9523c43661f0e09cbecadf296b9706d88697702409649044a735b26b4690823344dfba
517ab62ccc6c045d0725a38b73b12c6233833bd2ea742c8f93db3df79023514ba5dbc5ba
b63ccf648b98307bfb9973e50dd2e64aac10c8fd83a4b17cd44ba6715025c83f829f96ba
56ffedf7bb93d2c314952c0764c40a5cfcef36c3843c3423931eadc4eef1caf59d49e4b1
685f3edbe525d4ebcd3e81216b66a3a12a207ef4b2297c9550a980e4d63f24dacb0d5cfd
313a47ead6a8833d2dfde570bf5637807f028d06be30e46e6ae02a9f2e9168992e99b098
91e71268d4f17ffdf31adf76af934b8a007d5a904e19233edda117942221989c2a5d5b57
7eeab27e6a31524b52760e8c2521c4e8eae9919b96ba5aec5f54b3fbea7003032a241250
b73bdf1de1e6bb2c0d55a13d6746e1bea5024a051dcccf126a9eda0becd9097368c7feb3
06562007129085323585d16c90d156fca2722ff8010bfdbfd45b9251ab91b6822a4b9dea
4cbb076fa66a2ef7b38612d0efd2fb326147675f24a170949e9d274b69357cdeab8dcc45
65c405f6e3ae55292c08d80f371f1becc1d8ef063aebd4f30d1a2a7da8b0d6758c6e0c46
d85694e3311b16366530bd53986de72b8c9d6b4dd0fbb2ead8c2679a85c58370c7978440
437014e8b78280affdfb717d07b95d00693f40cfc18ed41cff2a49713cce52182ef8b3db
ad2ae650b8f5a52e1d0599bdc8324ebe057847945bc3baa9bae62c80b4b4b0ee5ebeb4a2
945c9afb813c7972e23d866ba074f04a6d64884705166ab4b0874e809924657d3915ba07
56133b3f696ace50e87e75d47ca2e8ab2ee17e5d6dec5f67df0a6cc183354ae021cdebe4
170f7d996d10f74a0f404ffc540e40d366f148b2cda28876bdc6a554a78dd682f47d408a
22089717277808af8d324f990930bf050490bbb72f5ebc6c811fc5f406c84989b6222eb4
a17de54965c9cc65ecf8811fcc9522e336743d15bf167d9e91ddefb1fe841a9d75aa565c
14474f2c3940a5c123189f8ddac16c155ad4b5c1c21b1ee8eb6c72b54553dad7040be281
26dc89e3e5bbab27f1c24493590465d732ed360c55044b558d8baf678285cd96148774c2
4010daaf4cd93ef7bec191b07dc6366b1768511dd9a75706b335fe06f6e0c6ebb567a1e3
4d1bae785c2744b22ed15b4085578083c0637574da90679bb1d35853340173f03075c65a
a0310a14e97bef41297b9d289b3e5c0d0847a9a541f470fc40ee105597b5f49315c4b053
b2902d012e572c78a60aab8146760af11d43cb3b503234fda77865809a2bc87bf99c40f0
f4c61472a3e2b334727b50ae7fc3b954f3f32f2717f0a764857f9fa8944d7507112f5ad5
dec6d010356768064749b4c0235ac5ac4c508216427048a900e7bcc12688240ec262b515
6d0b1592fe4445fccbb3d5f48f412714dd093a251bb97e5b69be72cf25e2040d3d5916b4
2145a102763e51589a992c0dc05d6c0d017362d8e26f9ea2dbbf9b1af2314770eb2a38fe
71bc767d42061703b61e5e082c97f7a865c9e47270676c5e30ae872231b0264c2c76f04b
677164a72e08dfcb75fc6ca428d4ff6eecb74ba69e19105b6ceee02f661d046b38f3324e
58f8c9108e867d6d3a9c3f6c8f5a4e9886665d314c69f7e8b26e0b6946d9899f1bf443f0
1076e0281fdd80cdc87eef445e26291ca36a3f9cb6fe6085c34f4cc7c70dfa36db5da4a6
3909a99273ea14ea3c03d4c91c95ec31d35c3902441798e8c3efc9a20c06af95b07ebf7a
0b63c0b913a418128b924587a2435d9d03b29d8be89855359ad4419514d724704fe33f32
312bb36a5419b42b9c752fea846a562c21c8e93734c2ca187651e9d41ce401e3a51766c9
b0e2552c56f452905310afa776fc60852e518f849fbb0a669fc2f9f30d5f4ff3e2c22bfb
f0911d6a2e8a193e6a372fb8ac8bf89f6ea3f445702758043628dce2a41d8e25c1afdf4f
316806fabe7c456ebe915d13d3603533669d2e8b4908b718dafd2c96b25330b71fe662b2
f9d2215a7bc2ce1cd098b3f2459b35078d46f08f0cbe1ad7ef33a12c6d8d40bcca4d4f90
5c383e3a74d05c55460299b1d5cff784193fa22554b18325299f667d1d0a762be62ef66c
17a73671944b8e63452479d8ad06446cc2aed77ac2db088db6384411a9bdca38a61a0c66
5f1c6f89f462f9c1c8bbc58558c16540f9c9b020013c994b3a57b91a767c2097bf0906d3
444a0e9b31c8cdb12a9fabf3ef51bfabe4624bff093917d539ef19e6f76cf23eae8fc08f
acadc1cc3b71153764224aa289127ef13b53cd03497e10e87c81784ac26013eddcd8a2c7
b314f29c3e114d341ffe978e3322f950c275d9ce0c77b44a847c7489f212c62b6aa90777
98408a55645ce50b1dbe780ed9dcf7ca27f3b69955316d457755da99514c83ac7d407167
108275d760ede3bd0f3d5ed9bc6698a33bcc31f33b2cb44133f749669dd66b2eded48599
ccf76968a6c30df68bec7ab9e404a84d648ae343780b9b119e0dab58e76deb90bb950bc1
9a0253232f85c4b797f32aa4e5dbb477cdc73909039c532eb0974e16c298d841fb450c38
3584efbeec257ad5fe64c60ca862130e267f1ee4cb1d5a50fa8d789beb8fadfeac18278a
291e3177b5f878630a0308ad4971147383e46ffe8336877180c676bbec99aaf1fad28475
2631e1e2ab36cae2255f0c583b07484da506b6e3a661f6604c95be30bcbf548c61924bff
0ad96e3b0aa3f3513d89b0c1a71ccf1b36244cabd2e1de392fcc8fd7a0d8ca6c37292705
cdf408fe1b23ec550a8e05244554f960435817ff9cbe7e536a55e9330f84e0b7c22d386e
d49e809943f1552617fdf318df813d30a4b970b306250fea4df524fa7fbae82205d6ef93
4a0e2a6855fe675386dfc64af7c32e05fbec73ef9788f74d1d8fb10cb7493ba031746e0c
5a4f13fd89b3411b29646334c99ab38583a1a0f84f96870210b279e1ffb99d17220540a7
59f0bac1e3b246e399719b3c5b93975772936833babf6677272a9e0eea84bfb5fe953475
f47d7d78013a65b8c35174bf262ecce99e4ff65be1078978a90a9b47c0a3c8c04a20dcc5
e4fb852809f2a0664b4dc154436dbcf8152fa28b52e03edcffcf465c38831e0a7e303c3d
3246a0af4571aab7da878f997dedceb145d2890940a54b5ed838bf1afc7c93771a894497
b08acc3dd9cf833f80ad789e72126ebe730d675722eeb4806514f1d6e0479710f5683424
15a78a9fcae1e2803f8850dc2a05e2a8dfa6e6805a32a5e51ee0c3a0967a9ab40e35fb2b
0ea09ebe0f0f5be7fc94f1148c903b56f41468d512f8ea594f407da44088f20cf4c427dc
5117d6b072324d4bfa804c6a903e8faa635302e31e4433f5a999af09c70a70ec6baed042
4113fa420b547c2a6fe253ab27d8bfbabdb0c60feba7c2c1bee3cb70353ed120ef5855c2
235fe808a5efa815c52363f3ac196d0a2dd43d5728c7bc80940e4ab96bf5366548dc8c94
09505abf02394059258dcb3c31cd19a880fd65efbd28b19611e4a6ab25d32235a2adaf56
159b4348404f7b9fa4015909dfbd70584882751d18984437ae029abb69458369643e1e52
7143a96c7ef4285abfb6f9ca9cbf1d0b01ee3062352d63818b3450bc07169c8c332ac22f
a74bc0f5e1bb77b931e88eaa51e197b42c842fdff5560825df7e9a36f4181c283e32f7c9
e6cae7ad33d9d9b8e49d13f56dd62c8a7cae0ac230dc81f7686c67827801910b789911f5
8a3ce5e4e6a4f9e4c37a599f12db190f4ac50b5c06a65ee5a987400cbdcc5f2c4a84fd9c
a089324cf822f19e902e753c69c1bcf7cf249c4d6bd5d53e9c140cc4dd6ab5f162ae662c
ebd8b2075ae81eb39607eefaed09ed2fe786b27f62d0a3eaa064214d1f6ebe0f9e56f93a
4c99c0e216502900f4d9847db5964f99684c3ad27fe761f67496737bf2e0cc88eee4d73e
44e9a9a490eb644b9e32504ecc605948a3a47fdcc2564c0f406abaf7638181bf791126e3
366cd15043463d7ca7a58e09973bff2b1392325168dcc76a67b7d17f74a817d9cc5adda5
b2fdace8ab2bbe2b38d2a7df41f4cd5261070066d3889233151a09e329b9c96e4dc4c418
3f79983cbce2b3259136270addbf3154d62c9b723c57c28dbc815146d7ffc3c83cc40261
896de7570dd617fce982e97e1b1c1ebea4aad2c665a26973801cb3eba9cac5b9b89d2faa
b80767139711c4a1a872240e156e066a1dd912f55c7b3d440977feb08aaa6cda5d745b46
d61863c2bb51494b5b44964de3596b1d4e6139060338cb79c3cbf4017e99769f0eaed5f7
1932dce91e35eec41c0e07ff7d34ee7a4e09d750e9985fd108186075ecb69753f22fa99d
24c5ee791e267d77579f13160dab8db1e5a4017c36aab01f4264b378a5bab0b3949013d7
5d26146e2add1d4f6ae17b5d43a4c103ab33113e9aff8d7c5f3d3032fb751539b94e56c5
c221ff240a837faab98a1a88c189d6d46111b1da454ca37a6bfea00b5cf8464319be24b8
7537fb243c90c785747bc9fc89dce0f3d8c6318d0c9d372ac77fb7da48e56c0e72bd7d48
95bd1502cebe687d66c62be0c9cd4319894d626f99a1bf9f6669cf756d4abe139dbc4a57
7f222d50247259dcace0fd068b456e857ab6e6d98d68cdeda6a2db5216d0f3a167252e9a
67ae49b3f87ae7f6a40b57cb171b4c5b1b6156966578e74b8ac91b7c7b6854f45602d2ec
d6e4284632c1f3d320cac23ab83bb599945e6c4ee6719dc04f0e562c5bdb728dfce0d6b2
5e3c837ef79c927e7e5e6705e1c09cb0fc8ce2ea66da3058355e58dc00d220fc780e2b5c
ee6034a15f2759dc03dbd1379c77a318325eaf506208bde5a9f5fa2439f3af2a79658195
89f5fc265f8f0a2177ece60b01f19f50b2b7dad046fe296349dc776f2ad7118efbbaa3ce
8f1c076a090641991cdea51b0778dab8f48448e60fc3423fd34f479cca8c8ae291cb7c5f
5e1d1dea9896f409ade41959710e1cf3d6e9273237736521e8b39ccf408bc73507ce5835
8fb8355f4776e87e6227a2b533e386779b36f45ddba9031dc1797bb9411f5d2ca613706b
066f3076a52d2f2c269d9cb4db5bb7b923ed6488e18226f1772c9ca7055e71a82a5d1c73
3a950cfcc5179580cd002774bfb2414a1c4fe9c498e19becf14a446fe1086e643c4ec102
5305f9ded10b46c3ab6bb859304ebd1bd89f2e265e81195f8a4f9a0150cf497896e29819
56b4e588014245cb9b9764ebdc8bf239c4f7c402cde625ef95d8b48541bf72edfa9d0c6b
ee7e7462678e30847e7fd76546f5d32931170850bb44813b448a846c6355cd3695ed50de
4d3619262b831883710cff827edaeecd8c5aa78b52771b29cc9c43dfcd2e5cec32bcd6ab
e33991566e1936fa73852b76081372c6820ebd81cb967f7650c27fc4ea057c91bbf98d3f
24eaefdfafbc65359f1bcbf3d48b017bbaaa02997ac475de5244b26520463d5f9cfc5fa6
c216dc503a64237b88ce45d6bc1d5083416c328ba743a64b5b37aec12a0c386f800c5028
d0b7c87ea62a30b7a890ecc005ba196632c2debe8557e0f67c41a72d60111057b9d6b0a0
668bae910dc94d9c53f31efcd6553845e4f9bf3fa21aa78468eb06124d553dc18e14033e
c596c412a9ac878b13c139b1fe1b2bd5944f7a89b9cbdc95b701f91796a756e8433bdac4
5b8d257a33705d4dc69a4301e2e90a79bf60375df86fcfb702860d1e02d3f8e7013b8f27
ec39ff916484c127eaec1c84b19fdbdd84b1f38169ccd94737056672b8b3b7520fa90fa5
de1c5eeba5d3efe2e86b5cf726623f106b4b41b52d1d6de58e1f08d09d3efcb78d2bb032
f480ed640a6d9c7b03cb65f7fa2dd7c599eb8bd01fce3d6ff2aac293f652c15fb6b6456d
515ee4f6c3450bcb41616c1850c398abaec7ed94a46d0fface469303391fe3c6afa0016f
6120a1192acb0c35b3956175e9cf23483698a721614a77ce0fcace112286512df5d2feac
cea5b69aab18b9eb7b4f1cec1216c1892ad1e0671a31ac2cc0d506693b82a483ae8ef490
b78412fd719ddf1a052f8a451eba9866ce3d0d9929453b4732731d620c85aabc661d1487
01e85851994688955a8c9fb7b98326cd4f58df197d7422f0e1e50f6f7df2a8244aafc043
1d0cb6dc51018a1d5de4fa30e78690ef803443a566e901d94bbe758b1a4695a03f4967e5
44a29a152ef445893ec61f5e78e08b0eee19e643e27f11916ea4fba15532aaa70e2a87fc
df69cff13d888dc66dd76b84a16f91fea1b6163a29ae755dd5acde7c7ce95216a6023688
9ee74a17d030a827d2b24e23857234ff1ddb01733b03ab415fea02a0bf9db0fba1298df6
db260f9c6ad5b54386f46408e08b7d5caee5d2a9b7f00bd96ebee9dc7a398dc8c8440c1e
3e49aa00987cfe98af8425e76c0e3cfcb3e66402099f6a4f0aa1fa0bbae77c2bbe781924
8b4e252849b6d36fe63d42fb7e414998eec0b21fbb9f588baf02191a0d4b642b6821a256
ac596b8c3500c734701b0b05babe2f0fb6c80083f9f83b1e93919d304801425c62a759e2
a7b9db1ce1116588b005f4785ac57919847d4c3b01754be849ccec563841c6abd4266dec
98c0f0c79ab6c091fe98b4859eb7dc45a7708362e6bdf32138e3a06e12f162844f0346e1
9ac55b5a30b3f7d0595380fce4ed3f4c69511b8f78de6c4a9c4d0728e62af7288d080744
a0d72415017628d41c377fbe47710e0c4aa2717420ee8781265705c715a621a4f0edf6e6
cd9cf5d9c1042944aac1d8335362457d24ccd81f67e6583404916d43681e3b955b203ac7
a5dfea957544bbeac12d843e044de9fface75bc197eef5563f78221029c9921b15343abf
b2fab0af029b101c337bcc2edaf95dcb544950f9b2786696cea4a85973ace85233adc98c
9487faf47085a683ae734160a39ce5ef53c5319e903ed1b1ffa9fa40e6041dcc829d09b5
dc570121e276bd4c1e4cb7636b5a05c14301630f5fb9a57acd4d573a68272130d783fdeb
54579e8eed259753c4e539452da2dd044cff98b2c25f2f8b113f5bf8f9d4525ee634a525
b6f7db290d88974efcf49010daff3b00b36f898a890206216563a674ab6a585dfb6c5c4b
b45167d960a1037148e3018fbf154a2da2711637f69a76828929c68202a1f497d6960d2e
da0f60063c7fbe244f0f608d6e4c34982021d8b9b0e7b4b289b579fc89984bbab08f044f
09a9880e4f7bddffd6e46b528fa6f537591d421ab57c1c001c58e638e188bb965d17beb6
91b1d6d8fa9e41875b84cfd8ea99f38e1c24308ff6ead2547f0da9c5e58e2ea9f744f4be
aff3e886e26550bce1c8e75025e8b95c6307b6bc5e2cdd1778af1b7306c329e873dfef03
159c0015fa6c9493e7221cc8969c4ca161bfa132c5f84627aa0f908288b833b5d9e0dd5f
a89b1b4eaa1ba22049b76e0c73ef3bf5fe74428e647eb1f9b539c283fcb8d4a211e38559
faebe3753bd866de35204dfc85b455462c7325fa6abf0982818dfb60700b6fe7d8a5b366
be9fa8877c199e0551b8e12a4064e4c979af8c10cc4c2ba74dfe516fdafb583b3eab8162
4405b150a326ff2ccef3ccb9cb8a073a91da11253ee266cc7c543be5e0aa9bbf097d718b
7566fbfa18c5b68fa3f33b37b671a4a70e3cc9ae0aaa04672e8bed6480c52f1ce4ba7550
71a54fd3485836e70d9e177019e47ce0ec70166d88402839637cc5392632c852dc02a530
ce3a7fa9a78902f22c512c20cbbb9d6ce00114c0e997b73a67d13e54ca54fd7201e14594
0affde0928c61697e41bc213de0f167f564f5ea9a1c6dbd0fa621d711e0ba0b5527efa00
77437c3842a558d07144c47398e27b0d895db960ef022c6c87bfc3a2143ac319ec7c4929
7af61f1154bb61c272cb81c0608660ad802281a71d24510cbabe8c7285a572b3443c4cc1
82f74a5b2891905c21ae163caf32abd6c8a35b1f4cb9de06f6f374113deec2d0ffeae64c
58b331c25d747039f7ea69e2957ea4297caf0ba7d1d7d30434418d2f9c8fc51d1c6d9e7c
340f8f2a6462bf7c3b3ad67f703c370e9f4d29dcd832babe6bf88d205c7a48c870017775
ceebd9bc2c524af26b2cb0ed071af3bf120e97dae65e3ce784d027a945b64251c84efe0e
20aebd00c4f0c9701b5ebac73594ac09908b1c9cb36becedca05183de4d4ef6e17f2b2bc
246d9611e27823c19425a5970bcff95bd7c4728af65b5c9b28a9e095b79277d8ef35c83f
8daf15506b612c4dbc40a3f06d269da4f0d10c37e64b5ca54cb5a864b091ad4f67cb56d9
061b277dc751f378c17ad39ebf937859ebe4fb4aea1428e5d4a74e475e24a54e7136f285
1d76a94035e78b6734c73f6a25988fab1e29a16705bc004e353a0e1a2378dd808809571b
dbac38e6c46b361c4603bc599deeca52f31e2a558250146cf76cd6579439cbe35dda389f
1ee1e59fad5ac62da655f0247e4891bfbbf23cb80dc6a921713b451e9e66170daf7a9730
cf8354e47a61e939b0a962cffb5961b08523705f9e9b24d390371d71f0bc3e3b286b010c
dd08e6e43ea1a4f013d70016d275ed52eef674f949bd2a1fe85651c402036b1bb4f113ce
6d0ffb5eccddbc8aa380f6ef5a0bf92425e5a8ddeac0acf06d0e14cbb79682d36b1bcbde
184589e923076cbd88fb37fb18f0a6f24f88f0724422130a521afde8005a5cfa670c43c7
7e468994a2dc355c26b4e76a3807682488b5c90ea83f45122fe93dbbd1bd7980247c8da3
d6c07d788233db9ef3fd0e72da90188a7233445806a65b030d9226c12e59053c377c5f56
6bd1532145f2e2d805c16f70c6eb4b7d12a9c1b94b1fbcf897d8db3a9c8adda484cf7064
f93a20ef191df69570f9d483367cbae7f19075f86909bb532510d9b1ce71fd6c4cc885f5
c8d90901a659cc753f801cbcdfaee0792749f93b29ab61d20bb44424a077385b6ce0824f
a88a1a0ca28628440fc3e2bbed1ac02c16734b35eb8fbbc9e2b1c20bafa736184a0d6863
5becef64eb4a146e631c829eb065601f34589b67db3a6605ba4c9f28fb8e9203fe1934eb
abc09e92f93bf8700e8f8c8ee5f3c926b8aa152fb930363eb24e906f518d28bd46186530
f9c649fdad810ee8698528b69aa0a567887d509849f008845240aa6b059b66b3cfeebdc8
6ac186d56c409d53b7a51c02ee67f8a86fb1db3444348cf5981f6efe8ee61eaaea1c8b40
8f05b5edda57baec6134c490dd47598878c547d1073a00f139d212a682a4eb0d63534289
24a7365d5d06c1282d1f2219987d8fbe90a6c9b43a4a2ea49fcdc1d4e4937bbf17db1068
3d9c410f9df8613b34be0d1ad52aaed46475bc11f72a7c1120bff059aa83575b5d97377c
681892d644f6f1828229244dc51bcd9b9867496a4bbb5edb9605d7c53eb7161b9b2c6295
42d15a03548b930aaed70c7db47467ee397abce900970b0a74432ccd320883ed941c447d
0b7b08fa7f664f74edc8ad6baa36ebcdebde73284ab4d7c19178671cf5d8890194efa944
351e4e77a120e3c41a414bb5d4e9ee93df69e65470ae76452c5c0d2377ef1ef50c542d2c
04c85873a0c5d1413c541f1bb2ccbda4f7b41f92d535f6749554529e766b9517e3c3d34d
8632e28004fb8322a69b1e0b61c86ae7759267c42bea9cf6b525581b9225de0c8bd8758d
5b6efc3706c68895132488d0d3938be8bbd8ccce599a6cdff70fcf9159ab46436bd85d9b
ca0a1f118fd710e7fc5efb93f84559ee2f5ab790390a85d7bb448172f879a646c5ce65a7
39978ddd2eeca3e66ea8cc0cfa2b4b3b5621636b558bae195cd529ca2e73d2196f06da7c
45123cd628f87e6997eb23979b551cb8f41f058c99cfa96c436ed709fa70da564f3896d6
6d8b9a9c4fae80b3651ac12edb50ddde16104273ec10a205b8ba2a7c821b30852949b8ed
531c88ad233b6bee26304901ea4aefb897b14157d74a76d9cc889fd429dd58630d80a5ec
a423173f646601b507b91f4b2e484adac97097f027db58d34ba9a239e1e5be0c3d7f6ad1
1de3b2e11f081a71af969207ef40ce2c100a2310a739aac0c0bfa5c8232fd20b263ac3d6
e66e253ec86f683f04c1bfc01847017843e0dd93f1180b7b4316129d33fddcb45ec94b4a
a7fbd5d04675665dd22446278b95c15d5174d1114236f1c7f521e6385d9f76bf0ee5df1f
03d9647b3d7c1517222c043d244f1a6c9265427e393738267f163cd9bd145e1a04f75547
20d2d9257619b511b0c7bd6ba4088c3a125a4217f918364855d06ebbcb6f14740fee73c5
7bd262bb558a82b0fc124a9f7752334aaa6538134ae36da372103d26e8f7c3e88e643960
c01c05516a6c6d49e0f214087579a8075c715510a9acc08d0b9f7c3989058aa12114bd8f
278a9e2035b3c6ef16741ea26d50c05d50489d6fff8870300dd374859d873d70578c8d63
52c8ab2f700e4286330c3967b9f516ee94871d190d069bc102236a33e095b5ebd52bce97
2bd0312aa928a550ca1a48fa04c819a4287fbc1e524166063dcda9ab4aa889cf6afc0878
d231b13c83499761dd8418ca2dea6395eb933dba0a31c15673e7ab16326bc745a9ebcebf
19b734e1bbc7e1b82e9a0e61756bc2bcf4e253ae3614da3076354806b42cd53429d87275
dbaa32d399420101b28e901617d527551098c9ca36366c74792fd7e94d898fab8e97510f
cd48decf2108da87402f31321288a815213c6f84e55871646d515384838b9ede84821947
09fe4e81062013bccbc488ec2a34e4b03617bfe990a86468a68fbc339ebd9221d4b1eb93
bc25763bc404c91f5bda5abda4db4e181dd2c4def55aaa7343d79f8b121ea08bbd9fa845
70b785c0c6f285f9bd5006c9ce4f2db6344f21a11bd5c52ef2f44f83606c0f15827c2a0c
0d993f7f22f032662a665e44b6e8e8fc8d7d63e54e3753a4d9da568f5316ffec8cb5317a
04191b48deb5e991ee478a2e372b482019c984d3c91a2638d6e87b50055864d4630a01e8
b6e01d13ceb0711cc4af4d28f4f47605d86fd47b87b64b5fd17d9990a2ca26849ec25f28
2c6a0e08cd928257935ac1a4c2b2c6ff853ffc135586f6cb756b220f31e61da2ced270be
78d081382f04919f50c0a6e90c862acca4f886925b149b1a51eab6c41dd68e055086fead
679ac2b92155ff6204bf9502dcbe4a45e840b99844156aeed12a8e7d2a8d152bb59ee7f3
4172c51ec2f6c019bc0af398a143bb6999e8878118e328b399a977a68634248e65da5032
c7ce954b2c108311d14689fff666325d55160e311043861c51772735159b46e6beab6676
f1ffe1f32a9bda1c3c3ff7eb95a01ec22a8a1c4edc850c0dd8078cf4433eff0486a8df00
7ec5552c8f7aa4cdd8d84c4b848029e2bfaa6cb62dea4c4cf935bfd9bb7461299e9b9bcd
99f26346279ea3202d15344b687bab4b492ce90e7d36c6172b09a9f8baf5ce7105489378
1ffc100228eaa5b1fd0737bbfdcf4ab258c2c5697e806cd00e35652c0ac95a209eb70f12
fc583263eb4119ab522b141cd8b4b0a64e105198b7527a0ccb4e172d7203717cfa6f3158
8b397a49ddf4dc78e0ff63dcf3e3ba92ad8347681f0f2a8f61a4d97f9313b77980e4dda6
56fed792491f3e3c52638ac3f1ee4961f1e3375323853a0ac2f4972d1f89902d8ac8b69b
4d19f026ed5ca4c6ef5046b4007f68e44c9d041e7bf33335c9ae1e814d3c1835c879f738
58ed824e94ea4f13310e096613646905f5d9c306dd5aa6bc8ac49421f239441d0f2f29b1
fa380f4decc248dc713e6a3351ea9a24de331229a6c26241d5c82b70dbd84d63524ff2e1
afc40cfadc2fa042bd6108e0b985b4e0b27bb54200ee9bf7c6397009fb647e6703790276
bb6af7073b2270dcf1ff1a2f6aca490198887fb75f9150ff3c151546f68611114d25671e
d5b48b5cee2bc365a11a913eb5347f4a1bb0c13f098f74a678b01612c2caafd38d48159d
d4b88dbeac25b7b3685ad52948d47d77744732234802f727e3b7195a879092d6a7e735c5
4ade7a713d28608e98e3e3e5435c9dd8d8fdaa3a6465d4284d4e1f8eab8b699b9a3c3af6
da347653115cef36758b87b3ebd6b764719ae67b960e285a75e37d7dc2d8182df6e7892f
cd61dd887136bef3264239a4cf021b23c3ce171d746ef95088621ab47f3932a4cab265f3
17fc3ed667a2eb3bdd898242acd4cbb496dbdacb239b565dd6d7717b59095f5c8e1753cd
42eda8805850bf875a8cf40c6d35aca41ed86463f05b7f4fa1f0ff0cfb0a2b050e888c3d
97f9ef3b077d7c97a40c9d251065291adcefe50827755d1342f4a68552586fd1e1a5c411
895eb5c17203405eab1e968763a6d9e684f7e0139003373ed4ea31a74f541fc3fa78aaaa
77bf2ae5979060ccfc5fa453ce3ed22424595ed9d31deeeb4cfcac640e6828150a1d4686
3af97b2ccb65c6225b3cec8c252533fb32a477e2842f98944f2dd6aee73bec93d4a9c085
412da144fb4752a1ad8a8b72c5a21e32bf6bf15184741217b65f481bf88d13851336f3a8
aae53922ed867eb032315b736f86a9614366910c9b64968880f614930134b009406cbc59
eeeddaf85eb4ebd769909d8b9275f3813e1c0939fc26357b9d15eb0f3c37b3a25d3e0659
7f986cfe110bdde106425821305206fad176519933669d87acc2292c55a574ed4d42d689
b011b08088e0d985a39566ba08c518bf1b7689b76acc303bb5fe3dddc92a3fe5ffc781e6
ea588dc3ce6241e518af95f2a42fc7505f417b07ca3cd53b6f7da47d08461c405fc0905f
03b73e51677a8535ba57b27d758fddd6fc11fae4f8f17fe738e622906bbb9e5f407644eb
26d3c453f865ccf5124407337aace0931e3686746097c6b09abd76ffeb60d20207d0493d
94b2905338f950bd9b055b183d01cbd76a6b9b06e0976066ecbf1c2ebd8893f4c4c9cfb2
e57db4203961484fb8204aa6ba822d38682e61a366642cf8633bfa99400995481f93dff9
a2b8375cb927993275d5dd964e462d308306621c8dac38c0be6ec8066339e02b0deed9ad
f4fea75d79f67357b3d250cea97a4dcf590edf82a1f8a8ead5d88cb68c166e4bd4e24b9f
5172fd04637d4a5483e92e8442f2f9ad80a8e59a7024a0006fd08ff2cd455a24e477aadf
fa995b089305323ec13b7bc31465a0051851d080ff41028898361b4da433538dc4c6ac22
32da69cfcdc89ef367ad24c5fe6f45a0d25a9c5c9f4e997c5762b0ac0c1a1d7a0a649479
3bd6
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%!PS-AdobeFont-1.0: C39P36DlTt
%%CreationDate: Wed Jun 29 10:11:35 2016
%%VMusage: 120000 150000
11 dict begin
/FontInfo 15 dict dup begin
/version (001.001) readonly def
/Notice (Copyright 1991-93, Bear Rock Technologies Corp.) readonly def
/FullName (C39P36DlTt) readonly def
/FamilyName (C39P36DlTt) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -143 def
/UnderlineThickness 20 def
/Weight (Normal) readonly def
end readonly def
/FontName /C39P36DlTt def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put } for
dup 32 /space put
dup 33 /exclam put
dup 36 /dollar put
dup 37 /percent put
dup 42 /asterisk put
dup 43 /plus put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 88 /X put
dup 89 /Y put
dup 90 /Z put
dup 95 /underscore put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
dup 160 /nbspace put
dup 177 /plusminus put
dup 181 /mu put
dup 247 /divide put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.0010000 0 0 0.0010000 0 0 ] readonly def
/FontBBox {-90 -233 797 811} readonly def
currentdict end
currentfile eexec
e8dc61728071abd4d5bcd230c4e186dce095a0ca84ffc476adfaa82124268e60d2cc570c
5f52c10ed4a85a71ce8e5bcf26aa13b27d7fce1cc0c72c3b848dd5ffb2d56d06a1920fad
e4ffa3b35336627e9ed1622c1f9652956d4a424488b4c4ffda9936442bbe0ca749700ae9
8a2bf964fad088f0cc64b7c1d76742f25e90e759aca624a321402b1d20863faf5e04b86c
1ae66f450b1586041815e52f13d2ae539f1725d11489898a83a05fe04d6d14bce66e2cb8
55496ec301a382d7067170d15ca8aed105ff1e56f1e60ce67bdb19251ab0e3c32471464c
ed48973edc5963061d78cfffa9f1bfb64cdf04d3d977730bc34079558b51323883e74462
ddcf072b91adb42f530f32c003776657f0c818fc4aaf376825f3cdfefd7d12a3c5a45833
48664a51700f9247541a957e4dc24334db1797dd220141ea4807099912678faabeb758c6
a9b5dee3baf59aa2e7235eec15258805e63b3c4cfff06fc8330a8c57917a17a660c4fd28
bc4fa9ad8b716ff581b8d47aac2d8d7f4bde7655635a4f469fbb01598cd6b29387b881a9
830ff6df9743364b31dd442a63150b8c6780ebc1ed5de29b400b624e0341ab5a112313b8
57cd4785e49397bdcdd45b44cfc9489a2e7ac24abc43d0bc6837513f8b55f7268206f35b
89572a00bcff2e9adee924c1f7d8d043863aded6010f86f262e2ded18874fc3ae7cf106f
f80cbb6cd499297e2d31a69e4ed3af73d761fed5ef1a058799bb127048aa14a99aa0a7ff
95b51f463225d22ff271b2237269d165f035289ace13517ffc05e442d99e9fb37255779c
bb9301bf50d942b54377f21a9fab6beab5186987e9b4380aa1365dabe13488d6fc534c1f
1a4ca4412ea2351582a27b426f4a09c95d71e5bf9b11674c501a36455343e32d9ebec56d
e96f5f38e80796fb2984be638cd5cb82ac10985beaafdf0b8cd54daee6cb7850bf7d30ae
711a41bf31d8b8768980f485194e8ec9abef1e89f5643baaaa8c70a4d60b207696867ba8
8760050646e92dfa1c6c2a85c0316560525dbdec17c65a810f1b8849bac4b6f0cb12e7ac
d239831831a490127d8b8e617695a6ebc17a04abe11622d5bf8c78234b15780332700395
46ec796fbad73c4135180fd6f765e9316e2f0ae7191a81363761e9348986ab975a2565c7
3cd6ce22aa636f3d8775c33f36a5d20a61e7717a7961776fa56e8a629f7174e94d3ad3bf
ed9d2c623ad610d0c555dff5685c51a559196937605d7bd0f4b1d4fea55bb70a95295cf0
977a9305cb29e408b6dd30a286cb84f0909dc34f7781f57f938706cd1142071d321ed805
fa0ee4f33d627c0e6ed90a876d9faad5d3248dd557b8def9e1172757b7d40fbf1622341c
946021b240924e5f442d0e5f16cfc7820342e9e51578e37e72e239ddc9ddf32b324a4d62
0d6dfd28ceb04ebad09dcbd08656fdf64ae2f213a3f41a529cc60a6db4614c4c59bc3bfd
111c8e9fa665098c23074f5c5da4014daa6565da2ea2e953295494cb4bd1b376b5152308
3c24fc8d93b7609332c3d86ac4d0ab8c20ff94930aa63872db16424894bb929b71f90c6d
2ebb727c7905dbb0d28ced209dae6eb4956b1abc42f119e168794e687362fc664fb3a13c
da9b30a5c38a6d2d3358d9f97cbeb00dfb6b1224ee53a31a12bc530ff935f7a9c7374929
57501ed5bf8680956dc166107f95887e032788e95129c326620bd2fc7652926c21e1503a
a56fbfef16caf9865ccafe8e0ce287f4123031b3be8a9486e4f542d249e716bff41175bc
aa258eaa9624e726c4a36ff192a288c9b83eac1d5d979e9ea96d7a58301d25a2482be82e
eea388f1e28868c3869a0704a8276352f294b867241e10cc29573cdf6e9ad1866edc0697
b7da246ae34e44807602204ea98fbde05634c4107d532a449918a7ad063859f58a3205ae
3b77741538f98bcef260db866417a85f8df7811cec80a6af3d62b0e8c0da49ac0dc9d7a6
78345c57961821618893c8d0e483b97916ab7645a83e321616504a0d93306670689fd471
e6b8b11856f1dc151be846c7f189f2e284024b797270df1904a9ebd18a001e93c6e9a95f
28aec9b112ed02cfd0c9f5e2ba7576a6211280304ab9c99fb8edcf2c094736fde6ae4ba2
324f7d4efc737768e10fd91a4a21db3179d152073ae2072dc1cb86fc402ed7612e673e8d
4f395cd98dcd3c2c15e26ccb4850a2eabc684f218a08b97a717a5fe1a6fcfc3d94cada58
a354a7e4dc4a6aa42761395ed88ffeb74cb8405ff28c7bbc7e6f5404465dc05279df43bb
2267529cf04e619f12fc98af0ca6030cb15bf8d08a6772238ee21b7eec2a5edb2eb1a4e8
e5b353be98888f054b98af5cedbe720d1f0873416dedee0802e4eb668d826053a87b3fab
eedc26ff4ccece8db9827719788b6c00a4b0f83dc72e2660ec9bb53dac654b8f3e694dee
13a84a4fdc82063c7a8a6f8831e7569754f0a6b6db507f11163ea52d0293806bc9af717b
eccd606ba7b56bb2cab0acebdf49ab4b61e7b53033b39792b7be03818f208a0d159cdf41
b9622d43c536d9b9481a381b52d3347370ffbad62fc0d7c6c0d71f34df01666dd55b0026
6c7505e9e2fb67573fe9c42467f6ba0b7dbeda42cf24008ce51319bbf0ff56135bbe8d2a
e3a12c247e271c833b543ffa3e8ccbb75192b5098a00e5ab09860eeabe58fdb3e1a337d2
5fa568fa60ccece8fe3b78b6af984b3444d76e1671d431971ec1b39add54aeaa81400519
68edecc08d9a74dba798623cb2c929563e091e9aab9c890fa7f2c89b89ab0f85d16e02b3
41f935a8539d426ec639d13af8b8c9637a6cac7bba4d29ffe5084b3e9f5766787a1092a8
93f2a8034413c61cea6f78e883bb3df93a803a573fad2813b5b382838b2d6793ee2d08cf
11b2655dc1013516ee0135570af1155b053fb3ff6578fb4d488edc79899e69fc20672949
9180bdc7742c6844da026107547dbdbad55d62037a5927bc68f2312ad9a5dd7d823f4c5b
b873a3cb414fe87a722ec0a2ad7762f53d49418e3a35685700afa662751dbe98e9cf640f
eb28ece313f4fa0988657c268796b44dc850b65ec2dfcf0df36025a7b88aed97f615f893
a5c1f4b47f4107a6d402263ec6a822b6d40943b7980abf550e37453c3241a48e0a3c793b
9e3a2d1f6c0ed1629e3301829233da69bb4287740175b148ed76c486fb905d2f45b0e446
2c2ae141192a91a55f4ad8bf3e86d1dbdc9e199cfac89e4cf2c191c8ba7f56fc3391e1cf
0758039f0ca75eb8a45ba8ee19efb6adf39b07370e41f68a779aae4e24a2ac4b511e6526
6d24233fc2e35584c0ecf7b4429e6cf6ff6559b1bd87094f8cbfbd1b31b265a19ae7358f
37c91ad6898385a267476b80ed0b2152535309c7152771afb03db2895b5d8fd053dbcc23
0be92eba6758d9da7a69edb994b442ab46baa3ed7764a2552a30e6590aa77af8c104b9b4
3da1244188f028a905d4e64468e2109cdc9b773e79e87df1119565e80bfb30fdffe58c4a
ef5bc9d829ba10af3949ac4c0ac103fb68db06aa686de08415076154eb7b846c9bdf86ae
d74d212bd983dfc67e5e02d310e201c4152fb1f3bd6e5fb3f6ecef69564bf15976f5507c
ff2863e165d52aa6ea946217ad2b9beac57c18fe9735083640be47a9ebaef1641aab8eb5
74ffa8f954170916948217474974f6cf0514804f453c83a9a2be02281f05315e61650bd8
7e6d6edfb5b0c912ae4efe35808bdf26a8680104ce625d3ae536e2832dfe90148fcdec64
e4d8ff31bb082dceb7e8a56f53773bfd0f2474c98674ec65e42f78b4c19c094202f9eb9b
5cfacbab8d4d150e38bd617ce1cce09de01ac1b2f3ccbe5a023f569144232aa9c85087db
842d1fc58fcf4173b94bf079435ee7838618ed9924d3c38ae55ed531167a2cf067f1ea0f
56ab9f07e8b66b662542e00b3e7f98b887ab550f1db107c7ff46b08edc4aa9c6adc80064
3abf0701cfdb75c744ae47a664c238a69d360e0551a192cf6c4280eb183fc9fed21820b4
905eeb05bd04ff12e9663768289c25741e24d07a9ace4d92f4f512c085483a4b0af95eff
14f44556d3b47f124105f0c0275ffb9257c9cd60fe897c3eb00adcfe10500a738a6255d8
94f566feca0d292ed09e60ef421626b0529ff8ecf51f249d0b34e24f1a4884a2184f6f18
02b863b3a477d7ae660a8672514c7ad0e9608d3e64c8b41e94bc85b319aebcedb82be5c7
f07bca200b1b23f73042286008e6415f848794a54750db51d89d5c6cfb05d02d7925d749
ba9f03d2203989d68728332f1c4090b25e7437fce190b3e4420499390bbf30ecf7d63eb6
6a5975c3c9e676dadfa5e7a431be24f161939e8b5559f1f499da7dca8fbcbfbeed809dc8
2305fbf637eb7a31ca3bc45df52821797590014aeb7ab599a4773a456c66315c48c9b466
a72785ce5443d04cc24c40d2bb60bdb905375715ae0870b4fe8aa75c8725cc7acb7b5b74
4a33561911ee13cd426c024ba9fa3414c64b44c43a968dc3be78f49f8a6a1cb90d7e73b2
a51a0489cea7da8bd4bfd3ac16ccdcd96ce4f2d6aa7c024bef8aabaafe0bbf611d2c50bb
db8af2a088e1b36da4c288eef3bb813457badec311f23f060a8647cd5ef9ed8cc9e3eb62
aaa8f550bc2e9962a9abcb359aa7477eb584e62455653fe4a2218a0f45a65cbb0d525202
a05e53b2fdd0c2dde91331d62054038f75041c8632ed02806d9974054ad6f2f37e6e1b45
a8f1655aa86147071907589478a30ef9e0b7a53f2ea88eaf094b2f95ba4dbd02003c7498
47b9e8e084228cd05fe8386763f478ef2ec163e4aa408bf55e40a43b3243febc190834ca
8029515c0795dbab78bf16248e68923aa5f9845fd78b7a8ae2abf8936e795e25fb20c02f
25e7907584266c7941ac8218ca51649f61dd6fbdf52eb1db96f54f9535a52b6d345b08c2
564b17a0a140bd96115633f36bffe7a8bbda057a75b58852789e6aaf7b35ee290671d08d
348e541b21fbb4a1e66d6689968e0f0772112a141dfefb471670064dadd8b5d0c71022c9
77a952edca43e76da058b1ba898de273f15108233d6314bf5081f217ad2baa6d639ff9f5
dc1073065271102f3e9f9014b2641f90a39b17ede34e4b92f1869fe106f5cca10e8a4177
991aa9635a536f13363abf0d10af082dd32997bbc34829de1001d879e9dd335c9ca2ce23
e9636a05b7ac86d3377a5a4e5a7008e2bfea9968b636c2c040c07f4a3ee2ea3bd15ca6a3
3dffd3cc8d1b14765992fa0bd891ba70745f3feda937c85ff4b1f0473ca2050b6914a1f6
cc97009b68cd056ae06f456ac3fb5c642a3563a398cf1c9ab7631b0381434c1875f5aded
a60ff663399ee05c4b3115a614c8d760e3662e2b46bb2fdac291d5132f57a28807f4abef
562208765871b52e409b8b7120f2f6ab4f7fbf3258edcc2aee17d8efcea6c674d1e4ed44
f4df862396ab9befd30e9c85466ea8c9a99dc816c30e684fdb5e643647271cdb6df76854
6946227d99c807c6576c890145db099e09b7722b013f8f69af82eff311a711385cec9ca9
352f5a8332a9648286fd3801726da2834416d43ab947a5525a63e40b2a2c971b07f6952b
b391e4622bf3a0dbbf06eb9cce977a7f03576c6c6079c5bd8903920a07111be8be682d50
4a717560a54a46b9f7ce6b106787204511042a90a1e8f23f0e6f63b48e1634b6fb7fd855
f4cde772bea380b45809c08d08041861f63046849058a9210938c29fd66f48e5b3f9529b
bf75d9feeac292f259e74a69cdc825c2ea6f8b497f859f04b33db4410e06330b5f88bd4d
19edc2e29f9267dbe9fbb961adec42233fed00975885dd818e6d6c630b5f5534ccc55bc9
c19ff8f4d2cbd55717e14c66e5e74bb618e5bd7114c2ec3f9e4f6234f068b2244bd658e9
54e37507993e6e04e22611cdc54a06a5c147ac0babe48c406b9e5e0627c69b8775a91999
96f9243cceb93808973a9c7bc8b47739a32512550c981f4627b7f1c86cf914835a91cdb8
866a3511647db9cc25d81e184e86b6d966a823149635f1bf60b91a980c7e8ca35470d27e
91d4933bc1691c596ea152fdd41c1cf3b6102d8a90daf47c7cb95293b2ae887594123caf
0e351d28c4fd6020f0cb9472c72a232541f20481d30d025b13bdf96553d258dad8ad884f
ddbac70b461082267e027f05d16d481b3bb99c15c10d85c7161d1654893754dccb06bd60
44635f850ffb3dbd19b5f3690238e2164c3f544cef6b5da01b11199cc3be071988b3ad6d
bc61cc229fe462989ff99f8036157cbbcbc24032dc3f464d673cd0a70908d894bc8a82f3
6e4d0f69c04e2b9a60915a4b23cb48b1eae0336728b15309dbfba0dc339d4232a2317667
e96de25cbe7280594bbe449ed5e2cccd190315f5886e81c871804555a1ed5d7dcae9fb20
1a10db3c6afc0e7733583d269ef7a89a071a60a7660b270a037282e737a1f0c199c99f4d
05589ced1c10ca1c336a3f713ff3fa1775f9b4d276bda19681e2fe72d5f74977678aa805
178e7d37b8c9dbce8d562380f60272c18180cddb123d88c31c9124378a0ea6a3c38a301e
488921886d999d05d9364e8cfd06a39888122a159a39d7ce3e48b88887fa525684785572
20738a5efdfaa775a201c79ce9ee3fe067dd578e40c1d3d3ad650be55e0aeb604c7ad97e
62bcc66b575289b727e2287f0965ce6d40612068f07ad27c53c412595fb6c6a41795d6db
dcc92d6c37922586499c0470fa68e19969294eb8be2268b5a8314705f8a0e7be124b2d3d
67829d243fd15a7f46c4b3430ebe79b88cd70ef15f172be64537040a1cb8b501bf9c8f49
01f2dce2f21c7f77d7e0bd427d6036602403b3ac720d5f72e6e00de1180176a273a4ea25
268bb75929b2fafae75fb43e6c9f8713d0293bd1fb430526acd5f4b03d129d4c0115ef67
a6ee4be2d43ae4e861ed606f98fda100c3b7d5b88b091cf350b09392d0323b1b9a901714
a139cc8b489c6821323728e1b65a1bf4d5db1fa20b3e7eecb63f6e1035ad5b2ca3d1eac1
12f21c8b04b0784969c3523ec4677ecb44036230d6c66bf7e9b39fed99be6f614f0dcbf4
0d7f18c2916ae296a522d15fe8dae3b9cd4bdbb4d4299de85bb89cc7f0cfa72fed2d5227
7d73986b44f13776d978318ca818b36d21a59d3ab2166ec167ce9481d50d1a7438107254
205859b6f395ed6c133a25a3c8089bbbe2f6beddac8ffd03033a4ed116dd0e11094b2030
2da700d0a0828b6e4725e965c38b8ef58bcacfebba5c28c789b84a058569e0c04a862dba
a6809995074378894a94404998c6119e50c1a19ce9bf19eec006400a5df0657e7c91e982
38c7bf2856084f4fa6be4be028bfb2492c02a0348b9f02c30e1cd93513289d1f8c28e801
7b142ce00823e10bea8478a2afefaa9148b6c54030db637ad73df24107b5b7dc4154bafe
c458c3ef2523bd7b8c1b191781cb7e7cab2a9b9cad6459a25168c67f1a86349a8de9fbfb
980f584b0419df7dcec04638d81262f22866907c8c15758f54629248ea2413f070cbbbcb
d66bbcb3136d36dbc9a7d98fedd95c2b5c4f6682d38c5252817beff23db632d103360bc5
5383480324a9d3875586340aeb5650f23324481bd0b25f5366f2ffd52b862815a119ef24
b9109190c06f0ef3509b37ce838b679d3c5cd0cc3b1d2f6d5658271b54b64c2644ea659c
52022b204956d5029a4339fe53d456dcd18979e0608efbcaa2b13222eb814082a5653ecd
bdefa1b53b59c5ef35618a47dace750783669ff2269df805bb618e0fdf25ae0b6afa22cd
cf072a54c85bd3007458c6c590ed5251684e750449e257fffbb75a0c603a3cd661a71311
467cf4ccfb9dfd5e5dc2ee6d668992885e0771749fa65a5c5abb42bd7354ccf6c7eaf6e2
d727bbc2e2dd3a64e2d837e559ad9ecde76afaf50ffb606f774dc8793a037894740a334d
98e44e07cbdf3c33ea7c1985da1dc3bb362ebe6c8d09de513507f904f5f146f061017981
1286de63e85a2a309dcb211fd382152d9731f22ed692b46c760c8c919170190c23184ddc
5cf001db22b2736cfb6ec371495a420fff5d33203ac75a11f10e4b3f99ade22b81f31a00
f7288bcf04e6c3c1593c822269c8b97267e49d5dd5e0c0a20fd31765eba0aa1c0e7e8a2a
4dd136f524b984628b5fdc186acf617eac386154cf833ffa1a682961f164e5f3cfa364b5
29bf10355617a6f599811131713b39c917fe586169b3d731ba027f730e55b8a4d1ef40c8
fc58bcfc615c9bb8c3f51718ae566ff726c8242f195e61a6c0b93f96abbbfabf0187dd1f
4082bc301a8ef8b3aaf01c1a41ff0e689e91d814f840bacda3c4111356e9235e46a541bd
94d39109da4120cf680dda02737e6b166275fa1ccf4a337821794cc51aa82243f9a9b9b7
d44a2edae0d27d52d1a0ef0882d88cc5002af054b9907890b3d83377d6045ec441fb4090
e47fb202cb5bc3d71e5bba5e084bbe4abb603c0829fc25c745443fa261aeb04aa1776f7b
dbb4a5199ec6703251f532aaac44c6cf239ec5c4d8894500bc65a9aa6086a82f78964b41
ac85725a0fdae6633e002b6e6c60241a8aa9549318bfbc7f1e12427ac9553117ead4a5db
32bc496ff7e4d2ecb336c3bfc9732ecfd6aa7a372277827d8a3a0a476d6b54c3c2543218
085bea33dc6e3f1892fddf14f1f68580c669baea817575e444b7d164cbf94bda52823519
f3421fde7361c53994c0a192815657603bf797bcd8503d699bb9575f18b0aa622e309b75
058a276aab73228309e9a853ca6721a41ecc20d3c04ef2468d62ba53b23a6dc9e43ffe81
b2a829a1cd517cea88a8102436a376ea69b633357a980b8b98d49dfbb2dcbdee304432a2
d91e524fdaa793acc25752b11690dc6605c6805dcda9ce8d6cb640ed76d2f921b8a85672
f47a39ab8e644f1395a45b79a398e0e49797a20ef5735e29b15327999fd4381884e672d8
e2dfc75c3ed7d6fd4ff1b1ab10bf4ee053210e0bc8b114641d78d3c8247edaf647004680
1ed669c485e7fc1221a1b39bfe86517489ecaf8e0c0aca3927e80345d955c6ee43503062
d1cc916225e19900c2e1ac010472e45e9263c63c7d4528a1308aaa98ff04cf4eed3eb1ff
28ea5af01710a656d92abb19344bb5ede14487bb43be0e0987ac095e70e5e0af5c40c89f
43634de016087d0748b1380f6a4b7e90f2a1740ce3b64107347f111f055853fd7879107f
89e8a631860f7065b69b39b3d478233defb6c2495bcc8066034781d952cbad9f50c4a55d
39f4ad33975e07057fb3c22a0e61c127e172a0dac239b7cd2018aeef92d9a6a2dcf5b312
2723e2e02f9ac467a949aa2aeb9fe51c496884e73b3258ddc9c671e52c64b88ce9dbd772
da90470548580b920c87b21986c1cd1e5987039c7407f0f0947acf7deca5e94898b3ee92
73156b8c7158d90eb9230a9a391e4c058153136ec27630d85612b7f7d983bab4d73ec0ed
14f4b0dac09701298dba674396352df8921127a067ae1132fdbf327b763d4574ec3d8730
a80b6e0866d6bc2d6e4f7214bc9952fee6712af80031a6ab7de4b7d93a105a4f5075238c
c57e157d783e3afa6cb17cda99bcdad21983e58298819687715ecb3be171742aa58f1d78
18074e042a397b8ae8889dcce750e054e40a659f3923e35a72d74e4573d30fe09f58dc9e
6004a74a878d65f4e89d28cdf3efa613c7650f5c40073163d9e33d135a57a3b07c6702be
a281fbb4008e6124beab8748073b8c55de356498014fbc8ab2e19672ea0528611511c44d
85522823cabb2ad9ba3fa59a5215e5cbdd7ba58a21524236a4a5f5bb1203f9d8819a5601
d1fce7547a475db0bd8a495571c36014530c656fda20436c62f3b639a1f5f046d4e7ba0e
5588d29c7b241fe0068e8cb4e6c8745f1c45e08174ddc0f50994c551511309fd6cd79672
7877e562826f78c90bfde79b5999771a05de2b0c51b4d29578bad938dc87a7ed63379fe1
46bf2fdffa6d74611dc04f559c129fc8f229e9442dad031a468918d0ebb138afd7059bcf
d65521108d077e67edbb7d984f00447007ef3571f95fc4cd68cc538b2d4774f83c80fdcf
b24141f92d84010adeecd4e317180f07a08dc6839a2b0e2fb9bef86aa4616cc3884b2d09
bb04908e80118136ae140b009fbccdca045992c73d49a11f5e7f6209d17c910846780985
393bf829a3a681cb0e7906f82058130d0af0cf9ce0507228219de56edb8969034d1533d1
80fd5b35580ba31c9e42ca042b3ef5ae3ab561b326a180811d92dd9e0ed73b45eba7c8c6
1e5dab327750504f1c34e3e3586f7ed46cb58affa98b8f67d379b8666a49ca8bbc51209b
30fcede718bd50e88aa5ee939302648172f18fdaad72588792da784f18c1e8dba55e3cee
ded01c2130c40a735d2947b2e282d5d51d1e45762389bc5b61b6be7dfdee749f7a858012
dea8d68e478aa948a20e5507fa08294e01fe80fcaabb297dbb4b52d448efcae997377d0d
561bf297010dbd497032719851f0e70d07acb3a43997fc2b405b4efe44f92a789e0feaec
0816755ccea3ef78bf57977a54c910089c9062990b1e65e2745b432ec2b732f8e2cdb123
89ceb725082e27a2a04ee4789fc0a36dfd191712e06ab56bbf871a552b384189a2c8434b
aa3ebffd804229e7211143207595123314fdd7bfdaaa703706259f7f960efb1c37057c9f
8c184f4a4cdfd50b4ddc2ada343e9997d353b60c909ef5717e6bce67ab109d7f5ba0e480
4eba996a4b236ae5146a2d9e44bd766c04cc696b5573a2b7e8ebfb7040c3558b1886363c
86b36be79e48ff57f419cf80d75e33fda48c46f95af64812afdc101b1e7093ea8d68358f
8742dcf900356ba13bdf3ebdd9ecd1adc3b362007a1919a0da1a83deb5521b5738f8586e
d75863c0cb6b717f8adf0be36b47a1d3f443bb1eea560b01761e1b37c11e8a81a94cbf65
4f5632aef04954fd87cc216957d80a0757c6f9634304886d075268f416129a9e745344c6
08f59c69bb7949298c598b528fc2b5cb25c741cf256a7cec933f35b4df492e8ae2f3c345
f8860d16ee8b72c6e9b9d26c90acbc66836069a59d645b9d03ed1f6da7a312769c0bb37e
0bf7d5a3662e87653399d81e56ef28a4f1aacc7ca04b2550821858660337049479d7f994
734a02f9895a3066f1113958466b1e62ba6562d028f4975dce5bd7965053a4ddb32c9140
374419a0b910c3998bcc04a4b66c21eb220100eab0ffbc67c8082a3e5c0b6e95d179a70f
0d76ee8e6cd001ebe6e6074b921a510fb57e3aa54626d0ab67f7f8f1b3a821f7c974ce1a
7c97543818b81a216fbf0bee731b62bbb86e2af86cba5403d2cfda14fb664717c36687a5
76c9b67c9b4ce25cb18c5155bff3b327b2109ea5506964c2c45bde109affc854c8547d06
b927e5f434a78aa115c571af67bf324d1f9ea2444897c3e072cb96597a9f9ed0e6204b0b
b8c6fff4a6a26b3bb15391cb928d370809b8d054cf39990335c705558299731d19b44f9b
1683051e4aadbba6a986be2a9d00885ead95ed0c39c1d73e75bb78d6746db1d6e0076623
b496033177fdae5c83d67c73a45f76e4dce2f092da5f3d4b37dad2bdba2603ba70333f7b
db6572e81a809cf981cb12559541c3804a848ee5e80075eea1255d9add88dcf49d5db6f3
880c09187c9795ff4b640367b39035af438611633e76fd95a8e1c1a39f7df64709be8d4f
53ab5c8465b12425f7affa35640a58063f1039138bbc4b12fb37f27272e9e42a3d31d306
7f977fa2ee62d769cee0c154dfb93ca562b7d5179f8a12cbf776f2d93f65a0fbd32f03b7
5f85b6477833e1ae1b55c8a5c4e2303680adfa32de54c31454b7007a46d8d83fb31f1e17
5fe8124437f99aff1972c35c4c12639a8c89ab4667588e3121f673b8c33982ca557fdc84
61af80f3bc85c0800010bb7f878d3892fe1cb5ef586b934c54ea86abd38bb55d0b249ba2
99687d4c25a52e4183c224a1c0cb1b1088c45fa1bd1663f86bcd0250484aeb65f4ae9fd8
62bb0e6363700d94b6dd1adfcd2ec8e54ad52484239e7e557827d2ad53e33b1ae22aec15
fdfefc3beefbff0b7cf7e8bce756c184a44c5d222f1e7b05c547ad18dd284f03828c3aab
563e4f53a69922d797c67d712bc6a812eccbaf404d0111916e4fdf810d4c0ca2b828bee1
f49d3367130e3a4389b262e9ae4d8629f52ded7b720e1bdd8fcf83fbdd19ab6e5931a8ed
3a2d25e7f8291fcede1403f54bb0791c2158b06a02df8c7f10ca869e7584e136ab277190
3f5164b31cd110c5eb1576b8303fb192662cec2052302cf919f2d8fb1bd7e579a052853e
a4a146a6d1b0c1b52d0dc64b63258c47aae6a02a89d94a67f00f64b269b871dc31ea1a21
0dfd94172531c6c7bd488fb890b128320cf45538c6225402fe48ead997e95062e37f140d
e9d024e8db4e051d1b2310b50d8a822090f4a677aa7de05e50d1d8c56fa637782d9c349f
c31daa4700192be682b37ab6038831251215239bf9c2fb1244da0ebba962fd288ff94003
dc447ef9eec09489d079d7c23ebd4382a37129b17b4cccd3374a9040ce8522c3118b2970
03fb9d670876bc7a2f1e1d2c9f0ce62af6fff8959c11c9f6aa177cba3c97a59afd038066
0ddcc72efabfb2a0d21c2564e619f10a2c8563583760d3e1bdce8b1a6736c9424323688a
e5323a87e4321f035773c3997090d5ed3675975201acc88a785a17914f599a5e290e0d57
844869e2706aa67b4c74abd9788abc9e3aef2e1128d21046e842ca198d742422be31cd2e
ee405aa509636df23532c78e49105a7b7c2c3e60f83a740f8909ef591cf29711d0a9d642
db5e3f1a39a67781ddbc9a23cb0e739d06618151edeaec10986082941ecb38878301f78c
569b79c8671121380711dba598c2e193e22923c8a9936d242feb7ce6e1ee45019b976e86
b9ddb6fdaa9a3b2c9775e417d85a497e2e6d0588b1245a8adec84cfb835745ddd3c0037e
d597950d10367fdb870dc185cd688b5361e57a38fa9f3aa9825192a987ddd46826d2e816
77038ce302977b9648fa5e7e967cf66910ebd5d138f3bad42a06ad0efa7dfec838596dbd
5f54f77fc77b5dc8fd7d0061c16dffabe1ae50938d5a8ecc001b3bf717150f28618f286c
c7ad96302d19f4dcf245bfe85636a23d6af349c2b15194e94724532be0ae71ddb2d0d78c
12a3824499f238e2dd343a63e967bf1c87c4a4b3e0c6c07b6125e5bf372ba2f2941e11a9
398489ee5596f122b771f7e6314c0ec44ad4354b6f8957fda31112b6c059fc171a071447
fdf8fc402f47deee20d94c9d7f759ceb1e7d0142495f2c0433d935f9e3eaf6ce996bab11
8504d487c94584c7a8710899c4f99019dcae89efd065bf5af33b52c0ef8e607794791122
c246525625a09170b2e0907e41fa56ba425ce115904e5ad86f3e1d0c9fea44c891218d13
c494084432e17b8c981ac1b09f110755f8e829285ff3c4d6e294f7d214e34d1f93f8c226
943c0101182affae98f951081937b109fb029d78a3ee8334a1c38eb4c9b22c953b01117a
9040fefe33a855ccf2c53ba9c8078256c97bbcd8a0c6e2c7cb31a612a2121e742ba2cc5a
7e04292a23fb8bd336f7adbda679a2d518bb4ec7ac7fb174ca8e7dcce146454864506bfe
2f1f695042e7be90d059c10b59a12209e25ca44ba2f6cd8839d0f9f2d2ac959508dd6d9d
3d3308bf6be213acae8bda5bdbc272496c4228a8ea4106c297cd4ab70509864a77c8f17d
88328796e206c59b0ccaf816538bbabed45ca2d195dd33b43854164d30f786604f0dda6c
5fc46233facbb79d9ceec59451ce2d13608559ef2706a959b618dd53ce3307ca8e25ffa0
9c7dd5b86884d3cbfee6fbba3eb0898e4530eb544762e24cbeccd3e448b2db0eb0f44f3c
bda9e2f90a6c3d1c5c1415d5258929f20fa0e7defbfbafc96e152f1a5e4aa575fcd6b2c6
917ee2a9025357697c2f3fab3db2925eb068a63e0dae950d37d1d784a37cf0d2dc3b4f78
33be3828e3bf4047ea5f3a2f174b2224f8c5e5d1d3388c3c52b931972324c3326ad2f35e
fec6c59fd50822dfe9f440aa098ed89527120eb5a39a337c5e79376feca1ed97c1bb7aac
1cc6d6dd94952cd15f1e945b91ccc9e0fba8ecc3c2f723f48cda5a8df56179493be13c1d
c8204509d90a9815b742788fc6510ae2776acd09b168cfdefbdb87d4c4bb72e92b68801e
a80ee3edb50bcfaa2f9f655d49a2910dc2611ffe677be9c4a45316c9b59d37284c9e3d3d
f2f1e04b603e3e256d25ecce2c3805340661679bc6d4e640eb7911de76aae5dec5e2f549
254dd1d47191f30072d1eb78eda8d38feed056741695232a42dc01d26f8462e1b0f85079
e6afd7b90f1845121625dd5e4d5bd954c586a5432883bed848326bd5006ec951f11208c8
03caacb6e919e8b1a035823b1249ef00f4bdac3f093a5bf51aa8cd4c6698031ba491108d
2264c603992c5f24b56aaf2f334b306a98470c5743ebd105168de54303815d73ccfb8ceb
23a3ea15ad783433c41f6d23e0a35f99a4404e0b9714d540e5a2e43b3afa3d4af4032b76
d1e34841f400d6834e3f14065909421eca404181d53baae761e25a99aa77f339e3b3d017
0c6ec94851c623912e0a9f73c97cdfc2807b0d3fc385e8bc420c37f024f7714413c0f61a
c94453b90893b8289d86ffe550b4bc445fa1b7b734a02a73951a51935b36ca9ce3e129a1
a35482360b88b7aa76f58af8dc5be18ecbe1f42e42e7c282dd0aa7fcae62e27bde8e233d
c6911d2f867007daa643251c585622bb385c98219c31dbd1123736061e908ba4316cb306
0f2d88ef7c7a4ef744a8f973af16974863d8ebdaaf829da30d382fa182e858a0cd89c1d6
02d5ead37c4af2f011127572f60b8890a894263b2189479c2e0fd3d1ceaf1db987bdf3c1
ff8f52009b31f876870cb5f6ce29c97b243547f42f02f76cd7835c7c253b1ca23aa59fb3
3a21278029efadc64ba4f1c61835fef7ba3d5e4f03f0ded040f985d8b25ae0d1e9ea85fc
8d9cfb63e62d3a3743f1590e9292abd57f0fc6a0249565f647ac5943b69e97e57f5f3828
826acbab277ba7f490ba17c262344d12e133797f1af125985058c379a8f5d1682dd83a3b
3a4e638ca88e4c6b102f3fa12ebbf17041d38753c2b7f34e9e6ff03a13600887b206f795
efef18feb155fff0efe081079a435b2d65dc6c6769e85c8ccc4615ca53d999e95316ce8e
984cd2b976f313cc3bc94f30c9e5178e6d04577b77ceedb001ba6225a201bd7fff3186e3
919e170b0d03a98e8ccc35e7debab4ad652d8d45ba67438d5a48729bd164162322a2c622
db3292d2235482a5e29fda503b911a5460cfa002e9b31d485c50d91a7a3449fcf84a8f1d
b9d61d333aa37d01d6e75829930de42ce050af2a7e21c54ea5104b59b013ef180e33c8d4
6cd401f017959b46b41b6674d8bf2e785e694cb1e82cb348e7445f7ef2eabd36127c6d36
b3c77f7d32273843bdb489c017bb28cee31d29b093050beb0c68a9c27962ca9dd6b25fa0
75efcac5ef09b7cb3ca4df5db2c1020a00cdbfad3bd00ebb6ccaa18382fa0281af7f8482
66326b75f0bd4d888209d6236ee80ac755f3021f15fd4cec964cf65f4c53a414fe59a8e6
ad7f291d214fbd6f5c5be9b592158c59db81965516dc7218b4e1fc855aabb05896636ce5
69a5cb3e7db9be8618430c819a3fc23a93a60ea86f78847d66267c99822a0ef0a495db29
f660a98f5a030d65755a4c3c3332e5b7136466750c07de63fe550d9d6df3804d48bac44b
d5a027f45ccd317130fd997844cf4b604e43e3947d01ef0a07a21af92939febaa3899b37
7a11003c5971b03cee03e8d0553fcbd704d42f224ce163a1b0a57786fc0a6c2148029e01
5ec3d997eb54c9572947c4b8309e48382a8eca0fda8f2c610fa5d13e9ee4d4a5b9bd292f
e50ac902704230f5ac0eb000cb9a2071ee2a170799e66507dbf1c3d56602f010a6248334
473f4ab5f26cabbf32be46d955627b46b27062e17bdde2f514a97a9929a7cec1995381de
fdfa044f9279f8d0504cc2c0623ba14b069708c7af488cf455224d0bc73a4dfaa7df56d6
b045a2619dd20a073f0c8679c4a75eb04a11bcb0590946b048659b30cf63845bfb2877b9
0d39d89eae910cb67d1a20c4c767a00d1456f4f629109d8c310bf0ec8452fff4d88e360c
1ab9d6b63a1cd905a5d46b6d6cd4dc6b2a4ff2e232135e214cad613ed358b6d78d9e32f6
9bd8d050e44f2c73e18f3d5a89f2be28769e10d41d34057987b4037a5c8a42f97cb8836d
3c454ab3a93e7043ea1ba73c2d5cf1685fe57cd56f297c82af234ab937523893f6edfb01
a8f278808c99525eb1da6e41b51bf583d8b825e8723ee28ad93f5c1117c5046c5f127a5a
6ad6c15c5311ce8856fc1f6d4b11c886bf4fc46bb9b1cd492466112df6d7501a6aa4acda
d2de57e679e398097d0323a2eefedb153d8b853dbf72b051475f73353cd6263f4683a01f
96a8bac0a843bf11053b47c7187fb03bee11347e1559db1654839e134545bd16fb2e0277
20993424f24aebc1c9246b716a1640d80304f985bbf4bc91a9eede985eb4550b58dd5753
431334c0f3927289ca23e188656bf8aefcab2d8abb62190f305b65db25044c7f7bb2204c
6f3f869f2bc5ad9b08b13be4d84a3992a775d0f07e1f644905e2cbdea35ec88400d7c3dc
627ce7aa0bd1e30091a71c0027b616475f30e36a031fc7250f3c0317072cc1fd669a48f4
3c6e5f3629085f03496e52d66a11f11c69efe3f8c28ef2fc0418d94de1698a821b8ea0ea
aa8bc74488717b57df7875d6a3fe8804cc2ba036acae0fd9139ad2a79b408e9371245904
5ab87b5bcebe622f8ffc73c060f55b6d559e90192bfac5114ae6fea23eeac2a02c70122a
418fb39bdf829791205af0552d9a0f1c6beff91c681bec8df3e41e44bec2f0c420d561f9
d7afde5ac22185263a7cb2e2024d38debf9026dafcee1990088d98d426c06f92a09474a2
338fad0b3ff0b7a1bcab400d59e62a70139c9dadb52b523e62362f4fd86a08c0ebcc34d1
63f56ad594dd9839f174d1225a5fac7cb776551820e1159b5a19e0e17af1695df5b59da3
870fe04cf5659889c7f5745532b7757bd0bd7ed59b4d1ce8c726907a4a137c35a5d5c6a4
0d2d4503333da8eeabdde5897fd24ffde5a16889c3928ceedb3d7a58d2
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%!PS-AdobeFont-1.0: Arial-BoldMT 
%%CreationDate: Mon Oct 24 07:04:17 2016
%%VMusage: 120000 150000
11 dict begin
/FontInfo 15 dict dup begin
/version (001.001) readonly def
/Notice (© 2006 The Monotype Corporation. All Rights Reserved.) readonly def
/FullName (Arial Bold) readonly def
/FamilyName (Arial) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -324 def
/UnderlineThickness 215 def
/Weight (Bold) readonly def
end readonly def
/FontName /Arial-BoldMT def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put } for
dup 32 /space put
dup 33 /exclam put
dup 34 /quotedbl put
dup 35 /numbersign put
dup 36 /dollar put
dup 37 /percent put
dup 38 /ampersand put
dup 39 /quotesingle put
dup 40 /parenleft put
dup 41 /parenright put
dup 42 /asterisk put
dup 43 /plus put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 59 /semicolon put
dup 60 /less put
dup 61 /equal put
dup 62 /greater put
dup 63 /question put
dup 64 /at put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 88 /X put
dup 89 /Y put
dup 90 /Z put
dup 91 /bracketleft put
dup 92 /backslash put
dup 93 /bracketright put
dup 94 /asciicircum put
dup 95 /underscore put
dup 96 /grave put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
dup 123 /braceleft put
dup 124 /bar put
dup 125 /braceright put
dup 126 /asciitilde put
dup 128 /Euro put
dup 130 /quotesinglbase put
dup 131 /florin put
dup 132 /quotedblbase put
dup 133 /ellipsis put
dup 134 /dagger put
dup 135 /daggerdbl put
dup 136 /circumflex put
dup 137 /perthousand put
dup 138 /Scaron put
dup 139 /guilsinglleft put
dup 140 /OE put
dup 142 /Zcaron put
dup 145 /quoteleft put
dup 146 /quoteright put
dup 147 /quotedblleft put
dup 148 /quotedblright put
dup 149 /bullet put
dup 150 /endash put
dup 151 /emdash put
dup 152 /tilde put
dup 153 /trademark put
dup 154 /scaron put
dup 155 /guilsinglright put
dup 156 /oe put
dup 158 /zcaron put
dup 159 /Ydieresis put
dup 160 /space put
dup 161 /exclamdown put
dup 162 /cent put
dup 163 /sterling put
dup 164 /currency put
dup 165 /yen put
dup 166 /brokenbar put
dup 167 /section put
dup 168 /dieresis put
dup 169 /copyright put
dup 170 /ordfeminine put
dup 171 /guillemotleft put
dup 172 /logicalnot put
dup 173 /hyphen put
dup 174 /registered put
dup 175 /overscore.001 put
dup 176 /degree put
dup 177 /plusminus put
dup 178 /twosuperior put
dup 179 /threesuperior put
dup 180 /acute put
dup 181 /mu1 put
dup 182 /paragraph put
dup 183 /middot put
dup 184 /cedilla put
dup 185 /onesuperior put
dup 186 /ordmasculine put
dup 187 /guillemotright put
dup 188 /onequarter put
dup 189 /onehalf put
dup 190 /threequarters put
dup 191 /questiondown put
dup 192 /Agrave put
dup 193 /Aacute put
dup 194 /Acircumflex put
dup 195 /Atilde put
dup 196 /Adieresis put
dup 197 /Aring put
dup 198 /AE put
dup 199 /Ccedilla put
dup 200 /Egrave put
dup 201 /Eacute put
dup 202 /Ecircumflex put
dup 203 /Edieresis put
dup 204 /Igrave put
dup 205 /Iacute put
dup 206 /Icircumflex put
dup 207 /Idieresis put
dup 208 /Eth put
dup 209 /Ntilde put
dup 210 /Ograve put
dup 211 /Oacute put
dup 212 /Ocircumflex put
dup 213 /Otilde put
dup 214 /Odieresis put
dup 215 /multiply put
dup 216 /Oslash put
dup 217 /Ugrave put
dup 218 /Uacute put
dup 219 /Ucircumflex put
dup 220 /Udieresis put
dup 221 /Yacute put
dup 222 /Thorn put
dup 223 /germandbls put
dup 224 /agrave put
dup 225 /aacute put
dup 226 /acircumflex put
dup 227 /atilde put
dup 228 /adieresis put
dup 229 /aring put
dup 230 /ae put
dup 231 /ccedilla put
dup 232 /egrave put
dup 233 /eacute put
dup 234 /ecircumflex put
dup 235 /edieresis put
dup 236 /igrave put
dup 237 /iacute put
dup 238 /icircumflex put
dup 239 /idieresis put
dup 240 /eth put
dup 241 /ntilde put
dup 242 /ograve put
dup 243 /oacute put
dup 244 /ocircumflex put
dup 245 /otilde put
dup 246 /odieresis put
dup 247 /divide put
dup 248 /oslash put
dup 249 /ugrave put
dup 250 /uacute put
dup 251 /ucircumflex put
dup 252 /udieresis put
dup 253 /yacute put
dup 254 /thorn put
dup 255 /ydieresis put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.0004883 0 0 0.0004883 0 0 ] readonly def
/FontBBox {-628 -212 2000 905} readonly def
currentdict end
currentfile eexec
e8dc61728071abd4d5bcd230c4e186dce095a0ca84ffc476adfaa82124268e60d2cc570c
5f52c10ed4a85a71ce8e5bcf26aa13b27d7fce1cc0c72c3b848dd5ffb2d56d06a1920fad
e4ffa3b35336627e9ed1622c1f9652956d4a424488b4c4ffda9936442bbe0ca749700ae9
8a2bf964fad088f0cc64b7c1d76742f25e90e759aca624a321402b1d20863faf5e04b86c
1ae66f450b1586041815e52f13d2ae539f1725d11489898a83a05fe04d6d14bce66e2cb8
55496ec301a39f68061e5d3641636028bf2a923edcc456a7640847def4bca41813667729
75946eee88deef86e24f84d82b4fb0b4793eed54360f27a16e96434a063840e3edab3406
5fc51a5768873ceebf57950539005a2a774a74cd465f7a286767401ade80b9a2e5029011
765ccf7014a2251e509984848814450cc0708705a6f39379d5592c048ad837aeacb70d6c
4f2c3213f664e800332becb4e153ebb78402707f3d393f6ca23933790ff4112d7aed3ff2
b001fb6d3119d9555ed0c96787392029949d4aeab658fa83231fc6020c8bd4d5fbfc5a71
5dc9f7325d268e6eee1f58906c03241f5c6387d2833fb8e8c2d8aafc5065ae660162c1c7
1a17a4d6ebeec5e4c67e220b27f4550f056fffcd7ec785917fa1cd92888c756af3610002
4ed80b90cec8447d4e9d1a2e6f94a9b35956defca3cf777eb21db2ae2453f4acd5a42f81
58336eaa229732c9897728e17c4fed64dca1a3f0c35a4af5694922908215b9c7cedeb286
39f352e536b0d7388ced39287d08431c1ead7f6bcce1704565d5f01b709f3abdf487e114
be7d7539a933ed7e2f7643a883b63b32f292852ae9512112c5ee00f5dc5b986da2c46565
05f3a63b029cf9fed5a8cfafb7c9e3d154a4e558d86948873c48cab666c403d4f60b64ab
38b955b7181f1eeb6853252f30fda1299bfbc99443dcb6a71318ae968087f9da7c57b163
efd22ee2b7e590002eefd53467dedd5c573eaadfb18dcf53ba51f9d402f7ddf4c64b962b
5d04a22190ccf706e08fc11a41ee5f11e19ba5615288ec851f654cc2b31c0bcc7556ad8d
0a2d94ec5d8decd62409c996f87b512effa3b5b1c30a465987b983451b5936e10376faf0
88978b9376ae172780b141c33e5d049eb06df8d34924abba1d03eeb3548c1fd63b002da1
f92eec38f4b2bbdab9c5a52ecc7225ea6e61669dbc1589f885e6c76ea6d545bc3b004977
4168bcb2882b0c9b6e55c3d0a03ac28f0a85c7394318cc8473eb1b7ed0e2e713005b6d1d
ea6328b6756bee254ee8f09b0cc663578e125cdc51fefa9c97b211ca08d09d9aa0b165fb
54b567580194574c62ca7b61643bbac054b024988b8a2101a2fc117f230759dd4c1f23b1
5b541ba5438e4fb1ff282a3d8f9eb0619b3164447787451208063ab78461579dad52d373
8a400f566a6dfe3b908fa9ebe065f3b9af95622b230a92e639bc70aa2028c78dff837c7a
d9157e3efcfadc3c5d335b1a7964d11f2e9441a131e589edba6db1eb6822dd726389c0f2
71137c8361a37c647a6dcd5d0b24c72226b1c859e012d8fe62e53519e4b17e388c90bf6c
78201acd77291439792a6242db30ea46fb7b9e6db7983af287b22c9c2561d62ea535b020
7bf2ee5d7825ccc269d90d1015d6b0d339de32632158efac8837ec597e100d7d1c23247e
830bd2987024d593ffff20533fb7e400f71cd248c3257a5a0bb2d6fd5b3a99d12d7512b4
9b25bf5f82849a350fa25f0f5b37d2a22c8b98c2ed6ba2ce430625e50f6bf6e57976bb7f
4ee17ddb26ee5df43d215f269bfc217d2c483bac09d22a61627622e0da55e80bb97c201a
fb935a1cc26d7c6f2c6a6898fb31265c019012e17375a3bab3b53f6f71c02acbe29688c4
1048430f807c4aed17635899c0888699b8314b9879b2100d281f1c9e165a9c4cebf8f644
35bcf1b0c2fc59d9301f021c755a003d63cb183bff000bf58d6b62f05f5f1efcdf91e31a
f31749d03ca81abfea98ad2dfb860d2a57d5dae6951f8f28ee7d888d9a910575c7dc1aa7
2d12d5212358ecb4bdec57829b8168e444af948ee2c6f5886006637e25732174d0a74288
a49c932a05cd39f7500015ed3a66d2348a178c82ca1a5ec400db9970bc791530e82bcb95
35a6d7971824ab0b332314eea06c7c2cc72469eac5330fdf3d4518396c295c6675e063f2
1e3bacd3e357b500056b2b75cf5f675e257898fbe7ce365233ad9d0d90f45c74cdc4eee0
fc0472b443c9d5f344ac5eabfabcd8dfe8a06b3a16e05da527a17d328876c78383e11d47
66d4ffebbda735fca95c2194a6fe7029612e0ae3b4866ccd65af2824597b55ec7cae8f91
a10771c6d2777cb41c7f1b65157ddda74699e1b557d46a2b48d5d0bdf2bb21105755ed67
2fe3191529897c1ad9d742d319c936681dea6e688a61efe04bcceae2de8179954b21750f
21ccc22f84ae73601e765e3a477d30479d0f49fdc1749e209ff8cf43298a2ff7aa5d0f37
1fa1a82d7d75618600dfb8f8f9e96d99a6718139e9cddf932378bf79df8ee38332736ac3
0e46350ae1872f1e7c6580961b7ff27a32d8576e278d256693c099087686ee5d7fdaf752
59a0950059ad955ab3ec0a94c48a9d5a7e23b929ff4736494775919110c250b3ffd7c4f2
cb56f313d1dcf94e5d163b14583686ed9d996271b6b568f3eb9cb20aeae3093d8a604fcf
834c13b28ce4f3ee594315bcdf28651319335cf5d57f63df9566ae6c004964c066b7a9da
584aac999045c665d4e75eccf766e50d553820ce722b08fb0aa3f73c4dec1473a10f8c45
701ace4f5f5fdd9099562de5069451d9dada93e63258bcc2ed3db8dd1a7ba7a4d98630a3
b5d60169538f87602598dc306c60b28acd8ee0e7c901816626c565de19bef20ecedccd33
c4768f125bf6d6326d02e3b0689e5ec50a544e9d089859928a0c865c06b37d886a4fe1ae
1603a4013553584d9d15c8224ce850cc721c67ed977983c2f379ba684aa7adfa6ed6a869
0cfe0f9ff3d496da93c7ca5ef356465a9af536a1020e0d39e96757c8ddbb700c7db46da2
9930408e484158e5b4d6a8f009f18f2490294b382309cd55ace2f35535b3cd715402672a
e65b503f2858a456a71da2ca2990fbdb1fad383fb462bab8ffe2586e0989799a25891bc3
3ecd5d2f55792d8b5b3bbdc8737b9f12b8b185aa920100f19cacec133fdb632afb04c20a
58ac12d186c0442ecbddfaf9612b490386640c2d9d32e8f9823a7804d9704299acb4badd
d501daba739471270d121dca84fa6da2c3d12888f8f9e4d785c583b3f607622aa4baa706
a17df3737f292000f308c8199d6c5fe4db4aa78e6d36ff213b6b84c30de66dc5ec1127b3
db06b9bf3d238bdaca17e642f80d7514b934ec71109eeed8cae7ceb6f87ae3a1c425c277
c1312811b028372770f8dcf83a637bfeb20f0617bcc1b56023c938325c9e0763025c4562
a4bd1a8135010ba249ea5111f0b6283fb8e3b003c4f8fc00dc4cd02e23c947afdaba561b
ddf9289f3db9f2cfb1080b8b5894cd8fb5e51a77d94cb623890c9b0eee8f0589ffa4fe3d
7cfc08f3fceec2857479170ae5fe91bcbba5a9047186aedc0b160ce03986ce229d7c798b
cf315a083898417204f7ac533eb8fa32be94cd6a7c7e77ca84f21709179280e1acb48bca
48669f28717436cc8a2c78e0635073b64abb8c7852d7731b983f89d96df3308acc601c23
c08e36c5142bdc21cd684cf28d4e49a7bd67487434e69a67975e890f813d6bbdb534b66a
57e51bed92bbbac6b1ecf45ee9875f7f449338374d5bf8db8969e1bfbeda11344f34b590
93e13e234eef2bb5bf835811f8825a21d0e5a88ba089403eabf43c708a8bc46f5b9e143b
9082400fbb92c8b94dbb63608581e40efd116de52fe5659ecc3a1f44bf23b43458769ed8
21e50418e2ae99fa501226a1f5ecc671fbc66ac5f66128531f503ce0ae302eeed36c3717
641863945c3ba5b452702f7e79cf999e732e3f91d9234c001eb6047d22a9f5eea86a8c4a
8bdf34965d9a5f3f84950fc83d7f89b688d3a01d27d4e2e754338c109f4d72fa609af886
e984c046c2a7f786f4d3b2421c7685506263f08238aa9ddb16cae5f77667e76f01df059a
7414c0429c60fafee1094aa97dde697c9bbfb2d3fe5fb3b415abfcb44179de9faa814d85
aaed9c5ad72e09776b5f6016e641ab87603087b0238951e79c2169803a7ffd40e1f52e78
42b7f40c8f51ab30885268c9a28f4c55561c1e239065d2994a348dbb54661891ed29e5d1
c0f32841ae9b4329b290867f7e94a5f42928c4a2f489b8367ec78e55b15b410cfb8af7bf
f89609cfc42d4d4fcc8983a17453e928e29fe3367472fa9fa090639e41f3c5b210bd5d33
b1fdbaadaf653f6242db2202c18bc65a3c49f3d0a58bf79289bafeb70e94fe020439ee03
f87993c3049f0923c4cd19de1d35275fa2625e8413ffe600e75b2eea39c288f20568b5ef
72c5f48939c905f1c38c4c88ad6bb6d2f75a92270022c7b33be6d040323988e5f23aae66
b2009dfddc0640e85ac74c2009e4609c8111703b12b61ddced96949629df9001be18489e
ab2ab1ebbb41cc5f5715dba53d1ff5d90761a97a4179c727c39a08c66149269c7098d9f4
42967fb3f05a6c1c86026c1294f266b7bba8f4ee0a1ed71d56e45b37e191701cedfe2457
b5f9701bcf497c38735a7dd2b353a2c56da889240b1fc8bcbe6dcada8af455be51b67d48
f5822e18cf39567588997f3204bd0de3cc997242c84fa72963eaa66de2fd83ed09677037
889d3c4ee7f0b8242b0f7cfdb8392326e9188de309e97da64f0f04b0214536e979fe162d
0d8fe696787027c713b6d8cbaba574511def9e800e8d65c9c27d6b08a203d7ea54ba669b
0ee6d45341b5d3ade2358c733982782f52f8b86ca6079dddc01d22db2d321caaf3216283
ae14f3f0fa2b6b4d0db6fe9e9a8127a6f90c1f4ff399f25e26aa05505641288e2ef6a3a5
5ebaf6448a1de6caaddd1fb4b942a6ac6bc7887e23377bc93bbb6c863d865d81c8ca3339
1b381fa984367bd3037966ab839062689398fcfc4bf7d35bc01e3ca36c9ee73d98ebda75
f0adddb2337dbd694cfa135d453aee7352b1aaf8a903f2cb0bc494c07e5fda838ac6fb4c
82f4b26f386cc83c2ef20a16067b31f3fec61b87376ac4604d4c24a3be453493fbd1d954
1adcaa96041cab91f7da6df17f45d2a13e811bede5cca605377efc9208b140ca752b16f6
e7244a0733d25ea711b5d7cef21142769b7fbc14d8d020734692953a942c85559f68dea6
fc2c1769e894df63e568717fddbc6e5318245fdcd99bbda15c6fba4bd2120019b87b4f0c
948d25d8edaf5da93bc857622dfcd5c3823f4235a575f04f71f300227efae24545a2e895
7377fd57a92f85d9da7f5f7fa3b470985ffc96cebc2ac6f518fcf9193a2c2ae6d61d61ff
ce570ad68f762593315b01be64f5052c6635147232605c39159ba9ee05ebd7799f4d5097
cb20b8ddb954aad089507f326e9792531755cddf5071e8b0c7f39d5aa908fc4bfa8e2e4d
c23fe8e9e4419994ab42e12406473849321bc6604f2073d0c6c29c47367aed0c88f36029
d9e4aeacc5f02b85de281c51771f4b60aa128b809a4f15a4f8e1c5c66eb4ab7978137654
39e8dd6418aaf2b77c83028e8c6689492cd09ed872a975946e5b2aa872ff54ed747e6a85
8c32fd2304d10864c15d7a0fc43b45e25af27e8b4578ed8bc7b25a964fdaa2e21d7fe6b9
16402f9ae0d027519428f9b1bc01da0496a80ec343a317d8fbd3914b8af9a5d329a9b4cc
5c7c3c82583ff363784ed1b844c89b84cfab07f3064cbbe91706a8fdf96e550e0b54a955
b0523c816cf2faa06164e373898f66c0e39ed0a616782ae57ebca0a211d3d56aab7ad35e
b3e2f28c0a8252e95d01090a037ed0f6ca618e66205a227b5d0a6d2961536dd05ab8dbe3
4550900c1657d4b97b6cf9ab966440e0dae8ead7e359ad9b8ae3a1c974f3b8eacedf3892
30c57f5e03f77a9521caad6f908f0b8e1019b49faec11fa69dede2de72013d9f2042f8bd
ffa369ea23d1fb2c91080e96f1ff0143d202ebf6e7c406e7bf9be27a390f878359ae7df6
5827fe24fffdb2170572cf832234efe9cc1d92f8e22fdfa267308200ab4bd0dc4d9416f5
001d225d19e0902fafb021668a6b3eca122ef78fb3b480a612ea54e08afc6be7bf5616eb
b2551e602474d0b78f8e1f884c5a9f7ba8ff0b0ae6906f321ee61682541892bb3aa66d69
0a08fde98f1e6ee5d05ab7a9ed48d45c343374cb5cba34ee62eee53635bfc48a18328821
44da89ff50ba5e62f15d4527504525ad9ece4991e3c580f8a4a9b048d6709fc151681c8a
28f119fa4bbe71ac6d57aa973754253a24d2a538984279454a4da889d61dfde974772dd6
30f185a89e4207947dae76ef8212b059d7b9131a26921e0b4b0aeb92853be7aded574cfd
b1870bb20be4aaec9294012da5fd5038a81c4b93e280572bcfc182b1d469392aa8cee0cf
e39b08a85700898c5958736155c9d01582da839dd4a3a095e93e702f96481e5cffbc2eea
23037adcf411885a9d0de192b1eb5f89e8e548853ab65808fb628406654394321ec7414d
7c332932a1eab57e0cee7ec18cc73ecde0893e3c9e28aed8b4d2a5a36bfeaafab0434175
aa43f42fdd4a75924e41136ec9db3f78a794f2c7d9a48900e0afb05a675506fc41f791b2
e50735879fb732a9c52e9562b80a0c49f6c6418326d0fc48b4d32ab6445511229c44972c
4bb863402558e97d17804fa3e277ab8b93e1d2547d49817dfb5a91d04d9f01df217e0855
b7166bbe880fda6e9029b221ac85e479cd5fbe7b4cc2c478a8783878e29500771599e63f
91247083c53707cd0d4774938f910689018032b927298f8ed1ee7d5b536da9e8b759d78d
ba880bd67acd4594d93ebdcc48f033aa69bb0d72969402ac4699bbea94f145b9e44e2eb9
35a8fdf40d896b39de3c0c37893ab63b66a8ec0efc58c89e59a6f795647db514ed307de2
f51005b962bbf39756ce347465136f9fa932a77feb525c13c98168c3284a369d23547718
59c0165227301ec28b9dda98f3c5bd95ad03ade7e5b05e90b2abf09045e92507a0020553
f640bdd7422e77fe54712bd7b63297cc101a161569bdd1179fec3c4f4a20df05bb12d1b4
97935ca741adde83a9e0c7e875e11bbd805476190565e188cb4124a4d4c88f827d5c862f
ddc9622acbb823761767d58e5e6084b23e6eff1c69fbe3816a64e553d45e8cbc3b8020f5
e734db3c31685426fc59aa3693411cc32834592df3bee4e9d73ff3741544e6a8fc6f24bf
86474b401fc4f8fbe75603914031ecf3e75d9ab0138a616d048def176911319c28490099
ec5526fd5d625e1aef537e9059079d1d2eaf8f2ef4cefc6889515548f1e3ad5d637939d1
79728c50f1fbd74527fd7bc1fb5c4b68b00b411ee46e562deb26507d254e5d014f7d6568
8c0c7d17b7f09a6826cafe7a6b18cd13a75f60cd52d7711912bc97c5566a73c671a20e00
5f809d3b46bf05c52b02473edd25ba216d3eceb2cc23263e454277ad94152373fe4508e3
f161f94ea582adc2ea56cad3b68a0dd6197d136cada3bbe919bb58ab782aad5bf4a4751c
33516b92a30cdd50eb44ab902bbcc0ef570f9643edef5bf2e49139fd6fe4e64add008f37
fbd0e0280b1a9f44488d58eac4e347c64ff88a148c25bb1ceb6327aeacff5110ff8fabf6
6d9aff092d87429aaa87018f369f43f74620dbfcf0be9d274a5b2dd3d59bd1db84f3145f
c2f1247c06c9c835cf5591bed2456fb10d30ed08172b8c0bf8e0a28f37b882777fe8c305
436a053221fa5d1eac3bf4f05538fe7762e036e8b34a47e18914821ee8bea23e56e69cff
f0000331f1e959eba307f1b37ee7eb98dd716fc9b061faebaed983aa844ce7442d2e484d
031ddc4ea25a916e15c996694d92fe140158bc04a049d13775db969db772fa697793c41d
1a75ec257a7164c099c2758b76aa15c7182f21efa9585f6912af6f044dc7004c28c4f0a1
a951a64e9387e3d0c4366ee26aa07acb076ca6ab9276a2c4711d3712f3e500e5a43ef018
998f21e045031008a602b04e133e77e11c8527a116dbafc4b82b607a1cf9e554331f84df
1d70a83331201c5a80a7a6b7e6d5109fef9c522f43515e2e077f3a9b9c12fd72fa91fc0c
c37229a28057cf521d58055f99e02302597bce6b16bb28cbcae820f3e742ebf1ca58123e
e06c861df58c330b24a052356bdcac1a0b63d478ea38cb5ef4a3d6cb6c884f60d15f19d9
5148cbe820c1e8083a8c1094a19fcdbf2b350935b708922766ebb962305a3ba36d17da14
acdbc80b112ff183413a7d9c8323f47a35def8a5b2f9362c86fa5933c8e2f3833a4df301
562ac6ae415cd61da2dca3c8fde7362227b04b8c6d9565159f5710df53ed01b9a1b84fdd
5820a0cac8a7adbf085fb80d1bbd2dcf4fd078e207348c54ae64bc6d8b735df7419085bc
c3a24074a4474800623f8a4df642befd1b635844476ad7f9c731c2f1a2b7a1ec3844c07a
194eb2b1b436ce5eb2ab13afd23c955ab48ff8dcf339b1bfb855d0074a9371718a46a71a
5ef8ee27ab1d4372c8a4609b90f80a699f18cf35dc46bf4b808394cea9f5bd2e5bb3360b
2f5dc36c9ee08281be9c0f70f3e95ab25d0f884a2a4b3bac59af65b32ebad5a7b9f3c4a1
c55e90eb3ad93fa9cb3cf09a42af782b16bffb4f41db5338c0ce86a6c7d9ee91f694db74
d5242d55b66bf9349b86f211bd0de4d1f946a8e6677284d4860bacb1348889e5feddab3f
04e7ed366b759c4478300652a25dabbb02ed48ddc249f52b640ad8d045f5a9c34dafdae2
e3deadbbcd4c0120f0279b7cc1c0d42d82601485496bb6af2211a74e3fb3e672a3e76247
3b2613287cc6b9eded49aa60709adb15314a3805869c46986278d2f94f4d461064a04a66
9f0b5aa8fca8e952dff014a2693b6595700bc8930d31eed7a0c00c451b46d56c17e57c56
7cdf00b851f9162ba8bbba5e8f06aea506b9de7ce6974e117cfc84c0f449398ebe32ec51
81f2d35c51256e28d0c1581f53f40bd1f95e33340928c1e5ff5c502d02623b1216b4e285
f7392d72420f4ece169cb1fff85c060cda8a873ab250f46d0ace78a5417424120cc240c4
2123fddee1e583877ae16bf2de9aa1550a0b396ff1f98fec9f98d1f4cc781e026578295a
0e6067d634f6c5f6998e38854927cc775e43ff0af3e38dafaa5693c8cdad0beff4e403a2
1f4555f787ff802cd40676d377e34cac212ddd0005fe507a60298b8ee061fa9c1c7f9db4
4a8bde40b63562ee6667ea33256b64c349879933ce78bae1b11469f9b2fd6ec441e8de5b
79c566ff37639598b17e29f083366ec42f14bac6b25d476aa11a3ac7f31eda7bb3ba3220
137cb80ea34cc44d66c065b45d19dd4ede7054c506d7646ced4e544d6e842f16883027af
950a78184944401681f1e35ced430997df2ba4556364e24f38a72f45fbb1326c72b2f5c8
8a1a5c2086890411e33881a825ec9deeaddda8a0e5781b35acd466ccb3d82ac0887216c2
664178ade503ef8ffabc5e3c0e9e9d19becb13c3d276b7a5381404d9284176ccfe8cc7ab
c55e08bf16ef239ffd69e7d7efe443de5703010f25c2f389506d32e8fb5c1d83b40cc125
eb5511c32242467a54794fbc4e5c30ecbdf51649efa5377431c3909155270bae3eac5742
c0704bfd4ef7c781f59683b438de60e4fafb82d4c747bd55dd964d364e0a8f7ff74625ff
1e42e7a9bb9c96aa273cddbb626b87cf3b94bd303ff6a64b7eadac6e2fa21b01b6dd14ce
fb548d61f1b5e51941bde318873c33c3f21e04b7130d3a5ba35c5e30962d2014d62a5567
3f91f715c0326931906dbc7e494db86639151d358060ee6d5da8cd69714ee28307fb70f3
169e00ba3be8cdc12e5cccf7cbd70186dc5be599a985c110153f7eaa348d5a949d898cad
4c38a1dfe1021f51cdbe459b2af069071963d423e1faded15ba78872ffba044409224018
32b20bbd19ff20addd83cd65b49e58f27f145aa01e7db2600a1b49d33ef52f5fb0baa720
b66bb9aecc261433bece69561a3375342e4e71b4d4658aab4e454206734012eb21de5488
0ef4dd932572f9bd074e18f2ba867c25f23a3cde4664bafb4f8a11b37f28c6a006040212
65c3cea89bffb9258c5287938b159813071aeabb4fd8b22c6f916a40b4fdf03673acdb44
9c24610c982dea55611671c73ab00c367b143c34b999f656c616df96ec1fd71791f26c72
aca4475ddede0b68a536fbe5f7ac485ab7c42df625c4ad6c70fc30a27171da4461f8e27e
08ce598470dba264abc34b5b5670fa581203f779f4528d2db6e15aaf1ded43b0752eb0ef
c6393f83d6d250fbf7b55746a50c45a3d66f6c1f9549643e401a3e78fe4206c0ba269b4d
48afc7abb22e172ab81806f6d2034f396dc2ac1763b7ff570ed22150a9a68600e78054f5
b415abd63e041ea1d8cdddd7212bd77dc4c55c4943b9040e0b680fb761ab58683a3ee437
68d673373c3872bf8176bfd4bf720ec4c462b5ca33ca98ceaa02ac279834f1cf4f99a6e9
715836c159781f6928195fb26007bf7cc58fc11ffe47109fcc2dc5aca8e54a24229a5e17
90c12ffa54c95298857168d51e06b27a9fd3c02dd6b1e95b40b35d51586f5382960b766b
0d3d3ebcc23e3f1ee896bbd6196a7dd157fc834f414937df0bcf042585924a02ee2f5cb6
509a8b13e3bcd1e466db8c34e3e1ae0d76e9c2b7953069b9d6c7512ee93aa33cfc2c2ee7
5a2503dfe9afc00d94839e5dac163aa0f7d51f09478ef74b4b0000f2f317adbc6d31f4e6
160cc2806fb7e1d2875ee12ccb17c85516395204b8b227fc22de4d1263bc79b6168e236a
f7235ed1f733cb4fa85ff21b499829c13dcca3e1931fe5d6fe6da2f6b294da32cd1d0a16
d69c42188e0ee2689f23564be7d4b5a5ce885d75c282021b25527b651efc7a067904b031
8ec3dccbcf328e47f974d24522c01f0babb0b2b2ae9f306b44a78caf0a48cdb94f3daa1b
e24fd347ede97399aa26b8ffef4b2a419a18cebd5155e41ed3b26fe8d6e88e34ec9e6dba
90014229c52f748041e9082dc905de02ff31f7939da7d862950b2f4dcb304260e9c0d232
3c5322003a23640457cf8253e862f59b5adbd7067d675e9e38a719b9c0369626f674192d
52f0aa801a41b4105e3021c566a051d1fda6a5ff5fd1695003d50c3fa4282617abe15018
afefacd8686430ce7e6ad089bc80d7b1155c8e145db5dd13958cae851b2e879e83a0bbe1
5689bbc280eb304c9540cb425c86d4646c2ae4fdbef17435ab22f2902d84229d33c692d9
1e368865b8d22a8149c9dfe177de4f01b9ab26ea26354fb4c7ddadafeecd66919a5fea97
aff68ee2e59219f43d976c6d87726815a20b7128397e53ffdd90cfd15b73d1fd9bc58d13
76de7f92dec0e8653a86d53b740b523f07bef13adcb23b2d3fba448a736392ef480ba8ce
44e83e0131bbc7dc52f92a8accca84e64f01e255531002e398d58ec3b35e30373a0e1dd6
7871dab6fca25fd5405872b23c6ba0aa0879d5258f26f6cc21332d3dfcbe3663875acb9a
7d3d73de3c1cad9a5017a056b151f0807cc7cfc2878c8a8f41f364a7b6113aeeb85bb5c8
bca1a633ba831d97aeb8f694eb677e7626ad805b98e07ea61074ff828fee56c935488164
21973bf03a0aa227321e5127244947a7dd7954e65bbeece798e6776ddadaae73321e0654
cf66bcbf9314e8ae09b0cafbfd3e251125386b4536477357d76b8c532e92cc28366cd071
19707c2683d70915a6159012fa3c4704dd04bad58724f7c93880782b35cd7d3c7c2d0915
38bf1c827ef69ef714f5b8c73151971c3a3655dfc92d5c24a7dae85d12bc744ce6697a29
e2ec9db71a307aa464bb5b70399c6993b82707126f34e56f3180d48e01646f2f2a3a318d
09e8b5c49e0bdc3dca0437cbb31490f238083b9cb05f7a4521ac3b0ad9c6f5773ebdcd2c
158e24c4e99fa1b77d91a39e39fc9c02cffeb532cb38ca5864611414069ecce5b4f0466c
89b8b88e69f32fce3d66a46ec5fab282b783c4143fb54cc0a87bf1b8ec4019344c671a48
23a1f95cb78b3b27c13a52a46a2950aa041738fca44182b2ce7bfb5da17715a2f4665409
62113fdb3544c77f093ab90b4455b93c7ce123714642545afdd6e4a203fad70e33947ade
20f8df899c1ed885960ec2b8ac47d75b41457e4d926937e71ea4ea69611fe1c117e4d140
7fb4e5b2b18966451732143f902dccdba5723fa41e51014676832b710101773675756bed
ad1bd12dfb1f3870b76050b075ed4d3aba67c6e96f275e81d18a2890f4fd4c13807f2950
6729a25c214b054bc6278ab53bd10932fc7fa32513ad626d177d65e7ad0c900fc71c7b77
64880ca84217c0b4925f27c67c25ec48292b1d060e3db0ac7c4f1ba2119f2a9fe0747da0
e7dbaec700fbaea329ffaea435024c8df504c47e86fbc4799e3b1159c91d04eebd8788ef
c03d34077a7620dbf54f8e582037bd7905ab4a6599fd6bbbe173cde367289f9dc84fb4ac
0791a5e7a5c4ae38327b4695b289f75f5ed338b6184a1eda91975dba44edd689764778d5
cd05f1b37c0c0bb652a08b195400cb58d20b24b3d87469744f6931bd7903481104f094d6
d046b6ab1b506ff4054cb9971d64eaf73041b11f3c356a4f4aaf7b98ae986eda313cb921
ab554031ef64c3987f058c871f77cfb88f89e66dd5200b8d4db8d1cfafcf5d4baccd0320
e025ae333da3484892a6c4f8d74d84a8f6f633c9b30c5d2013c80b5703bc5be28fc0d53e
3bf564a0b639fc1b928c7211886c28ef38646110511d40a984d70623575c89be20d285b8
100ccc95e3fea8513d35d5fcf312aeaa62c1dd11dc068cfe54a76d45ca8c9d8e86926bd2
02181fa68d4190019f347d1a5c3a742938a51b89882bef4544efcc9aa483e98510ba22e3
17044c978b8298b648ef1f8b16e60825bc48c3f3995cb86a7403c6a2a7a2efb556b4ee72
6c6618f2d3665e74cde99cfb3440d6cfd9d140d3716838167e2ce29ee969d3ab085b292a
20ab6aa16c612762d69ad28bf4868004af83cfbf749ed64e5cecac8762b698d63ce1fc3a
f9cec87639ed7bf959bbd5cc1dcde0d7f00f6cca3f45ecf40054f22cd248d5984984c71e
01f7a4518dbf2a8970b3d1d30a6b8516e47c201a549da7df700a5fc20d8565289c67c91a
dffb7326b41bc6d278fad4737a1c48e1622952010b062d33fef383ee58b03f6e73bfa75f
b457723c2adfa5644bc9d9038cefd265f8fac2c5198838faf25c67318b9141f9447684bc
467372c46331ec621a973d8d27040175c45ceae39d5e4137d82a7b97f18ac9f13666d7f6
33eb5559b8a813f604ec6a2b4761fd2fff9f864bd997edabf6359b827040c1c6d643868f
5e6d80ef05812ff1b6a0490fce044a3e3007c38bdc6a54f80ca034e9cdcf42545e0e3d4d
b61b7d0bfd4ec975594e135c343cd8891a19b70e276d44f3c2783a14b250303bf1064099
d3f70a35d0f2b6cd75e351711587ccc9e282a640569c4018c22608ad56cf33af9ec9456e
a9a4ebc2c40911892982cd5bc9efb4b7ac4a2b16b13dd6143830b37f059f551cd7fc8fd3
5c0bec2a2dd4239f799d254181c22580d6fa3a33392977c2c769dc992daf0038f942ce56
d42c9c7014a5fd70e335f5c50b8a0bdd988d98853440d87baa574de3bf190163f55cde6e
7dd906fc3b8d7bc696745482376a12e69b6986af5a4a2a6133010cc6104ffc3259d1e065
ca5e118f1f73c497ac2a711af52bd5bb41b7ac817b60a9ac78442dfb83fca730fe732f44
f993cf97ffd01d3e99da98a4eaf9e5785f5c26930fabb3cbd005fdabea36efd33b583a6f
bc8ed29c7e1b24cca3237bb938e28563ac093125e8c32913e33bc9ef741f62adadbb489b
f46d3c784e9e7d016b1f58de649329b611c344eb77264af3b6a69d353cc80e65b786ebf5
74cbd988bdcabf909f10a1f69ab40bc203f7ee74a56ed19f1f8f92e92ec550e950747e7d
dd1f13c96fbb47619a9e063472150b2028fd481002905f0c373be2bd15a17a7eb74fabab
38a2ee2e274c29223276f999f55f083d36b09831525faa95d6a9ed185628f8d9a6a032ad
20bcaed94808084785bdc5543fb0ba01a15a7e6b1edfb89345f22b36925fd04bf08a9d3c
36d3a76fe57d4073b42c62451a7c6432152c4a994db5d7932eaca18b6f1ab605d2a8e7a0
44e1b831dd4951caa782b3b18b0b755c785d28de4e9c96630eb0e7b1145e894fa9f5ec45
bcbd1e3e4f84c50527b41847afd021d143ed39de47b2e5090e8b091cc194e3474a139348
521a3d9d7b9ab1b309c52f729c86a2d05870425e70249ffecb389397f684b8aa2d18c758
2ea96bdeda49530d8e7ffe52f19f4663a29e515dbb12e9576e25daac02c042fc697de0a6
45baa88ecc39a1fa7d476d26754cec581553b41931de6a60db24ef447fd51e411751959d
705319f9268d76fc0696923fee04ece61e31c64a95c532f4b5cb1ad1dd5a0e063edf9838
1a54eea92f442d67e0be1349d2ef32087db71e903c1fbf546e51c08ab6f43f4f249427b0
5aa19160ffcfd5e0f375a8f0ffbe9ba1740489b8c34f3f1d91afefea613c1fa99a39a114
a7e7693108e9c9163b057b957c3053a6af190aba1beb065de5ade59e18028ee26420a9e5
73987aa1bd40400e0e8e88bca04d54e222fd4d669814cac04f35c7bab1fde81432cffe92
bfe90564a581d672d8663cd8e73ade1337667de6620692ed48d12dca920a2b1340377999
4d51fb3ee0aa202f9aa0ca1c6144073b2a49c9aacb5ae245ba5351e513b71b7c060898c3
fca4c9864874f878fdbcc7892f891d3643469cc9f4ce86d5f448a89ebf10909438c80fe5
59cbb866f325acac22e1b6e7672158d0013ce19524d3e8c5920ec32f09347d1878628d4f
9b9a6ba4990821880afea29e8fa0acfea2fd11c39204e7e273d324cebcec3d64023e6b1e
4899309c393f0056346aa572b3b8e92334e3ac83d7b78e58c9008eedf25e9cb61ad391b1
012735b368429f98bca0b69793acd7c59f6e757e4a09c0f597ea03edeb137a6fd2fcea8a
6ea30e87e610b8c501d06bd1c6e5efcaf406cf348b76ad1b94920128b21991096e26a0e6
304185b54d381d4860cabeb71fb4deeeee22fe81593927560e4a8ff878d9d7f369f5eb04
0c54f56238d6b615f3eee1450469ceb43f02e449af8e024542f76ec42b2dac1b5485bb65
6051f69a38530fcec26a05774dcb816ddcb797fd912bbde7c1ec9e46e26e249d3f1886f9
0be098c56c547806141875bdf954627da69998b5a0efbc7c3c3eb8bf6276d7a9cad25b97
36c081804806849459e6f64ff32b384b47441d4727dace5517e2d933e53a80177e1b5395
276fb60eecd4781fcce9f776a7d5adbd3ea320cff24da26029804db465eb138a7cbc73d2
c4e1e59fa05d1cc540c795fb8b116720638bb8d0c454ebec10457d6107d9d19b630f5257
a8741324dcf01bde2b42701daa36661821efbec908de4b933c18ec480bd77420bf9a41e5
5d9988d67594a1eae453e75fcc702b51d192099740929c181e454ab781313c9d5a7e4d80
17b9804002fdf26bb65c3c09fc37df037814f8f2c8eabe401e6453dd5d767f841bad6c0a
fb377b6c47096299ad3e44dc50c53e3d2772c613d1fe00a72c7d1e89dccd78034f48a5aa
021bb870fa5106c338217d0f4bb483fe448cc1241129ab6881c1723c0ebfa8a2628995dd
240381403211b6858e0329d85108708262ecaaec6a72bed4cc1adfce48e5e40480e94f82
cd1c62cb94fea89ab3d4802145ae617b70733cf3fab3e9d081cc201afe350300431eafee
81ca9a8dec40d1e70a9d5899d754ea48085636700b8508f8001d3800279279ae96f2037e
9ae85aa0ece2d659c90950f7ee79f4f612f19a6b65d3ac32edd3f63d64374ee2f52952a7
76364ce4a04193a3ee777a2d2e3900498bea8f90cf48e661fd5b502f13b0cd090954392a
c736c77613350778167162675e83c5ff52f022ae5070b80e4bbd19cb909c3b3c520a080d
87f4c81cccac3e176afe1e4492ddf7ff7a9f852c1a5800ffd3f11a71ef669e540e08e610
cdea4cdc52447a0fe1f329fa3eca60cd9d0ae3326438d726bc4ae4064bb81e636e8faf32
8626b86edd8221b9bad3a23da36e8bf7a5014f286518690008e87719492df68f2507d99f
3ab5bbd5d8e423eabd7f25564198e846d0c276a90cca3e45d4e27677ddaf2c168085f35f
6b175790479f88dde47d3c36db925fec0be6ac87bd8fd9807c5cd42bbdbc1a0dec9e2780
65b733a7606b8cb995b00f374b903ef1e067a4d681071a14f7ef8e28e066563512de8367
9b08e4516052ced033785b58c6422b40100f10c1bab29a5cd43deec481fbc565c2d59c6c
ef84ba2ba076016c7234602e6c47e746290accadbd09a20842c0ccd5c97e278da36ca68a
08b513964059986bacc1221b9b6f9121810e41351ee663f41a068405acd8820cb6f08552
cb6e2a75d5a565f727f62339d855e0815f17120bbaa88b5be309d17f95b1831040b545c2
2f2ecdfc318f7f17c7eb8dbcc3e42c7f545d60a2dd15a2b64298aa21a2713ebd607ac77b
020181f0480a21fe078f52ab612db15b33bf90478dc0cfcc15cbbf59e0b590cb899211bc
e2fdc23b019c225aa5ea8066b67a7631e9e71b95f69642c67c767199d26b08f08b13dd71
0d407fe7fd11a5da34f3636a109c749683a6e5d48dc9fd106eeacd742672c0342f408e90
1b88d30aa227be578138e3dfae8f680d69f48fe90c4e51f564c455a33846af2e812eb007
8fb796f489cd1ae4875b66be0870e43a6cad6eaff8605ed6ff266c6963db7d79af1effef
6821b88394b8693acf677bde0efd3f49e5be7755e5bc01bfac3cec8d1d8e859d71cd8e1f
9fa041861025cbaebff2de6aa84294dde23a2c7d27480957d02bd26a845f4c7ee25e0251
73beb7227edeb7a6c0b0d495457f529e9beeef46d8f0820cafae2fb63956c777fe3b9a65
145bb4d7f1f8be6bd4f8ae522ba0076e388dfaae2fcb4e2164c2923f3d73fad8ad24d69b
51954ed70dc236491156455b7789a7842efc75ad0cf0dca4e9552864a2f626c235888d9e
0c5efe19aed808bce0593b106db17f28ef3332f13c46f782cf0c32d496df5dcb58831f0a
47cb52fed31b5b1c1069110bfc05f14894905c3f43bad1534a50798ecbebaa479437f99f
88f295c7a0d2ae8fd364c8e4b5b556c89dcf823915af51d5195381b2ebae5504eff4e67c
e020fef7208b572beaf124795b11756636bfd060bf0986b5beb082d87032b27aa9fbfdc4
51843f04f99dc330ba1ec8cc29ed3fcc07797e6205181d52fd71a7ed8c70cb2cb379429a
bde351937e930d6538b0e1b94f13be0703fb7eccaf35fb1c2c5dbb760ccb2b403b92b508
4378c2d527d68c5c8f249d72c2028f35e55b2c8a80e4ddc50122e5fa05c325051c040771
7b965d76c65bedc0b355fe56642d5172a8a66cfeada6785e620ffc07320baa5b4654427f
cdd05491cb23f5c67da8a13c7270d80ca8300cdf47ad134f233ebb3fd94c1ee4de010e97
0b19ff70e8b62c5ad570895e465c1a8b5a8220c914e395801a3bc763ed10372d03023028
1dcb946fcc7c5ac828ebf7e1fbc34bdd5fa466b4bb0d31afab23bd5cf913d826ab117250
2e3c7e24a7dfaa66de6e46280695e41a965d6549aacd02f77d6ceec54bbbccadcb8accce
f08a4acc803bce50e1e3d3d79e07a7e40da110ad92cc3c4324b0d70de9c9532436be3ee3
9cea9dcb37ae50d22d41d738b31b20b1418adbd0458336de81360e1a1785e5886eea98b7
81a9a6a24b13cb5fce29977c91974cbe289b9f89ce4a47b8fe95ff55602f136409809580
3d11dd0e84a75475e7e790485fee2f178944f1cac616d836aaeb5694984ab97b81056a8b
35e970f2665251e29883c2ae24596d3aaee4c63b3672cd1d5231f81408eb7012d112e325
03c895de281727714847ec0db4c7b439ef4731096d9c3b27c3ee59ebf45a1e4a0f2218f1
406410b1bcebe28a5574a10709760a4d5de1eae6e5facdaa7679faff76ed5dcd6a785b8b
0b45a2be708d1972fd1086007ebf3f28c09e0f6b65cba5425beb8b11bf8289c825aa0ae0
7d05b57ac35c1349c07659dc501c0bb7c947a61f90a517db79248636c0d625d4a8105733
efc692028fed426fd8c17e6c6e8f65937a38f5bf770bc4106c98810bbb2f231a502672b1
482d0ebc23c2c0e0d9d288e0b20cbb42805dd755c6b0e87da1a03536fa2ead2ae3344450
72900a6286f9ef9d7da67f00b0c2832f4d5b6a069f54a408df795cf8f2aab2bc593f2288
834ee34b33b62fcdaac77ffa4a2e03afc7f60d9bc94b4f08a623fad17b076a6a5646863b
cfe04283f48d72bae3ab84fd87ebc3499f6b4d9e3cd2de37462e9e18c76e8e6d0d71ff0a
3971fb3f135199908084af115199ac0d8ba8747b15e3911b563c6fbfa089520f2ce3046d
82321d75d000e98529a058d94b7200a299684392cda305859242b2455654806b4e2c8e6e
dbd17b618bfbfc83f4331b8f19b90c22750d1f16d9bfbc408720fd404cd2503300ddca5b
e251e34ba179086f31481fcf5fe81bd96990683d765d11be07cc0115d15f2c56cd168bb0
4eea342e2031f42717def5b1abb97e83c581945a7fca4788dd8f3b4a3c2aa764d1f8df0c
3812358e66437d49788660bb4e03821215677233679f47d310766a12818fe6f37b3449f6
ed1625acd585240a0af7f2b0799631d0423566882d7a15c4c88905cbc7fae69c737fba2a
99015f1f7152a5531db3c6f9dc744c00f72504ab62962710be32fe3cade6590c5505b01e
3e40adfb4dc0af1347f5a1c928417f8e1a6abeeb097df5c2a33d5215f5bf328951331f21
cc71c4edd9df0b3d3018e99f16462808652778f1f9249f05fbd045a94d0cecdf6386af70
4d6813913ca80859461471d411e1332b2430bc224cfcaa750ec20ace98340d38882549d6
c26d7d8762bcb1d723b97148b4302df85137296a1cdc68cdd7a7f56314ca96a134fb5e19
739dbf1d83dff2c16f3362713498dbb5f001ea5bfc5182cdea92f2cde6cf89c2c6f2e2a5
8da64c9fd54a7914c067ef5deaf634f4913b2aab3faa723929eb9c025801268c3769e39a
7c9d219166132ef2820d14954f452c5cc74ab7db52e6ae55faf5fa42caee34863ccf9ff0
88de039fb6e4aad9acde91af341fb498222dd90b0b3abe599e6aa8dc888d22c1450c980f
385c1c017becd0e43b486c554d99cf88aeec28f94f778fa8ff4478ed1ca0cd5899969965
ef521334f951722373df77fa2dfddb16bfcc8e7ffe52f19f4663a29da0b689f446f974f0
2c6915a38ec79f8d5b1a2dc3cc3255cf088ab494175727dc31f49a4f8176ed92a0b57fbe
dfcc5d69303d5864512b05e4af8607cd2d7d2ffa743f586a73e9c965c419537dc51f8ca3
c88c10b062897b09584d761db3c557e552d6738ae5ba29af7d11d4bc15657fcf2a431f9d
d3de066d923c2130e535e3c9c20c8d63ac105e9e8fcdf418455bff887c8cce238aa61bf1
f3e080404aa70e5d0c2dcf864be3725b8e75bb890d275b92d1fac72dc815950208256c89
8355ad159e4de5743d0faf3e4c4d6c9aa6565dd6ad85afb58abc47875372fe07d9aafcbd
52b3fa575bca8ac20930e92758e5a06f902060581cf02c2b7036178bcb43a9bf749c3fa3
01f71b75ab510c40daaf92f2c522c294c529460c2bba898057b7c30e38445304c77be6c0
5436e28ef5f742aade89c7245d57b5dbd61d4518dbd16d8dd3a01940055666d848d11b57
9b0df2342b714c7874cdb5c232674aa9f243a586488c3915aba548bd5003fcee8636ff89
c629941ca51eecaa3e2e7fd418a810ae3cd88f9414c2fe69e0fd23f60dc516e3a0e09552
cca28f8cb7fddcd430e9b45c332edd51e5d2f08d6c6a88b88ca285c00a522891d7aaf641
a708386eef8394b0bcee5a24e65cdf7243b29e58f8abe6d040704ce81eb4e8caed130591
7f2b0053c354cc38c824aa3f875583e22554885d374bc3c90e003c7323dc7124b2b9655d
6a7ec44001fd035fc7104cc3607e2f581f4efebc26003cc482047f00f05e7f3a3ea7f19d
8bd53a548872ed20f82b5363d6a09a122acd7ebc7708b467d1e0b82ea3cd35f06a10a927
1b222bf6e23dcfe4500c9c79baaf608388c60b77ba232fadfa937ec190d166fe4e4aa629
aab678722104c520890f5d025fd45c20bb36ad8c3f5b7cb519b75e385b718ece7a9c897b
06f1041fa51bc3e7aa89efea3da0a77315a830ce4a462234b3d1e80d3df28f36ce5ea186
4d8d0fb32000d16b9c1937ba2b547d8bcd4a1ae724a245a117eb051d85d4e11a048211e4
630ee6dc9c9ea6a038014ba0be7b50433f4c0d7095c2e5c7f63a0367d61e2077bd1a61b4
3f22a09544ebde3931677c535b23fb985e90ec5d5d112b0285aae486acc5815eaf4b4ae1
eea43a76235fa9a09b454b0dc3940a7282f8a02d4286d11c738df9a379312eadc96ae9fa
3db5c17ce7f1cf056fc32ccd92e0014fc2fe25b9794915e2524f5fa86e503d9bdd6abffd
6440db35326d429076fa14b3e5c36d08f89400eb2c51432d567d2f2ddc60b9a04a3d9a30
b8858fa99a616b8c6aefd0eec4cd77721344620d17d2822da8d868483ae8d36a0cce286d
ad943f74a69dce0a3033d81dbe0eff2a161157aafa6723d5d92692c8c61f7a078a304c59
719f902643a3166e8bd60739c945267d7d1a41f79c92568b2645d82b54009e6f52f1b67f
e0e0be103ee5b9712303ee87c45b10afdef9062ef84e2251562331fbebba273fd7d3b826
97b7167a7b8de6c993e59b4a1881dd33c5fe7efba8cad6bd29e2b1d57952555846d9a232
efbd0cb52feb983d68289355e6672af6f84bc7440476d0e97b67360d5c6f24833229018b
748891da4816054ed5235d19892898ab11f9432d3d8c7a10962d764ef6168b51c139d728
1bc2757b700e89a9b762a26c986e147235ced959c1a36593c1f8abb9bbc845d51a1965f2
935c74b22fa9bcf72f6b9e4af09f3f1f6f0a654280b3c127538a07d3af31ee3eee0371c8
2210a5ea61a5a5e3430fbf1044daf53d49608e25c78385efca18263f8fe2dde9956ec484
0ac42cba0e69019fc1a16abbb954e71a49cabc3801856827cbc25745169c3956d426a7b4
dfab362fc9ea8f8b8ea16cb93995e8d262f7fba592ba38632f5a067757196f22305b0a84
4787ba67332916555d5df70f5dd7a4d9e072881ec9df7c81c15c0b194e27f6b838482bd2
ade50229fbef6ee8bd047215be414e522b51fa46724eddd3245deb68e5a1f86a8a0eb0c6
b30b96929a1d45f81357c620eb3fd38729c737e39968567fc4d35df39d21bc3ad0de2572
46267c48dee2e13933927a800b01854dba3a280b3b8efaf1fb074380d7ec5d3360cd4267
d4430e7bbee1851269cc38809dc4de3397e5eeef2ce877cd59fbc881a03c6a76827af7bf
042905ef2558245c2eb3bf6a8a4dbe3c54ea73aff8dd4b36dc368d50370df7ccd8b5b2ef
e5f421a368e26f65215a2b55202aebff9e887c535b988c0a7416c41ff3c83e4571392c3c
14fb89204560fc2fc22909a31f83c60b54b6aaae80f9cbb0bc866cfb54b3aa081ba38adf
13d411c2f2d203e406a966e36f15044ba6ec236da8a1cd3d57d59029045f224ac3a5b279
57a9b5784dab06a1ef4671d9f96bdeacf0df69982fa6baa8f3fe7dc3d96f24c91c18ed59
33d6463edf65c610ca8b6d7b33a04aefbba70480ae4084a8de481ae3457d71940e4df202
e82dba315f80ac71321d97cf6da1630596361416584bb5073ceb06e5d97900fb69d045e9
49d381ad75c730dc1317299dd006b6b31c365ce72cc647c6402db30745d52aad98c8341b
39fe73af9ab53bf886e6d446f85e3bbed70f9ffedc322e68ecb816099e0c1c5cd2e90808
d7baf573d858e29cb86d044e6b3c7929554937b9a87c18102c509751410c6691ccf4bc5f
721a503c2da200cb7fa09c3367b9bbe365aa4187d881732af667b6d67d962d9149417d42
1f007bb8cefeac1ae6c6c22978c8a1fcb2feec47ea37970cbb2dc7029126c0e4ac0b4ce3
d6528b9d7c286bc66a7315ada8758997415ca959b44ed3385a86870a3ed434369f51ff68
59037accf49331b5e5eb22f06b843d30c5a464180136dc55ea3f8b8ad9df05e62d848004
c73b36787f929defcf30e4ab2f3654a031545dca28635477d8cec84b21017388ba255975
fff67e41f7c756decc09ddeaedd1d1dec48eb719ca23c5776b553543b97443c47b8ea3e3
d9f0865ba037bfc23437c837d594b9283cca9310c5586279a2b0f492cc50d765036d5305
75cc7c57c1f42d3dbbc6ff398c487240461c784ea9f12ecf32cd12e6060e6a5bf37b7dea
ed03164846fae9617d3ab507f06fbde5f655735034f28e253dc0fef6897cde9a001245be
d6490ce460ea974f652949d64d1d4b4f715e73edc5946f23f7713b25e9e591e10df62931
30fbaa416b148be10a20d9743f616c0d8ff849bbca7420216f2ce5f356752ca356bf3cb6
eabf77e25c3a493586a08963d4e61a6a02c59c8894f5fd41127f6948bec36a98d0c145d4
5285facf48ba0cf6f9a0f645f825f3d786fc7a9fa409e99eb9f5606c186d46ab52fe8b23
ba5e8ca7191390c4244d3a0eb6a6e9594bf5b915bebc3258350d831f278a10086a6f2a2b
ad2546c9f5daf56b3ae8f7931a6d30b83991f8bc5673177773f9425c6d7fda333c7c2cfc
a5dfc7bb1fc4988f6c08f1927ca817b19bfa8961fd5ee49cddf9c93e0e4746b48245afea
c973a7a32cc70dccf45db0552214b7a9d657cbea0afea4c31296ae1a5eb56b833676579f
87a03398aa8d50345d6a3dc9232eeb7b0e11c2da4ff93eee937ef9de6bf5f92ec4decf88
a4078ae271dc18116e67444695e9d09c873c67ff3e4fc2e4736af0960ccccef295b9c12d
f3b0d9ef26aea5770ed3b1cfd0fe4a8a371b7dd80d0c04647e765ca88db4d7f19ed2c0e7
d37ed273e80bfc9007ea080ad12314929c0339c805cd379437c494ef75e71ef5152b76f9
6c261cd210b41c801be1b146867c2a84e63738d4738f241c3af7e4a4f08d4454a7235d50
86ad725fcc82ab3ecb2274a36c48432ac303178fc34936d92d0c5471cea229e820cb8097
9f617cfbec4c93e1ad9512ff64b86f89c31b281c941b31408d4ab56082017a1ac24e815f
681c612ab2f92c093042f00a1779a4526fbc45fded242d1e7c37610a44982bfa87194c75
85564711e33cb37daca894a7db6843b2ea33ee0d04175a3104da3a7e3fa13681bbe163e3
8bd12f77c872880d405bf95eab8974a1b2c494c1ee668580daba50afa326ce25814e0114
931f20f29859904ec1f86413247da768c1706d9510a655b3ba00665e85de29bcdc5e25e3
9ad94c6256ac4d436eb1ddb00f6b488f8db19be69e55f4264edffde082f79cd321b13278
1e2aa63f5f1702f76dd774561f44f1bbfaccf33f0cceb59b1b479dac7df3407ffa08f54d
c09a558e775d173e18fa8267887af3d890767e07023e951fd47bf4cec1eda6b01345ac51
fb96ec51f1c72d31a86f8b60c0617c31d852290a2f988cdd8d6fe369b94a3dc0af0ad339
1c1b65f09b95a66cb0d93db7e75ae33e70d1d7a943ea6ded6839333206a56f97f1c0d321
1b33ae65f9970d78be0ad366560c0ab39bcc5f5c89995596c0554544eb581e4e459968f7
ed79a417dc252bfe2b82725859aa43f632a8b36e50b062a7159abf3ce1ec88870eaa0cd4
cb2cf529101bb18272fc6b9ef84413c171b4c95d4223ec9de8ed6a110024fdee3d9f8a3d
5e54e439a9f8bc59b9816fe663427452850fe98986ca2c8c8096a8b9ff18e97cad77d4ba
4985639e92871398fab8f71bebbd562c030a1205717f058bba5d69b267c6c7d79f9db3b4
6c9356a1e33cd2ecf4d55f5b2fe9c2349fec80520b6a352557151db2b22da5f3b2bf6bfb
6c11f3538e81bc62fbb97f1a3e891ab3170910d0cce8e39a41a41d4d480ecb81f5ad4966
0a0e35f9bf8a595f89376c38ccdffa8fc1e6e2cb794a3a2cffb6402d81fa1d9ac93bb953
98bc21ff5504c1bf6587e63502250796c276e7b4773fe8b623e1dbf2dcd43571fc4ff8c0
c3cf7c81338e863a76a4a0ff645c746b3bbc6e76d42962145c0a3fc45f729f57722f613a
a4d6127c3003b58cedc5da4fd3ae8e2bdc55850a292a006b3e066194e7aa0197da9501b1
6c0c6ddb715b13ca28668af3259fc6f702000aeab39b257fa49a649cfcbb393b52c44eee
f192fadb4f9bba9ca10af3cc2993b223dd58b6e584de72d25fa93f7fcce522449b7b6da8
6a7f1799187acbf947b56040ba9f1ea43087cdace377372e2f695435e6986140895115dc
14fec9c0d06399cea5ce1e9d87ade0e5651b7b49e97917c4813033a5d264c777fce60752
3349138ed0af93da53b96cf8fe6f2175e9b4b69411bae4b4fea088ae64fe9e1f363626e5
57e3e51ba16f2e2f8b10b2d04a0663c03db379d1da8baeda38be51b826a975eac660cb42
47ba568a7bb17bc22082499d0bee1d537e18193e6170eea02cd172ac9efa8b9b60e2e6ad
d22c7eff6566176f65ba9feef8ef3a049fa8908d10fe7e07f304795e19d8d11e37818dc5
68187a5f377b2c306dbba50f261bf14185d62bfa3675f109ac364845e40c649d69d8474b
e9782ada92c96d96a93515c8be95f0355511fbfaca906c75020ab07f27046f11617838b6
917c6cdd920552306bdc082801344285a829bbeb09ad03ab897e1d0e4cf99f2f0100b81f
b16403da9d2e8bead71e9593e281bfd9ec6233b112c01564c833eac793e50279faabe390
7fc60823788f7551536ad19709df3309ab130746b42978574def8062d6ab957c35d80ea6
c91f7df8b19b033cc10f330d1e7d7f645b9056812dffab332be9a2b01f32a14e233763d0
1c1fcfb034f4948a4ccce29bfafd8862dcd01af772f6d068db65c54109a40b4ea2681ddf
8406e1cd3173b925801794e728f97eab1c5491ff0189d881dd1b984b8cfb159c22311b40
de6d314ac3d02f76fada61ccba640ac1e5af541fbad13095a77d012540d41a56658b0c12
694e1e3aec9ee2febebc99292780a5ba97e4d1c6bdc3a3e3762af040481b6771f434c05c
9d01d69336e50b2f5127990630c9901f4cdf0d4ace93e70b59b70c5ce008292d68d4a1e3
9a3299a7aa1ef902b6389f1d708d813e57065660be4bb5c4233dd9da77a1b5cc39d83df0
6e230c5d3dfd720898141fe6cb8d66e62078a513889a938c51867b971859b70d50c381b4
e70de8bf20c08691cb3403a8378abdb8f6adea42859ced89903b1d8efa1005fd19fcd7c8
00997cc992665f545f48382a85193e86f1516ca73848f7d99f430392162c82fe9a935ff5
aebcb8677a40c6b91d47a3ac4497a5323ef63a97baccf1c169c9a3e47b4cc4dd97f1500f
e9987ced296634ce31e5cde0ec8dd93a9fe8fbb8fbaa0cf70a8b49f2749c28168c02b84d
1966b1caa82e2419eb334d104810d2c00b14da2f7b68842a6259bfd1c3c75abb73a56d75
bdd8cb97664bd58555323b612033fd028ca7ac2599cb77d050d693085dc27770a41ebed0
e438a0c19e7afc738aed52a0236f8942ded4b3ed8f4cc106b23cb9ed04113e833e507679
a7858823d5bc0e8f9eacac119ad8231c17e24138ccd4edbd5d56e316db35357505a174b9
acc8cf72d8f893361fa19e4d26ec432ec769ca7ba6c6b371dbcc7d83ebe196e2d9d2dcce
9001e1b0945a6ab334944d2ae78cd5395dcd5717292eb3af1694abe3241dc828ac877602
f4e6e9e6debf35d55258c850aeee780b77dbbae9e05f4c6636c8432f5eb68dd25ca2b891
75564cc643705c964d717c4db7e5bded277cabe635ca4b334d734a0c275589987f7d4f10
fce6e26212a04296ec61df617670dfa272a0f44b16e14d240b1764ab6714dc14b056baa2
645d0fd9191553286c8497c888aea65f2a59d87869d6544adf35742bce99504ec0fce263
1bc69764729ff48783b5b422798ed5f4e1e2cc55008d23084162fe3dcb82dc1644c15828
f8e822f7c50ab5747fd77f0d54ad116919c78db4211c63d914614b29eaafcdb3665bb47a
29315ad43ef288e553417283850962a3fc6b386ec6c9d3bb11a06bc4d78494a5579499b5
9e7b7de01546d9c4b8cdd1b34100bfe1fe0d862e513fc60ad37284da237344e5951fcba1
3bc4e498a441abcd77887145f50924369c9f7519fa60bc498d0d163e178cb6c33dac3492
105d3b7dac43b547b5e082556088d2697b6b668ef77d00afc3f9afca3d9c67ed6882e1f3
060c433f939009e297f8a56df6867a3b0f0ea5ee5abca79ddba4d248ec18e899b3796852
59d1420073c9b5d29fe0f1235dbee64d2cd50413811114b056baa2645d0fd91867d7f01f
47b3b6fd806a40429e2918eb92605e2485aa676d0915105e9781506fecda93dfed6fdca7
32a18f43ecd4207d820615b9462b07e613f50f1d23fb6bbc74c6d5f23bf68542599e2224
d2b49680e43b1e2eb3b9a9076e816cc1fade2c4273fce5734d1ee7bc0c3844797e00b4b9
d4c10d9ed5c0644066149dde49f68f98c5be912dbdb1e61d7f731e82232269e5dac923ca
2ca82b8a6a468ad648eea5c1b04015d39c8759dbc7fc64c4a96989689e0bd59d21df8b3b
209c30e133a909d6c2bcac6ae4e43bbb601168c0b3875ecc3b095c63bdd7ad5447994332
1ac47c5dfe740967e180e5344b940bf298092916cf64a50dc8b3866d602b450866968994
7c62a3ac2c791aa47710c09721700a71d7bee3147c40b6b929e42fa3a86257f477390b33
5bc275a79a96d6359c2230816dc5a8bb8a39bf6797602c268dc1f6ff275d1506c88b9f65
ddea5f47a9f328843bbbb74d9c5a28ef833d41e2dad0b46ba6d3f9a2f7a822d9e30967f5
7a6fb0f566d32f119e0d62458cb76354e8c1826d332dfaf36f1da39c09e8d6cee5b5cff2
d7706aaad7ca7fec05199c85094880030a107d92575b90c9e06f615f5e30962d20145f15
7671f9de652ac948748a3be6406cdd5fa02257e37eef84a4bc3b664ed46b6fa0f05f4dc0
9852c4ce6123ae34bed14f923e7012c0638f8a4a0f6d715d172f529a0248206d4d97df25
4b1a21c2337266930c96b3a9a5e8661be87389340d1704d3124ab572c0f37518828a2248
ba2eef2c62d0a2452201356ec5f4ef1dd5600f36c66dfedace56330031bcd61741f0a907
5e170773af8eb0fd1792868b927a8cfc62705a2a21dcacc9080400e5c0dd526773d854d2
746a160ae0d41b825363fe906724a5392d2bd302c1f696b19903d9586130b0f9763d427f
793119c96a57cf70f8c124f4b3644231b2e7e8102222cd181fcd37ff88794f26bae97782
3567d333f0bbe41efcf9c6a5a25776d82797489829a2542b1981eb8e18b1a8e4949e501f
212c35a31a6f9fdf560a35a2c1b8ecce7651de4ea9d139b7abeb62ff328aa444ed9209a3
cb77cb20961222bf2da9bfc73c09e2b37092c684b85eb3394c3f2f1d1c34077c7649fbb4
4c3290d84735717bc050f5afb2ee8041419979d83a6ba624139712bc2e5d7dcb93e43c75
a7ddb5b38ba6be84b5b3bb1012bb793e4190c0be77b2534114db7069d2c2af471d3605dc
a22536c8d0049597b165435c5839a7fc4d451b20fd50015b626c57d5f1e2ab23388e44c5
855e130266fbdad4bb032cf0ec6823a9fe77f150c9908fb133e8be52b68524d2aab0b6d0
6a65bbc6a7c0a81445ee3e13ca254ec924a90e802b9606e8d1f552d94a1eb3a5eeb36ba6
96ea138a191cb8d4789b1caac66c37f3fe3ffe535787a7f1c5c5f2e4cc07529834a4aff9
16c7ccba39d23fa7b9bed3a8f004a8d6d7381b1910b08338d568d0ad20efadbea1f08d43
a8926575cd7c6126bbe3d97a8d4f521d7b8b0707b2e6bcc75e5d7a78b4912f9df2ba2ce0
d888bafea20d874f387c844d0da8df5772d6243bbb2663e8a5b6e6052416a5e03bb55f22
74c333d16cd7442527f79f79c87fdad9a1a72e9a743f214b4c19ed32f54111257ea0fbfb
e9bbb0fc6a026ab748b8e8044b8727a3922fb995f7541a58dd8022ed2c87a8aa1f7d9d6a
e1a4dc38e28dd1f1cfdde45197d473631802aaf39eb3f37232a3da5103fbbee50691332e
5010f281d709320931f2ead00f79a2b92a5d11dad1f54b02cfdbd3723cef23b3db41b9a7
4b5dab78c9955054f97869c56ef0ecdd2c009dd257e39d3caa12f1cbde8492ecce440b54
44e27631ca6f3a2063c45f58af7ff66946efb03ff9d77b0215292fe78e8c855166151946
a7e674f65fbbed7d56155a76368743f669d48f100684f9c59f656421ea778cbc705bbe43
925b43038b608fc9e0437dd2d7f9612c6362a8becc9ff9e1f541d7a2cf435f02412dcfc3
28e0a6cabcef94518cb0e717d3f8caad17f7d42dac4a247e644558a53ab3449b84993af1
54fb7b06dd44b2655d88176b97311509f98670424a949e0fb08a525992afedf398b232b7
9622e1501ea4eb0259c9a9694e8cf8cb682c8522391467dcd15a76fbe6af0b48572c36ad
98aa8a48dd62a68bbac93cd58e41a1c9907a58d860cdbe836051113720a22922de74874a
1b9d209a820d51a38491690428fae0c4aedfa6b0f41c6ff5cdfc23630c1b359651bc1a18
c85efd34bf42550ee8a241411544b721946fa335799c01a96865824014edddfec3d39682
ce23ee6ac684b6e400e9f95d227210e1b52ff0e3bff814c51cfa92a31b8004f81831a631
a9f7a7e0520b9518f4804ee663b43e98eab505871cf1293e86dff0dbb805c9a7a2b945d6
fab1cdd23b9c07fae454f1eae8545e8e2c4432580afa428ada8a6a6a1c8e6e3f08162c5d
5fb558333483932519d8975368c227d5891631c2db7bd00f379e493cbed7300ba7a344e2
4b14539daa49027a6e14d79ed8703af176e4e811982f79048a677d58f0b3a72123408341
cbfa684ac0b6275e7a6df773f95b65f1239bcf882adce96247fccfa7a63a509b77bffee5
9913a6b481c68b87248fec5d158b262003e01001c4875de3b26b081ce2d07da8f1119d3e
bb8bf2223c3843aa5a4d13766a7a81cae3581dcde40b1277e33632c582a2f7be5eed14a3
d273212fcdda068170225523adabb48f9fb2054776c32f6fc83ee61ec6ca5ca904c064a1
4dee612c878e99f882d80ac22a5f83850b800f724b154db805fe5f15aa2c4106946c1ab9
8b58bdae28970c93f94f94a545c315e732ccb1eeeebd2217621884187e3cd772a8d8e7d9
c9826a79240b492a2862f96fbf8d39235f469f68b304073ea785ebccf59e1aa96ddf4e7e
453d4fdae2688f4676384c9d97332293f33781312b3d65940bceb8316809a6c61a0b6bc8
56b97b2726fdb221b8821a3e0df831c711515804996165bc84b31e36c19d3aab62ba3725
bf39d2c3a4a968fe4d916638213d1bfe096b591b6e0a36712ddbcb16a6054ccb017d5dd1
5124e13c62bb8041fe95a921a086a4f5e7296db7b3006a4d467abda0cb3e583f5a3ddb53
b01081041fea002f9e19e09c4353e16ccd9ff5226bf4732962c91d3d86d810a137b6d475
88ca4a2f17266b13241ca5b5e5b1dd43a45aa4ce7b0cd6946a3588a8e67580b509525688
3c0a67e48a84a60c3b2c7430c69836a4dec87de4a5f59e81f9f19fe571653d075d1d02b7
b053a11ce59fad51fb614f6426e993227746547af2edc35b641b0d0cdee361630bd1f0aa
c9201e22fbbd42c56cc51d7b5809bb43877f327f2393682bcd35ee75f1ce7509e994e18a
eff034324e26b65bd1c8b5a4504e4e3165375ef9bcac432c57aaa3da997db4e2b48f1127
b1a85839a181d70788f86e85a15214061e10376edc7406e5617aa67acc5aeae19c11565f
2e4f3b996448d998ec69c3b045e67ac63f0e02fb8d8d0284ffc15164136ae04a37c21ae5
524021743515e5a8d8b6dde0f6c9f18bacb6509fc408b15a58ddcb97fbcc40e85014cea3
0f840e399c33cbd3bcf374fee14c42af55fac390e3d18591b35f717aab677e614aa8cf78
b5ad039819462f098524cb128de36d38eb9cfd62f9e6baa969ce9db8e5fb55ec1c51de91
c00f267f82faf50d1d5200e13a4094f98fde0952de4dfbb94024cb1c5d73172d684ccb51
9f8b87145b52a106e931386550a6a2c939688405463ecd6759b4ecf744cd535dd2aa7562
08bd2deaadd4617f18a713556152723a8bd9eb02e9651aff006f2d1374f0f9f2ad51bd01
800f2a99727f4dcb4401a4e0a37f241b66d3138a3ea7a5d53a5e37fe2cf8a99a242581e8
09341e2afc0bf53649f64f0da696b1ab66cfece37f73ba9ca1a62a0a5e3a6512b497c7e5
2e0028ee8860faa51fb7902c72321778bf38e685987fccd8770791ef68407f307bf2e48e
cf1e0d30cc90827fa7c42a7152a09900dc0ef85f96dd06b81da664ca21436205f6098eba
b585c84e80522e9b16777e9ce8b8308bc7f70bcd3b92be4ad0fedce738be9cfd4db02efc
cf0af022e8780bf22f1818fbf31033af14815f139e658ac3150f998c46c8cba7271f0320
088e87c13b9c25032c7ad7ed86df15c1be2f40dec90f84fbc6c045a860030a8e006fdf31
1240741ca94b28c70005b39c285d0d1e72c4ed53f96d049dba34ab595b456d407b298959
dabc3376bdc81b1e2025389437002d5f42a68ff3fd13bbfcc3e7e5d7550fab4ce92890ca
e58115ef3fbe862390b5ae6685beccbfad5aa7713c21c313f48e11bae82cd1cd748eb0d2
5c7e57341304b50ca96290c694681b71df195fdd9993a86864b788740e55204fa4f544a8
07198126e64351d38bf7a4dac85ea768ddd48c0b32a482b1754b31745f41159d9f468364
c63885de55a75693af03a996397618395d984974e8f1633c6969e5546c6ca02fa470aaf8
0175f4f6c16e4f3265ce4976d2382d41d964405908a2c2980e98dbf7e31ea8aba9659e1b
6b9eaf57a5ae1cff959c300d1db8e2a16ab582a3a1bf8e2e5028751331de56106229857d
f4eff9eb9e5474cc672c2d4678ac805ad267e31cfb79a7a9f0ebe75929d3a9a2d919bd56
c41f6ea4fcaeb6e2c006ecb5d129a982d0154f7c1e46a3be22f0b643631b0e1d996848ed
f5d165d12017182abdf9b9cf698fdc3e1a94917f6252bbdf5b465b7ecc53618d091a743a
d96b8aa925ce94613854fd5f1715d9608f488b6821501afd477f11f7f0a3a02d764f6e85
098e10eae8c520d140dddd1f1dc9cf52b42ab67179a99939583a408df07c1477eb8bd397
5fa72ec6cfd7ddb43739e1d0d9710f54ad442c83705c9c360aa4563ffbc7ec1d25f9b6ca
190f7713aede0bdb6c87a6d7d1f5e814fe30cdfc5a8942ea0b7ca3a2832c146936786683
0587fe70341ea3fe03034b1f5742cb6ef6d29db4af2fe2cdb76409e71971b31ef41d0d32
1539cad8e01922fdc3405240ae2ae2cdb33c024d4417f5c222a27ed45d7938a3e4545db2
d807a6e596b479302099ed71b19a648b8b6dddb56764780f56bf0fb38213a76b6d20a8e5
baf17624d31d6487595720ae8e655f254976b3f8fe388bb74d1b1fc1bdabdeb9860a2b46
138cd2f3dcd84ca6f9e67965a020e82a1a31c0b89c182ff6fabf4ce0a0578a3695edc4b0
31c3f387f59be2d2242935b16e6f47ba5e944e5739541bb5dd30d456e1674cdf5be5d46c
c658b3332f43f85f2626105daa9abe1bc04530d784543bfc3db04acf06cd0d7f332c0bcd
20bad384d69b6f5d9cbf881620209456589ce6106869a08540ce562c4bc78f71e1eadfca
4963f9441c4ec56702e68f79087f5ae95aa9ade8d71b85809ffcdcbabc47694ab0d6d9b8
1e822d4e6cecaa6de4f6d926200c0c2da417331e48707020192cfd5420f6e3f6d52db05e
65d5b2e3810efb7f6b05f3c8a29e7cc1ca27ba6dae03aa8aad5ca08fa8f31f410c375000
2e3b86fcaffad62cefe63f636d91fb52ad8bf1329be294a135bc26fb5016fb2c4a0245fb
70a92acd4e74a6e5dc2fc639907334b65883ef55fa527a2c0f03d3190add81dc58507ad7
e3ee1663336b111aad8f8610a391395ca79eef0c354557c28dd353c7b4754af0b6c9abb7
2f667b68c531fd7f601795f2e84cd07a1599c4efa5119f1259de4d2d03ffc75f9fa56b82
d246d2cd397bc262352b0cd82ebf2236244e319f9d0924b649bfaa6f6e99437ebc8c382b
9a920ac8f5b56d6747943eb3e74fabb4c4ae77c9201e47018c6851045a9ce12bbcf531f9
6f9ec82e7d266c3ba38bec2e5ed6c2dc8da37b5839b98e33285697e3329631cb7cda187e
f2f59c5962ae2e81125df244469725761836378fcaae1dacdb5c5a5a47d7c201d52a418c
a61c7f2dcf2c66486f0dc8911e4a61440da8d70aee602ba4c14d8e64d14b9f7da815eddd
fb678a1e7631010e0f0237aab4a5c4cf30338d70e70524c883556531354c931491cb5613
9d66a4b9b42541244127ee323bff385895211267c2f2ef76dfe5e59fed54b48761c362b6
bbeada80b70a13e78dddccb80be07361ceda070f66ef6963b9ca2e4fe994887e8598ebd7
dbd6b4f2409126fb822b9d7d1484b6f1189702af62957b096c415ea3d41c0a279758497a
66ff1605d4f2c76a0ad7e66aa88c49eebab857bb74c42e5e4cbda6bea3adec3f6d4fce40
89a6f7c3a2b838ff9c117cf6e695d607b0b25c1e7f2ab6abe0a2e64586d1b86342731ba3
560504adcf7de4aa5a66ca0e3e304950ec41188b0e546835c894c2234a25f2cb64ed3644
2c15e91b8dda9f8420ee22be21b3260d1ebc701de6372e4ed8407ca5e74874def78f324e
3707afcf8adb39653ca88c7d5e1d6467491951b32a90c3b3ff08522bec532f5f69be9a61
7451eea3d5a21e060c185296ab6f9f5ccf06b52861a230b2f26775c8a819e1147603f322
0e28960e7a3df316dc73f1f15c288e6c46b26d04df2dd997964147738935fecd377c9fa2
a1c4985dd0bec0ba0089d4c1becb29ccb93fe38eb155b5ec07804163d4ed8b9ca0c62223
f547a4adc24a754fd74dcce94cb318de16bd1d7623989d3f380dfcb2fe2d9489ad6d6ee3
6ed07b06443383601c5c5f01195d19eae39cedabf61b5059bd37ebc68adb5fbefaf83474
488fad07e99bf3621e38f71863838cebdd0f22b7b527c0caa9771f46751f21041f3cf690
536c8fae2765fe751b991954fe689586556ce6624677d62eb8e626e93d0f80c2fe787748
375d831b04ab6a3cc468aa0d37369739ce639c157f9a71e5e9e56d10e7b3067670f63123
28e591a43df13ee8f19219dce5bca68beba816e1c1e2a9a9ec4858305410f3c618ba4d70
088959857a5b2910d757b4dcfe4783c4df6c0682eb16f9bcdfb6e88f98da2a3bd41eb14d
dc20226bff637d80cf6284d2a2fd2ae14988765062a942ede7cc86e8b4a2e7c124ce2c00
ba4e17b5f78b22cbbdd2f0c367b47926c23736905fd0c4c1a6f4c2a8152e33435ac61cf4
ac5d1a1071efaf53812719c6ecbc021e09227e0d1e26f7139693ff9199e62b3f443b0fa6
9416da46de5ada5d7527d41340c8aca5851b3cc9268465b7b35f6f5aded3fc647260aa42
b97ff2749ff03071935513e40208c2aa08333a40601e92d11984ff0d431b96bab09f2886
6cee4b259f159768e08cc8dab4d84989e05a108b7936eaf1d64594deba757bdba48b057c
0ee62c5dc2c7f1b2bd2584d049e2f1aca729bead56e4d0bcfa2bd5ffa2a6a3f7d176d9f3
aba534ecd37d9bd176459006f20a0e84dad34a7e30f7c3e45a304bcb59fd3e44f0a45fe6
bd3c3c31f1f67fcefc7a662e0d6893b8520d7cf59ce0a0f8a9a2e30a36e43f9038cd1bd4
f46cec1a776b699d9bfb51fcd7cda9601e81796257a7981c69fa20d07ade5be27ba7aa15
7b89fa3c3b9be1ef618cb6c3f7dc431110f6685acb6c45b8fcd48eac90fa6d1e8b3d230f
c065d55fa822325940895a2792e7923d98f168bfd6ccd35784e3cb6a3c93e25867eb437b
52b7287913b3d701f63b91cf0eae03ca656aff253539c7595e7e2fa4ce62b8cf2e2c211b
e24fca949354f9c678b49ae4d68a8bc80effb6f31d697487c3c74de9ff217ecb5859bac3
d036921511b7415293e9bccba265c09a01440edca6d912d405a50aff01db74a013f22e3c
3dac6549bb05cd748a14df5e221698b06bad501d0727c28048817ec44f51d2148d750f70
098e498e6e7db23bab4f5a16e34b39cf75c9f0dd613e1ea9148ce1857b10ae1b6718c3b1
500ce3ac0f1a4b18d96965ba42dde54ec708f1a4c818b092cf6c14ae3fcf461be47a02fc
6f455d7416f202121130d712dda34c87bd193d51aa4cae0210ee8e68667a7e338796f1ba
678eaf1b1e03cb27452e7b6101af5b4222d4eb124015a410ac6b77b53f67219a899ecbe0
5b7258a6f6254b0f5f685f30a64d50a59d7ce446fdede15514c3421c052ebb287d9a803a
83a876d08fa1a11beda4eae0a8e82579562c206b29b5968cac57c62fb024c06df7156add
49c67e0a9adf8f8c0db701e38ee439335a2145b4a8d3eb2c6a0a2b0e2933f0d78c26c1d6
9141fbc0c2b80968ad209990b314b282d9b48c52c8edcbc866b6d7a4d5911b6864a18b11
e000486d0a35ec60ff7ef654f274552220ba78151a8c01d7c631923d3bea8b2dc35370bc
11f9a5f732f85bf385a3cc52a9654dda7044d1d53d356e0b1bf8763c042290bc64d1002f
0e35c85f92e1199f3ad6a48d45a42fc2ca8aa1ae07135cbb4167501797f5974efbd3cfdf
b21430b290ac93a44cd3bfab4aa63959619770db1e340dd7fdf6ec05d9c7a87fb8337d25
aba25c565dbd830e9f0a6a5a02957852bd63cb8ed8c228d201f6e1d48bd6778decfbf3bb
8cbedf8b549ef04edc0f161d094f5a3e77a6e031838de5f1100525ada55ae9b3ca66ade2
7c6e28d95f0842ef1d72059df96ecaf4916284720dd738c6e12f9abf7f7368950e678dc8
8d0cee6db85b06a04b579ecba806ff03ae64db435f49cdfce722ce4659b7f9ff1caf5d7e
d18d4163d000a704d45d992d80cb7737ef0961e1c0741d5852e7de5b5efe294b5a7f1439
09d4a1906ef10e65c54f38a17e537dbfd07487dc8a50ac997ce89e80408e2daa7a630be6
bc858d553e5b6cffe3c8dd248471ad59c6c7b0b102efe56243e32fcdaf7d761856d2b8ee
94604d1789ba646f4b15c8ee9bc31140c6c269fe15b8a24751a5254a1fe3f53b45a39b41
7f727e35ddcd3ed67671bc7d0dc2c6276a4c510dc6daf005efab8ddcc76304b7125f5e7c
40bda056dad04433624ac2506dd04e61b8c0f197aa7c476c7082f3bd967ad230d76dab4c
6c5aac6f079ed19b442957a764068f9030dfdd8bad9dac8555ec28746525a6eae2b6fe06
e8502f7cff3dc70c21984ace56fa57a90a7882ee0052235c2504f8313e44b6beba216ff0
305d14bb36cf8ecaf28e168d3c737867049002291656e08929ecccabb0619a19a09ee6eb
d6f22eae4f807a3359a7222a376cfe8d87103850e4a52b205622be0d5e0bcb55e468fdd5
e027004aee13bb037b83b5e8375598b1fc050c6421e546e0bb9b21454cb7686277ae8748
1359b98ebbca2079bd90a974abdeb77cfa157ee470ee3fb541d269ab15f8bcb7a92c7963
829012e8121d9591f8e2797b845633820a1b320d61608fd0670b6c1fa3c4fecdddc26863
b9e4437a5db2279ec8152b694939ee6fa996c2486d6b0677d42194be67ba3362366c170c
e7405d5722c1e7ab1ff4d0598698cd29c749e4c1e4e595dd37db98e34a8aab8e3d6f6e6f
aab72bfb9037ef6ca3139a1e1e488f75d3950f9459c32c3c71e6af32e6b195f0b9d41049
f80e7627155968a4c810b8826da79feaca683d2246ebf7e8a987e31531353986ba9f8d80
08eaae3824869153b8746810a87e1985a2b9f9fb9f2a5ddbb405223d1466a5232713cf8d
4b87e67961352264a8390c341f2a3917069c36fab0c5d20fef052800ebc465dfc6f885ea
24c13dda6210efab4a7f203991ba0684af5b47b19051c5cc392d295383699f105bb4782f
e106b67b46fffcf9f119c5d60a43fa8b6df5c8235a2aa663ce0dbb94acbbec1cb4dbb456
f5d9141403db308ed2dca0f56d2c1d28c57b9cbf68eff8f36ca565714fdc5cde181a1620
c9308162a29dc4834143da7e136b647b1e71ff4919cba1c6e90ed2c90fe80ba9a2241628
d2081762a8b47a8d85a3b0a9199b81540614597cf9b8373c9070d946f44c48932f16ad63
ff7d4249cb3d294a3db0a6bc283eb307db52bd04d27692bf43e10decae11840172e024db
b001c3823ed9d1cd1c24abf7f53480d5bce976071572e4e73ac5003a2ef8f97ef7506bfa
921721fa460d3c45c5acff33ca9fada123cca57b06f1e309bc552cfa99bb66e2ba771f82
642cbe8a4a77df84fc5753b36b9e623750fe655e70217fa69ddc3a3c9b52c63457fbcaf9
dd37ec2ed6e91f1b7bae1105234c27c996ffe9c6ca07df8eb8ae8d35d0c8985d2f9ea645
22cafcfe1da14667d6823ecd9edec5a3195f4db9e0ab8901a95d0d5369e4e2c567be5712
9ef6e5845d780a412bdeeeb415fbadf5e448dafda7ce880fe923004bd31beb9d5ce7b472
02653653f132e630755e8b9242b9015b4de49cd39754844263f8bba320980e7fc84d720d
3cd3b0bcb7bafc2d64197beaab0cb91bd0228b012008911ccbaf6408b7684a701bb7ea30
7bc9cc0f4afc11a9175487e1f46f540fce449e85e4fedb06904f068592b13648a45452ca
bd33d370bd58de1a8d5de9078c5a541343a5345c3c2c37c0747a364d99adde3c29a1d760
1bbf98d3b571ffba65eb9e76a109c90bbf644a8a37e6445007612f77ab5ba734b9d2fedd
5936544d9b05b7f331f5b29f01f8bc30232981f3538e483fb61dd4bc2c5a66f04a506c52
e95c877d7accd5041d5a468979b8e6438044ede803af88bdfebe74f8392813f267c9266e
ff799be094626fb12e3b1b4da64dd2bdc5fee377d4f9fa0aa4b21067167af2cd6694e75f
e3241745296abcb14873b2e0dba673230bbcf944b1bb55e33cafd6838bf540089ac5a599
cafb680701e30503b686a79d4af6f11b9cfda66bee5396b8018b3a36dfdf91d7d3f83d6d
a21fbd132e6aa86933f881b895df4db0c487f305572895cf971aba8b2ffb92b150fc687b
87ab3dde4926ccc30c81d93127abb479f7fab2ea177822a261878c4fcf4f366c0d548d47
99f4a97e973cd75a5e4bc46dca827ca692d80605be16ee1f5d722aa5689b92fbe99ad06a
4874f7627fde11ca47f57d737e4e6d17005beb0dfdfdc77c11f3e0cf8679b6bd2bafb632
4084cf6dd8120901baab9d055e8c07bd2849a07d89af1eb0fb16943f785ec789335f2995
2ace33a3e2562255442c4f6a7604c223eeaa295c03cbf3faf05500b7ef55b0579d879263
85a7cf000750d287c719480e655e062c58e9af9dc4606e778e91e827a505ecc299caa5cb
3ec952528d9b0bbd901862c8047833ea978e460f8ebb01b45d1a1c72a9b1815c702cd341
dc4bd7accc29a767b29c99f735ae75ba9c3ff127855443b55022367de55787bc2e0f547f
f7088d3da0920bee4786ead7fb22b90144f4b4d49c987d153728e95a10ce102c083bb8b3
bbdda23cf78caffeaad879b00925f5c891b0f406f2a609e058f756e32ec34041ea09b6f4
4113709ee1307eee1c6477b7f67ee26d23b32fd5fab287a1b4927e02a77a326229481257
c6faa84629c71c9357889f1465287142ef8ce4431aa4a85f840bf68f15481dba71c03102
e3f13be786bb23ff7c2663a024770fa073a6bfdd725205e6792140f268a248604dde733a
78f56cf21026c8cb7e8ea543ef66ea1fff04e12bfa0b88492032184274ba46863343e0fd
353241f5eda461821fdbe9a31fd2bb1fee09af09d5955f3c30a231af7237ed5e6edc5be3
0aa2a568ab4b95587ac442856fee1571b1c786bf2283cc02f2a21617e64e4b6c252c7734
2e3208c275b75ab541044e9877c2e59ea71fe9305394f0710eef981d301ed5746fccd07f
d6a21d6bfa250f98419f4b4210b1a8c7ced2440c5626d5861d01b58b55b042545b70b6e4
335428433cfe8103c51859fdd6edf895cd7498f2179812449a129fecd4661c1ed93044af
9c74aefe17289b3ad639efd063c57e1feccd7a8dd2806c585535b0996652f44bbcbfa2a8
29d8a790355e4fc85d2513062cd85668f4800ab8d41d57d7153c87a4f23c2e74dbc6488e
e951ed6d1559a1784137a628ca72a8f9439b844324d24f35302e35bf14d52b54daa7b57e
415745f3352ac98eb70fcfeff06ad3e9470f5b5a91e747fe68a3cc9055fb54161c8cba42
14e074c05c61c3c9210d661d0ba3fccc76c4899ed880589b44dbeedd215cfdc58da10024
fd767bbd9535110edd766853f8335f55c9a3c9ba0fb8816619ac6578de4c641273e17459
38591e74bd91c1738b8596732ed11a4bba813412182894e2e19a7fb067e06e28b4c9d13d
dcd7a545a478fc7e6f15c00efe7c2925ebbec5444d98ee936ef9742939e4f356fa9f2b4f
81e9abd2599cca9319fcf53e43466ef094e896938b69f72a7ec4d72d268f7a3e3b4a6833
0c0c83bf6caea1a45cc408c517dd4eb32916ee5b28ad0cc174abad1acc0ccf2ff50c23ce
f6c07203c0114147364bfcab06d084a94ed72a82f610c9a8513a1f0a22eb8c75ccdaba1a
612893e89240a32855a2bd134b7b217050d3ce0df9135e1fb7ec896d874aea93c856eee1
50363172e0db1f68281460a761937ba20fb36731ee261c642f212b73f7d32194e1ab771b
230f253cd7c575b97ff2749ff03071935da63f87f63b5be8834f7f976c81b708c2f75288
333c8700a0c72477897cb3c82c16aadfcc865eb9a37439af29d0de3b89a64780d87d3c18
d817b234da7e93036e8c5010012cf38d8fa68aefc33bca562c93c3aa55fb6242237ee223
1ed15e7783e5ce1d9aeafdd725e42ae8ffd24c76672a5b069bb0710b99297ff1a7f9f01d
dc69e178f43cafd74ea11419a6b35864c1438ca7130e9983271db89ef3945ab26367ef01
c8839f0ec8d75a595f0d7be9bc006d6cce7f9dc59b278ab5e9e48dc719ed670768e05dcd
55bc055fa591a3fdc1ef656e6bfa414ba28b0136dc71627833173fea0e3a81217a5fd967
7e309abe6c95916115e816da23cb8d7c1dbf08118372ef4ad93b600eff8ec83723ba0949
31cb6958fe69f44806e618a276d3cbf64e6aa13a2a6ba0aa55d4fe39ba859662e9b853e9
320c9126a33b088a93243834a2cbc09f63832c7166c3b7faed0855800b8b056b2ef11593
dda4268c0ecfc7c771e7d554352429cfbae07dda053bd061f519819f41fd45981caf1c4f
b55ab00c3bd2c05f5cbca4f74a2746ee5a670e0114ee7e574bb75bb26cb006ef87003bb5
5d5d1e916bd9dff0cdb5c80a2af815563c58baa1dda80e3f8ffa98dbc8b418b5b249ad6b
88f9db45f8ff2395ac20a97de0a21a056a2f72fbd08787aea7fe493b4ff2364e8ba565bb
e4027a59d6cb95f9df63ca723bc3cfa562f7f8ef8415e3dc853167e17f4b7f6870b4f644
11ca142a18a6c3ae6b7bd84a21ea4155b776b69ea71ce08476f75feb976d6fff2a835a35
c3046724c863ca58c9fecb64c2ce3c5e241fd3674f805f31372299df8567dccdc6c17559
fdb7d4f9caa0cb0496db2944315e96f8cd2903701ca677555d81ce61f170b4a3e05dca33
846498145a994e4d9c2ec570b8ba25ad24a025ef5414522859280be533aeb2c93f6454a7
9d1dac2cfdbb61bd9082a62c91201e026f83b3afb2662ab2b6105d8765fa87c94e928bb8
2d3a5d5b8b95cc67c43baf9f5e9d70668b054d984a6577ab94fa63f47f7dd9c42307edc8
5b071d0b21bb0fe16049255a113ab531fb66e583dd6b86c49975450c98ae7dde9b11b9e4
2e887a2a381683dabfa07174dc17f0c47120cdf86889beaedcc8196bd83fc0495595fafb
34e0a923f59ee4bc9f72803727ffb64c89ecda0b973ae272ae8b3a648aeffba980ee62ac
77bee9f80689ac6985252fa3e545a420d5f807d31253c346b963fb3a21248c4d1d66decb
cd662153162e9f1c38b0c71f3a34b6f152504f0d193d4f8fd926037b11163d04f761ec8c
368a8e084c1169c496319589ee1eff062818d2756307f08b10fdc380b91f8c362c3086bd
49dd482b1726ee2aed0570c46b03a489d6de5ce5f87cac6c14f571a67920dbb1e85436f7
15251e69ba6e531c5786b02ebdc24440cd0fd677ce0e8bef6a75231a16514fa0283136d1
c9eba9df89bd8951d7f363f279cff0347b95c6f8b9b0d204a065e8e9ded09fe9cb4c8c1d
517b1e13f5b7c6cdf20dbd01c725c04e7121887fc2b3e4dad954d2ab54298e00cec20c28
637982f295f8a02280acdfcd99c0fd0fc6f93585a3ef021b951ce3d4657c79622cdd2362
f5940bfefce061de06936dc31ea30836e8b34cd1eeec27bdaaf50ca3333480cbabe9cf16
dba01adfe7da6883ab1d6c45925252b160e7cd70b81ade806462bb9fe1bb46268fb837e7
b1fbc87c6660dcbeaa2d97a9195cfbd180c17e447cc3c533c73a6177f6ca51e8a33a45ad
ea21f1c4f568ca85daa0ae14cfb1bfdb0c4608fa18cc88b98f8a18c3e351fe4f43cc8921
577aa6c3b785fa231f34112f0420d9ec5e86d057a20391cd5f492ef64bb33b13f1b3a6c5
24a0db27472772509cf2a120e4dbbbddcb52fdb8a8e10b717abef16acfa3aee64f7f6a14
84f58f113de0e095c66c62b53f54f030214e087da0bd6b56bf73e975b9c3c7445d50975c
e96300bc0a5bc132ba911ab2334556320da167dc56066c6ab29b22c1494f7c270ba0238f
83ae4dc8a252bd53b4e8be62fbe612102b0c0c0b89aa2046f5287aa4786a70422d971362
91c0d41e0557ac4c632581d3f5d22d418690d00f55b156e948cd4f6dd2adb0167be59c66
baf020d1cb8c55b436b677d9899d4e2e7ae3594932c4a977579de2eaf31a678706b9515b
19161f612a897a37157e88bd2998c29263d3d8421defc0ada7f8a901abc8e890a4254214
a70611fdd6ef6b02accc4169d134f239f84d14e1d81608ed655eecd0c2059f6dbd9365d3
9ddcb651ee2a79516c2d53fcb7be0cd43ef4d35d2de795d27ff9610380bae51e85c77d75
79447324c98c1a5b3850fd5e6e28eed82ceab34d593169b9887b602f2c5541527ae87e37
64494222e457b07a9b38598293be9bbfe130ea5d75e085205654d1dcd2fb77ba64bf1366
6f69ca23611177f4cacd41f1ab2c3bd8046291501f30409ea8428dfe37ec007a9cfbfb10
0770ca0674e19895c9976878fad34778269c690f3e7768378838706523c67be088af09c4
0c8f160ed43eecfa0b46b7a263b263d20fd84be24d8175b84d03d1bc14579097136c9a2e
a1abb21ac671c898a4905b15170dc45a21e64411f4b06390e38c75dab2844003d33b7a15
86bb740342ac6163a99dbba917d11e9184edfb49b8c80b872763d681ea235d64aa618741
b73bf71676490642c6eaee832e9bef9804cc2fcb37e9425bea834a4e60ace53dd956c771
efeb2051dbafcfce486106759f0cef2c11310b28d22e9029a1dbf2162c8c75fd206bc8cb
dc21d47352d09dd90fd6898c781da64b9bf371350e4f8fb6e3644bc9d0733fe996fddeea
6b78340665dcc74b8555fb11a0cd96bff30dcb86d3d6cd6b063c8b68cc725c63450a45e0
0d38808ca701885de3a6172ff492a0996acaa67c20bbbe13f1ed476ae08a164b90834399
96e00799b00fc6d69f1209b8da0ac70d8baf25fd0480639872915316a269503fb5837c7c
bc9377dbcb4e0e61452cac9e78a509bbb6ff582c95d9695b401eb67b8c8049a1cffed8f9
89bb2a253b440ccc2901b3c5d01f90a4933ed8749a10540dd5c78af62f8f22b1a96bc042
16eda56d02c3f5f4028f6517152f2a5e1e08932ed91983c8f099c534ea8d31358102855b
e23642970404a4b762f36e2ff96ca43d3474370e0b119548683f274c46dde9c577722055
d6b345446c8c4afec654cbc0d96e5be3386856e31068fa12f0e952625e3cfababf4cee45
136b108b54f06a207da65fdd31d306d370b717dc9ba29c78031aad09dd9c93c5e1253910
65dd91c001c406ccbb0ce1cd44ecfb300efbf8ce2d05c73783ca206066f222cbe693e6fc
df65086d12c8c045f02e68cb5f991b7189528ab5bdf0fb66aceefcb82b4bf70cec45921d
dde901d8074fc57cb35a73f62f5c8771ca2de94217072a09ef19c5ccba4a1ab42f15e907
820e93acc96ae08196cbf063f57ba65fe0ef84828e168f2680ac6211d19ff393b6ff8876
e413a6686850a61299a0c29795cce91da1ce64e9737ab6223b5c757a1f101346bd6f03f4
2819d51a047415208d22bf306ebbe893960190d1957ed2b4a5c4abacf72ea414c81a80b0
2be9d51db4263f311fd5f93888efaedc43fb67f9357d3c59909e77e0ee846edd93cb32c1
9d337815486b673d04bc0cc0c6a08275dff208439a2c5b35ff3f87fb96eacc7c17df6843
07feea00283cdaced52cfce8cd7d64055c1a65693ea8ac2b03117fff94353a71bfae923d
f48612c29e8dd99997bef4fa4350a8727d4de113c1a4fd2f2d9116bb3a89ac3b04f0489e
b611d9d277726d5034cbba786194e13ccdb3551d3d22c034f9ab5139fcb7ba627a58bff4
c7fb99551b9e554ecbee70858806fda64b08134d02e0f6edeaabfe30b23b73a252b29320
8d32b64692d9b16bfadefeec5907391df42fbb83a6f34586c92f5e49854b9351c6f2736c
52f1bcb3e04ec7fab724f63b771f66525f07cb445b24407d82c549eda2c3a02228a45eba
6676728a1e573bd5891ef2772a21271d17592b7ba0c81fc98f8850d2ab87a246cc042abf
d5d1873b93761b5396a75486583cdf8a9de4b6513d97e5d912fe507b6139f956f87d518a
711ab6fd03fc8264df87127e352b260c7ac9f3abe1bcf01f916dbfd97238ba497817c6b9
32e88d164d9b4b99c3a007d9a26b5d23170eeb73127c90231a2ef3fd57b1f5cd8946bdc0
9118d34ae0a6bf6071c800cd9f16a41678972deb567645d11555a9794a936b16b0d3ffa6
548b3476c0aaa7f956a4b90df9c8123ab6dde2d8ea4b85a8eb5fca0fe3aea5ddbf32d49f
dcd4049b05c824612e6f753b2e1908b7d8d2ef9cfe9b80f13f130ae14e7c7bcca83e1ba6
2c1d1494355fb32d25e458c18c4bc7f6f7f59a3e1eb4acb02ba19ca73bb5c6cec8f2fdad
e3ccbbd8254b4b85bfd2f9f0892e45fa348f8153ed49df389bfb79c7093dbf14c3c1b616
8a3ff8d948a48b82119e1439d47f8521936fe8982a21b630e2e1665b7829bb013c1d4525
0d9e2ea163a93c4306a61b706fc6e586c73fee13371d25cc3126da22144e46bc8f84b1e8
d00d1baea218b287ee0af137dd0f08e20c9d3c903958f8fd797e152ee4f74673a04b5829
1a762325e51d60a0942820b11e90cdd8eb24edb2eeda0601e1cf4c4cee331e2673d7229e
ce41e47dbf0ccc497f858bf269ecce04a1827bec7e7573b505f99d1abf6c588b2b7514ac
ff9ceb859bf557e49f470a686f3230204b5138f1742df9726c21076feb7f73c63378570d
749636d41778fe301a5138c4c313422d80fcdd8ed0f828d3c83de605bcda73a8a265b321
50195c9b6fbf6ad4e19000ebee9a697a351dad42f940fa372c46c96706a7df2e63c1f055
05c82f98e1e44c143a39f2e283c248136d43eeac5a6a6b6b40e7db45ff9e2475fc1b09b3
e453a058bab1d4d04eb580e29dfdc3a0e79b6a96e36cb2de656c828f2e4c2c0c6bfbe708
6aef9e407b60656a5aa73fa7ca4ca6da46c8440eeb593b475f92c3e298dad6bea0f10c3f
0cc5decbc05ebb381349be8b7561f901e77f047b76ba2685b1617a196df77d4a4b7f9b57
9fd50b45fc864df57b6812f9b28c4d944c2336f2ef2406e0112866acd0186659d2f95879
507d6584ba31378915a9baf2bc7b3dbdae4a6b54995008063a17bb730e46bcd084ff8287
2cd7138ee095d2738f8465fb58b03f2063886da731159c03917db2f3fd6e7505c37e1210
3465291356b2ce17d434f68271b236547f6c6cceed52d73b200ae22c9210f6134c227d94
cdb35cc02de44090997283339f80083b55d1075b6dd7a924695271095566ea62af4d41a6
a9c00cf882bed559530c0d506e83895e9b4b41d93e36a72310292b0156338211620d6272
85728fb88fa6e1833ef71dce8fb60de321a7b9fe32475f832ec0205fc5c3e42350ef7cc5
91df35fcdfcef88a3f39f05442750b83aecb50f5d53f562cda0f8fac5faae1a5334e2577
aa1a9d92de914558afbe31b7a93c97dd6640fbdaec232c07fbee3e8d259895ae9a139ad5
b1c31fd45de4f98066a385e72f6216c34c54b9fef7887fb47cda9e22b25770948407a997
7468d5a40e8898b98efe75d14ecef159fc58bc7d069defa72587d05c655dc2750afe414d
6fa40add4efe7c5d85a449cfd180a1590bcbc00e49fdba9509ce3d14104489f0f7f7d959
1fb18ca0dfc1ac66c0b04dd6b5d2cdca8248c0d5bedf872018e4ce63db1335c9dec1c5d5
76a4f8a90ae71cb083675247b193aab580999c0cb67bbd26ec8ab1545723ecf2b31d0a47
2ac0ee48c34bc823ef91af3f5417e63f3490b073e79b795c976f49a45c8d60b489612cfb
0c6055f87bd5d222db53657030f69e9c19471ec2ad584c4d6e8d4330170af5120c049e30
08c562d9f7ed7fbe021ee12381357521c7de55ed7a312ca02ed7da100479d8f199182e7c
6f16ff36f00b699fe0c64834fbbee927aa24e2ebea3591419e3a48e4a033eeff1a9e236c
8e1d2913fbb642bbcc6bcd6c3c0024102d2bb25f345952cab31f88674acdfd050096dea6
9e49cd1b5dbc41d0174080c1ccb738faceac002aca967886df446c60832276e5af0e4dcf
f53faf2766d3ee91c884028cd50943fc160a7ea26f363689f55e5eabdbd1eeb753f2c918
5223b02f624bb3c60e1376223fa9b163c56abbc4c25aea0f12ab7fc4875e24a41e5f0565
0437e796d5b73efa56c39420b7d13dba5904fed3e851cdf6cb247bbd1650fcc361422d8b
2b3bf0d1ac51a79fba652937347d7ad4e3220fe1db9472ab9083858c2cd1878bbb1326a9
a7c63075f0649e36380998109260f7a7b4d9623ed3cd23e41d495be8da826758139fc847
334b86674c6036586c109095a013a0057460f4181a35c9ddc571fc82f49f7c560fb048a9
336473580987413e2428f2f79fa539a35712ba2c1a0741a37dccf0de65fd6f2b7c69c4d3
c2af6cdf1b92b83aca0a4a12ae022e15f1f57fb76ee96661c4de71504f2242fffc861589
1da5fd165d12a0ac3626f0d27a982faa98720e2f7abf0bcfd81906578a1b1d25a062604b
8e46795541fd7860cd36c32a0f8deed0c43b0e436a434ea6c60e6cdaccfb71d744c905fe
b99490cf3393756dd8aff80d455510c69a31b0ad658c084f2806cb45afad23a627720066
93560a06bda3f4c6b574d7578bce88b026b433a45a119f22b3d4b0ebae360886b7f7cc73
e2d0fd4d7ed0c8260894252cefebd35010bfd969b2680c1ce16e041d40d571a08cabf392
a7abd3e28185e5b257f06c87fd0514da61a9d30621f34c591583a2db27c5650015a11257
952f7731fa14f12fc596cea02c16dac4b15262dd43b1930f73f89899fbfebc7ebc8c382b
9a920ace9af22676885c7e080116af8cb1bc1db6b2bcc877042347a04da06613238fc7ca
70cab2fc9218c073e8df511ff1a619d0f42692ee677f34d001a9ba49beda1455f0f05f7e
684533f40f20744fabac7a6066e3aaf500493ea38ed85e4aac0735d57a6f5af69bbd657c
4a5a97b773abaf6439e67e70252285d6c37e8bb593c38531c2e56e2d56875d7db858ef77
2477c7346c66d7f029c433b96cd7b6359077a6152f7499e96859c8340d59bea777819334
012d2072621666547b306937d4ed65d1c4e4103fdab428c73d0d80ce8fe36978dbd0a2f5
5de4076ca426e9bc98594edbd8f631513eba309cc2480df05e935a61711f35621f1b8ea1
0b0aa83058326cc76bb90ab15ed592b70d9cd98bf3cbac62892b1f74b1a7b0c2212d0c80
8fec5325c575206fe6203f75da549cdf40d281a55f68c250e5dd9f782ffe7c2795cc1a29
263caa9a9ca1cdaefd7545c45473cc67674b65ecede50115968fed191323581d2b0e4326
d2dba05da9dc64ed96d944c3ffa9e79b1421a0b198901cca49e3721a3f64499e6f41d1a4
7f9ab110016eeaa80d85fcf2532b4d57f0afd1f2c122e275e7e790485fee2f13b165ba33
bba4c2dfb32c872134921fb25abb5e54978557e46593e8cf9f41a1da5a85a6b3ba140719
2a3ae53cf530c08b26b86edd8221b9bad18b4fe869a40775395e31ca924dbb461a07facd
e591f9ebb29cbeeb30cf29b981d70e02424920a3983a0f57ea630b7d68bae97a49acdc4f
e4addc463653fd2f80aa6415ec9b7854565332d56ff60652bf6a7fe65eddd58fe1ffafd1
08328c4be4794c4e2f02082acb525f767b792625c9fd7e4c7f9e3a95a3cd2ae46de1e5cd
79724695d72eaed97de8d96af995b780be6ba16dee7cd35b292e37b68a27831269d30d62
e598f9ff2326b43f5d3885149cd0892b415604a08e4c7a8c660c38c0295727408211991f
10af0e768de8d28f9389c9bd8e491dbef24928700da8bfa9046f8827eb628ca3857f0e07
670919f2ffaee97ba42a3a600d985f2148960e239d36d32fda9cea3d95ff148e87c9c235
3a75a4be9faecef6c3ef9946b0d1425e2a024edeb0c2bfebde0a66d11212d5561f50eae6
cbc097d0f3e745b17509ab774454d76fe1e41393eb3ee3c9beb5af2df3d2fc86851e40d1
6088dbca8f58924825abdb408564cde3d927da3ad5245aebe28d711198d56cbd6283662a
16a7c9bcdbb573c959ba7798887a5ee246c53a167d51f4b873a575ed28db949693d3a70c
60603f17d522013ae1cba8eaa12991c6046f675cbe46acf1ab49d66058affc78798a5996
dfbfe5602ef828956470a0ba6a227bf678979be8c576e16e079a934d8cd31337bb6a8aa5
e0ad6b44fc5b28ef983ff2513e455153b6770b68d8e5e5ca94c5ee4231c1e5384e797f84
a796b3194f18ab259ffb08f59af6d041dacefb6d3820b2bacdd1208ac1678638db751a17
161202fac05469ce9f3a4d5914ae1fe68ea645400940a6dfe1c8410d8dc19d53af66165b
3359dae1875ff38b03d8af73e096e402506a827d271cf1d2583d409dd33f47ad698a4491
399407c8f54ce3dbdfd925a7bcf8920da9475ab19d53e22583ced7c4e2a1da6c5bf98eb2
0d7ce8f1f00920abced72e411b573c064cedf7c73ebfb901e9fb8b624da5307837b9561f
6580fa9072d504efce2be43252e58c44dfe92ab4abb1df08d3ac403382dd7d9097f2b7b8
349a5bf343649c79b8ab56dbddc1cb4897870b37d6326d1f283ecd73865b8ce0014303f3
8ea6dfdfc053a9e0bc85dd6b0a8421ff83a5d2eb0734d90dc08384ffd40a457fbae0a7c5
7ef75e90b25f345952cab31f8b899ec16aa5d32733b6dbd9dc2c7ad1668a617c0165136f
53c09470d7b6cb7065aa7f4883d3c980cc50c37389d17d3fd7a0b9b8b9a596f5cde312fd
b175fd9bba3158446ba299bc146c4cdaf50e30bf134778d7b714b8229d9d1dabc0728039
43e9d4bd6a812d6fe90c2eb2fd00ddbc1b4ce66e0af21373abb4e8951ec96fcccc06a385
421b563dd3e4e39ca78708a3d6b524c3ca37f48d774693f5292016995a0d85ce902a6338
8ba112d4d5a8705569ddba8bc7413e64d3914993f19a716c1d35634fe8a497f6066b4ea3
bca39cd0257a80991f70ca447194086d0c90f5d3e8c603a23732e31a25f0c958d6f6316c
599f2b6752214b933c18ec480baf76aaf2a2c3a02f9dce970b5d3ba8787462415add627f
8f4e4f7bd45b8e268210b943f552f40532ae5d861d0033225426b50b27dee58d87c9ce7b
424beeab3f47068a8c3912dad5384d0da8df5772d6243ec6faae7f0ca7eb4d60fcda3d80
53a85f3893953cb7a6fd7205fccebf67fab863422b03c0544e07c42c31065e45fb57b4b4
be281ed58f3ac1f13c85932514ea86e2fb3e131ccc9b3000ca3d3a0b0c7cec3d1db7e74b
ba5c1f7ac94be6f66c1d1d19023d21ef7b06b8d344cb30c42104e6dcb8725a16b5d4362d
3856c4467ac3365eef62e308b8a207e82c8fba67d1441bdfa665f88520dd10b410fb0e64
bff72da02527908821529f20c0acc67afca5299f5daff0f07dfd4f2b38fb22fc0da9d59b
7fd1775a4240a744a7ddc5c683f6d7d86504e167968097da9efe69f70ffba9ba78ab4209
9150f8e12bbffeb9d7fd11f928d0f5b16788261110b7380dfef2752a0c831eec3ba3abea
a1fe3eaedc5938e65fb4354d2051b83126057196ce3ab61ad2135f1a57a3fce6dc4ed577
17a85c20fb970e6c9742ca03234ad10d64e8cf04910c9019050ac3e6152950192cc03b25
ba0f85fadc008cfefc52f7d9aff8b8ce1348d506dedcd233aaf61835578789e7d8e380ab
17be01d04bb139e440207e67af87aeac6f959f55e4f747cce0b63897848b7f78da5aab82
1cdfc8bd63d84389ce8259254f03427d3d62968abab8286a35fbbc13cdc375b01e80bbf0
4395f8aad7402f1104c540f1a73acdad88bec9605265e77a23aba0028bd3d477f6ef6aa0
d5f88438ba0c8d8b8bc760f2c669c64371e2327ca61c582d28a2b136fda51c60e7fd6362
97f9dbb85d69a35589ca1a2fe46b7869cc61ef4addf31bc327079480f45c3636f99d494d
d260e245c4ae6d55f373e16eea6bd9cfa1e5eafd8867280cf3921def4ed0dd43b679c588
de9533d0ef893fc525023129932408da4d1128b7bd8de896071d875718b42d5b413f33d2
7409614225643da91f88c7b7b0ebea0f0a4adbcfd7744cb80680cb4ce79578b9c357be2b
1739a5f333174b9c27c21d3c9c98b0ef5d5b7e3d3940375222a66e3aab3abe3f204fc7de
123e7605c66d5e8c4d4214a78c862da1f44e58ddb56a60d66612b3eac9cdefc8242f764e
9a5d8fb34a223b19a95c75001b2cdcc42b9cfe655a5b3e8c11f66985278dc13214b80ad6
48a764bec4f201225e6f816e62e87bd27e0f843c7f221fe83dec0d56117336d813cad3ee
4b09ec03540ae2c5a8effd00183bff0e0b0bd472f226ef1b075bd888528d56a6ca95aa32
b172df8d5b773c558af666fad6aa3f97f0b3a76fa48f4bb7e1c645e84b217f03e0ffc6c0
f7e0cafcbaf69e7204eeaead9c980ff7966b96dcfb859541aa2b09ffabc010c57dd17be3
547147ecca139f13dedaa5f09370e2206b058315ea065022ca67f50c189ce3c9a2ee5194
373d010b1f7437be43a6faa2a919e708f245d8cf4b49e38942f1fc5b9b5faf76d0928228
ae7d92ba57603a8cda784886214789efbbb2b4f84496f2b9f8b0c2a635b2f6bf2cbfeff5
9c4a9dbef81b0087d408a50887eb34391bffeeb0dd871feac22d82d028d2d969800e765b
a1c50ba2af39fe946657decfe391fe55bf74c3d594b7c805a82091fb0f8fedb691dbe2ab
542aee642b93a1bf15b974fd33c8214ad925d557fddbdd85f98720d9e837c9800e7f1d25
8222a168f26daaad4009b3dac6ff153bacccdf84726d82d804a6df46b463a0b4df57778a
d55caf15250b8150954d55025e64cdf4a7f4305d97885039057ee9d7e66fee09ffdfa87e
c7d1c5abcca13e861bf6bd5d9573ac09cd3907681dc4c6b2b8d4e8afbc0f5611f4eed5a7
734690e50b4a4be08bd56790427590d23722d4d0effcd4773e59bade05792648e181a8b4
ac7c9ccdceb2e544f8b5b8d815ac9a581f41b2e3b6d8a131b4d2ad8d5151262840b766a2
31875f946c76642a07cda4cd4c2c2be0289a4f2fc0458565d8d139f2c0b82345e863bb72
48b46a795a599c013a674d449789fd52f9168101388db76354e8c1826d332dfaf36df72c
3d562522fb046bf0962cd9f69a124825c9b29f5286355e5a1904a00e498dfbd0e131958d
75e3af42cb0c80763b45c0cc72dd5213097c7877c71a386d7c6d0e6c92da6235c9ae87d0
9b273d8beac04b69acc66f47efdd6577448f3da713a7315285e3d99dd0445a7f283cd19b
4bd996ff68db8cc08d858c42d65069016efe39b688cfc040bfee570097cacc44d16f800a
f1c068e222f695f721f638eae015f3b5960a8b389dc2f446d1cb957e4d79529f64e79dfb
2297652499f26c0c59f18ae339087a8894111a8c3dd68d8808524de2f24b82c6e870c20a
f8531dc51fa2f041b9d2dc16f8082cd0fad8b1a95e81bfea30c6aa248252fd48407e981e
c68c8c87c45cc242c80e5a2ce1e2f149fecd63e06f6d8bf8b9f1cdb449252ab7fcd3284b
68439e201f2916594211b9214932bcd84ff65d46d5aa53e0ce662ce053f84d3ad783e8b5
922da177ad1cdf9978b84d91f5adc926ebe5f186ce9ff28cb35964ff5b1a18e0b0bc9a43
4711e3f45889265c9fa4c9a77e3ba078e111b268da41b6b24aa092e2ff72be94cc458623
639b193b2d78190c315523867b625d4d73ac66503d32410b3b570988e964fbb87e88b80a
67c9dfbbb36d32fa88b31ccbdf5dad01e38a1ec67faa311640c6b7740482f027f2408f36
a470beb7805e92720996d4509fb953374543a209489365b05b32cd569b142cded4d13d65
e6faedf295c70574e1adb6f742beb883334f5522608cb9dd9d2a4df512531a082811f333
d111363aa8dd6ca56c4db9b87c4de237894f75f81541fa25bb5597e3e048563446686c02
681050e4847c624000e0003b73252ce903a09fe1e56b1d5ded0f16b8691a987a3be40a63
234a5a337c84118f870fe7c0cf0424f68260ee1ecbccf828493c6142b54a86fa7d16faa4
46d10c2042f167b5f4af4c08480360220c86ec1f2f9656d096cc40d89fd37b72a7b09f35
152df4989c23ad3d5831d8b165abb650b391230bfe0e40d9ad23f12073893c7034200a83
d63e12b2d01abc192977977bd77740fdf904d0e32620c2927e608bd160cedcf5b9ff8bb5
f8fcf0a81906803821756435e1ff707c558a4dad50ca7337a2a4cabb6af75a60bf306953
744c556f0f05abec524ec00e661f0c1a5d2ec944627e9862c08d550de9e5685a55019b66
902fd93dbf9fe57be5ca7515a0f20c624da0a537f636e20b74403e42af651bed2acd1e97
a7eaf99ddc605c2943e28ed7d154340f77b46e8ff33abad0e9c2593a59f1f07a5c198848
d98ff4db7ca35aa364ddd6754c607d6fb8c0868d1970e05bf0cd9470a3c3d8b52e2d6376
ae8e18cf6312e8aef12ddf66f8489f9a7f7b35edba913667b649715a9d4b4943bd725535
94a5fdb4686d0d4177f2e16e149565352ea6d9c1d102b1a751a285265533641c047689d7
d476959639cc7fb8fbc0d59722b0dfc5fb2529fa9f1683a1e7b30b6970e8861021bac582
ad0e79cc73e43a61ab6fa7762a0226ac65c46c616cfd2498dfb0f73b4a0f7c637aa59672
b08ea7cc4c1cb522a051e8800c5caef838e314ae2e2d981b8241dbd82033829b0df4a581
61bd891852e939b6b96af1040cbd43f999f83d2905c89d10aff24bf5691eb19bef4e1179
57d1dfbc1552cc40fa7cf4ab6da1a299b2a2a0bcf545abbba56fb8ca65908548f2844cb0
b9cbf2cc3b77b3031fc229aaba86f40570c930034187f3ae6836f797d7bed133a429af64
f62039e03b342d1cfeac02e652b37989821984296a0283719ec6d2ac9f216578087af792
90b391471297ba241db972dca38490e0c60ce7bdbfaa647921853e35871846fa80b6559e
24e41c6e310ea2e0748acb77a99c1932c43466133d8fe6bc30c1f3f4de41d233e994cc94
4264bce010820adad3a791800e067e2a0c77b3f0776bfa8c8450d440392d2e15f000d08b
6ed3ceb2f10bee97f87052f25e71267c2920555df9c2b7a9e30e968800677966b5dadcb2
d2b0477e04c06cd96b47f99b1579b4a8172a39a519ce556c6f3e846360e88a10c19dd819
04a87780b8c0ca5ec238f96bdb16f3875acc05714f268bd76b4c45c6a66d419684e490ab
a32b9cbfe447828dbedaa158268f4be0490b8ad24261952ca82055b8f789fa98c60701d3
336801a8d475bb491716c0ca6c8ea0ee20391dffbe3553e4a7f996aaf6c042ee1407ff8c
d241e470a887903a38b773f5562444fd3ae7b3fab03016c6c993788a7daf0c1021a69b02
b3f7d1e4de348e72c086d949244de30c7cd1a0439ac8574f00debec0a2043f5d6b52e2ce
dada60154473c92cc9476c05315a9f6a4bd0cea482cdb2da70b2474abb7b4e8be948c968
5e8c91adf808ae0ca8c7f16435f5e8fb1b3db784dd15c7f56a7dc0c5d4a7f23212a5a8aa
b1d9a2de42def563e8f88226c32162a66d73fd6a6b83abfaed2c5136918c6e23e70de46b
ac84678da69bfb893fc1cc2ed7d457c73a5c33cdb11a021ce4352a0a7757dc4cf02f92ca
fdd5e72935be5715bf52fd743529cb3571aa88222d5936eabff417c517e553a5a85ca4bc
77c59666b196af23663cdae339d76f115d944e99e3b13f58d9899da87e8869d5c3c0cec2
39eed3144e5b5419e716e0eaca948f87389d33f64fc517462640d45435289528f72fb02f
f58c8ef839d4eadee4d7d22448d754180d8e85f72e786a330e1267bef1180988eb1d6360
99c753f915f75b13d74439f4517be1e3772885f59c1997fa7f189d6b301ffc2ac7f20e3c
a0ab500901948c3a11db0d42c87262cb772c58f1712f66a52418d5226eb4956b1abc42f1
1f965ceab96e9ee272dfa4e18a2c25de758c655eeb0e2965bd4a0451db73cae866800f38
d7fb30b1984acf244ff7c8da5a6ea2711b85b3597b7bde89a7a1dd39d8280461f4ab8796
aac586f22f66aa8a52db7766f081a48e5e0aa34953e6aee668b3cb5b326023049d80dd38
75a83390e3fbcf42634c59df1dc8b1824d44ac19ce6ae109bc2e9eee786aa229e1b0e790
74ad8052593ccddfa77fe95c6df0aa8404c9afb8060657e1b7e141d4896262c875526a52
683984e31697626c45f12477f41a7fc1a922ebe71948ed87d712b860f639a85d6ed20de0
1aed0e293ef2152dbe9bf790a9398812a5a38d2181353e220c28a1b5509caef7a8ad1b88
19b7e4ff1a0dc1c8416cd7ad8bc5f4debbac4dddd707a5ef0108d249926835ef3fc77fbc
bef4ddb614a0ad08e1d24ead01f999480a55df7c525aa76eb7c0dce097fa68f1c1e25c68
eb6fbc0237b61645e9498fa3b132cde167a80166da048d319c04246b11328da9be91dac4
bab6a1ff075f20d8319079d960850ce25446bc410601dca94855c71d6c2fdc2c30b560ee
c2ba46c06741b1f90f4ad707ea3a7d69ae4fa8e752eeaa6b4199cf039a4453a759921029
122c5ea0efd7b9417a7c5dd671cc08763f198692a449ac4a163e0def87d92bc5cee96180
660b461bc314472064869eadb345ece17085c794bc78a0fc7dfb4918eed9915b71444038
3c8d933e29b330ef00e0bc80572912bb9444661513fc9af4f0f389ccf615b26e4e3a695f
f2aa7be92f09c02468b593c33a6fe904cafd6def80a3f2fa25639baeff660a8b56cafa9d
88b6388a841e7e185e8cb5490d67bbbf27e26784dfa33f8b11b129bbc008a108d256f8cd
a64c0b3638b3e4d6713957f39d51ab8bcf5077da8f07476e52d3ba6a44d3e52ad1b4961d
66973878ae78543c786e1fa0b5c16f277fdbc6411c534ac926c245148ef103a3aa1a4021
e7d47ed3996d8e7b9c886000f8e7cf9ea383f3b8668039ea3e4f94b5bcedc11634a4235a
fe960fc97f3c08191777474a1d32880d6fdbb0b23d714adaf89cbbb7345952573e6b34ec
55f698d5933333aa8ade087903b0c0186013404dbb9546599dcd5ff27ac56ced93dda426
8c0ecfc7c59642e16648459a36d8c75041859872c6035599bada7826cdf2328bb6f6f06d
f1388847e7fef675ee839550ac2d41a3ca15cf633888ac42c125e9b95fe195a7dc40758a
60dc3067066ed95cfc8b896ee7459cd69856919538c6cc686eb7e970320361c0f875e1d6
43114356096681b777d9e6b3fdf6744d0149039c958abbcc9a759aa1745168fb4a451d00
379658a864297a4b595894790b7a48cc4c43cbe45e1805174ae39e23d872e552117473ac
953792145dc57c309484faa69bd8f08a7dc061e572ae10a7c473a3582c8601a4a2e3437c
51dc5267c4a66cb9ab5f1f1a6b0110b0836a85b29a17c4eaebec1aac22741d12e9857dbb
49bcfb71d2f2a8d34fae96210c97ce20522e90e1455048301ddad4fa086b338840bcfc4f
a2540bd7ed6a2e2ecc8be3a456c01c98b46732e1d163b524006cc5fbb4c9848bca42f8b4
7c97e610e121fff46a012693b60797ef9f227e8c6d94e167509954a2e923621535d4e735
9e5945552dad916a7d8f5c3e22eeb94b9869b12a0212ae5aa12ab600c278875a05fd0e72
4540f211737b34234dce6a83c75840cd16a27c5f390042afedf34078c0b9beeca53e20ac
17d07794b1dfb88f023a1ebe34a185df25c398e0786f99b91e963455e6de308b9ee8df78
b7496a855a3ea9f2e6e5a9a279f2bc2e57eae15f309242eda333df66cf9d143fe7afc3b2
8fd699485a4f90fd6a877851674f7975b436d30ad85392cf04ddb1147928d31c2625fa70
d0cb1afe7f884b8265e50ab4342044fbbfdd6d8a37619aa6689b8ff62910a9759c4f3d17
8c6866f1be3248e1fa203351017b94197cb6bc4f940d2cf010068ec5c06b4f0a704de185
58d789f33244134e6d6ffe5aeea602a88d0ef5a1179b2a6a0cc66dcae90fac5dbd12aa95
aee88171c059b2c26b27aa43fb8db1e5210951a9730fbf877c6a71fd7fc74899e0b77a1e
18d7e6ca76c28bd6519a75b637dd51b88b3aa4390afefa4818126348b07813a26cfdd358
547e8421a156a4bc68cb261fe086e84f87160b042c3b846f49b9743b59ff2bc85ddf0ab3
0b35087edb726183475dc6ef6418023b12c8cc368cb5666cb6992e2756df706085bb5f8a
c5fc6577883a70adf6f7175dc6311a7aabdae4df3d83b1c0694d98139cef42c0747f0617
17fc3bad97af5a8f9ca285ec4e828456fd04c218a7a1ac019c9aacfa743394ceead4ff8c
6a18ec66d97b6a7ad072d199112e8026a0306bb7af9d71cdf8f20e9abea078d01473c002
8446967ed5129f025f9839e0edc575ef4cc590c31e3867137ac45c645a465540171b4dfb
65d39cbc1df62d6762ef11852f446793878015d7d89cd0476243b28bce62faa24456665d
39cda50ae2f27c5da24d87d20c3428d784c72340546c3e52176579a99c83c2bf36afe2bf
7fe47cb3acd3f120aa11cd2ba1a7c3a99cdd7e39a5b1af9de17f04aedce7b918a6aeef74
eaf2472359db8cfe53a8b481b0830d3845a54354a84714eec0f8296d44659dc5a2227cf4
2e758f84bcc120be612958890a5f62bad47abc4d88398e91c479479caa0d1a783bf12589
cf97773b7ad5c0274471869156c87f6c3ca635848068843b7590da69fab2eedfd10fd0ff
1c1e662bae5a9f1420d7235667c46d516f6ec1a2ed35700215c7948da728c11325da9111
49d6f29a6ad9cd9f3620e4b61120ee25aa46d3951dec249889654d88b8368cd52070acde
bf1079d76a3051c3eb7dbd71610cdc65dfc149b689a4a2594925be3b8e85a897bf133acf
a98b4cffe44e877de8e1ced9c53117827227d41340c8aca585972a355ec70eb606a637fe
3edfb039a1ca40b79ffe8fa6830db5352a96ca7e18e7daea73eb9b1a513270f829c8d346
05fb9942ac40829aaaf1bfc6b77a7dac2786424182948c348f04552437dc6b210aee4723
e48320ef654a1c942ffbe3f9893664e7f3b032ad5d6502a642a359dd9496a9b0d345de61
98b1282f5031df98952558cc20716e4096d7d0980da8c637e81e9fb490053c9be72306da
0c5fc6add0dee548f91ccff0ac55cb96ad8f565eccf569cd6183b7d0466556254d3dc883
77e70584974a466b907995371ff86a774c7dcf82fd1962a2a207350c40fa03dcfc760dfc
fb4d97dcec9fdb51f08ffb4cfc8c2081f2da981255baf55b076e24a7046e48d7c29d0f59
789e519bbea33abe36b3433cb4a3593824718fdbb326b38f5c70f57b0da4a116b14b3119
0b53a42f66269706569952316a73fdb66298d49ba4020e421b4082303607e561a48bc1e3
72f43489dc7cb4586aef5f4f1153c26b261267e825f27603446f19f161b33af8784edb2b
ef516e8181fb0afa81ab7ce479473ba6994c8b77dd6d969fd8a34cde7dabe38b00cebf27
01c7c7617a25aa2a709c08a5d891dace497905356b2f7ed4dbf526618edbc27490cb8baa
23cab53c62484f3a49506aa9f1280c999b0fd658c50352607d5661dd9fc83f05977275aa
bde374bc13081dd16583d5ae296997f3dcd2b0b19713445fd3512ecc6d41c72fb487ab83
217aa9c7575814bbb7e2c7b70d09c58d796c497ff32a7c4b44b4d614a356a927ce4694c7
1a3d6c6aad5f05e3583d11601e80f1095fb840a2c8f78d43b302043ea5378eacfb417be5
85622ccab95a4226f9840de5b165c5f29ef9bf26e0496e1ef7a85bffd9cb0a658684b1e8
d00d1baea210e7ec8269042f9a2aa848188724482d3bc9d6fdd47ef745edef1a7c66dcb6
425d40c69c974fb5701321f8da5e7da33b54fbba38170a86425a4ba983dfcfb04f58c8aa
db87a5406b5e4db38ccd9430b437c4908067554b9233f573bbaf6d70cf9af2c1b4c1c719
7558084dad661aa919e2ae63dc6d64b0bc1140dc33182941cdca77302b887650157b2ed1
5fe1c4ead85afb9e11a2cfc93e5804eff9893042046866422d23eba508aeab9c82585c8c
e252c04a79bce16411a4d478b4e46ab8ecb52ec4be06cddda2ce6dce4cc8673d1a1d113c
89a69a39ec121357cc8a3c7a3f3827d9fffe5301baf5ebc81d2a9ffd72025e0009e4a6a6
b4c3a096ec4fe07d2eeaf02e63d89425a69d1df12e9b8e6a7abe73299e7cbc21779cffa8
bd7d97c6e8ae5e725c00f7ffdf1a57c6238aa36e59f2a086601f0ea23c94a3b9eaac6dd6
00a7c06dcce0f161f1910dc77b50973bb7e3a168ded8cebfb7a70519f4e7942968b3ffb4
cf7052bb61d3340f9ef89383f11e76b306f126cc23729adeab79de4caa5559cc763573d8
2c65dafe4803ddefd633dc242f0f7f3bf1724cef9f12543ec4494fc79d3aa0dca575ec7d
1ae30c91ec39ecaba5c01e1500c0416cb06e60e8ee6a374d95286fd00542730dfd11177a
e4071d5a75b4e2c84de86008ac3d92b41e1890c230ac7cb5bb122e24baaf870d95d784c6
af0c85ae8b3cce3fe63adcf5a1b8ba69de10132a214b85e69c01023e4d016e5cbc1cb10b
0fce4949f77bdb4d224abc42830db92e1d5d67254846d75149af34f2674ae9a49b075071
91b874116057c92fc64352b77389ac76d160dff83ee095da470962ecf2ee0cdf1d72e69a
546a26354ed4af8675c164a31abdbda7941967cc2ae1acf8afda14f46c1f80f3fc2be574
7354e4c74dd057b7dbe119df58f9fff9716338a299289b2732425abcf97603ba3cc5d596
149ceb17e6365e607affc4cd13e2136ed8321c664dc3aa4ac0a5bb625e986602568c1ef2
ef6fa4e96f01a1f6ecd06f6828ab419cb7a39d9d9a1f486eb7b70c91035fcadce4b2c08b
700cd74e8b2e018996b4b27b63841bc9b7b76d1f431b92362de47e392e7ce24f8e62dcb7
72f3f81638e4f12c1d3063fb8836904a8fe80b3ebec57365890312f11b61ac9871d08e36
b535f2618ebc92a055a8faa883603531ba513df059e38bea193abc46680ac65484806a9e
15bdda3730ecbdf51649efa5315e9249a06710452c32279b75c3b7b1356bf91e8f93ed8d
b227e8c7024e85ee36fe625be74a3416d78164e0898b065d0ae5f456408075e259ed6ddb
e2d8e3e6c883863402eced1456c1de2d418bad59723d71328c5c0f762bb44de7772669af
b1c227527c46d39798f075331a8849487216d22244d87636763c946c70c5a2712821a130
9b5654559b26129a82edc692dfa938d60437217a267da09173d3f816011a6658cf1a8ff8
8f754c3fa44c0921a31bbce28993545af13262c21438c6ad8dd741918fd340b924aef4c2
f484e1dcb87afa7e9f6e6da449bda95cadec0f6dfe28cd3d6b960ec653373f2100e304c4
a6b908d1b0ced004b1d41a7fc0dc725e1f41ca297c2e000c7381cc2970d3d7783bdf2a82
37e7372aefa9b56392ded7a6ac1ab88475cbf29ce7047500b75513e4e662aab5bcf92dc0
529aba52dc341b6955ba11301437e0a930e23355f917aa6c5a94e01d41ec43f1a1d653fc
699b8cbe8c5e432c842f81f084cf9454035e83c60d933db3a5f64b0031ff16423e629c27
be86ed43e12ce061f6d9f3be38107043f2b965a2aad74f10504bb4231151d745a6362fa9
7ee1c3e69e02c34d5668674ddc1f8af649119005b6d1356963d2c0932638d911773b6433
c72fee02d79bc18430621b57789487cde0939a42f8955d711d815dd14c7f31b34a60354d
f76fdf085bb51117f6d46d625a636953143344df1ba5c65e161324931803c9d423e87ec1
3041ad3334585018dd32acb1338c8f0c2cf7b3eb173cf4bc5f344490e7c38c8926646d7e
0982d8c582b1433b09ac01725e96e34ad49fa31e146bd1ae65fb1095c651e535f06344b0
e39e9245e949d9e86db24a7c59059bf223f712dba129a9eba82f80f31c360fedbb3c8dda
1f03541b380eb9c480fd09115a76cbda92eaf2ca15c2ff5c04758f02d5bd85b9a8393bd3
a0444d968a72a409826caed1e45544b20690015487791af43724ff2ca0958ecf9d28955c
fd813b2161664a42a8b2ccdd0437225ebfe71fb4a30e7489958d2995ea29eb90e43f38b8
a36739d43a50f0507b8918e70c609e9821b58d71b5fc52dc4f902e2941c990e2ec68c7cd
6991ecd1b637ba2f54b550344a2e56c8cce63189a79391e7baa85e02f6c37f1112d9faf9
13df349b99317b21f387a12a5f64433141c024b8ae16f0dee87fc499ced96280c0355c63
bd02a3441cd983c8dccf78be1c7af218af7161660a60e5b1a65172ecb0500238c3f8b1f8
fb7a7ed32a8b1aec07707524c82f5cb9df921a5e01a3745850458509bbc92b2656d9ad58
e08cf7fab8e64b5cb19cd148f827932feb22a746d1b5758916fb8ffd7f488510a7491f9a
a11d62edd27ca71b15754b0c61df35083a741d0e14fb1b9141339854678e7714a84f5922
58118b220d3b65aa05a0d931031cfeb1bf4cfa1b9d557838c9c102841c452b53dca83b09
468d724b0baeb18df1ea813b288854eaed92b77bf70845550987b2e51d4c24e4f74de202
c54c51f1f0b9b1bcdfff0a473d9fc622d6dac61a3d3147db1d4b7733d90701732d4b239c
47b10c442db4af084a4ae9ae3907b457531e6670a47d209cd27a37c9a1a22573d9097aae
c497124bd64483742a1b7c52b48dea1708d5a6b220ab0a62f74022096802084856991a7b
ad9933f282fa954aab32a1d4bee7ea375ec4141b4a3709ac7d90c26130f4e0244bd9357e
ee127e917d4c4880da2e34c06a61921391a248728002cbb11ef0aa3b5a217d3bd08573fb
6e8766c0f4f63b9858052c027bc7f6c981a31a2d5c607f66d8c40bd44932a5cc4325a3e0
2992718fdc348230d89b2193a61e3357f46fd44f7c07db068fc2d12b4a9d8760c4cb1838
182525c294fa65c5a1b2acd2459a53afaa12c2dc163d1a1b5031354b86c887c3a4661e6d
8b79e302c545fe2dc3567f6f1a6dbcd5d59d2a4df512531a082ec87d1871cff909d238f7
046a70be60f4e0327595e16776589cce66a2e445cd885f5ba46653f917aca21a5d6fd102
aa461467427f3ff02bb634d8945cb1613f8403c9eb78561a46f0aeebe46318e72379a47c
4477035535e44a6bfd3ad90149f11115563d992ea87055295b77488f8ecb5d488dac01f2
d6b8f9c15b1ff3ba2f0d93ce574a4392ac0f9421e10d59520783bd9ba485b21da443d5e7
2fd559de9f5c665c43f07215254886c005571f88c15a2fb56cc5fd138c6ad940d3a27ce6
5c0132a440869345e82511bd76572766d7cd788e473558688c3de78708e7e46ef4d3c72f
798514451b138517a0d2df926b3d22dd8589120363920baffa7f2538f35ccc7072e9d5a7
b06c302f03c3dbd06faa57adff562664a55dbdc52dd747d260455681ff2d9892117bc16d
46cd6059c43f9a57118c3f864953c1be3d6f3ba215ea0de40fe046ac1314cd4537f5e97c
6b269936d2bec50abf709d92f43ef9958d1e51c8f65bb5be775828911791665d807a0369
150d30b84c1e8d47b21d5b96c2eb0cb9b5b609356af68fc7a90cf1479f2b27c36e28bdc4
eddafd47c8a488cfac09b9db75981eec006ae8cea0cd3b87dcc3bf5c3ef926d812a075fd
bcbadc07188d26aa8149468bb2d7302936a9af9cd2b398d1ab781d5a039c061262bca8fd
7c792b7a0f72733f4c7e4281dca43d17c1a7f0f6b4ef10a1f71e2cea1362d30746d3efb9
3bede443b2968689ffce3368914996cfbdefc53d26f236c6945d33f6aebd8f85f02af391
804cc171eaeee8996762ada0f3d82802e447982eea90dd7a34f6ff96290a562d98cc4896
ba2781543b3ff8872bafd035fab633944e6cbac5c03bb88d988c64053da1723cc04df233
438c5522e70573742a7b1cee2a8d70e6be0c0447136b3f95b63f1f2076e88a5c97b36093
36b8a76f4e2b1ae8cc50eb7439b2e8cf5fee0493ae56ce9432c98bc1788e98d19d853393
302b88d3969a896428b2f5b6043a37854fd3ea76acc5e3193b65cde608c4eb48658f9505
7244f497089cdff5148434212d94b081aaa4ede0697d545efd48c9fe7c7c59540b4077ab
d8e3679b26dd7c61765e938865765cfc2d7babb7fde7dead8989ac6717fcf57cf35acf1a
d11ebe5f1c9129200a2f71b4f9467d030d933a9e073e19d01eed2312cde9bcb0d5337a67
921491c3ac41ff796e5e4abed6ce7890562a9d91307340cbaa57959f07bd1422e82643bd
0d8ddc8dec7238692eb941141d9e2bbf983e4e265d32f38a0d60f4948165c97e7d273fd6
25d6995c5e8459d42c3f466423ba5d3d44693b10a956dd58c21022697653d846dbba6057
e9ed5dce695ba12ec2776ee3b3d86a90c4f0c3128536541801272d8608c29e9e190984e1
f6e6d52d1e4eb9e87c6e47b486fd77958756fc9be90a901c50ce6996b95c6858f9c6a036
068f5605e3599b28212773c84ca45c47776f2489960c9fff9310f13cdd9474d4f6665c69
c199412a2c22ac4d8ace057b33725527900aed8dbe6203ff5a241f30feffaf0cc5fb6a15
d170457048a6c682a28bd9fb1f0137035f1ed9f90d451d676fa27553c07755a6cdca7838
356a90d898736aba5401dc2b9da0df8d3a88282999a9d975d1bd55010e162d46a61f70fa
5e69dda830ed3fb1552c24ba7f775768585dc716d08859bc3a0e3734070c22e8ed989a0b
39fbddb1aed748699a0ea58c7bcb9d118dca8b3ecc18dd04632647a5964cf779988bae41
9511681faf2ae99daf2af1bb00dd3cde40666670b45bc261a16743e5de215b2de786415e
aedad9d7ffc1e9d6708d93fc37757f6da262dbfb5dcdede47196ccd6a3fb19b0f9b54c18
c339af5504074b8fde947bf484cb308ad7ce1c74be6fa370055f1688751816c96de51c96
e353bc2a4e024b4cc9573c0b2b990436da0f2bdd192bdfb99a0561a101edbabfcfff4af1
e7429d03b663c39b81c2dc6064b9858bdf24f5feb2475618466e20761f023b9940cf1e33
f6ec08ff6bed7ed80bb99d0cd69f99c91eeeb389f282068ac805acb953bcaaa2d0bcf523
80f153fa9aa667468788a8c7b0d7a7ffe787384d766198d32eb05eb572facb8c3d7d3220
c84caa06e6d660a32b6d9ebdf139ba4322bf000b7b8595f50f1f6b8baac9faca5b7e091d
2a80befc09f69309cb9b2cd6117bef40ad9793415d52aa76ad245dca264456893535cbdc
1ad0a9a7d9b684bed2d6b8eb3286559f42cd269f6e15f0a7fa23b4f60bdd626b24b490da
6382d384ad88571d4248e4835b647c1ddf93db892dd9c1538706eeb6ddd14003c16916a9
0e311b1dbe3fe51294b59bd093f6fab7828c6205ea84161cb8ba8dffc4f2a5a506281f72
9ee5e453d55c5f0ed2fe261dff0576c5feaef6192b82a64066b94e12b85fef6cac9036ae
2663d1b66143703d0230489a9f1a9f5a917743482a2512e4156faf159ceb7c263f5306f0
22263a632e310623c222dee3096ae4d655b4a146d3b45ba1c1bd6c40e7d4ca43684d8638
3b53884d8526a2f299cf0947d6eb4d79ae4cba8e127523029686e39dbc2b875b99fab1a8
b0ee1e29a4099535384837501d52112435eb6068e9248c152f4a67d891c79daecd5562db
752fec5a7ee20e342f53d31056b9bdcd480864baffea27363012fd4324e120cf88f89a48
16f865eac9e5c22c74efc282e908bf71c02b6c9cd72faf76de2eaa73e03339c9c2263ba5
2ff82d277a52c8a594ec6290986740187ea65569a462c0cda5489dba1b175ab3eb6e424c
f684d067d8dfd5c6575d8d8d789f7bfdb08123929d4f5b3fcc6328c0c3326aa930cb2214
630f37ccdfa43e3470047440dfc3f16e8c07cc72def309709f74169f75231a61c0d178a8
658ed417f27b448a0a31baebdba37daa48fc1dfb884f0ddefa50e2043d819172e2255271
219a2c444e95fa5fcabf1a90aed57c686e0345d585d70bb7af5ec6bb8058a45efd0650a1
ad109ff27eda84218c6ac0cb7610a30f099cfd14f815351685a60a726b2db1a0d981cf71
6c6858d31e6da29805340c6a671184640f724669d16e101dce658186d3df013f348bcde0
8ebc4745c28cf8ba54de39425066e1643cd07d9daec72ffa0d15d54abf4eb311fcdb7b99
c00846ffd378b013b4101b377cb51b1a3ddf85c8d087f99305eed6c5e4288087dae14e48
f0f79e13b5d3f4a376067b38f99b0fd692b26e07ab5b783d9306899fc7c8208a5be82902
a90f2932efc08c8a4f7136b382c13ad6b136dfd53ae3f6d7da5eb46caad2d1735019074f
e7b7469b8ad29b455b803f1519c1c20b497b6edc5ed121d5a4a619baf5fde8305636f087
620b52407ac699d19d683f8e870b8bd552871653c4a42eceb16e4679bdc3edd43b0e153c
0e5ebc9a8fa8cff5edb30adc51522662b848834ae5d7edaf818d4b76b927095960074320
cecc35303ec4fd5c63eb96d1cb333e8f84cd7ba01c5615e0656cb6992e2756df706ffb80
87e4ce2de35ebe932114b28532e7993062bcbbaaa273efb1f6042e6ed759ca7a85ef801c
1179c1c90515927bc74fcbc99d79e0b93dc9aba14e3eaa8e2dc62483d1f309225eafb7e0
24c7c5ca2c7121ba51a93ab75d544820747fb600f3b228f50e6eb8812785c3670a1e287e
0058b7ba27c667bf6580c6182581516750a35b8d5ca83e0f1542509bd65588a11450a8b8
ecd19628db97fe494f5ab792526c902e182977ea82c18ca6a3fcde1e07ba396584306a06
3f35f1b0d04a359c3dba7d0725a37968a36867adf5e5589c7cf50bc04d04223197547a4c
d416f01db50ad27d7d041a75f9671437c7bad4886fffc9e98cd7ec8a6dbd2fbd7612dd3d
c84aab95ecb8e7bc9a4ea50fdba0df9b1f39886c90668c1cd5af49143d5680531f526ed3
86030fc4e45a4a4f45b46348e77fbd69137e72a706892a756761da167f73ca74e740dbd3
5a2c5451949938b4fe92350b1ca43f7a2ee088b95651012f664c54cb0f1d8a8b1dfcc5f9
cbd685c7ed1578d0ecb11c59bfb50c8fbd7b65c0ff93fa378fc6b0c64d636940f531c45c
18ad3b502ea22a2b931a620bd5401c7b92bfa6622095f27e9d7a54a7e63471c9d77557eb
777d80c0e065dd77ef83f119fa432a45a74ba5b2f592aacb14ade8970e145d9ffb3688ca
6aaa3b39f4a07fda0ee0db12d3516e29816720c08e671b8ed26207544bcfc9d536d967a9
781d2c8d77c1a24285e60dc45e3a3e2bd97c5dc6ea9d5244f279eef1e27e5ee9b546b680
bc5d307960e5252bf7f04b74549a52c217702705ffd82e033a584ef46256cef7b271eba5
619d6a91e142ad8753fa35f64298152f8a3818dfadc4f51ad5fe4fbb5cf80e119fe8e0f5
090afb59ff2d8e24f0d43d0ec3fae82f5ecbc922edfa3883abcdde8ebf383fe34df9c67a
dbe5edc64095298eedbdae1286bb8876f0166d51623064f1498151fc4673dd14ab80d3c4
2f4dd0b3166c927a8983edc4a455ca533ae0894193544c67fe6b0457a2d68478029a6256
424a9c1101f04c29b8c888e22d55c8190cbf0f53fd9b335a584ba50b9ee8ea38c028d856
e1a3708218b791e26ca3ee4ed2674574eeb383124e64a990aedce6e8325a45a71b6380c3
c8b620c89629eced40ecb17647ed5120368f7df3d29e776e878e44923020ac6f5d93a798
84db942fa58a3612b3ec76701c8145d37effab181f7db378ba0aef195a602edfd2a02622
d340277d5b05fac23159e444ebd65b109dfa4312222735399568351e3e0b5d2034dd9f4c
6e86fcd44b99d17dc52ba99350c58382189133a516c6e12ec9798e4a0a7601eb114a7c23
5ab5d64a4c87e51df17fb4ac31080b6424e12d597ea6397ff73acc103d6a9817686be50f
466cdceaebcbb4baba16f41d8e9ddff84ef1b00680f73b5b2a24ba7dbb56e989b29cdca7
28bfbe3ae2c6671b6e697f333a1add11c3455ba8a4b7b045cf5a69e6e913cefb3bf01a23
4e013f3cb51ce90491955b0a366cd01672313dcf05191b651bb67da91a0cb3da669445b8
af6381bf136cd0ebcb0e1e6604bcd9be60328d7fab1596a5a8b258c91206689ba81c0b0a
5a8676e36d6b58c63ad9b806361dae0c0e4c5442e68911e8486c82950f7f6624bf338e6c
7b6e9c8810a51a839c39365e330799ea3d43fcfef6f4344d46dbc1adb06edf366d3e1821
5b0e0e0f39525fa2fc41b2bb0caac6c6ce68f7df46fdd1585dbe65d5e0a87472f2aca00d
b1ebc78061bb004464b29fd26366add4f37bab83318b32f7517228d9978a60c204b4d78b
6b9a52fe5cbcb2e8cc166961111bcfb7d396251f0eed5d924327317ecdf083b6595af788
491ff76da3ca4707410027f523caf3e479d248739c54197df9d5f8b45462f1a958d14079
6558bcbf3c828b4678a569a6ebcb24f94ae39fc0e2afbe68b21663341f818b6f082e9993
7fd42faddcb73fc0bdfe44870823824afcc5c4bad0205c03f52851d662e42d58b48702c1
a0ccac941268e6d931719b1496a8beac5143f4d4a9c1cde2b34d1f3c5cc7027ca1352ac5
724328bab490518ca1f353a6463ec3cf860f46e319994fd0fdb00407bfb6d9ee4d3cc844
cfc26a9dfcbaa08f7f828a392ba92bcef21bad56996cae756be164affa6bb92b1c85dc70
fb63ec014aa37a0b046567b5a2ecbbe98f31ebfaab64aaa3b336688b415c9c65393bd0be
1bf21c02cfc4c7a91eeaa7375f6933e99b3fd04c98b96c83d561e00f4ecdf9f0bce6792b
b4b2a638b83f0a5134a5ce9010d3a667099cba843a2084565da8d2969b8af4f33a59c2a5
45d74eb5fd59b8e28b16282bcd7ad3b99ca019d7031729e42fba5560d4d180c8bd87c73e
a27219dafc45cd6306fc647bac64f849415fc06b3f4754091f711456d35d65692877c697
f9d35ab0f72282b86f34d0b2c04cc69763a45e3f43e3b59fcad9347d996f422da22d921a
666684607ed12d4fc31acf8dcfd5130615f3127fd33f06fed42dd13a75cda61e1e37146d
01de3f3ce53187232ac54ed84c76d6e983ef76311c7e0e793bbbd3d3bf8d96d5b23ff097
fa309241e0db51cee57bd110f43a1ab0d03e91b9ccfcd16dee8aa9018fade4791a6480cc
5fd127b8855da9ce9ad3e6b39ab89cc8f28f95a348b448ec6e8a632c7f9bb386cc1a455d
1e7c97156c9b6bda6fca176732fe4adadc33023b12bc2605e37c93fd039bc1a667c14eb1
9dd39bc513df285895185cc251b504a584d03e7424c9ca1f44f670fbdee80ac0bba9d904
946c96fc009b3ecaa6f900e6dd2138e44ce1a0c85804d0b5775178265199124079de9cda
377d009e1cd55ea727fdd18037a7e40661c0c891732a2721dfa84290f2bef7dc3e82f415
2346a9829fd1f550781398ce1a163730545a645757a9e3545e1a0597ee51c8e3636721e1
68d5c8b1931131e0f6a224a2c7c36002ce2928ecf134154eb8e62fd1431702da6a4b031f
d9920e7e2fbb2321774d73c98d8f7868141273473a39dde2d663c5f22d24f67fce0ad2a4
b49b5906108812f7ee107c5f26537b4cd8d8e5e8dc055a87a444047f19a45b485ff9270f
2db74d116e6e435f5d19b5aaec9249ee62117d3bfb3f66d6f6780fbc6c5638c6dce1d80e
9da1bf5d6a3277c9cddb46095f63a8886cf7dd249770a6d2f49d111c6b8b3cbe91ba6ffe
56f381d75a9d8f36e1c35b4c437b3411530d7379922c0e168f5e7debbe499c72c13344a9
26097ff1c940005615dd2be65053b497e45a894750c612b10d9c4085c1e440be1277bee9
57bef4fd559cd86e957bbddae9fd63bcfbb939290282e54cb14acef5eb7ae7676e430958
a48a1334cd8beae4bf6b2f64cb4b8313d3748ef5bcfa84f5b2aee8365fbd92a211b32caf
3bc023532a5c7e6fcd9170010fb48a0bb2b34350d23bb6da60440297af2aba3fcd9a5536
cd48723a442c86bd01356de03b03fb45f633d6ac4490aeb6b3d25d2ac520c52f43db81cf
2f441a819709895fda587f82184b5be544198de4f279c5e046ceac13f612c714c1d070c2
e43ffe81b2a829a1be8dd07c1c7cbdbd3283332f95891c739d0574922aa47482e4000c0b
e42e62c23e2e360fcbd3efb59cf4a361467d3e9c449a88b320b992fd92aea8b315befdb1
fb0041c62fd5be8825dbf8093cb38ab5037fcc2850d8266ff34a57aa7c631773a42b0d57
a03d96eabc5975c3c3584f3628873218097636375d7970a631082c26ce562fc3404ce61a
cba22a08cc6f56cc8c690619da9a4a6f84ab04510617110901e5cdd9f0625f6cc4c33234
290d7ee6c00bfe5dc4b8ea5e9ba72105cb003d55ef2b62588a44fcbb0cc1e1d7f3cfa80e
936e44761f28ee4c43e55284c7caae602ee711d5602aa4c8578b516b406a33497815dd63
cdf12fcf58a4e84fbf6a73a2614365a3ccdbf8e2e16a653666b27094defbec28c5899512
eab1e186e625e0f623a86cde2ecd745eb2530db6f4c68b4db6480eb1fc6604687aef8e95
6cc28801e1fa250c725c82c78840232ccbb3f67f03f94ff1c13409f4f05e563e740b9e3c
20d1653ec070303e3ac8e54d46122eda4e3da8a9dae47bbd8d2e69c26e1b5844791b62a3
07328f2380264e6a308467d8f5ff98092bf354fc6cda43cb81bfffceb247f655ac422a6f
066b4ceafa8e72fe9c661f674655898a4ed9c847651d0e1b2b0927156d31864f76656dbc
7c5373170ea7617a8235afc1fdcee971dab14e687e9346961fdb2974e1160fa328edc3ba
4bbc111ff0dd73ee40f4898f6ecff4c6288b0d72a68644ef22050db919383ef55ea2a0eb
cc4f1485451d442d21002a5dd8d3e294978aef6985dd33533ff94e24160ab4dcfb39b265
a102b120cbe08d4e229097bf18e0f09ef088e2195e6accc3a908f3b04fea4ce55ce996b4
46c0fa046a7b6d7d9acb7f6128b477bf2a483a407c5ff72afbb48fb871657bb34cd508be
334e44b0c234a65d281005c357ecfee2e321c964dfa0ee9afdc599f5a0a9f8d49fc2f88e
54352b69e53e3ed626eacd61d03a3435736fb0a1d88bfb5e862308595c8aaeeb14609222
ec83a64b7d7b59ce690c15c5dd69525ffbd7f2831979e818f2ff3bb287ce2742bf375647
bb424a2057f36448a3e6f7ae4ba64faa7dfcb56e4250a3a691729e1256f4ebbfe4437c1c
b16d8a9efcd6c7bc5963ebaa12c754066f0ac4f1e025f145f5034a99b6272ee5d39f9b2e
18399336028be143a6202895fd24f63485571e3e6b8268c7cf4e856caf03e30a645c40b4
f02b9c6e1c9a357c79a3d2a73719a687b32742315b7f3da16accb0175a826a32c65bf4d3
0b7604419b7a5133a8e4417ee05f2522be2802c091ef05df0d799dfef7b4bc399304121c
ef4ac22637184accc333ec9ff81387b9f336c57fe88dd484a802f2f416c079a5985b8d83
b7a20aff92bcb1e86b54d4c8def4ccb04818f845499a60e8293403f0b2d64f56e57d28da
1e47d845354472f26d5f690ade9bf8f89d95cbe6f3b18ac7b0bf37d605ad006e261f8c96
0e850026ca9ccef54cd903bdaaa2e2867c7fe74146bb130ee21612a31460b7b836d3082c
e6b8cdb84d72d3ac601716a634c8b8943047206ddd45613752d9471a26d86874dba0ec3b
e9072875ada4d8e9be7751b567895a2141c6af4a2646cff5ab674a13f7278df5b95f156c
a159148932da7c78ec576d79f159cf0087fb082f20005eb85b0f21220e05de31bf5668d2
d9891f1897c4f39e2240bcf6641dc70cc4ead94571163e066238bb350a18eaa8818e4f0c
b7251791a5baa4e93bf5c842c0059da2117dacc24b4efc48cc8192dc2a7094078bb18292
92310ab5cf0ded177f7a211c61e26b5d5793cbd37d719055a3b20c39b600c94b3b115121
4c261be6bc52e6fee585c06641fd592fef62d67fb203bbbc2e83055b6b672719371f9d05
cd835f6081b5301892394d5ff2e6b9010041186f64934bf12a3329a68a8e45b26c42ba27
c206edb322fd0c4c76c3a8c6e7b30c8fa8c80bb2728b9e021a5112f37f7f6058c1a12bba
ea0c1192c341afb2e8aa7787746dd7727629fc5a897698b1b6ec875b5aed36bb84726d39
52282aa149c082b732c2d682401f7a09633d9aedb29e4635c56473d86ff84f3c637ac25c
a2711a136a5d4690e65da530fffd4429825ead5144bd5d30996ec98f1b20554f3f1ccd23
de641cb720a8111c24b396df4468f32e3e0241e2bfd3b4561fd708701e65b92015b66335
5c297fa60da9b581a61f20c3fb3c9255921b3fa90531e806929be09fb46c3b0cbaa60321
894fb5e4ccda149e47bd2a55f3cd227119f184d61b364bcd17e5a8595dd496ac53d8be58
fa08a7859a44652317583ee6b8bc255ecb12b61af8ff0ade7e1e17512dccbc9a3c0f05c5
d18cf8c5c90b5da53b52da675e07f3644e6b655827cb039b1c6a9492a9c5861a5bb3ba70
01dc8fa92e9c15e4d570d2df3e2de8a7b35d1a0832d3b8224c70e2567b6e807ca0e7dbae
c700fbaea37ce585c9621f44ec50d361747df642922d4ed3fea39cfd45f4e0d5438bdf4c
1e0f109f8b397935a1c3220f6db4fb68986931587e651141f24a20c5c657796bfa5d97fb
dad5fdca131f53093fc71627a4ddb83bd8d5963aac60501f9ccc5ca501ed77541646bce7
486425c2b808540c64dcc231c58b9c19d640d9d8aafde6d19b596608a379faa3752036d4
1db8360e55960e90c353f4557bee912242d9576441fcfb333cc88fdc860d29e132d15c1c
27d25924cd696850db45988d3de73222d3b6f535c861321be24ebf64af77da85b095eb64
05892a6e3637ed42c760e1bc3f1d4a6c558a0fcc5ee903e0712741192a425f0447f0fd6f
4ff365a99ee3f6b07f868711584e54f702682964c6d981900aeb17253632cadc304b3a0a
5e51321daca8b44a2f129fcd0adc36f9b06e7ce59fc0ad187538b74455c2bfe7897edda5
0291f9fd1819c9249e7c756fb287bfb3a19f5039b88029bf7144cc17316c28e8628638df
539f87e3e14c5fc671fb1473e7df9e4f3fa8f104aa0d7a912dbcc84b1b2adf3591a5b1ab
5ef8a3cdef49916bf3aa82012d1d0f978300829e85ab7e3d3940375222a661a79e6803e8
9a2e83827b6cfff000850ae98426b74c49ca389a259a99cf93d477adbbb4eea9805adddb
891b374c03afd0302ca317c7f6721853cf6a7230c6cfa7f6d807532022cc9372e69638a7
c64a5a752ac11579a6ea604fca597b8cf01116b2aa5c4909c7731b7a136fe2726ae99757
b5872b3bf52469bb30c407d2f662e0209bb2d68e8cbad05f8788a242af1f384db533f14d
8a0c50373e5633d0fcc80f0aed5f83575042cd6681bf13568ed197db2dd73cc5b329c09b
24c8ab29576a9cc9e5a5fb473ecbfd833892987906a753142f8b1c652c74b411e68601ff
109b6b659403b574994ed0e5d8944b311e320168de03c464bc5e70c1b752f8aa33d56b30
d7aeadef8382310df79b4e98788f508c05f7221d6707bb62028c849d35a6376a5650e623
e08edb6916fa58abf6bd5e8531e851fb96fea7bfe9821e4036f099d9c61f5828282a2a59
8d2baaa192d284b0552568d8950c13b42246f16c029935cbffb3b72268c43ee847e6469c
6ab1778e49551e48f1db16d27de2ee6e48fcd3f031318e79712a567faf094b44355195b9
e07d874d5897c2f14b23fad69c5243e8e2df2ea29cca77caa0e4ca6386b9dc9b13e1268f
e18e469eef00619538e6226663d8888eaaa98ac6d62476a23cc8f31a9c42261cdd8209a5
1a72b41dd68f31a96b3a934d5c58d417e92cd1cd748eb0d25c7e57341de70510c0ec5922
bb79f5550fa4bc1e9f789ee90f4c26f32ca4e359ea077f8981ada8df187346a947e2372b
74959539960ea32c3f088e2aea36cc6eb192eb4aea0ec0e903e10abae5ac41e0dcb2bb81
cdfb626cc7ad73344bbefee83aaa00cc60c4aa85d520230403a27fa346726ef1b4c6caf7
3c04e74924ed04d79c7d4f12eb1e27a5d534d82a06be5821cf8939529b08cf1aa5ae62a3
95171742e3bb31b2beb649c8f06e609345e82511bd765726b1f0352b6712a342ccc4f4d4
43930ae6874560165e686ec95c8773843aa7d9c16c9016421e725e5ccd064aa5818097f5
7d2c5eb5f6b2e8c2d842ae57c7f4b51283fe63db34a7c0a11d36e6d9cc8581c8bfd0fb84
81cc9fd588e35f04bcb17d34c0a1f0fc45b425ee7352088782ab0c582ebd9d138a578dac
f9220435967bb792d34ebd73c9e6f43bf361ddec1011c0485edb1400db6a96472f5d8642
9a52314ff0d0879d72b69ff1c6cb42a91bea9719478780d0b9605414c4e23c84af686e26
cb414217774b25204b15a275eeb8d37df584e9975d79b23ef4ade54c2f3d344d66a9d8d8
923ee24e29018328c8d8712354c05222da5b31cd5c3cabd550f3371290f8af2348d15a7e
44e10e64f40d76b431f105d74d3cb2f1e6ef41a152aebb68a42c1be3724d1883ef8d433b
eeb25f35006f1cf32d8f4b04de9f8652033ca099de86641ef766e9560d3c345b27819196
9bd664ab64b33cda4d942ccd51b5c542fa57d34bf3fb7a23480a3a4988774a77ced51288
ada1bf1d220335779648fad84b15f5c3d6ba61c2277683095fa2844855c13d5072f719af
d7b886f70f1f21ac734db0d677d9aada0cadad24227ac22287efe6f171fc2fa58286e48d
b8f5fe72f6481f93905c3fd4f6d61c2d7e677583b502e5b89ea17dcb5a3af0b3994959d7
84df1d70a833312014cf091e2984570b3da86017c6960be841729b1b11425e0b3c783d85
cdc034d61f9459e334d611f553c0b613b12d8c27316f805a230710e39afe02f83209889d
8e6b5178b218206d6a5acd221ee75196283e6e532f7f103d1b5e9cb68eaaf2405a281fca
a3a809244a507510a6541b458a479b341425a4dc7e776ecd4da68da88bf87cdac7e38084
04d9862b5fda8662c58885b15bcb34507fd27b4fed50095d52359a8033c03ffc91a5303e
0622627fc645298822c72a33b45fad3cc4e772a20616b65c87fe2f016e33a0375e7b1415
0a585b03d173f9fa754ec6d503daa1b40833469b95d709e8735b76942bf91647aa4f3331
7bb272d884b07a22219d805ee88e6c18ffa6c3d3c4cc0f18a3bae2491044776ffbb8834e
3ff3f9e599a7300976f46b4e8460d48d3588b89a1dc16b76c64ce848825081446a829a42
fd75ce50684b2d097b723d7f0c867064493f17dd3a3051bb6b0b393f72e1a6075e526743
47f3e79e5ef6f5ef8f622b866e6267eafc5a776794b7f2e95b8dc63a07bdda5742195dea
24b2cdb2cd50e7bdc95185a8cda7a127fc65bd5c4a6e7131182c244ef9c45d94d04edfb8
0fd9b56274482424b1852438967c1d07da1ed7c720b57a1cb13ae794f7e32c46dda1547e
cb299990d52bdb6583c4bca9eadbad5c5e261c2c21ebacf614381838cb93f11747ff28b8
d090702293f0835a2db7b145d45a5f5e36bb1fcfac5c6143e4c6c142ad0c59e378e6092e
635a96f3c4ea6c8d2667a183194bb9cf23623fa054293a3bf6fe2c299bf0c2bdba02984e
2c10e655f311067d814f7d90f22a0d453773af3a86267480ffa54e3deebe769fd32f1925
5ad07b286b778b46f5646e17d9385d2ad43734928dec483d7c1efb4bc98035e87cadd961
5304ab9dba7e7e1213ab0be609298bd1e405a1adee643b98c875e25a67df0c1794f18b5e
4fc08734b1b3585c7ed588c526f870120d5f64d3f9c501e8b343745b11e0650890aa0ae6
bc9ee71ad8320230ce391bf11a9a4bc20714da486d97484642ae11788038469b1efc0b78
066bb2c7cccf486d20b892c7117d6a9a21ebb625adc6af4579e594ec30814d5ec2702c84
107a8bab1bfaa3fa0ae05597691b25103f767a3529d11a538526de91aeaac63006c79ee5
6a2b30e2b8bed35fc3501283028d106e90e3df8d32914a895468d714b1a6de3496daa145
da2e13354634f06039254f3012747a823ae09e86eca743da506dd1546f2d04d63fb94e57
dcb3a32176e0e442356170d9f296b3ecf90aabf37e7568abbdaf07a4378c11e5e8619b48
d9354035ded1bb25d50ca221758454c817363819b08630d410f4df398a403e8b3bfac931
b45cf3c9df54f9c17add139cedd162b67d32ce4179fa59eba4969c73a974b837e6f80337
62453054489d7baba9a686bbef2127a4ce70e3b75dc7984bf33680759c5c52346bcb6559
3fe6a885e316428d6034c349ff266bb6c682fe20add27fa72f95984cfbb10ffeb7a96b24
304f84159d0bb243ce5c2ea3465931391bfb995586092932e6cc501eaaf7a0ed60ce40c6
506ce95d42734348ff78182016ddd64514602b1e105f04e662fddf1379b2cbc3de7f7d25
5e1834cf810fdf1ee7560881e9507f79a3a77a0244deef05242dbfc55bf82fce755c4835
4facb970dcf35359e7ebcc7c70acebb2b4d3e62a95924b8aacec2fa2a7bfcefc66887fc2
b1717822f8a345903cff0ac1040cc1be1834ff9193aa33d002a9dc78f3cadb3e3f7c7ea8
d707385a6fd630bfae751c9f8cf65d5dd039c262ce1b7696ca05d890db70c48a9577d149
7ce594f2bbd70fa7406c166a3a21da5d3f1fa532075cb7b777d1ef5610904f33e833b476
e0a023b17ef52d45b12f3e7d5db09d26dc16b77f49fa47205de81ead842a240f0d482ad4
f329d7e1c2e5cfaa17f63ce6ea15190f945084dfe4663948874b1cc96c868914a7841251
b50dcf471ee29a671da965d57e1ab7dfa2ff0e3a8d02d09feb18584a9029fc994749747c
520ae252104759be9169860b620d01f73f1f38ccfeeb0fd8f68a0c1003a7cbdd874256c3
bccca2a02a0c01017263ffa794534e9c52e9905c54f8a9ad09cebe946fbbf7ea3d2d7639
06253fd35e4f4651aaff9c6e0d35b798ccc9d27e0be99055fe4f95b26111ed96902b560b
20c3a94bf49e259cbdf8237b9d86498a527b2a76c61c2d4e8f9ea2340d72c26556a53561
8421fd67ed103f1053c9a003a508f9c3da720871b64e367d8885c913dac276054540dd1b
93c5e6f87d6b5c8e2eff94c41cf0801eb5530b2ed31bc49f0e0904ef2cc9dcf2b125fec5
d7848765b8872241e47917f7c129d566b91d82232269e5dac923c8b0e7c447b0bf8ed106
7c9c302a33668daf7bee641571e2bfb40b3426483b802c2fe4d83b8e428fac02eb12237d
fd91820a481eb75830f4cca0933e7506db4d707f5ed107a81831b7f308e0766a4109b93c
c4ca92a9ec369e026df15ae6f31273120153c056a1ddd0084ec05f0db1891efeccedf02a
7a1381ffcc68eb5e5e5b8437cc49b3dc9e68c61fb230291d24ef056712f8c32cb673021e
63f3996f78cd2d6d016c2694db8b270135c4449ab3cbe79831c670c2a7e1d67395a558a8
15db3e894efe166c0a21e8b91b78a79978fa6439346a0cfd380bd90a7d80c56ee28546ab
23811db1da83145ea627ad9eb51e61c98e52793267edba3bc340616c15d6e9f5e2a97cb1
d6e612ffb7b5006d965289086269cd13f53b641564201055570df514e4078b3dec7c9d11
68cb64b48e41d0055a8bb35b1041c57fabd595aff9cc54b33e6ab3529d76d7a112580df6
f3fbc868a33fbd88e4f0f5c61f923a5fc93b66e429e276c7d1e20ee5e2b12759e938c958
b3ac4a69ca6979fbe89fc30c066a63456dbbd8a8a9d689c099596ca695312319e946cdfd
b4c20cd382da3a32d0c3aa8e343393e460c47deb91d3e7fae056930c34c9c248ae7582ad
ae9cfcdc9920372a505c90371976c5cb3e58dcabe02718e8b41f34191b24d4f2d88b5d60
2215ca2f951a60e0d1179567b499d589f7715fc1bc76528893d8d2e4f1eda6cbed513e25
523624f93799b65daa01c9c118b6b8b426e9c431eed29a426376e57d3a256280d800e740
fa807d214cd0ff3fb845984edf727dc9f1477d01509d57a09fbadda4e87a9ec483c72386
c69077bb037652c1a7e555686c5986a294e80eedb3f78048fa17c390487ad92b07f3a5bd
6dd45487f8de8b606cb75d98bb85b89722a741b63b9f86d28554a9e70b690e4e67c194aa
10a0b9192a2cc8009219aa89f3067603b469a172d42be6ed456f1069a55e1dc795bfc254
855fe83b2b44e3796f3dd5a51be3b46f4140990da80e7ab20fc96024c56362174635878d
9b33c8ebb75236fc3b334b67411f44416fa8e6f168b607f83f389213655173a6bc75978a
0bf5bbc2c4229ed32c9487ff346048b7f40dbfe0747675c8684ad6693d160e0010b1284e
b0700093747bf365b9a95e281413b4c6b70f28a0eadf4b72d396fcee5691381a8bcd93ab
8d1872c2d92550b767b320226862a032f02f481b7dc6a82e5b85839eb440cc767b7b6813
5af9d1acea5b45607bf406b0bd7472c2a1c23801351124801398b6e39553894d31fcdb21
10bae9d71446ebea85f76ebcee24f5bff242bd63c7e2cfcbaaca4278272c82ba6e0e0880
be491ef1181ebc23f0ae599c75454eb5ba070ece99fa1ded9d5e42e917959cc339e7957a
a10965130f9b65ee055b32873195eb900a213ce96f3de320f63a72d521c57c53acb382a9
cc5a713fdf71d67a41437108f60d11e57aecda324d22c958c2c5459e35a787780de25a83
ae198001e083350837a6f8f224fa50b971cf59a563b48fb823bbd568273eb98c992a8cb0
d0793546dde260c0a1738b6ca0a82d9b1753b7f32f9e248a52fc56235760b11a1573254b
d19294af8b6c43044fbca258c1a519e1fedcbd905d4c14cbdc6f5797e2e321004342d081
4176cf04eaea7cdc7246a4718c1053752bc356df8d3e8a07a9e70168bb085cc0eb7bdf72
80ab03494bc61893757eae9413796827faa6ea7c3ebc6fe40fa38ba6f763211c6de21621
f967a4ea6e29fa5b0ffa4e2284dae253e230716fc4d591898645c6a66b28563f85e03b40
4f351821ff313c618f04753388613fa92bd40d1cb197cff46b1814a2325761e0cfe1b864
9fbf19e2557b55119d52257298f563074644fbea967d8d87f033acb82652955cc32005c6
8f5459df605d31d7b761b46bc42a095dac3a1d44d713b5d90bb30caa0d20032786b2ca3a
74abf85936cfc58591e54f5182dab4cf5f432e06a8ff67f76496db185e3917be1200ccc8
2b877153187cf12d32a87c35afa2b01e82d1a534b7a221f08a666132032c7cbb294d6691
9d4933c8b6f7718dc0f5f1aeb28b99d547a048037451ab30885268c9a28b0e39486f1da4
59d465b770dab9b49ab82de119d89b599c85ff7fb50b35a665d1dc9f9af04a68278278b1
6dca12a962a02ba97673a414c6cbca122bcbb069845f6770cbfdf620fbb024e4f01a7d95
963cd21a3661b9ae3085641f051985d59d721d9c34bdde4595788d52d07f5e1844bb3f57
5dc59dd741cdebd6f0de8ebf383fe34df9cfa1f73203647747bef98881aba49bfc7493e9
d5dd3bd34f2e3daed94b9a0d339f2b355fcec040d37f90dad8ce5f6a1741c4e0e314f976
bc37d19d817515ddd9803ada7c2d01ad25bec31b25d64d2df0e7aa6b4176b3be5f567c17
29344bbf92d3c0b4925fda68568dbe1a6cb6f1dd48fc91af811e2e2274d00cf3b60077be
6d0cedfe802e33e48642c5af22e815f5f402a0c8daaf917241ffa2ae4b4a61431d5b2e9b
cb48f8b90151a0fe278e6b95b2014160fe665fc5b79879ca735df8ca1da53cc5e0a62cb9
9baae6366a46d35ec362864c9d7a797c7db9ea4178cc13ec16af3145174d18d0ddff07e5
f168a45fe7dde7aba807d0fc0297123fa5b4311b850595208cfb1d489e69bf0c8c2a51d4
62db4fe88f51312c7d2d742ca60e935ca6a4240ade7020a00939800ca3ea30a3103674a2
9f0bb950d0e91ed2b5b8f645d865fe59ed356cc39343a2b5a931055f888d1687f7a900bb
2f328133476202047eb9eed966572f9dc6c58d629a40115838262d4ad791b10b14ebde50
a4441478fe97ff5c00d38171f746551c8360629306b91950feff1daa899ee317e910cf61
4cf3fdbd4fb23b169d9ea548e275528078b3a5a5fd67cc01cad5cdb3958bb77a4231189d
74bf0b94ba14345e37e45ccfba90d9bd32700fb6728f24e6cac4dfd912571be149d99cd1
7a973743631188f5e98fb66ae778f919c67aed89bd1cf8d44db4eebc6187303a389d70c3
34f50c2424f9c5e9a17cf4a93944a21dba93f40706c80b73c1b8d284ffcc09fdb504a208
0bc948cf55c8f71235868384b9aa0ac1e05eff838dc59d7b6fa29984ba2ee72e2ab56d54
a79ec66251fdc424de6ce138118a58342f48ac54791f1beaacee873b19bb7ea712655695
5126f7629a73566fe936373f62135c17ccdaa7a52a7070cf2ee795b06f5b93dcbd03b597
bf262b522d72602f0e503ae692caec6abfa5c5a2bb74cfcff6481ce45e4e061ee87999b7
1a0f0a0ce9d88532740af69c80e0d739a1006b5a33955aa0fa9424e5d97cf75d6e2f7097
ee554eba87f410e6e7fff7803b07be4401e0167c0b693be4ead7ed3c9dcab4a4a4f5e3af
890f9556ddee9b19092e3fff48f0fc390978250115f7edcc75af1477dd88279da78ba8e7
2c25a26d077eba7958dfcd20e65ac3a313f6c57bea35dc4bdc38e3684393d4186d339c54
a07f77afccfc65279a1919d63b4a5ca01d69862147accd75c6d9ca9a8205e9b6f245175a
6900cae5be0df8471977a634c8ee48fb6decadb57a0d3d9d8d36e5e885b52297e9e5e745
64d5d341d6a473d4dd26b9fdb799c79879df658d69ed6ede22acd0d77638f9ed1fcd7085
750a371740ca4ba946567a4c5a151d1073529b77f2939a31acf399b61a0960736bb0c370
c8f96978c5cd202105024945620f1d40678ae03977e8059602c14ccd26d79a18b97e9ffe
043ea8505c14cd0324adde1cae63a97378970f1b4652b149eb76f990709c8d72f2c8b08f
e24cd5b0141f0834b7640209d65d77cce0220455099162fbaed8ec415ccc8807c021f100
a521b5a51f24aa70999ab79623e943b52504e49ebfb059ece21f1cdd233d9e65bda09f73
d4d6c5546b1404b547e513b7e40f468362d5203cbc26c3e1129951a182afb668bc9f3613
b9b8e732c11175311aa800226ffb09a76002ccb54143fbb279d187d29382ed9b3f0d0a71
71599edde01ee4dfe6f259b641b4bdaf5603d010ebf96d1736c5a6e9f820a9b39332b21e
9b607a83b39c022b2f8cb5d14d5b45c7fae8f10bf52c81e7dd70421bb215d2e9ffe44e87
7de8e1cedff8f23f4d45307bb50acfbeac8c07b13791c659e0cf8978aed435d72fe7c412
e39fe71591ef77582d80504d577268321eac8e5b05cfecd0d4fc987b347c2886b1e65bc7
4ba8a338f60d788400d956ae88b0d3c7206b66a0b3c006aa202ad4e18342f592a0cc8a05
ac85a5d442cfdabd8d7512e0c7376fe890d16c8c2acbfc83a74dc8c9fff38ae52976781a
85e665341e0711fab10ad8836ba9ba92ab953896457e2502c9d798e82e40e95b8ee02f3a
40b1ea59338d21c55e7de25e5e4c1b5cc341419ed102947694044bbd2327190d99cd5bb2
8348b086abe13fc02473f8bbcc25e981ce6ce97495d02750eb790d388fdacc6a64d4468b
1d3f27293ac18adaa3dbdc1d31f0ae62ba69bdea4b22d03d2e76b81aae6dcd4d8a20bd95
d321c8e11e87aad19f4e08d32b6177ac7de3d4a6155f5031d03e7fc93778c319557866e2
50742b95be8289b36d6ccc6b9e7adfff284fc2de270f2011ea249469423931d9a34758e0
403df5c709d92568e043bacbeb76448ff2bc147dfd1554efda7196c374dce622cca35008
de51c0dac163dcd80faccf477f59a212665fd6eb596f13e4b1d0824e4df146e6642dd82d
eff3dcb4f2e95b8dc63a07bdd89fe8d3c473f4c606fb63f67c018ee3963aab40206bb35c
98a1e045e1d9ac2fe24f3f201b170a8ba70ba60adc34b3eeac0cc33e4044e42e9b9128b0
86690ec90226fd4cb61abbc1b90b6bcc5f951ccb4351fe14a048e2f54a5de1b6ccd0e22f
f25058b20c2e64adeb0653a9becc4b4f4720d6b69520d8bb1bb7821268f8e36d09c2c0e7
b079468f3969f76ba5259b4461c14aab62c86c62c8655f0e7907777ae3b72a5e3465b21b
b07b5394c28ca8320f5dde3091af529a7f9324625905ba4c12979287566b0004070fc306
83f333d75ba2acd07a69c9f0a9cdfd4ab8698a572654276a7561e71c1521a7a6f6a35718
a4d9d2a1489fe1117c43627a19d3d7918588e8473ca07154d1f0a77f2c8d0fcf47d16346
eb1aec97b1122e94695fcfecfbeaaa14a8268569cc8a3e2bfe61af589b7fc7f350703a48
be0062490505221f5da488dc99d69d82de5158a9b70f458904615afbc0c0b00bf0a4dd1d
b02e51a27348d93301e419662fe66bcc149dfac0945245cbe300116561410d4ac2efcd3e
d994d8d997c4aadbd32265a8f4611711368e1bf9210382d62e117d1210e2018ad554de51
acaf6cb5ba634e4e2f1bb6f97d3c24334aa8ace2bf4ef5fca00b2b6b81870a6c17041722
21648f48fdc7789ef08843b8ad1373d627b5ffdd7c55d6ca64c63c849a41199b130ba992
d6ebe4741e984ff2fe153d999a4401206ac20ecfd36797f116338a30adef6c8e8e21b3ef
514472558e8446eeb16a66d88e01f9e65a393a6aed50ab8aed623046b9af45696d3c4557
b30bd7b046d3eac6eb521c8d724e425ebc62f3f0f1ad21cf44bb8c9beaec9711f4eb0061
5cec2261ebc9d7e84ba5939f73ef0d3f08b46b29db68a463cdadd87deb61375d028955c1
7324a07ffbb7102a43ef7bb662d86252b6ab0a31c881fab33a8f1c3c99e3456e4d453855
27da1a34fd5a0bff81ddfe353b4d1020c4f643e55c975cc62a34721c8dc93f41eb21bc45
7a1164312a49a075dcea2d226a94da1cfa72d60ef359cb444251f6978cf7e32c3546b6e5
6ac3e1d086dd1a51008bff6624686e646c8be34dde30629ecc116aabcbce285d3d85310c
d1cd3d48ccc48ad53e274b6fece72d79a35f12d7809fd6019acbe3787806946c058a3932
1f9029b76e29f0fd6c9c4dd5f1392a2ba3862a640dca3d597f8bc73507e03ca1156b304e
7f442ce721b664aa1d1f1dedcee56d22f58ea01b391aa418b6e2415dec6d21cd197b7d01
a0e2f8a1b6f7a0655b6fad6cb96bbfae6a4fb7ee80fc90559494b8669cd0791ca243c637
63f9c82c455e019f3df039281577cdbfbbdd71ebfb80b044c26091090b793dfe25605d85
9c0a02ad1d6e5b3cc1a356603d2aa23ae7043973f90218cacb9f5b9a170dee3c19fadfa9
eef0c09f9dbb3b17c110349f167f2ce003f1e179ee71446ded00e6397508bb6ab44b240b
09643605eb9d5dcc2e4b2dd45f4042f1963e0104c90422d4899a32eeda82aa6158abab7b
47cfa018ae100fa5ac9f14d51aaed16ec09c0a6e0cfaccabc68c84a22daaa94954f7ae74
7876c464699d4473981a3516c78827a12f04416e816af7b79a5828dd2f0f5f59b3f261c0
c599f7408a72458f5f4f56d1c14d3d41feddeccca13df7b2e1bf7604dac85802e33458a4
3be517395cc7fcadee8145efefc676452463ed79a49d05edbd82797c1b873f74e01cf565
50e8c0dc1b2bff68957973a1e122cf0ac1efc8de66c2a67abd518d51506558c8e9b2bb5e
35be28710604f8356abd9d7e9b51c53b4fce2db7ea16e1a74e4f9eeab9f703d845c36fdb
ce6e8c93e24e5d3f266a22c4bc18df86be7a0f20094000ff4e9d052b64a26fc820bd1b79
0beb714a29838601109924f1a685e16ceb8192a7444422125ee2663bd83faac579395e0a
83dc46b54f468057b1d6ae57af87b6438ed6d464822d9c2a57cb13ec3a99979285bbe76b
c7705986913fccb0ee0daf7e0d658d3c33b67357b8416161aaf0fa21a6df013721f510c9
120bd59968fd8e4045eb3e99cc4247cbc59f5960b318c1b1e7ade35a9ad5788a942975b6
5acd6d23001dfd3539ab48a10a3b0b72d093433ee84bba590695ebf7621625f64eae47a7
5902847b3422a5d90f96ed29477ff2624f41dd385d4ce7cf1bbdc20edf648f9646dcaaf0
de2eced1c5c4bd1e5c8f2b8b43ce59134966ef075cbf7b7441c0ddba4741f36eedddb339
29856608b8b2e6c656352e3d85d6dfa27a893b7bc276703459d6065adbc2c5f909de94c0
6f1d756fef5ee459361d2443ad613c0fcf82ec0e3f90afe293732f4b38da3cf256ff853c
acddb254ccc1eec01be377ba113022ddca21dab3aa66cee20c76e350c25d442e91c7adb7
fb767172436aa1791dc56fe9105c78f68d3a8111ab9a929c2991abe998311a9fa3b87174
1e9cd26b54cb9af5bfa2e3437c7bc34273c52c39fc35154174f0fb45292d1b40675c5532
5594c81372ddcfeb8daf04687fd5b9cf996c2cd3742d7e745604ee8b8de2daf6d3861e1d
48e0e4f6d1dad42b480cebf7bc98de24c8af17f1855ea52209146ff858744a5a59e6ef70
e6a55b7fe791d31fcf6b1e935c7905a197174f53a53488cf5b06cd0d5a145d0c07a987aa
c9bd592f80214f1be73f03e80c9afe5e744ac6719a3e81558315edb1c99f0bd77ca5dd4a
493ef486646ccae30196c6528ce15f5a6090c96d919358703d1d9aebf2c31a1895d7a9cd
eca0f458fb6c4dfa072d8036af827c176d2c99f8cc4b2f8f34fecad908bdcac95502f7b6
f2a40f86ec7812f28bb8217089eecf45ea4aa9ef2575ee6aac8572738f6acf44140ca2d9
42dce6a175d5de17885bac977fb851cb8f7e4bff663ba721fa32c6b71b2d657395b22fd0
5112ffee839e90ec1573c98f44563c68302a1acd5aa4e8f004ff60fb34a7fa88faba655b
7bc4c3a478f18dc5694bf3d9b5528460431c8a7a65308c925325cc5b713c1f7f44336f4d
20afe96884b9b69fb0f3bea2c42ac1db3778c72b1852209c112477ab393644f47122a426
995d19b143d724bbf76b98e89050b047866ef5ba031e7e1277d0664b27bfb19cd4ed90c9
8bb21a31803bae2cb7c59bcfc219ac097835283fc3b3015f801ec1b2f47e2e478aa0d55b
e2974f61d9ed51e0462838e2a37ebb3717d26b3edd13c020919617c825d49d28e0e546b7
30caea3fc8b20b326a2372a4df2c8e001f04512c11e1b91a3e0175ad885f2bdb405b17f4
429a05f7e5749665e2ecf8d3b9f2ef90e2150a2033ab668ca6586be472b209831f380334
b4c712d23799db1664054cc50dd52dd0f7d8c3680f8210aeabe0999d05c1a54469916cb8
30e88707fca18aae1c4d66fa72a2dacc77ee76f47d595557837fe8c626ba6afa0bb69e17
39ef480f994019d21997daa113a9deaaac80640854f6e1f88d08b8e026a12d38b699cdac
e7aa61b930f3ef4b933de9b4a5ec5831137386b17b56a7e6adea60f8bcc18f1c18d40f93
235667fe60c3a492e0b67016dd18cce5aa6c9354ffb20ec82328f34aa734408711428402
3482841352f6146adb8766858e4c49a80cfb839cf9353dfa47d0ff0c4e7628131abcc76f
e30796995b8f9254b3a23fc345ddeebffdee20eaca10ca3e82a713c695e73340f953b551
44fca526166eccd441b43033051c9d27472a5a341345517ccd97fa710fca05263cb305ec
3f12d74b56f8dd8fba84b30df5bb4bdf185cd71fde4c2c576d6beb514c05eec5b31a475f
cab6c71c556b9c156cb146f01cfb7c7a1574100032be6698d986de013182a8b167f7d0b6
9a215369f827bd768687da915871d18112d274c92ce3e77541036d803fe27d0e0c425d6a
74690b32291810593426cfc7ac68f6064bf30203800bba39a4511c1a819a6a031440cf19
cf8d2ce78a27e32fc0f0033d4326de7d232b8a11e12f06b914f31817b2c96a26bd55f34f
27173fd51fd82e202fb59366a233d02e06ed87aafb2f519ba77f4f175e837509a1230363
751e3081168debd433d12e25d3f6afe93260f8b751451f038d144e25c34b86e27b65b57e
346ec79db0501e2efd7023ad6324a6d0e39c22a1af190e62d852e7c917fe4aea91017246
733716e0c1e82a89347acb397892ce86d08bc882e152c9d7933483698769293c3026d574
321eb649791634dfe7d32fc81b711c9490ae7e723c6e22fc58cc275cf576b6999db81672
c218400eaca66852f63c49f7485703e8fe9936513d759e1b8068449360b305544ca0b89e
4759cb978ccddecccaab87a2754c83347f105a2c29d61225ed9527e8c1071c251e215a5c
84072d4b13923c07004ea6054a1fbfc84ccfd15b5e493201b24386e64e18ad3bf4d61857
94dc6d039a68bdba574d30768453ef3f9df6abd9ffec9f284e00d4d7da46ace6ed0ce881
99d3b0db40c44fe3d6ea156329f55ede0af5709325a117f1d0c23f43bf025cdb472d4664
bbbc4425591b535d813974d2b30b22b4ce8770d7ed43852c8dd9657fce32a17e1fbde8ae
dadfc3229f8bc23a0ecc6b072024d244bb6d2e68075d170f06f4c22f6462fb777f2c7f75
6d9921223756dd912ebfee2d55c77df91e71ec7567bc2a8d9f4af576dc5f5ee4c0d616d3
4081bc0c304d98d76dc270105a6f4d6d94c86bb94c1d0c7fe10e0a0378bf41f622a74138
48debad6e26d904d644ffdb2c49176a4b4f6a6c25dd361bc7be4bfa2b6d2e13fb35856fe
10a661007a0b3c7aa0c2609a9de741ec6e5d0922f32d13739565b96466f1f51cbfb65500
6bc7c9fe5a67a8d6af7473ca753745518a87c6a19a03f10bcfd56779c25186c6e87d55fc
1872834f94f4e3ea81b7c947f35db8fce12077aec8e7a0be23178669654ccc82e56f49e5
9f6fd0c2df1c6dda70f0292498238217d6a5d7ae26918d186eacf4ae190745bdc5614fcb
ea7bc8763f61b7960402e4617fbd90a6032cdd952c14976433424f3eaca5a1867b6997f3
2d5ea9d841a586a53c2b1045932dc7cc55e8d3112e0eaee5a4636277472e8a255735a98c
731d3572c76a21d134c1093e5f4c68a715d4d4efb69a1352a57f19ef250d875429e2fb13
87cd174315ecbde07e5ca9b86fab71ae8ab19f1e35c60afb18f837a5cda9664104cd6bbd
08e56b1aa05be0097b326d73fcbdd7596e9b7909c77e22625e123651dbaa1d9e0cdb3233
3cfb66c2a3540e602f920c16c06664ad0ba5830827ebdcdde47eafbab2ec7f144990ed60
ed66aa6a1f5159e5ce243031c333bae0c4e0d82af39bea8c6000e565f49a345ceb045b7e
a48bb6457d12c91e29d20e2e891c17ed25b8a2f622335c3d49a333d8bb79f2ad718e1ee0
4220a3db0e48e23f872bffb74f9f0ab9bdb828f30168f7421849b470759cc9f3b9558c33
291157ba0979e3f8c5207e11bc2481d489e7fe5decb853f69822ce9abce9849b56bb2ace
603942ee73a9c072850bf527c68c35b2a1e293b69569601f00e788bb5bb63676fd3fdfc9
c97c5250b4c8be792496d4cd78bc9ae6b0ae7c64614233e25f2d7eef960a6e677cb8c36a
9d6109be9916c360eb144b83bc9842d4a63512816e40be79d8b9558d216255ecbd3fdd1e
634f3d36bd3b0f66149abd9da1f383a78b78dc1da61cd5b8b298f99b03c983e2fd456a79
e8922f3bda9c1e7cc5ced868083c9744f35e863bc3f316a498e7717a894a88389ea9e783
de5f578bcdc9acb41e408fff3d1e8c216472ef805a13608fa60e4b4d9123db646009cab8
8da3df6f40c00d1a27fdfad84981667e223597fdfe684462456f8db9c3ead13a60c72e0d
867b4f2911e6385ca782e28dfe7841e950338773221f02f36a625da0f276d9597a2a0f5b
48d3dbe610684e51ed0f438ce68fd38a8b939179f195291ed9f2e113be69dc269507f24f
fb07539f5c7a04b72c3212ca4d14bca90a9d9b2c861ecf88b7cbc483617167a186e54613
658cdec7ade6570152d89002225aec0276afcce3a5b728382f34370d61ff49abf6c6bcc7
38d019cd36401535c8d019382a1cd5c2aaa88634ff07d8460e14473e49a9b4eb9de8cbf8
f62808abd3f4a0ae3d5ee0df4185d67be7b5e019a3b61854fd9bda624fbe4f9e08edb88c
f40bf1e6bfc056fc64fd05741547ce9cb2b8eb7036b56e3ed8e0636ccc5bf44c7b2abc30
f88ee9ea0b94052fdc74d24c4a91f42739cc492abdfab4f6bc6037530b3db6827af7ed39
9c46c1425e7d4fe27b7493179051fe4881e938b30eb162e78c4bba6b903e9836cd7b1174
94c94908a5eb189fe74e0dd25f8c5c24ae803c8b34894a1bc5cd472199fc8c9d138d17aa
d8c74dab1a71aae76d458b82c4f86ab0821dbd1b8e1a2db22ed2c474c28fe289c1bd41cb
b7c5d8bc9ac450b0c1b21916be902d1e289b9f2fb91f0db88c0d11904a8ca78e3543a7ce
3ab503d2d4422747a5d948758e22fb305e36ed54d3202d6b2676f49db569361bd2eb620d
acde8cdb8add1016349006d9f8559c4a834e60d059391a11c356c2be7f84a46dee93815b
79c1081c419132466e156fe1df92845b40ec2786890d7ba75d345384621e1e1f5be3f6ea
2abf80eb8baa60fb8336a789a734f0efb918e0ba641a2e72b89ee5b105ecc1ba2a8152a5
604c89df8b22209be9770fc0899c2b88a6d6e89a332fc1575bd38f6a88330752937aba07
9e0c5f898afe9f154411e02d4ca1329d9852e29419b41db74bec0243d0af41981b11c99b
b2346c9c49d724044d3d40be5259b86d97e15ea49c55f8a7fcb040f45d0098db19b7c420
7387b8b0b70dc5516669c1001fae6c716e19a44b62073c3b8766c51288f69aa42a55ff38
a2e86c81b0dff94c07fdd80ddcebeb1b01cd2109c2586a9b11889f725fb9e399d8689d84
35f369ddf6a66c60551956fc52c508f4368d51fb49b9e650e4cbd07f5eaf675736df865c
08d2a8a4c93dd7a523aa10b9a383cc2cbc1786704a17cefb9649e70c247d5b47acac8b9a
6cb633b79275d85ed66105b299e1ebe7f39760fb065371e28cf254e2b9b9494690b759d4
bcafb1a2f39f051bc6ade330160500dc35857e9afea5be4cf4cc9e954bcc9ef47813ef1c
51b3a33d150a6bf9861e901f6563801f1a66b7a7a0954432a9793f817b88c2471a815d0b
7a5035dbef4872202dc9585afc333fe142044c0dd56a6582ebdd6e55094a13cd16b4a042
ac13beb9a546f6ef6aba75e42601b7f6b39ada798d6d298cd0f349049291480c1a7b13d2
f25221696a1d59aff137ab574c7d98cad6a8c3d3980076a905dbc1277c22faf6ea9350cf
9a756007a0917993897acd11572dbd3aa9c03c2e88c33967204b999c8d85e7d1033e9bec
e71ce1306b999a9b6ceb66fe212d74c9bde8d388671e7092533e59b38f0eccdab15b99b0
ae0fae6cebb3f4563eb1fbabaa7b24a6ed6b4e7d958137f00960f429fb657e862b709427
99ea92ff499047c1c8c5cf8f3486a05856fb76d6cbf431dd0f7acf8ad97173be0b965df4
0c30b29a0c6090c101c827b8de8a1ea69fe74b6d7742d5b113b4f414ffa23ac31041a958
4e693cbe7848a10a3ce8de1943061c766c611b0e0c6fdc623df7ce7a2a39b61ba7cce159
3288af9d4d117718bd6f22a8282d7a76191cc95f6784adeee95c584e48def61360dba3ad
b7005e20a00bfa7c5aef6a883468d26bd567fa8fe772090f932e56dde7ef1c7724e894c9
bad49e50a57773567ea7b2741b48d7f8afb52af4683144f0d9d9fb63d35af7e9735fa044
5062adc041ab32a732b4c3ad7d6c3ffe38ee8cd5f1de847c11bed18c76accbe969cf00cb
fda0b1e374d3066823c8033a6535e0a456a8450111b5d2856205037f07f1a425bbea9189
987fa71abb89f93c438a085981573a99da0acd3dcae252d3b694571556020ca4c2cc024a
a4475f4bdde3e462c407fe0fa430c81ee53a0c4792d25169834cdfe17063803bcb2ce67c
2159e100c027136b7520f189d580c8ed806a17b9059624d3cd2f9f4fc871f06662fdaff7
a5de3819e42ce292a8fb8670fac61c71554caa26aaef8f45330fbcbe65646714de3651ec
d56bae8c4e9a886c364315810056d1d0e6f96b0b1d44b012b6377b81c60f07ebb0b5c97a
0a934bed002b5c4184d9ae01725b65185870a0d83d66bcf878d64c1f3c6c76555583c174
37ac2ace270789fd3f1588d219fb81d4c57e54acdcf80744e5ee202d6eeee986d8d0765d
1b6891736f25380af0c4b59aa04de12dd0ee4d4be0ca9b3230e281efcb8dedef3eecdaf6
3ab55b1705c1663c15ad58366a9364d516f5b44b015a5536ec09e8e35995803d7f7909f0
eb22083d1ebbfee99543af267f4cfbd9e56ffb52ffa4a375cb8ea6525c0e513c230c04a8
4e15020799075f5d2e988132e860d60ab93381227ec1472ed2cf07a000bd3e44ea0b9e21
f8de9bf93f3d498e0e7b86e38105dc64895a9239fe4f131e596e18365d84d6fde3876c5c
b147e08de60892e28e5d1b8714a13b63a5c16f3f22a1a61e2e030e9d6d3e0485c09d8776
6b3d54186411d41103eb5dfcc626e5bdd17071f33ce119ac5eb027464c92dbd359944777
60336a0ed3661bc9a337f687f9517eba2aad3ff8b3d5ac594fe5cd95e69c51dde8ca9a6e
0aa32b3c688f44eabd03c6f5c75797687c47e186e7a3af8f04b6e4c2f7e01385293fef6c
b4478a268b42bd4c8ff467f3c335531e4be36fdf02c8959acd3586bad6e9042a0eaa79da
264a64cca5ac2d0cdca9d9797b6e874e9149150614ee8eae1dee64005efaef458c271017
d0d024137dacb92173734b81c8b3882d882e8c4004e52ce46c0cf9ac61c14bded5ee78f9
045399c823937ab5f9d4af6f6823a820b570f393f82f2ac431458910ce677bf383e87b6f
fc6deda95609a820098cee0000e0e6b1a996a5d0df48e83c973ca20d4efbc18cbf2d6128
107328b3dde0e723a31c5204f742fbd94d882c7cd777e3ac5b2f1dad79e94ea4cf5214e6
5a389db00903e03b46209e770b051d62ddc890c833386488ef8af5e1348504f512da3607
c2ad098decd5c34a20b82a84c050c2a7000fa58c8fadd8d703eda88fd841c3e8771aa2fc
780cf7a177eb0c318039fa1675a2c340e14f5c185e38e87c628a860dde01dd4beec2cd61
6d6437306b0875b9f978918b2409545ad2baee0b2e6367aa61fcaa6de5c36e5aa85a2306
d9f4e5c9b919b54a1992f51d09fb701131c976b0726089379f5eeec5b8f9a411a9e02646
da61d8f93c12aafdb23d546bf1c239a594ab98217ca57cde4841a9abe9f2251f2b43036b
ac4ebc5c00b308ad1b8ca52c3512c1d5180b5d308cc66498968d40368940f42d47554f9c
7bd4499e7bb1425622e1235fe5a55d034019cbd89d845b300aa4a4cf3f578336ef397e34
41dc8494b5d5e8822729d4be6e132c6a9c6ebe0610838ceeba56e3feb2fd38bd9e99edaf
2c5a75f64a413c371e1c2e777862990b4a33f6226ebe2dc7e0b4b63b5c396b0156f050ec
5c06b13ccbd6e5307059a5510210eb2186d7e483f4e32025ca099ed9c5ddf216629ab3b6
53b6395552aa712b8c7d917bad4a0204eda8e0b58e55bffcd9ea5a911a878669f65e1b4d
996090c0297e83c17c168d5ccf8d14f912d63b409f6e6bbbbb984f7f20e6474f2b786afa
936472894b5cc79e882a8802699be1c53168eb781188f90d1ae212505fe91b4e71d7e62c
d363de869a51722870fa0229d45190dd7e26a6d53526bb7cba1b54e7f28cd4aa07a5c8e0
868a4ce24d31185c4d88ddd476991a06c14fc51dd6d305b17626a8e38f74725ebcb961a3
312700fd2e01858030ca1b2e20962b921d60cb72356d46e2869a2710f8d390841b790932
7bebb3c26c090b0cee7172127141aec587dbd5f954f9c16664f9ba561939d8e4d1d0f214
ebd35c69a31f1c2fbcae86f48a589717ab0f83c2a44c6dd641c61a093d4bed0434c2800b
ae34af608de7ecb32430137c5ef50e25e2fd440cff3dfcb4912c568be269b5387d0f141f
da41d55743906aee3782f6ee56d8dc55440b2caeb53151b182f4e2df26d35df9168e63fb
d14053e9a86c13dc09193f78058b020dd53ec423c3d0bede90413e48983f8748b0fa978f
8041ece25166a0f107200289a8d735e28554acf7d06ba6827528f72baa74feba63fc4b77
e2202e3e7ecf9f9cc60e8b5c9d03597af2b23344d79c2569927fcd1cf901aaed156bcb50
2185eb421a43b166bc129ffff31c7b5029411d3177d092732774108a79ba569bb348f923
f7d7b24d7a654d57e4ce311f90a2c33fcc94e814bbb0114e6cc9aeb1d59d5ecea32b79d7
90c74082702cfb19c1add840557f6b102340c7e092f8850a1a9e218a2ee968a9ab221df0
040b0f19427484b8f92e8b6f97c359bed403d3d177afa89eff7ea1ea375414d48f5373d9
37ffb4e496e12de9c4a84fd5b647b7ab33678c6bd6aaec545d249db1f52d03eea7350bb3
360c4db134694a909406a601974dc33548272da6d18bb8b86ecc9bcec59d5acf2e68aef2
0a933056d83d24d92138bd367d612e0786d0aea86ec78961cfa1411d9e5b460e74f9ee69
5a05b758e482125b551ebc71b79067d16302956675d48e9e263d5bca6e2eb22a8d4e0dc2
9650b4b95542d44131585d05406c218d018629eea17ac4ede06cf5629f8d117b0832a23f
220aa59ce15cd83ece69be386a4df5404525aee3755655f0cd3b9014bb4ad01d079f2020
8969d5179d06bb22aa208ed3006aa2f8fa3b7ce6e39db5479693424e0f5e4fc11845f983
d8534cd1a3c42b31ab9b91a8f076bd1851f71bea94e64a8769a49ea08824137274932f35
926a2626ef49d0d2e52b6af56c43a15fefa525f92d6715ed12c63cb940cbef2294a08a5f
f5c17dbc114d8fdef3a634186ad14e5abfff67f40fa16aa80d10ae82fe8f41b0737299d3
b4154eadba05995d00af5535ba2634b8ca46dbdbaf29f8337ff46e655e7abd5aa67ef178
7135edc67f479d4e1c9ea9f268369f0f914769eee0073cb0b5c5900ade2ad4125cf21888
24fb5cf84ce762991164fe6b70eba7be5165373a52849b0f4cdbbc6cf42f716701507ba0
0c438b3a16e7f8ef3c1e2a1a67b870d9ac4d65297532f4150caa1329166930169c29be6e
cd9609efc1ec682c9e05bf0f76edc48f46c96409d9956d39968ff90ab1cadb485a618ca8
b377b8d296b939b9b60b037afbd411624f8191ec896aa0fa55d2d80b7b78b4784446ce0f
5673feeef6a3d28372b90a5fa9819ee093cc6c241185f9465e3cb181d09b8d8ceae2c422
0a0529056e5dd62802c862355768d93f2279cbb1d2dd27055c015e960a6f95ea2db4df1f
5bf173f1eedde594b3f6c6f1956116bdce4057d3358047ad7eb0a63b00398f936805c46e
3f74ac5e147483d69d05f5b34a3e2bc148af13b8f404ecaae187d43d957834ba953fb8c2
2f526486751cf952b07ff58c596f3c6479f5cd82e273a0374d91633e3f033f3be9c61ca7
2628fd52837538f7288dbbfc2fac882800b6e12050ec7060c78254bfe0a3bb275b93a553
1752ae39c167ff2915a84ad12976498d0084c6e7d3e97b54e2e15274bd8f7afd16502940
fd0c7fa6577d4dda8f6a2f38d02cb359eddeb355a67eb0759825cc794a488060916b0362
75ccfbdc0348c151df91192de4f7ee888704962b1df1f874597a1eeed67fc562396b2857
25b1a7ae602a7321c8053f156216501607265bbd423aa8e27ba4c9318187a840e58a6f0f
27258ca2db8f43cc583369a43788231325f26224bfd76c9905ddcfcc3b6de1962fdf68af
fed59de2f0845e51a9aa1cefddd8f0baa3223037a701f5813ba7399193bf8fdbc61794d8
1acabdf2a401077e13e45bc808171f38f948849f67e070ec43e569925e39ca9104121328
e06aa07db3401494df90edd28ff5b8e80028a5019805dc76301a8159d2232fe2e7903f9c
db775eaae2c18cb05ba22bf257a47bdd75f67ddd4643e045f8cc3bfca3963cdc1341f275
4b945f5a2965427256d2a301f685a546d522d984b6e566d5de1478684a2e26b48298fd21
96a31d8bd1e44fb91bb7d00f7495967b373b326e4ce04711008907c225859e396ad04a32
25529fc78c48f0511ea216d18bed01fd20df712ad4327dd362b67f7afb74b04de135b9b8
79ee3c651866356949794f6806786c1af289d54c74a741b30ee7c8e37d9852f35966c84f
d7dfa5d18f116cbfe14cc1b4677acfa69c869b4a7f8704927a1e889125e054aa2aa5d42b
a8d78fcc89c5320843f39e767888123420abcfe4c22f9a3c0a5da0fe10f39722790ce070
fccfb5d79495cf64cd7047f7c0595cc83d827673deea01b8cf91bc18ed01a973a176a5e2
50f1a32f18ab12ed02d990b3bbf1716594a5d5de673ec1a68711e3dce35b3b900cf04063
bc628a9aac87f7ea9ca0b49028a7db9c40642c660fbbbc5884924cb6065f27ec97efa3fa
c7575dda6d2219023106d8ca50312e99a23de6f4a13a87189fc5f19ea1e211c9f1692ea1
2de072693fc541ac12ad51e9157e4b893c202c99188a5f51a36152e9ef35b82bf7317035
37e726a721089629385aca46a18da619f99d2eba53ffdcbe45947c185d2687f76e701450
6ff27f26e6a6da4f575177915dd53ebb7f8b5064aad135e58858f4e65e8f4df5e9a58819
5ed4526c9aa6689b8ff62910b26b5f7cfc2d4221b797182ef9ad42d875a0fcbcd1606d6d
6cdd522a502453e966a4b4f4db58898139800c1da95e58f5e5bdfd2616d2adfcc8c8fe74
ff2266c3058a15ccaf500963437c9d531de267bb8a6abd5d3e10403fb0d9313afa50c8bb
415337b386585a7a43b406c988aaabfb57b8aec78adfca3eea3a98f79c92820361d4c401
476436dba696d37607aee9c44ee2eaf6572873ca780f7591bac5cb365d868401dbbb8dce
bb09fb6fc50eebb6116a9e695fddf814ef9fe3839b289e29d198dc6876a14480e94e194b
d533ffebfd1aeb601244b180a02a1af5e35e7fefcee2ac96b0d4e3ba44eae95e7ab70211
f50952197e95dc6eca4e577e96183d4c9ec39c78ca9a030aecb638e078fcc20704a61ce9
7778adc103ec583579ab118fcda541ea56eb70a7fecd4e2ed67414e6a43e4b4b35f571c1
d28bd335ebce16ec4d9c9e18d26df1545eb697410d5eed3b0fb7b9891246a6c4811a5939
fc5773ebf89cbbd2c40094dace17e2349662000ab615eeba8480cfc0909e5f748aee9bc4
26a82e4e963e16e68a55967d9e68338ee25f2aa0636413de5f2d299e3adc708a1aa33f31
8eb1d7c0064f09d4d1786b5867eaa763986eec071a31b9287ea4e0465e54b433b47ac530
d3cfc155ddf363481313ff37d5b41289f8cb463bac931681d7d5f6408628fff5c76cc1a4
4b9cd36d3faba07620f5ec682a550e6f9dd7a4285f305e5a12c38d1493825a91c5d13497
3b329142d620f51e7c964c7d748c63a14145339138c97f696254d97423bcb8e60d2e651b
982eae7a815bd2f870aa5b1fd936d8c8d0fde62e7aa2410d408c25bb6343e7c72991a3a0
e9cdea778342510935c90a958d307206652aa256793fb2d8faf66db3a7c454167fd307df
01636debcc20953b4fe2ed04e2886b35d89fb6c9bb45208d727874c29bdb93503976218d
1811968d0d477e6e27436115db913a3edc876cc39417f73e0f3766bee8bc0726eec79db9
0b99883f1d296039e3e751f582608185a4b86bc0e06a0342449b655573308e9d0379ebd2
4632e2b2bf7a408ac8cf069bc7fe29ae4dd552b177e841099305d6ac7b4c83c06cd3bc35
dfba44bb48750c283bab7f2f8db4b55f2b95a7094b7448994b4ab4b016f233b168df77c0
edcdd6f8c47eb24d85cf2963a50b6bd8ac21449d7586c8a81f7d468e2374499f02a3210a
00d4b639ee2dae989ed9958a7a97758e2541e4e45229c1ee6f552ea2cc0cc0408c57286d
7e5eb1beae70b2ebbb3e0d276f579fe6d2a5b8f779191d00e33f713fca2561af9254bc1f
f9e2ff27843f10f6fb6bd9dcb1abdaa4636863b60ab2a9f7b81e405cb5fc9baa37dff165
75e57c8232cfd9551e520ca83582d857e4b30511e11b28a9dfc18dd4035c2bd335ed9032
9a76663db5381b8e194f05028691db021300bcba0881328487646dbf370e631f436ee464
6dd6925bdd9845eb4caf4517891307d9099c13418be470f7928243a2658710ba297c1471
6ee3c8b00e3dcee024e90d63512bb063ac458805698aa8a6b6b94416dd56303ad2ba6625
9cf84f468d1e03e756da42e29307db3dc346b8bf5496d5c5c38f37b3c2ec461ea20ea92d
f5376deac8a79b58bc0d83d0cec7cb4150f5474f85da853128b6723d1294cd2e9ef9464c
51d8f9a35e9efc33cb4783dd181eeded7d8bc5374b5bf3f21606bd410931fa1e77c76ecc
73a2c322bab127888e945e054a84d0d70cc30eabc649f630bb9bb19c288488a73dedb160
d7eee239246755d4bf1b05ec19c0f319b41b179b692c1d1af404d9ca7bce871de19308bb
3dbf1f7934d2da08e1d7445bbe677510a5db3e90abf34384561d091382d8676e62ee1cbe
75272a7cbed95cc817d3712cfa6d2c004503ced1d499102e82bf01eb647c56725a4523a1
be4689dca28ad88bbb08c972481348e728ae3cf74415d00dfa624dcc26ce58cba963b483
b65f8afb6907062be11e367572da13827fc7e358670212e29f23f389ca060e1aecc98fb8
0dcfc46349513fc65044ad02eeb247d31f2e53ce413e4deded101632daa37c40d2ae7d56
b71c438cac57c69ffb47d7e1661c98387eea813eae3dc2aa0a4261c6f37dfb827b0bd2e4
902cbb096cce7b358012b305bb677c7814c9475abdb795a9b8fae4984f40d667c099f325
6fe3dfd0ee2121802f9996f83ee6c228045089948e7faf589546bcaddc3049426effbcf1
2122f3aaa2c3a2e009d15e99e8047d7ce9eb6307564193307b40e92c2c37f3352993b653
bb03b551b2269c43bca99a10780a5bad67c8a54fadfb4f8f3182391b9a24a36331da6b9d
50dc32ef4b1850c921343148d80b24da993efa9ef9506f86c464336682228658f9042021
1640547880a58676d1bfca221a2ff1eec395ea14bfb78fe97a5ccb93fcc4d41788a21b82
7f917320f3cdc63772f38e434ceb3c0c0dcbe23e314e9f127d2dacd1cc6f7440f461337b
f80e64f386e09f2ad7fc5064879ead5582150d904fd43199b0344e46493567ffe67466cf
7b3dbf37bfaf740dc0ef0e3751c2661a36a6f3ce807e3693d8a256fe026064122f631971
177c1b7361b3cc78e96d40217dc03c639da21b7e3bd842792f6591541b332f9b04ba7c35
4916d9ebf2c35d28a3dfaa47c22534e040a649424712763b29c3bdbc1e2c7db4a3be01c4
7f66ec077befc2ae9de2780d59f4bc5848784179fdad57c2ab8f0a524cd28e5316895afa
3c29d4a639f22e794531d2fb356980a0c309a9b3bd6f6314ad558734c9772a745c163345
114e8949565945428da8ee8e77588c8ad96d9e2899399c6f1d1fa99da084d7b982f060db
e874ba01e1d6b591288b82646fd8fb59b6c47147f11c8611307b513e3e33d3fc28e2399d
2fa4b7c47d6e7514e910afb902f2fbd60a834f5dbd297d5275dae920ec5c55e85b292363
0dd4fa3c3aceb93f966f4af1e95fa4994fca05c32e7cbaa50786fe54500e71bd18d3ed43
291ecc5a1a9d171c395796ac1c9cbdc2b2adc4bad7750afdf7def18d9b342fa890e84962
3d4451bef3cc16c654a49824cab8a80eb38a5e948b03c2bcff2dcc9e875c0200832c60e7
0e6bbd33f6904d825c94a9860e8a81cc5b26747c5b03164d947ef2fde1d11f93be6c5499
661922640d0866efbf11a8acf2c87bdb711d1757a54d5a8d2994ecf7988662c166c76374
9e64231c1a184afc6c93f1838e5935d2ed05e0b1d05267412653b9159bcf6e896b3a983f
27db6b41cf5df33d45968ca0156a0bccc7f522223713ffa9eb8b9c482823b3dfe52f67ca
c0d33068bec23b30da1097df85ae7aa2101751c98cf490c10da0cc1b087433bddc6fe395
238c886a3b2fe16069ec2acdc6000566f6062e0521038f6d269f9722f3fad2be099c914e
ad4fd27e3c95324b63324889b183641dbe565a220ef168fdb0e7768c164fb7995529a105
9d81845ed0dbfd03fa79a416e89497b8008586dc9217b8870f7d803d2ba9528e228a7973
899907c7adf8db310170f1542e0f0bc69c1533de513be4316b6f682289865d02da3e0409
4f01d8e46aa102077df9687b697e2eab1390f11df8996e8937aa44d3397f4c9ddaa15ba4
a8fe0194efd0347be0f152735a3bfab46254fa508ec5ba2499d8e750ad826818f8aa6c7e
a15bca560e083d923689f95e203a63abaf118173c6740c8127e705373f6343ce53f8692e
22fd060899ceaa9fbfa4ec974d76ef8c9e5261ac5247d63afe7ef808e1476a44ce26b4e0
3fb63e5aa26f323aa83a17af0d30b2a8dde3665aaa4f43db4a70d264ef5811012ae8b59b
fbfa78e1f34e4d7fdcc16206599e48447afbc64cbdbc5d0433081d6792ef179f90da1f35
2a1412237f78b68b6ced42bb660a40d90bf060366324d836e11bbf48f4d079f8321e139b
76ffcf18ae5aa6e7675e9cef1d72ed5335dcaa75adb64cf73497cad5b637762a5a2e85ce
d68f7946c428e950e58714e077dd093d12a94e6ba83b207ce4165635c4643a7589eeed6e
a7054c3a79ae0ca21dd186306e7337e9c2871861473bc06f2a563a3a1f896f9e0ec789dd
0ca7235cf2912b65427256d2a301f6858d95e2af3f009e3f9b2d04c1e91767a85bd00775
8b7e9a1c7eca21bcb1c12fccc28fad75efc1be690cf556fb9476ba71a43f6aeedae594d2
b833cc29c6f106a520679f1984b18540b9d63a85deafc44a2f551a3e42d61254740dcb53
84bb2b6b5741fa0fc76b418af0d7155cab5de837efaaa7387e01bd49ab72a2a1b2790515
321eece0d3829fcad42f612589b7892ee87fcbbad4b3f70f1980564bee97c3c553db7bcf
a336a0e36284091279bb3f59c3d843b20e206be1a9e21e02da959837d0863c13f7c65192
ab40185175801d44f0f0035f72a2fdde0483f122ee4f2bcd65eea09c18b8ab0eecf7e0a3
bf1348606f65dd434d86ec7f9bcc6070fc54b54681bdbba8c9313167df3218382303fb00
1539960807292c5700bfb5c80becc95d36d681855bc2ebbc51e9aa3fa4f6ac92dec20809
2760798244bf6fa4e879e692b7f06a0486f2552763949118a18ea8c885c854ef912dea9a
b330d8ea62ff284de04a76c43295dd5fb47e34a33aa150dec456b7a646ead8ddc7899728
fa7a19a6c4de1a4d4c839d5a85a8ecf9ebf05e006efb8cfd7726b2a0f92f946c5968277f
fb17475d7e84299a450b4b9a11fa6199a31e9deb82da1fdfefc1653f673637b8255612fa
5e798a0b2a62e1be6c3eb7959f6978f211c7974abcb147c39af86eaa8abed82d1eb2335f
0e4cf1dfa0146e9e6e8f04c4fde7ec46edfeff5342896f02f245560a50a37d14990c29a3
ce06fa2da47d447f8cf71517b07b869b496d5df985c9383e125b0cc36f8cd8eca11ec395
c38e396fff2a0afdcce4e0780160357738384ba26a279a4b6cddc3afebea66cae9f79dd2
1ff3b8339eff38095b7d13272e45706134ede615c17ef7f15e77b3ce7fb8e9b6e8e0dba3
1c01413df874669fbc53ef666648a5c23cf65d1fe0acf5399e6aaae78057364ad99485ec
d549ae2225186e959dc595f520526a224cdfbf87fd17bfdccec55a2470780418c8f589e8
90d8923da3cde91a68d721f20127c0e588d2ce4cb64826bedcf0a061ed4dbe6bfdb8f51d
3211187a2531950ae14ed98e0d79fdf738be8f6524890910e258e1d8797e1bd422134478
10d14ef34de4a0c2546c3f072c753aed3d29f9995f749cfd3055178370be0f058f98b8dd
8e13eb40c2ed2538781281d7fa0cba935c74f132a71602269482e5df5c238a8e4d383cf3
043fe7b83f36beb7991ae8290649a5fe7020fea07cbdd50880b1b4f1566f15c709f65ee8
99f61ed251f560204710d849cc11a4886709e650ec25ef7102cbeefd1ab883e781f29696
49eeb2fd0d60817142d511fc333383c80ca7ce93b254ec9a94693c195fe9ed65bb4567f0
5a435dbbd7260ecc4ec01d08d7249f13b7523ad35710defd81e4f440deb499ae608060c6
514722e11b40f41a43cbab46a16277fd7dc738ea2736cb77a5b034972987b89b2d127f38
5eaf4c6de3536cc0cfd2534cdfb4e0add9f184745660e9aafd0befeaf0c5370d983acdac
3c9f0a7cad710ed8ffbc2f2e869a78315194e8fe6c7af424cfbc3081ec9b22539ec81d44
54d0972fec88c366b98a9330328042d24567dfbc4f15a5f9737567f6e366e1210a44135f
e2870b19534ad6ddb222c46f4eb36476edf3268a2cde795b8ba4ff37cb00368780fd61a0
0a5c9acfe024b53f900e2a195abbc4ab62872c4e080a6643e8e21d75dc8fa44a351af185
c258a01c94fb20e86715642871b20963d2f6fe74572ad83249b1b3f1e12d93fb6ff65b87
16a92b2dd26a2b46acc0273228aff11422176f35e252709d3cda6432a007cc1d84cc5dc4
420aef855f2f92db62f07fb82041a381f3f0045b9309d6947af8f20d188d1823a448070b
74a2e4af13c4868c6649aad431ede170b7524f4712a05462fecbcc86c2c79d602a467534
4f45a7f398b013b982ff60ff7c9aa596b350c4bc0a2821ca15437e93a634c80c120f3fac
2567e64b197b69287f0e7a5c709f3f789338d0998500768048a5f469568532381985b49b
e46cfa4ad0181a2f40ae53f1f80fdff4f823a50fd6991f36fa5bbb747e52c8b051fe142a
13224830820ec012a7826d4b25fd79c0b64d904d56fd2ad32c637400a8eed6dd65c626e7
1a0abcdaf3bdb5b93e04cb7593d7e707cf6b58faea6efb46ee7a1018c90027475059cfac
6731effed30c9b255b9018caa15b4358accf982b429dda93b49fa9cfce686efe13af4923
a79a5b857763a609c040b7d0c730dadb6d5f15fd9257aea6ba25313ccb5aa338ee50c85a
516493653342af265bf018da15ae0efb50e16973457e155da73efcce8eb913259ed34767
94c5cde20181f48dfa0e3c3a7617769796a48d793bd9be23eba88ad28a871893b214e295
065c35fb463b57de44f6675bd5c6bb07b726772e9cef81bf3183eaadac5a04e0e9c28133
801eaf9e74f364e067489d391b6c5f4fefc29e7c04ab07c7ea7c2f6345bd02ad543de6c8
ed82810ba36c2f80f4b11c682c1a56b9f96f0b4c7a42876e614668211098f6fa7c40ee05
16570d9eb262f9ef1d4c0bc52b08c085b61f03066cef1b8592e8688052c68c4268da06b7
eb5a7dc80f09ea2c04ddfe93298a256dac2e6f1d99a62806f3fcaf1b29dc7500b22109dc
3d62d65af975dd836b9f632d3d3db485fb8dbbcb8e13d41c0dd2f08594f34ef1b10bc968
0bde53410af03f348089529f0e398270a0b3c8b532fcbc3f94ddaafefd671903c79a8f23
696320f177ae4e920b1cc96e5c149f60ed1742d96accb6b4444e8163701701b47cc873f9
b1ea1aec113bf5633d7813a0256e17521f4e8fa0939a70ccdbd71df9e8b5f1f7ed8d9609
24a7ced8d59e5ddd8d2e89ffe31d6cc687dce05d28b08244a36dbe1527fe47792da90665
a2d5c70b7dec01801e635ce8127639dc85396ab39c49b1068c1f15a6d3e8917a513138a2
ff270776e4f28a4b779f55e465db12bc7ff58cfb6d0cda17e657d1f2abd0485693c1262b
d6d8e7810c5f5a3f33e715a93306c33ca1073d7786e43c57ea410d0e43755a902dc45e90
d59812e3443aeebe72d993320fa2c34adbe4a3dc30429a292682086c8cb88fd3402e1fbe
3a10e379cd3d6c766b1445b59e5c6ec4568e59eff8bac6ac0a903909ae34b8982d33a46c
9b80923ed56d792491875ea44f77ce9631b4cccd413b37001937e04c279c170d8ce676b8
51a5519cdcb043bd48ae20331627f9913b3ed3a2dc8ad4f43c07fb74579ee499bd2f466f
16217bfffacccbb6230236d345a098c4ffe7fa1dd55bd5bf00b7a6fd6ca20171d0b9eeeb
92571936457f81bee59ea8bb06d4db01e16c018f70c638c36e0102fdccf3fa8b4a0059a3
992350db0aed3e54e1767548fff91fd51d0e0333e129ab64d4f350f91eee06b3ff48fa40
332bdd69e5b4b0cb59ed76014a4b3ec0a37f0b40c425cae1bbe62f75cca312966330419f
5043d2ba4c5283d242f65f6835f71fa9ce02c0299e791f7e68bf58f8f277230d05e45764
d90a91ef9401d9cf88b57205eba61631c2eefcab799fb7ac6b5f8ae0db6ced9cfc1c56fb
b63b084ba55e8a9318df874ae49016071cd99de62f61014d941410e87e6e28f1e875d409
16b280b45bcd868abb2cd41e8af4bf29c3cfdcbbadd4411d84ffdbea4a49da685fa68b4f
603e25f20f402c9a448298ad51ea17d80ae96ba875e45619ed0870d3c4019b35f4ef61a7
70cd68516fa7bc77937d62faaca81a61625fea51044a750b6317367cc8f699605110707c
9d5f6803e873c13db720d5830fe4aa818f63ad73eec36b9c1b492d2534c93e83f4823438
7be696040e570d1543a9410649828f618cfc816b3818d68a72278dafd42a4e7f2382e039
88203fe636560b2ef0bfc1ef6da0308fcdeb13de46da15f4e644d4ad0dbf9fecb68f987f
5ea5edca388f4d7ece198bdefe67cf233e529217a99a4f6cb9320f1b4e883502f769de4d
51716ff1380021d4f183eaa482562acec6705e1e75cc5175fcb45410da1f6f16c71ca110
f4931d8baff6719a3ce733285056e69eb504fb7d4c9f15e3545a122fd2a894c7f1914489
78babe56bfe83bdb22509a2c71b8db4379b40df8594afdb43755e0b2f6cd7ef32ede17d3
9f2565a9df4be4d4cc065b4ed9cdf02d5c4ca2fb0747ca754734ae7dca45d8148c72de72
bd299f3ef39b7a14e660b15b57cbf76d0fe675cb9ef89ac0e11dc1ea0bf743245a98f371
7a541d83f4f6f8e85de36a3644a4b5157b8e965b37127dd6749226ddaf9b635f81bf37e4
ff678b9700dd69dac6f69b27c7e5e8bef579d55e5a164170fbcc889cb89f7ada8434357c
429a9c86b99f9e11ab64fb9e8234210e36111403f5282e81e7111a47b7e70d2c8d811f4f
8b5844c91abb9cb17749685f3959e738ff55f22c4e29f934dad4c13b79b56ea83c372f69
d068b529464146e121cbd8d6b3f0218d10a2884a7a40fac6457959863ecae35a20d2eb2a
883ced250a6065f5651fc1aceb63e86e1c58a03cb9422a4b68140c6d104e584820418078
0cc347602cfebf5725026cc206a29482bea8a55ef72012af28c42370ea6823f8f2f7d11b
07c4e7e8f2c9afaaad6fb0dd9ab69234a634937c442e9bc41eae04f5d230d467cc5061f3
477dfbe990d448cdf28a5e7ecb7bf1378d0f2884bc7c37a835de0097be8c25ba327a807d
c6ef766d344282258e4314a09fa8802d131de3c8964128bd203cfc469774f525e2e5ab9a
b230cf69c92918db4863a4cf6ed8fc3c09fefb7c2910ac7300cf87d2f474bfddadf303a4
1555c41738546d42b6a4979d0683608efed91d48daa90f525ce51e4c446dec65ff9c26b4
8a072db813ca696ec869a6debc6b0e07574c2d42aa8425e12329bc8a7392b69f77f3ca4e
ee1ff7f01ac6cf81a081d0f386290f57c8625359d1db8eafbe463f17fa621bc71e90d385
fe03e3649de4890d54212e25e5ff1a195aa43cc22cf4d5b47a702178cd6a947a32caacfb
07a3e7c52057b0e6c6a3c622a43de67481d1cbb01275a608694b2c340b2d04cc239ac33f
ed46465168f77316e8abb6e26139dc2fddd756dcf54f985a5e43501dacad6745b1fadec7
2ddee4a511bc9e7be143e8adcda0ae169194602e2488fa95af7622ec63839aac25967ded
a5295ac5810d5eacc3c8f2e5338a75662ff68b338b4089ac43ea59db4e7ec1e2f284fcbc
1dba969d767b9c73679ca921234b53508982ad883aeaf7cf161ad9e320c5744e223c4f40
f02a090ad13998152465da283a2e097d056a465bff9c2e759b9ad9ae2138b73166aa3d91
ee3719b95baaa83d594bb73ec040cb9ba12ed02ecc16ef4d3a43664a9e8ca853d6abe68e
74d62d1706a59a3d16395e2fc6777cd3b04eeac0d94205233659ef55d25d26f95d6c68c0
44ff2a956fc234be5af1d02d1f99fec1cb40c64afdc1ed0719fefca6c4814e20fb3be627
f0a2e94f89ed2a32f408c1bd820c8fe600f8b1c7fab23709151f9ff7b51a02451f50967a
42e8b2ac465fa557a1f541c0b57de21dd408dcefd7e3e49066dd9a1d3c84a34c6fd6e5fa
b9ec70a5182f558e855328e512886484d8aa3e9953154cbe846489a695828d7037f3b2be
08f2daabcd321dd8e30f1ef8831249fd732db87c6598cffb3375e26ed799101f7baeae37
671886e33badd4eacc0d8fdb76ecbc2f96375846eddc6904439b81feb530118dcbf110ff
a8ef20fbac5155ee61c659b6fade44f1aa10492bfa72f8c1d17345552da6ab6a1d2045b1
705867535343f7c163b600876ae4394a38eac6d5114d493ed1f1fe8c375e45b2f5623e4d
59f93c5fc53316028a1de282a1c0054027ea2ace45ee2133c7dc4a3a6d6a00c6d1c576fe
65b5199de58a3ee98e3349ac610cad60e27d212f2315a49dfc57b8b2724b7c238192bedc
55fd2b859b36d39567c58552b987926df2fb64ed86b7c4531e90cedc98aafcfceda90277
a6218f4de326eb52f2307b7c3506027806d9c8791d0da9c3f8e708f69a66dddb9cab03ea
be7969314148e1414bd9a9698b35d3af72e76301c689f1169c3c773ab4686b6c83d33589
caa0338bd609771db2407de23c4cf176c34fdc0d312320304dbd853232d76c0161df8c39
fbef6e31fbfbcd6a7f1c5aa7cc5ff62dcb5cd45e1e693ca6751bc3f28cf208eb9a5caa8c
bc963a3e1f8d14e01a16e3340fd5f89163016facc49d776cafc54fae75331ce8e2c7a131
8c6b5b15004bfe4cfc48f4784fb978e9e397d62a9fa1fe5e97d8669f05c378eab815b2c0
5160e1f0bb365476d8561a23a582066a9fc4db643d8546386b503fa9478dd53168d065e2
49f5af44a069befa6a4d5894075fca484eccea70d2a4e6778221b7f191ca24f55c81619c
66fd7c05d2ac4ae195246661c5d3b9415b9632201fb412e15d613961f9d40ebb769da934
3a987cee953e9affb7d3e6f5219b84db9eb409b67d062ef40fc5c08a5517ba6bde01c2ec
6cbbdf9d84847207567372cc9a4f1e7440ada64a348d28067bfd46d8c7921604976f0782
835cb1075769456fdd3effd49c7c0453ba0b82e5f4fd2bf93252d528b9ef5c288a916e55
708888145f532fe88ff63aa5c9017e42c615067a8543d131b9ce5ecbd681ca8db517d423
46cf2938e6a0e1292d5552af6acde8ecf677739498012c01c49e3359ac036b906eed2dbf
4c7cf6e01a9aad1deea697fc11dade6d192aa63fcdd58306cd716eb215fecf558871a1a0
d21e9b9af9bc47c8ebd53f9ea4119f25ae1372992df62765c7dfa63dcf536a0a7b883710
760083dd379aee1cc046631bf4d15d759929fcb32fa55e0f4fc44fbbe71476edb9d440cb
26a98697a127c0ff8d8a04f0411af1d0cef6b70f6316d79cd7bfe21f84d2683ca1015102
b45e392972f4dd23ecfdf2e4b276bbd3d7f3972de4c449afc1a75a58fb59acbd716b6b04
e73d0dc960bccbc6f73e3f8a1066ecaa1c9f8db9d87f3422303adcd613771f4e127b8956
093bd545d4a5e7c17a7ce95dccf1c614a80a33f5aab1be1df477b4b5a9a9e486d128c674
6cd072a4a700ae12bf15b01547004c67f01b27db698f1351dc3d19f65e74613eaf4cc2d8
d65cf9b3124f5e01ea1ade3cb375f81f1427838110c91c2af46332183cdd755e41bf9b06
63b1199051ab96bbfcfc7e3d11ea3e4ce096d0b6039bb2f53470c4db0d4c916d5a0d6365
16a79159bbe8cb63de37a40cfd7f00a09fbe45a48cf988b2b0b6477528ed1ceb36af54b2
9eb7eda80a3eb771a323889934d1a25666be3bea5694ed8a94cfdbbf4d8d0901050f5bff
2802d3cee5c0eb1bcf2813c9e1ec4243a150100fd83a7998259f9b0fb244291702dfd35a
eada97cc2b495d1196d2d149e07ede671fc144413f40683a46377dde81e829faefa95eb4
e29dac861b280fcfdea5e81b2e182e1a0b7481439e3d39e65228f2c2bf9e850bdb109e13
1aff6afbe2284a4c01fc1cf3edc57da3cf74a6aaeb002d1295b73af120b92a35c75f047c
699622ec01a9e51e9117eb571eff07322aea4f657bbed02cfa904306b3f8736fb011f393
9b471f448fc58536fd54f424b45da464225b42fa7be077bcc152fdc518a2140a112b20f4
451b7f78a0607bf55c7a12b0c7d27b9eb2337000aba2ed75d4ca785d5507f13c1a1856cf
3d6cd61c36a8a9068692097fc469f0bd2f6821de4199a68dcdb0f838bd4efbe492185914
a985705028e5f62a2dd64d03aa2b531401db562a449e1a5a135b31e31c5abe7e7c84a4b5
9b7d93b56952ef296fa27f9da26ba5d62413d07a344eac4732fcc744ba8fd1b0e8363cda
7e5c8fa1cb0cd371cdc7b4ead0bbf67a20214e18a5b99c32fe531269d3c367d61f21c6c3
e4ee974543f69bfb2a0f43c66adcfb8ac660c484558df515c3ad8aee01d46708b6449749
17b6dedeec9b2bce4061276685ab0a718148624e22d976075881861f4ad4e7454821cfa7
4ad58ef554b80a6f789c839a97fdbe16b22e4594c40c3772b58de9019bef51c0b71fa1b4
2316dcc1a24e86b42f05ee3a6355191f6dffd384e4edc3b8acd4866bf2585d428184b509
71ad21118f0f5cf4d3517091f3f6ec8fe1f65165123709741380f21b86abcfb88d26c59d
3366f38c35ed3594a855b5b90d66b29031962c04e093995e37e1a2284bd0c62ffe496449
79055dc01f570aba23f9cfd7714ab9c6ddeb2858e3e97faed2e15155234fe3f2fb925d80
1eae6e6206ce72714c2cd14f1cd785d7ddb99b34cb8f7ddaa5d6a4da2d24965b1557a81b
9f657f04e7ed8133413c07bfe6b79eb2d93576a1ffbbaf9ee3df9d2326cbdeea1f9e7504
5ac1d29edf11b60bbd30eb6bbc0bb1554cb75401458aae99a5e403a0dc22dc9a7a5e2ff1
bd691aa318808a7969ec44d43d7828e8cb56c5960ab5042e6cadafe9dae3735225cea802
787fdd5d37b348de58507fef15a73d36fe70b243df992d0f4d8164a45d3ade1b899767a0
f43021a4d86ad322bf421ca9128e353c7a05814e6be0ed992716be3ffbe71f323ec05a95
e94b8911afa894969d00f09be00c40553d658d6dabdf355cf96306eb17253632cadc3037
8cfbaa0acd72f04f18df58a06120594d5315725e1007a280a1ab5de4c6fd7addd722a76d
3d7d3221bcbf635e4a627c31b13d7b35e83b3549cc11f0e6ca968f940bf3376ae0d8158f
a539c09b51ff50125f6f395da21fca18dc6392dab8e49db22d4991c435e38c12ab6953ab
c21f92e9139621aef5157b4d2e92e3114ab195295dccdf3368b39a92b9eeb615c571fe9e
c0b9bf2e8dbbc6dc83b7e15470ea53f2552bacdc0510e70759f287127052114af31d3d7b
32bfd682322298d6028c5f8251c7d68fcdc6a214dd0f6db6a2516271a88ae4a44b800265
b9d20328d6a7ad427422fd7656f9f8349b7f7b8f643f23a1e94ad8f5eb20a224a771ec4b
541cfe78632e933e665234c6b142ab75648110305810721f7783facb3eb95cc5122d29a3
ccb196d1d31bd666f01e1e1a11915309c00031802861d145acb5131e747421bbbd871139
c0c1913efd3dfee6681ce02048177b31a7fcde1bedd20408005bd9ec522d1b6670e97b03
0ed9f9c2a3665d83e89960c2c25573a4160f2109db04a9fc75fed50e48b2b5c9fdc72ce0
31ad279d22d739645748a49a043d0258f2bc2ac5e32f03d39b29422c39d95ae3e9cc5aff
afb47ef01f68539e8dedc2e97cff2a54efd6860bf020b4f73b7b27551f7a3572f9d6429f
e00460b7151779857e38f10ae1a6ba046d36c564b12701ab70aafc1905d694a9cb3563d8
4c94a84b8ec007e3aa26bb4b8b65531c7a8836d5159944e7b6d596655c829a0c1bb1fa8c
05667a6f821167596931c3dafae8fd63205a1a3d0b744b61d5a98c417aba95fbc5a4ea4e
08559470a317c9667826e206d0448ff4e45c90047f4d66a944545c75843f28d3b320ab5a
989a75345ab7ffdcb61dc6d9bc239d10dac7a39ce8dbedcd7abfb694ebf6fc38b4ae8c8b
67d0568915ed124702d7f1c538ce5c5dbb9ed0dda60efb6afba33eee5156dd4d8fc2fd32
2742c738182e9bf459b0a5c21e4da8ab035700b8ccfbac550e2204331de19b1fa8e6577b
472b1dffeb7e041798f47d57f37edd3258a67c3ddb17b8dc39bea53e1cd9da221d7e0e24
a04c48207676be1aa611130e22eba8bcc23ec0d57fcae7f784f94e8c2d37b2fef0270b3b
d522030acd94b2588ad1c1edd8027ca09338baf5ea3bb967ef1a9f119a9a785fa4cbbe04
d6b122ded472b1cf48e416d402fa24838cecacc4c789c4546c1186da585ba56951c25e91
b742bdf163119ea94fe92407582dccbf0ab3752277b9e1729e936d0cdf74df56269309d0
5801453061144c53ed148a182a226467e51d3ccf5b91361e226de62e0ad313e272f2f9f8
8ea3f5237053c34175c3f60204ae05c2cff12a3f21da2320c19753b8a8904e36fab86840
06f52194df04cbe345d9e752fa84a045c512f8e7447148d7d30c47cd29b692262952fa87
a181a1f914407f6bdf41845bef315c00326e757e3616affe8bba351fea49ce4d7d4fae51
f3fcbf4a7cbf8ac9c57cf18a06810ceffbe1ed3d0ecc50da2e91de7d1f1f43371f20bc3e
3e9eb3489fbf41977ad41c10d9a36aa9ec6c9918e89bee49f6d12c13875ef5afb94a091e
8b2c3f992ad3da3561bb371e8e69a79fd2aa52aabf0029714db6369051883da775578a56
1628d5f47468f9b7df2a7910f3e57f99b337f687cdff863c2980a9e7852253da3179c60e
9c431c416ce8c5ccdcf5b964c7403d1a5e7c1c3fd08a88f45e539d4631b07b9ed5230463
383c9b3c0252e24a3853775ba950131eeb3e6cdc2cf8ea7749e36f90e8168c8af777cd52
fe01f225c9479bd929be024bae35cd8cc823857f8e3649a871d84a1f2371d23435301d59
24103393bad3e937b0f8598eec26b6c0bfdaee287f013109ba3d125b8f2cd38ac0bd3421
6b5aeb7f55ca600a89b8e7a279378d95df4516a79f988fbda5b04a21c8331c764329948f
4efd0e3b94d47cedfc21dfd2b0dba98b2691e183a3a52bc8972cb156dee301917861364b
cebb9cd86bbd1b654198b7f43f669e70de60d1c7f3e7ca05d2855cd98274a5dc8c8541da
bdb63d229e6ff0d9412cbc440da8906b4bedd806b6a2a9f883530ba61bf2ed3c63cbd703
51049a46ddfd6c1daff608e8bca9ae0fc39eec61f65ab9ce914863f60ebcc8c5ec0c5100
981b7b1c1da7c9621cbec5a37cf530f73b3749f3f7a0161638b11f5f62db24cff2ab4091
c1f7a467718cfe9d63b3e824d41d033f522eb037d07c6e1dc12d0d0dbf43179848739856
838a98947eaf168278005c4c6bb410cf01dd0e00a8b196144d79d11b016d5c116562d7e6
782b35e4c9157d17b5f775a1f087fd4e968319b67757dc8f1536d3e19fc2ccb037d532c6
c9d636878a092e1e46ef79ccb19d1624a0a3aebec5574d76cf66162e8831bf2dfe6b1cdb
d4288ec5c920ca2209fca1d2f82424a0c153e5871e723b51d2d34b300e4abde1f9130de6
67ec04138f6999786d7360a3e918ff065ad71f78f8d930f965b1e6d81b50089b12104cd3
a604d5764083d15caea23fc76e005229266902882b3b04e345f05570524fe43a6b0f567d
81ec6a350faa0fd02020607fb81207276e67b4ba018762ddc9ce02756b6f6cb8c109341c
14b8edee01c46cc2e8d03ab01a7717725a6d211968f294a921e36ceb45e76c20f34791af
f80483c869e4a72b3c5174f51247972375152a44953a3d4f5af7ed7982d711097d70395b
2d40a910b26f83dfef18b81ebf96b3f869524ae13acd565b573323163918b14d9b0db11e
c433d8f6e8fb18dacec02e4cb7883b49df79a660e86af8f42c5b50ed01988aff646b2a47
123425e372a32d0f0c920746be6401f0feb5b5da97be746462213a0b62de5bd90db2cccc
7f2bd2741aec0da7b2358aa55e2cecb9c42a2bf670b1c7f30ae4640be6d3884a47b10293
bd16cbcbc12f19d4a10a93db722de262387301ddd9887735b55c508daff66e5556601265
cb9372d9fab91065747c1e1ff4f52d4ffe80510e3bead40d490164622e57c9c9e33b4339
b031154e62b37bd15b7313b5ad9ddc0f728f38dab535e5ff5677ed07cb3d325af4176e97
09cf2c8b5e2bb84fd627b3296fe844f8872e0cfdbf12f716ae219c8011027c70f4b54cbd
49833a8414303499e4ccbe737316cfb80a09ccc95b17c1731fd2b7e0512485b03bad21c0
98a04a3d8d8910290b9f1ef1cc4558d905193166eba46f7fff82cb3b8f4ba32e3f431990
42aa02624049d4cdb4f1c603718cc656c3b99f90307ed0ddec2d72d6d77ef8b1b3842447
f434795e8d39c24ba08f865cd178aa267a1252cd52cb5f27841effab8fcfaa33fdd864ed
794a681ef7c915059e535c770a286743f0e44d1c74f74257878dbf12f98b5651f7daaef7
b21ca899fc3804b23b2e7f68c41ded212358f3a74456fcdd1ee7a194198552fa1bd6b3c7
481cd702ed5e2edebcaa625170ef652c75cf1b7ee09b97bddc76ebbda83b470405646a80
44a4c88673593790f9c2383b82bcfaef9ec4c86ea62922113f9fa1924affe42e01b4ae66
7f58709b6484fd9e2ef01ca49f6e03d8dbdaaa796e388b70a75281e1a874b800e4d98723
84dd9ca4c4199b05a254329d9b5c5472925ff02733795a6020fe21b2d24aca0e7c00797e
9dad590fc8fc7ec835b3de973dfb12ca87167a46c0c2b3f46d42d8a5bd1c0ea53212c210
3e076f9dda2d85e81b0af2577c69005ed79268abb005b8bd649c7167d8e6c7a79f5555c1
cf1cdac0c8378d8e5af48fbb54ea0f8dbf96e482b472d05ab37c098f0ec57b00fd6a17fe
d3b444611006717a9d1244e41f08e99e09ac3650a6e637e2000e08921b3c7697670eb3fb
c1b697519f66d244e360d9b81dd050a0dbf616e7578e6ef9c622998c27a670f130fb97e1
1b0bf908eff00a09e93a65ed3f13fff608189fa4856a5559a87e5d31e79baaf62562b0f7
45b1bab49a0acaa90562c26b8fdb12fe9c202f13740777423ff3c84da862bc7f49db3d52
2fb3af432a6f22284b55f01685076b060804a59bab4bd2aa513ea63e08ad6a491bbc71b7
371f66f0ef6989e25f6ec0d24d74ccfac904f912200b6d771e7bfab49f3433527b81512b
50b01dc493a3185b90db60507a94f866718a0de7ba2633655328aab012bf82dc5e0106a9
822c1aefeb9182cabf943c8d1304f1de57d8e90a8036a31863237b1424105f3df525dad7
1709b8f9f7416f8e3b4f55bef3db9fdf0b06f983cff97e4fad3f8460cd21b1feb92bd3dc
747d1bd569004c5062212eabbf2e28da828c3d947733d336e60e4f1598bdbdbaeaa4d2dd
181877dcfba37c13f3ad081a9f472c06cc2a3447a4a35b27d740d85d7223e242efdb372c
f6bd1f90a5d972117d6513f7c115e5577e9c36fd654f061dc62002c6bfcd9ba71d157572
873240ed171afdf9bde2c7770b00901a0599a75bf16db652782c1bd409498604012f749f
5d94cf5e6cf5b8315b8e1def29b03c7d8827e60f3782c51e780a942d65d947c71ad74315
575984efd9ed7ca480b57d63733e956a5873f555a0d954edf232c85da2c2397829912476
cb866638cdd7d2088a907c7ea3ba6a6ca1cccfe9c3f859baa5e26c8fa2a95f0693584bb7
994a1513a856d409b81a87551cee8034ed62ee4ece658ca8480ba5178505b46ac319ffde
d2e1932986e8de7b97c8bf75ee94493207684dbe7aacd5d0bb0af1650ce9510c5aaf131b
39d3f7d388aca98effaa53eaa13f1501dd9868dca6c37acb23d0122f4c890771e7f05d11
9d7283c8b55a4eae83301a95d8f46cdd88cfd0322819700594b8b07111c3ba09431d1e71
4e2b657a63fe937348e9efb6a0be4b3a74049865e4bc4b06888dbdc21c930c6796ef4ec8
9de867d036b8614f04ad4e4590f08e962864656649ca1c137d4757cdff4f3073403aa671
415605b24346629d4d2bd407744a255f790ff998230b02a81e51bf112be881667b116aad
91a376db1714ece79be14d701c7bf4c968d8393578d98ffd14fe24a235c461f892259af3
f79dc073d629da982f5f3df93b2cd4d1e7ea46a44fe34e689f48bc3fd345c2425dfb3558
7411d096c901424e3d0727018cec83e83ad0fd331ba9672b4e4a1bbeeb67076019ae0cea
d8ba12e92d0c93ac700524f1844c215b3fcf6a04e9a9987f46a74cd6dd4fb985d4e9c50b
f820662503ee1c86f1b14fffac8f7c60ccdb5acc3b8d511554333961463133ba032650c5
e16664c8333ee74eb78a556a86e3f464267b8784ca2fd5e1f2a6b6d801779c2e5ef52108
7772dbccb41668c05d5074f6177226592a0031cdebf42890a944c25652149991627ceda8
1abe3215e1c8eb777b7e415785469bee0a0d1a6a24c4db72640c47a5287fcf0650bfaeb9
aad369d6a7d277a907a31e6209f3586e1c80dddd651eedb852024619cf3e19765bfaede4
d34cb94280d8429a1f4b6e7757ba0574fcf10f9d9f1689a090c31cdc8615431ace4c91d1
bee27dbfda8b8a53e73005bb61aac7eb94a4625e9a5d244a9f033d910c884342094eabc9
cfb722a0a9beed7a8056d6d364ef2a968820c8ef1b797b92a3443dd7cc6471a00b2733cb
63c31c0ae1e9707575d1b21e15924ac253945c1e316af4cdffca605ced16d203988a25ec
0553507c21ccbae2347e8106169692eca1949989dddb298a7c25e9cee2dd9f635f54239f
59760c7206ed43d06725eb0a9d715e3274771a9a158888f23d2b49edadd11016b7d086af
a4a4eb1c7bfbec8ef539e2bac605fd18b2da6d72b284edf011d14f3013c033319c5220d3
3a7454ea898f628786d5ca4b86542a7d0818da623bfe6494027cae71661f750e63a8a1f3
60a4748f6b20a66367c00da104c217548138ae786de3e088a163a3f20eff1493219d723b
9a34b0622cfe2b6f8cbeb661db9013a9b1f5c7349e0f98275f54e034a559b354e30990c3
2b1bf0abbd57d85ed50f251f85ea7a53f877b65c900a6c75100cab400fa9d3285b9d6730
997209a2c78e6f1a11ebc9f0010569d37d32adc4868ce6df0fc97367ef052518984c46fd
f5b402ea9b69f0e2ca4c7a73ee0349e7259ea8a8deacbde9cdcb8e4d9d242a1fdb544fa7
e2bee486302443290f19a9ad9e0f9287ad8fbf7f7a321e9ca9acf77e013547313a4dccfd
e45e2d55bcca01dc9e31e2004078040aa7e350a67a29cc2dc0cb8e0e931b85debe542cfb
2d079ebdb2546ce467d47ce8a5d7d536ed1aa37cd7e6a04566b79494ebea0eedac6258de
5659adb46e6746d4e6d4643463781271d5a0a1183d73cd6f00126e4cdcf3456bd4f907d5
3921c04462c5145ea31c73d81e646bcd3574fd4fb3b4f5d919af5aa42afd07f0f4a9e6ef
86e1ec565b1d20e6d361c67d2dee64e2cb7cace92be5f676f53f6f88d549f3854913ecf1
17342cec518e4b5f23222c18b7ff19aa42ee9d77e91d8003bc3ea6cf1a56966b4325f2b2
1d12a232594356ae1ac2ae792c04e080841eb3950a38a6e09fbb40be74589d0974c64ab2
14b8b8f93bd3ac2a61693d1e28ad30da92beb257c3f8d3c7928b0be5ab1274cab2a64cf6
b78e1781ebac670e7c45128b19346f96cb3374cd1935ed90f0ac59091e99a938673676f0
19133a31bcd798b3d5e3cb3f756086a33d09323e010bf1b5b5996dd47222771e8e78c85a
3a2aae5479bea990a2d3359d63141f50452af65121009dd5a2b190d9427377fc3aed157b
0e3448a3111419dc2dd75b113f379933d2ead3bf169f138fd1dfc0a3231677db437129ab
54232891b70ed53bd17ebecd426024a3f6f0b5acc0b6fa3619b0d2e6c551e10485572ba6
120e56f9daf16bf5e0843be4325d3c140a747f6d99d5d5fecd7d1feac89855738d86d0d8
625cbcc14dfb52747ef61857776933c0911b0e1c031c489c635f153fe8f85aea4c45e85a
0757c1df75db1272c88784fd77c2e8ab7d60b703cf2a48f6163e967c30faea0c11590a15
318cbb2cb39309db0d848126b1c98eddd4f8311afd0442e86d5e3c2d9230d65ede42a9cb
37ef592937182b0d6d75152f8da4f729c5c4b8fdcb45a6c82fed3f9d6f40a60999538ab6
656041d07e0c90e46163301ff2e6e9e898243bca61b1d35a0888667b9187546f85ffd493
c02166c57187d5fef60a71fe61e6947ecb61020967b767a54355ed1c9155edddc921bb35
74fcc29cddfafbbcbe16026334d6b683e020e402da6b5f1f507626c415aaabbeaaaa3f2e
d9b7e18335649e009ee9e6e3dcf44bf5291fdea24369545c86a287b4f470ed4619ed891a
7d93245489396093ca20fa8bd2188901155e8d9a60802f6597242cd689b15f5e4b7fb3cd
07e8d63a232ffba711c136b169001f9dd2080212d4fba472f482ed8c053171497b461a5e
21cf1b52dfdbf6e648d6d8d5661e186cb46538481ad722591f99af86004e451c3b5e9d8b
5e3d53ee3da4d3aef0971da916500b460cb5c8b40945ac6805dae76a84a2065f47d82e73
fdf6d248e62b2dc494fdfa62b5abe29f3a008468813a501e52b29812012331beaaaf2159
3e7ef47cb2105e76ab808fb57757e66a9a273a8d06ae60ada2da6b194e911156e8bb70ea
b771b5a5a3ae0da47d54630218878f26b8250576a4c2a14a3052218ed8eef252ac451f09
36d3d66a64a97f3ef7cbba2a5f37a0a6b9b12c04009101181bacab241ced3476f7464908
34c37b750211c9103f66579a229dedf1df819fb1b83e2270f9ff6186e261137239b08712
e505678eb697eeb0776dcb6e76cef94d92e30294d95bcc6f45ff4112cbcdd24307fc36ab
e1d9711f4e71fc2dfd4ca3ca4e1377c67e09a88fc25359bafe17e4102c09a75cf797309d
2d20ec650584e20787f1f0f9ceaf119a320313b387d2262ac4cc00aa6ae216a84971cce8
45b21567e59b6cba6887987a9f7f7d06a083eebde9f8892bd9140b8a430af3dc7c9459d0
ccb90a28a352971eba45aa12b7cf6099655c50361e5ec74697f8ebecdd6ff834c4ac1302
2195dab04449369248313d2934abca1da3cf5908576e5d2b74a1bb6cae67f73e3465e27b
175480fbf5923830387c45e01eb0922cfc4848ef97ed30290dfc7aae803e6fa235885090
6a5a4724af15688097c461c6580a600b8d360f2bcf4abda8a2b4e295cafebdca30782bbf
a3d2ca23aa895a3d59760b7f343f609984045d0bf4c0ec3ba21a1acc741b2ea737e443f4
17a31260130cb1ddbb017ce1d60b0c33c6146b0a6894c01eea0e29ef0bf9c2ba1086924c
05c1d7d155697a7ace806aef0f5ceaba5261dae21b0494c0d96c93e6f8eae77dfe297625
e991b153efb86cb4b30df4a31c5a0d5b728e80584b272b469aaa32b8f31d4d6bdd68e209
718cec111364cd5a7005ecf824d8d8227eb2d1930a586f22a7778fb3f3e2d9f1d53a7749
55720681c1f9ffe9ff092a9adaa3608dfcb6ba61c6a9b3046e2f2fd87f475fdc81e5d8ba
cebab2e70374783c52bc865536ecf06a67a7608bb69e7d52d1d27f83238560bde8803f82
786eaad483f151ea13ad37c9b3fa63df931d03e276c994103ac35c9ad6e546ce564b1623
399aec99815d6a6d3c2a8ff977727f7378d0ecca43707b1d56a121180fd535b5a4de7cf4
4212383415bc47a0c8c35bd2f4d1670bf2ab4e580fbedbd2210f9547c920cc9857b946bd
adbb2f16fce4e4d12014f604271a38501102452923991859807cff83ff784fe300d69c14
38bb30ca6c2a16f0f7c9fdba1a69941e5fc741f027a2d7bdaea88de9c3fdf56013952547
4b4f01cc15b2a576668fa2a7957ddfe9082b0d1d6fecb02cd872d9a1a4f890469552f281
48d39712e883a4b9000ee4b51d9d3ac8ae679a66af80df93712f8254f413f3e2f4f8236d
a2704dd21cd2899a14ea6251a095729e8baa6bd48ab03afd9afc8d2ca90009a9c2a55910
2beb12f66a1eb441b316c45465341703937fdadc9e199cfac89e4cf2c6123631db59a1b9
b61de6c936d1c34fbdd9a10fc3b369747c9a878709b79c0c257742982f745bd7ad63d535
adaadd672d463ca0a20364a7b62b4dc71e71fd5d045f0b8bf92fe387be285cfc62b79c6e
39907326f1ae405701777ffe3cb2ba305f6f35fbf672c35760da230d00ffee295b4748d0
c400c0b395c3e05dbf509e65e89e581a75f8ef40c9ca75fb9babd2b49c0e90db00160fef
f0d45f2e02b9f0337ade01105db81e4cbeeb93879625c867fe8b5eff7a48b24c02eaea35
41ac44c31f27cda66e47b7d793f34cf8699d60d04162d05888cb197ccab97f2ac0ebfa50
ce70baf6fcdef2f0a579c33237363fdaaf4b0dbcacb8e9a171455467f838286c43989c0c
e56791fe3ec1e664ee2aa958e68e54d97690d368cd3366bdeca73da98bd28c11285c07fc
d6abc25f3326b7e1f7b6c086ad13734d4e5b9dbe890bf5650dea39907eb958e2f37e517b
e007de9025866faf0021a45ccaa4d2008dc62112cf89ba60b6d6b863973ca80ec7bae173
192899f2865ca5e3f0ddf99c3a9cdb1fc998a2dd2254cb52fb2fa3bc4a74c37ff098aecb
d2fb5880572a199247ddbebf7c4e1b54f644d4b1d993b924b01f5d60aa12c49dbd98befe
dd563db5eba6790f705abf80bc76e028abbc2343c1927337228704098a092d38d0f4d34a
fde4fa181e9772cf4e3dd9de36bdac82134b2fd19b4c6ae486019330adbfa0efa4ecbf31
004d60b5c461a4d52c3a7f56f9e2fe563a756ca5208a5d7faed5187ad6352da0b7e52caf
56075591c5e69fa0d96751e286edd65f3bf6bc53ad3ae5a5726046d2d43927e832f50cd2
5025bee9ab316de446b4eaae72b231939b26f143265e8437fe12d727369fdec689cb9ced
94b9dd569f23d61ac5bab59ba902027337519491f355d980a06c15cd7fc6cd34816fbef0
354ec4de2fce212be91bc68284acad5fef610445dcec4f03b4b9d5ee60603a1a622a8679
0281ce151e9943a3995be60eab49a41d14b2dd0a4295f9253388c68e3e86b21a9c4352ce
31165635dd6eb47a75d1bdcc6d72be286729ded211276fc3cba1ed4b11e62768685308a2
fb0fc756a553235dc09ec21cbb3b1cdb2b73aff024d3507d784608fcea8fc8921e302f35
b6025e735a5910ddea92570471cd64b85e23c6921940795d3ed63b323ba0b5895d4375ed
1d954aec6462b7c1edbb6b5d3aedd70e4a5de3c98e7b3199c6292d1d48bd65f2df29db20
5a570b8f72f61fd1389880af7955f380666ae0c2f451152d4f7c7828cf2a43e8579445d4
7fef859a5ba4715682265edd2a00eeb407600b0f3ba98b337629350423c3f4762652f404
e8508d9a13b46089fa400547c964fe8fd1643d5a1f82150c88423648e97bdc1b8daac83e
5362b4f8be4d599c5de2288c64c260410a23ab9182811e7fe15b0a399a5097d486cb4eba
82a62bf1ce4463939723c985d1793aca1b66c393d86a42613309295b242793bbf2783afd
54aae24c558593cb40427b388c606677a419e3d899e2e33b1762ee750338464a0d544e94
3eb3e74fabb4c4a4556f0bf7d38f12ad00c4ccdd3d1135dc3bb2f7f3b26f893954850fb4
7170f41bfb8b6da77f99b50514c3bf60b04ed444aea5bd11ba433ad5b7cd4b55f5ee6afc
58768f5cd1a860771cb3f2867413ba10616ff6eb425d3431797894d3e97479714c836e3f
4a2487a5e8ef0627c54166279bc90c3927b546f268de9fbea1286f344b48e9e7d53620d5
bea6dfaa157d1467f2a67e3247e54d0323466d3c169a55d9011111d3de940f8334b4c35c
ce64a666d5b7125a2eafc789f3c7f45dd42e4b262b4a3706934762c4d2e6e099bfd35dce
dfacfa8fd890c0424bfc1d7e6af1ad62f72d2d60d36f4e2bc4991615291c58912ab3d35c
13cb10f4c6460a01c8792532f16bca8b5c15d80f8c398323120c3d20391ccb61cb86fbe0
c682709f45e8e43ed6ee393d6d81ed9462a630efe41868bd21ecf0d026a03f3ade65a8ec
fd619c129d702fce88093730a5c852ccb3dced0003ad469a21c750f5a7c5fbd9d885f8e1
050a3849246bf59a7265c93fe635744dc7abbf96d65fe2bed63ab7eeec760787b07635dc
a0c20bfc689da4275ca381a3924166becdd0a85b01bc99fade0543a8c9258ca237d14f77
05080a916e7705bb91432b2828027fae0cb5e64cc71fb2c4e41c30abaecb423c309b2155
db5a74f71f2fa789ac5475aa23006d22d5f6ced09de22c74ba068b0b9441cfa8c0fda5ce
ddbc32105a83534d7bb7847a28ca984b237dbac7811c71dfa006335d329f9d2788f37d06
5caa02ab214ba5b00ea5c4ce0d7bf67a6997f7c21753ab4b49e65835371b040c65fcedb4
845d9ecba87c43aeb84ba3ed2ee05266e36fc9354da1fba85b8982006ee6a51b58210b3a
d9faadbc38b17b7141c1b09239c1b9a7b511406ebc8aebd20a87e404a75cff1e2bb26b39
56a32e4ac2b460a657c9910f0aa815c69db291ed9e1886db1cea7ace4b3d179dbb13fd31
48c046341aab940f6e5dbc1ce74411cbed298cfd9e941601cb0c6afb1f6f7c0c557ebae4
7a7caceb501f04442700250ff2c6449c15a8af9ea68934e17618cf1b647b5a2b0ccd951b
e9327fe072443ffa4c150a5e06684039c459d214e31a0d8527c549ba8e17e63c6d4eadfe
0db500ff7b30c7e61d1f8defb1c17205ebf0aad68e00371148f2da3b78db50ee7b16ac7a
d9c6f312c5f1c3e518d01aa9107bb636046669f24868acd7d8e7cf5e50da926f24fe2212
698f5f6dc42e126f2a16511c0da4dea04ad5d486dcf6725373637e8a9679c93e92e0f823
12213ef4b709eccb8a9f60b25e5f96be6be7fb47c5e2dad397906cbaad539bf4f1b4f3f7
c370141fca3bc3fef6740a35af6fc782cda8cf8ad410097f1757846b765063f71fd8c688
5bc26bac6c0f461977c71a548608e3f74ae772c595b0da878b8d24c20428da2f57832a3d
278a23611ca233ae31719e7e90f27140cc01f6a281888493a3ced03f55ca121502b89750
65ea265bc82843a3ede1859f3efcab8c1d33f69d58c8830c591fa87e8d41f218d18b9a08
1660efcc9280200cc32e7fd664cc601d698ada6389d2b004a945f6a634ac6d9cad664692
38ebbc750037ed7d6cd7d5f912acba71ee129fb0d972faba3c5630a7ed3286dc2cb78af8
da66ba9ab6c83e1d3718affcdbd5c05057f14325c796e1f81f3846e5b8b8bcc60a2dccb2
2430bbd704bfb93c450d5f0d62c90eaf330c33f2dbecd259e920934043f21d1680caba9c
ce286ab1a1e1261d16239ec708a6731b7dfc2b5c8bd603346e86c6bc35a7359fbdab44e3
927260922f131237658f9b527c2595f4a200e193c932485ef34d9e62a57ba42209210053
cb46a9c5e190069d9a1b7401d6f17ef1f4e30752490ec32d9bfeb7deddd49a9f22200150
79c4e56c78bb057936c3d701dfa2a171b73903493a49528d20cfca95d9495528e72c6b39
9e3ca4305df3ac2247e2ded5c1148798e4e6793ed88ee2deade826a9854ddc1da512128a
3f7d1de898cd2f90e18c956287c2688ec00982f090018be38af3887d4cbdfda15d0e0b3a
33d450f1adfaba1a23da2320d5b51d3c328d5a8c25a02de599e6de046bffe318b82b82c0
b640017812da884ac4cf666c2040cd5f4c81c04d9c27700b03e2900fbdf7c7fe0f037fbd
c742eafddf9e2dc8a7cff164fd535c17065263ac897ff85b03ef4cd3dfd357ed66412564
f6e80095050493bdbfb1a75d4e20e50a15def96bba30ca085c5f81298af602eea5129105
03ba0fdaab6ec9edca8900dc6782440dd1180101c55855d814a78a738ab7644efffb9efa
1df312cd902832dc2b3cb4a007d981081ad9ed17883cfb535847dcadd375ad9eb0c15068
48c0e558835a77e72657bdcf4c73c98c43ef5abf344e00409ccb5818d7f3ef73a0606d34
1d16a20aafee1a03e0bf4b89cde80f6ede1679838b225eb52fa7f027d8b57b3bb39fb27e
4fbbe49c5d32def71de6a8950eaa59f430122aeeb7f8629ad517be78dbabfc9e1178511e
d21ae01378d27f8622e5cb4ffb51b9c33c0d1536030647a5f3bb176e55fbc2210970870b
14584873a324fe71085221ac25375fbb30dba5d0611c8ff87b2ef4dce2aa23c5d450d4ba
f6abfe43d9cd70412717bed2f6ac7861c75a27461809a1eeb5da52b707a46bed89c94483
533ca9b679f1406b37c133ea4edb9956517a857b75596a53946903ca3842901e1b4e82e2
1dc6fbbdd75b9778b4da376423b05811d8bac03704b2fb22b5050d81f7ffdaad835c66b0
bc3b5bdad51714fa9106fde3666cbc85f5b1d0c2e4d9d5b422d5c3d32da82424b057abb7
09cbd22498abdfc7db9378c51eb368cc3d4e29d074c16dddd8832e834ebbbaf1ada0d012
8e9dc711c7637c53b1c15cee195b1d3e974fcd032fa0df41586a4644503bd67b1d2c432f
47ce4e1821f44ef5fd6a72132a5905853347602b39bc6a6352f8dae952d1fc2d0da8e734
f4d02941e4ddb1b9c67aa1078f0d3e8570750ebfa902deeb8640874647dceda68cd23aa2
b86965d3de4f0a92f9daad01916632c1b6b6f1a409d350efc3e3508eb94ad17ab5609e11
10b273fb45779d26d1898a7a79818129d0ee5b9cb94319c30c79123b2004239fc111eb2d
7c45f9ad377b0691d6f41f9fe3d7c751345e6b934b7728fe0d106b16934993b7a997ab30
46381edc92d1b473103d733fc938e235efb1bfdeafbfcf1006d8ff315c030458a80e0125
17f27aa6b216d3775b14a1b631a3ed0e6dc8ea84c9f544d9a4565b7c2cec1c09b4b30b63
1b4fe50ab9318b4af9392227f74c5a12a9e5d22a1c5e72bd1e6389c3a1c46b4548b87137
2ea5204dd5162585387025af28b46bd697eba28b8413ce49d6f543bee03173ef48ce6957
cb657d1ffea2e3ea4fddb329f73b35570b9edd7cf9e48d8ff0179cc0d6498f4c0655055d
c7ff6316f8079d1ab33f9238ca2ff1f3912deb9aa932e3c3987a131140c7b483db67579f
c5d8f0d4df74664332c192967124c0d2caaf37d5fc137cbb1b3ebb6f783f5e8c3c1ffb18
9494d4c9fce774d1f3540632185caefbd8f86396161b3b782893d0619b02e23918c300ed
b5a7899b033b671bec6cb4b3619fa4a9e7b33d50853496e31b81491084611a3b6816663b
b32d2f730b68f7eb81b66011e5505f0d8bdeaf314159ea05d0d11164dabc357625536f50
57e7bbfa35ece6e4d1467221384852353f19e1f1a1ff6e320101dd67627fb8776a22a50f
b9b5bb7d598550a89455b237fd9af9fadb86ee0c047136a8c90ab511b4296c310fb6d59e
9a71417819a0f3ba7cc175fd2dbe92db0f503ac8641b9dde4c0c9b94fdbcb896f108b578
c6c35f4dc7da37c6d4dd580d35e3bec0f4d82f6a6dd3ca6675a0354b56851935bb6bc190
2c51c69d7f4ec79af99c424b2ebb4745483c6793a5fa0695b8258d387e28b987acd32e87
bf66a9cdd0bd79dd6795ea660cf8032bd4ef7ac7a7ed7b2b4fd66f302365383387634afa
20ab8e47c5012f6ab0dc124a8aa4c85f0f7cd296aad161c21ad5a355a9d2c5f4722c760b
41932f410576fca25458a41942498a8ea74a9f6f98e950904ead95e28dacf518565e6fb7
876d893427a487d3b69e1fe5aa014483ce020a98ae7ca46b0ae4bf70ef16682d14acc83c
91f66aec73c8df760dddb375503ec697c551511710ba145abc1cd0f3648ff1f54cd71f0f
652c832cd0ea24f9e64154b475f4fe670bea289b0495cc3fedebe6cd69fcfe243356d078
1bc8d800a1385111edda31d83d4d834233dd847f6eaa7e65130ddc11efde12bf1ac53e0f
2fc749bc235d2ca7d9393443e8bdffa74be577780c08f96def3d7a43d2555a5d20a51177
538ae6a7c6c12bea11e36ce2fc0c93f4b48949156bbca23f536e4f469ba9bac39e080af5
60fe744268c43a0a24f1cc5720499695761b6a0c276089ef76490d7072524c85a0a34090
a9d35a00389dcba8c99423ff097ecebab7b48c29efa03a4b7ca2c088f629b2dba413461e
4df0f8f06b161261621fe9037b046cc0157f992d0819907ca082bffb8686a32efb82fa2f
732e8b06652df5c717d6a6942d6481b35acb6ad6625b010abfc9d363fd1ef7c6f412af21
7ad87f59093cadc966123129a01abd5002d76681b02a114603490b9485c886f230f4167e
0f84e33e4a3e2e68bd835447d24232ff474c6965fc2f42991b9224920c1b120352436a44
74a5e3391e13fb67a38487f0cc4d7827aa946089615c02971a584e3f79ef14f53cb1138b
5806ad414dc86647108a19bd43f0df64037fb35ab9db4b2a63515dd25d04828d79275c98
b25a017fd5e1afebf4bc5b1a00e5dc64203fd9f912f0652f76f2fd2a259dab5f4f124122
00fb6e7db23a2ce1db232580b62ea543d579ff5f23722f05b13f4365deaa435d28a8a460
877b239e1d61e49af3bba6c09e04cb2f7871cedb6157e2c229359a127d4c95c98ecb59cb
8cd1a9e1903ec58f6375d23ca048c5faddede208de3ca3b8a95751746ea56ecfa6fb87cc
6b656de1ac846614d3fe96187a32c370485d5d240c8d01ca7010f180e555f217a1f3ddae
53c43adae647bcbbc34f97edf82e91bcf3cee1d00599dac130d041b8fc8c7a9e50ca2540
f98e6290e6e5cdec7e3c84cb0fda707ed4df6bac9e2fb9e39e2c24c3904147c81ca90157
943a4c7e524c5ade5170fc713e3a4609a2645af3fa141a55d4b21b912ea02cac705fbdf0
cb01469166927ee80f004b1932a35a9b3ef94a791a5ef21e8a96c2ad7a1eef7f8a8802c2
65f7ec32f4cbf5c526598e75b0370c7060d91d4911005b5545974e4f9b795479198d7be1
59e35ed99788642c0412dfe777fe52d951044375b5e0dc6bd1f102ffa4a1ae33c7ab3a98
9f2392ac19a87264f170f9b4affc4e3cc0f2b2f4594e7a3251a8a68f5b03140ed23f5f1e
40504da8772cc6a2f69c6f38b13fd6ccc76e7770db8119f664f94439d7836f110ab237b3
124316573f97176f6b53917bf78b3f22f71ded07aec5a675c6336345b73e901e8321a263
41aa6b749b5f5a4998897983ae2dd53f4d1009c7dfde5cbbec357a09b923f094b1b75afc
58721976b331c9c7d5c1be06a90584a1792f3e6ddaaa0b3df4657a2ca940ef77b7b1d54b
c6691f5d82be49a23a7ede5f23628762d9e4a2ba54653d7c626da77d147a4ed20968bb1a
bd2d91e5ebefcfb302c9cb6748fa51dd788f9ce764c44dd94b9465f24f14f5d0bc04c07e
15fd6125f38e4ef2174a4022b87be66e784be26d75a650eceef511c5fbd900d0f3ba28e0
5978ea2b66e1e47df4a09b18738da5747f0c924b2925e1719d84224d8aebf6532b838397
3e7de53c666a0af6afd1d1fe20de54178a62faced34e2ea2884edafa4052b33b81da05ec
be1e2d00dd14cc3929f429213bb037afbb7952c0201de5476e2dc7fb84a4d6fa110c1d74
79a7b726cf7c0c85d8cb2f4dca90c064412fc176e3f3ad795dbbb4e8fd2c9306c7a5bf5b
50a4797dfc3e50fb72f492a7577097cd196772ffec65916d172e05b0946bb779b5d63b68
a65bb06b811e2389257fb147ba873f86921181cce64d3c61f11763b17870afd95f9eb1d0
c577e32fd72623f361650b1c2c65d5fc713425bfa3b5690b539393e63e99039d85a66612
fe826d338af5e28601b1db9e94cdef69733b47c8c829c60b35f4a7470f8fb6d7756c8123
b003d85b53a14853540bf7a79b5253188f1c336a2c0a219c5a041b320e0ab0a52c44b5d6
d829da76bb324f26db51ed16ed48c11adbe6f2bcd32609b49120f4854a72faea21cbe4ca
3961afede5fa6c0bc53b34177a37548d03db2ba4b94b96eb0709514c1e041a04e5583b39
a07c3db77afba1dea0dc25899f686a6b3ff0dda27fd6f423f7b7104a2263bc19956873bd
1b26bde4f76ac42c1aa291e4689389c8a528a205b91ed827dda8c552b63d4e45abdac06f
5c6832b8e1a9d45adca0a6ea2643f7cf7b8d16e2f417881f113b907c8eafb6af1b88015c
7b0f5b5cdd9c222ff21f73b005d6b564be8e3a0e2eabe29b873328d35a71327795bc02c7
136e8e185cc6d6ab72075fb0dc648b1408e2ab200c59d37718956f32f84ad7da6aa7eb74
c929e32d0e55415fb9b604adcea33055b98f0c1fc1d55ca83b101177c873212ce328cb23
3cf92c50006237cf69e2de190adfdecab414f497bb175b8fe8264b612cc0301316528126
9b212e505b6fab781097fbe55964e574bff5c9b977b7dcc13033314cd8eb85817bd389ec
9168357a6aab2dedaa6c80a9e0ae30019664a2260b52a5870f1ac2ae98a9e60f48da4008
4e2c11d7cf86199924fc269f410ef0cd3afd8c033ccc79e67a681cb14462c40c4d5544b4
618c2e50e8a2a6653d950153a95a1622e5ed0780dd80bff283aa10f72186997b1d62d440
1793ce94b0dfd8c435d14b64155082eb437326a3636a549a17f685449fa62113b768bb71
c9626734fa8355b329ae1d6270e5c0f35fb2860a1508e66188db8a183e66beeaf511f3cd
c2396bca3fa414aa01bedd80087a8214108712afef445a35c4cf2ffaa0e48c9fdba4d248
ec18e89999baf9f2be2053fc8daa973d0e18557387358e702cc9fb3de6cf489bdf72b9ab
61966268843979cdbbfc1a4559e3c9063a8d07d617bed322d8a05fb95d2c4ca17b40dfbc
eea0cfd8c0b4bafae3ccc1c8234d90512f0db3a856a3742b29e6740b295a7f3d42d746f8
9ea9135b6da2044c6bc3fc579759137f551c356b43300774f662bdfb3254cb25b4f0ee80
0584f8f08951d1316a465c797dde8d1e82544c76da2db44152ec661943d7daf6b7b2d9c8
b190cd63ac408b64f943112e8487e5607012f63f6c12cd9555bb4359059bd833e01984e0
98af2a08900d3358fa4026af76ab52f44f6e6e6e3e172a39a402f9c4f0eb8e425f5c5c2a
62d0b51bc77bb747778477de9e6df1ff872b33707780da58e347ab8285bb30b2b3d91bd3
05dd3d47cd5fc339e8f7c73219e53861f7be4d79a705bfb57d4acf12bef30fdb2519b1e3
2f30b912fcee8a88f78cf28b7c9ad9c038bc75776bcbaab170f3e8f14d89e16d3929e209
cc1df641ae05986ec442fb833d20430307b8f50f07785c6f85562a1dc546b892aa3bf954
032e2f654b68f72319a58290f696c827bae1b060da7c2da3213f1f4caba8070766f51cb5
b9eac7b6e297567b32d849537af6f68c70ee9ca7ccbc9cb8bfa691a856d38216695769f5
5368cb3018fbd665590cc545b5efa139a1a69f49a087061078f3b39b6a349e03565e9a07
a293e78be4c36d08f537f37c72ea23015530f631bd8e5faca1df17cc6420bbd93db2f1a5
ee907266dc0d98c6a60a0febd7a7b66b0c87e9892bec22f5e783e2d55b77526c7f6bffaf
6fac647d1c3f255dab0c123da841f1f7af28019ccf07324cbdb02701e76814ba94e57033
104dee592863bb72d7db30d76bd5b9f8fe5600b4ae095f759bac63b47d3816f1b70ade52
33130a67621a34037193864bb5e802ae4b0e97d996bc05dcbe7a7817c00ae1cae82ee0c7
d95bebe03ff9a85742103749b860e95e7a1f7a434c091cd411da2e83fc31d7793098119c
0d52dd600c5d19a07ae676d2a826e5971b6fc28dc43b2b7d56d2b6ceb2204fca4346ec99
53aa89236e123700dd513183824489c660c21a2310b15dabb30cee2ff0f8dbc58196acde
ab15ab43c220604c04386aa2db4b621d3e3a035f4f03a850af21bc7a65103f44849ae5f1
4c55dcac5504f518935b178f74bc89fd255cd7a7f0dcc21733ce44d90a63714208dd83d2
df6ea4405282b3e749b39cdb97c8a168eceec66aca39f9ed1fcd7085750a37180c9f0b7c
e47ad315689dde149456f7bb56fb5784eb7173585f1a76a65e8e0816216f846b606cc1a3
ab6d250203d166dd60d0acc037a876329b810edd1e888fb172433937d59ebecc207b38af
17442f6dc47104f702e7dfcbbe2bb080a3ee3b896dd82eda03a2e2508c0103ee77b5fc33
84e50103679c3b57755aefedb84f98020b85ed79944ed8d8b5e7806a1d680cdb98759f82
2d0e08059347f120292844bb9a7f241b74d787b61e286ac85b1d02d3fcbda93296cf9843
00436f490e3eb01ee9c301aa1f8375adc326bcafd8782b80ec3f5f268a012477b5307d99
2ff0735e52398b1da4ee1a5c9836d0690a7303b07bfab27f5e3de61fbb2e5567092a281d
9f34cf68f9e66bb33ff682dc069daea5ee5a612185618098948f9e85eabe2fb7f59a6a70
cb346d08261a534d533eecdfab7b9ddd914e90bf2cbe471f00eab47e48b4a53438889691
50bc2f077658de682f3fbe9ee800d1bcda5ba64947b00da7cab0ea5dea33a5a25fec7b35
29ecc1ff71a75be3d255b0752d326c0bef7d8439dffd1a005f71f78d117bdaab91bfc3e6
fa9aeb646f1c21af67af004d41f3ac0e8d6e0a3e5bbb47f4bfd9507f8ff239ffe032678c
c02df3e9a3e3b5d9dde8ba317c4dd52f484e447b97bcf8927d089ad92dc5ff05478a2bff
cfb6d1a6646d7fc0bf40716422c356cd8765ccd3633d9651c904ffb8e711eedbf6422ba0
04b08343c4c861d8af930fe4da1f5678bd6f0b2217959f0bee1eccb1387ba6078197d679
9a7e1cd91f3109804e608f0b76fb43e1907260f44a6b035335ac0947b62913c9ba06eb5d
da8192150ae062d5dc2919a898c6566078adf33d1c12a5747f9f17dbd4c3bbfe111962f8
a9d59a2e34244b764f64dc54ad5e6caa33afb0acd1017b16c1ce1cafe23d0c44a98e3d3e
0bbd96beb1b913668ba344eb391d487b10c5fbb1160d96eb858e0478b7d9e0560aacc20c
8ddcea46aaac54b9968e3ccb5e644bb5394c0d00da46134cce02b13c3f62958c522b044c
f30dec93668c8fef5a8a0c26c115ff71836d10f55d6f78f262d597d008a8465e03cf1aff
028a241e3e82f105836c304bf0e4a47bb5dd84564fd42b2cbfc94d6963395975b60c15d5
ee7442139082d16ff30f24691720a66a58f4c0b599d8435c06943a0e35d39877348d8539
e9d703a8d1b17113670f1b8c0d717298651f3786409d9b915fe2cee76c500918817d0b5c
646da9b302cca2e33040523ed58aad0eb5f99a9f9f00c192a7df73f54115bc58fa65cc71
798fb4f48a420ad9359eca513c4e05af2b85b5d6cfd64f98b8dd0fa6c89f656b3941f3ce
d8933cb1397611885322653d34cd7d387e525befb20a2aa57427f960d0c38a49b5315095
633fb8d63c31f083df4c2ed19c42907b93095a73e5ac35e21de67603a67c97cd9a43060a
d460ee7c8c984e4a38923695c289649c8465c85e822551649a737797d58685eebe5cc2f3
59d5511a706645c8191cd058e5685a36e185f763eba04576be304012094b77b7a8b748e9
e2eed5a4d7223793f633c10fee34d1c785b525cce21b791f75241d3a7c81adfcea64d08c
6fa903700c32d5b0361388e1c4e2da2d4d9f2a2ab6e3c6ce254c0ce3acc2353b9dcca24e
1d5488fcffbce1de0c394ce3b8af59c49da065ffc7d4a3329286a8218293a07b3af13fb2
8f9e2d478eec80a5da5b7453f516698ffe22196eabe162f32f7a8fd7fa4b5075a610d15c
ddcb04084ff15d098ee52d25f955ad9430c4e7c58fe2c526f59d9a27ffe3df2962916998
639834cf34d03efa88b6084cc1cd004fb164e40fe28baf50fc9514754544b061a723bcd9
086e4c35e0733828982a83410443c19b8122348f6e18ab8daf66926d0c2525f3924b990f
1b0ceaf0d773e7d375b71e7356c060454660df569c5137212c0d9125b5dc88ab67fc6c57
7615c83308f14c25dcd62c1cf431b00469555a6ac1f6dff0036ea47509966bf1bed74a2a
92caf4e0789fca4b9c4e19c2b634406a8ee6e670fffeca3c04a91d62e4c8d5caced95c54
8ceabe362d79c30a40ce46d3a4c51838051a635bae5b3c41a7baffa10190cea5967acb2e
8a6f854ae902aaa996ca9cef63d5d97c5a25fe91df6c81418916356e54914801503f0193
2c224c10ec9b68a579b93c7fad022156729afe337e57ebb4891d61b01c057f6fc3a6d3af
5bcd19927e2543053f795d7918359a39878275bdc5bb8a47226c10b29d94234097725c93
7b2dc2294e85b9ec6068b1b483d222083c9169f04ec90209303db74c037e5bd626b15c70
f6895ccf6482e06c27da8d03fb1bc3b18b4957e19772d48d39e72f68e3038f2ab927f2e1
414ba2f7c652cca07f38a3ca1537ec8d65bd166659523a3aa5d70765beed88c48ed4bac7
144e77cdbc09356764f1220445cbe78cbc42a7c28ee3ef5f6a1a99c0eadfaa62888d4ca8
af0e065b2ff1fd3613f6754bbbaa135e520201c4ad6157954a90c74e97ff2d5c30d03e53
32719d7b5391ec4e2ba415a9ac9ddf1a909522116f43216d21beb47f9fe98cf98e867e4c
ec07beee0fbc06ed97bde6cb85c937f6202b15ad1e69c63cbdfd4ba76a3cc1d4c7470d09
f45efa44460a41afff18c8a33d6d2c3d3accdec6a930961b466c66cd14d7a46698dd9905
ac6d189c84de5b8c6dc04ec93816855d3b3bcc040e4860577dc6001b19e60b1576f873e7
42592029de9860881df4869dae0eb0e8d6e73fe01548df96442c900782a0edc3340c0c39
0158b3930eb02385f3286d7018a29029968a2e6fb3e975109c967842444b1383ef907370
b9034a7b68245dca2bf33d32533a567a361bc5c325a4eba99a0eba990d820e8395cd4d1b
1e2ac2031c21d5cc423a8dae6d82702697023929cdd814ac9ba5877f66a32fcd4580ebc6
cbc8cfd7ce8e1fcdae3b24ce7b4a72a262d5ef61a591afd4e9c5d27a51a9704a8b10d16a
9ef4b55fb5857336af4eb28bc76f2fef0aac9e122123cc87d32536bb8706136e22c26608
4710fc7895f0ae7bd7487adbd99516643abe89622774615007f976030214111f68ae1846
d39d9e361ee271218cf26a2a94cfd31d5b51b3211b8313890cc946e4908aa5b9f37b1054
f19d0de9456db4aebba25c020bc30dbbc13f7435cfba3fe8800b846778f64068a62bd7fb
c891608d44b68d8fe773668b30ea4eb7605619e1188e82d7d43e6b0b7b7018140efaee80
5513d7534bec09caad7438e4007e8b861f38814653efcdb978dd8edc0d449fefdda88047
4586ce44c8d78627235548a693ca9cb332fa0981fa8779ce7c0406c91849f6ec58b2473f
3b888931728fd0cd3c495546548f22fa201761dcac81fbdae8947e6cb61a75c4edd46dc2
bed711509cfe8895caa423da322470a90af4ce9f9f2b045ea7189610a6faacfc6148433f
c1b1f691a3717d4fb23d343cafafb7d9309643d06b9f8348b754c1daa80c7dde3195ce6f
0656fee2433272237c354de87bbac6f7a5cc712e05b22212a18f208477c67da1c4963925
6f81e015da295bd7fc292d78c672384c05325be52c82a146f688ac43a14b672ce5b897b8
9c9c9b1dd1ed2e9604647846fa2a57cfe421456a9e11f67df2cf6fcaddd3306ba5793af8
41722829cff1d6f46a84ad26618eac4dfc271e0b663751e9d60f77992cbb9992d81fa49f
c6c6f67998f14805b9f7920d3dbc4e02a6db023bfbbe2ee9c0f3dcf0df7602435ae708b9
f26119ab99443399f9fcc62830edf5bd1a1410cb21210229963f6e7d9087fa984091b09c
dc40cd73ce799681deb7f17f20f109074f1b676404ad07d35f3690fd7056f2c65bb2c75f
20e9403e1f570354b46fae4355c6e7199151ec3c86072e03ec84d4ed8626719c40f28e17
85c1e462425136457eed957be5484c0e1337016226603d924bf882c667b375ef938399b1
2970a8afa988bb5dc8071aecb2291c56cb0d7a4fe435f6399220d99e0749595882c557aa
88bf929054793c54b616f07f91b4b3d7eea345c2cc7f82aca9fa4dd94442d953e6bd7711
9507b41d7486eee6b396511aae4b3b7db3238e4878df48ea31c2c211e3c2ffc5477eb775
662fa5370c93d825d8435aabb2daf38432fadc5fb6dd59a1f9217477ab43c472c4444ef1
9a260bfcd68c90c5cd46d3bcba2f8ce02c9923dab4ea5b69d3c6a04a75a454a6bfbf85c0
b0c1e9a1ca5c81a12e1ebfb67de29786895753832f6066a9c2daa99b5954e7f79732f163
5333e0a0a1580643929138e4f0da2fe6ff6c98b3e1a7d719fb50c01f2c19b1b96a7129f6
639dca3e7aa15012ff36462ef2be6c40a191e30d3a6961ac5e27bd015882d3bd6ea77a5e
8160e182822242cfd8d9d365cdd8ce4a186a5a51d509371f9fce16522aa94af255bd8e19
9a1761b639927d2037e32a92efadc260b4e2c4d666462650389fe1d8cf9476c88b5c6544
8437dd879ceb3c1f94e0ff5ce99c1a3ecee023abd36b6d95e4989e6f0f47d0057ff17afb
5f64af64dc718bf03a5b5de6938ffd5f1962b7f3b59f3fb60956432fc087d3895100a3b3
242024e5d5c9671deb6f2538b98582fb62fc6a35b8b9bc147491917d298a8b8edbc8686f
9b78422dc884b0310f1d61545b0ae87656aa4d1701bf5bfb5646218922be047b34830790
f343d9c183dba47cb1d6e612ffb7b5084f0048a96efebd13b81b424adeabbe30b9aa5421
5fd5f6d9802f53ca526e8741b4124e03fce3ec95471a0ac1cc53afb9b13f92d6fb91bdd3
474139587773aff47f53dd821b5b6fe4a5e6001775c5c616d8b5d728e9c72d7ec3440601
20519b54f43146af014356243ea3301894bab5344dad28bb3b3971753ed985916d355752
68a9d5246cd0e87d399b54472ef25660fb9d0e93941786b3a353aac96f3d22a04f219691
bbb7c08378984fd7bdb41c8ecd715c4ab309745b0176bc4b6b0053ca739ed166dafde4b8
4872a02fe3e2fce2d1ff377a6b67aa1b9324167f2267fdbed33599fd6b95cb49d7d7190e
b30c6fcc909393b5783d4c3bc04f96dddac96bb417e9b098ee6b915e3ac910b55de3ac6f
a4a2e877bcffcfd3f94716eb15a4f6d905f1fae6da91a18f3cef68a34becbd74dd8807f4
3cc49798218e281683e6b75db904398b24b6495e33d274a22be0140ceb9f01e6e49b1b66
830e23978221576d6f3f869f2beeadc80e6feacaee1308b023e2340d54f0dbbaa3bc03d7
018dca9445ad61da1ad63a504db1b6d5be0eb778a52b4a287a4305180bb01451016612c2
1c42d3f5cf2b63dcbd3bed4a92915134446804ae329c7ea0266178e88226d0456ab90ad5
f631d1f0dc3171ff722afdaff536c6dd39beffb3e2cb32c76fcf76f6f3916e9dbc5e0166
66e4659f06f3d4560f9c61a3e3668a30b059aa1cbe71fbba190c8090b88fc92524b49051
e0b5ba5db04850e782abd6e7d68a813703a9fd0711e53511b9881cfb125b3fd6696f33b1
00637d898a7ae0c23573702dceed18a88143799863ac40c2f2e6b782ae70463b4d2a205b
f9927555a9dfc715e955631d87572e9fea931a6ed016ed602971b68038b4423a38eef9d0
77f6139773d4940fc995325a52ce5f50664d878dc848d74d6df82ce41b7b0a23db51eb79
fd11d6787cd1af4c2eb142544c3f645080edde6551a9527da4dee17171afbc91299feff0
7d5ae5ac7f31a5b65f409eb129149677a2b00a1e18e259abf81810d234005d7585149eae
9c54ba096ee9948a06c486a71804c26faaad16e2abae56df1ceb59513b677fb4c5354da2
9181a861396388ed5eec72c77ce64be4f16ec39985ab2c0c81e3aaf1bc57a2847d38e773
13e8828e14225b4aedca02450baecb5d22f53fe35f2cf15c85c5e1fd6de8eafcdc18d1c2
06f311001f86192da5c32d2d0c103e7f739b2b77a3183619681af354f0be6a17dc820926
871ca0583c72acd4827283d477fba1f5a0e195d1c8991c050d30e3edc42977541b419c44
91500d3228c71e8e09445c834ab2fdc20164c2af830ef4749c5abe8e3165c1f97d5cb2df
c53ced78aa7a7369d448d02f21ffa765bafdf5d469453aaffa248f9a94cf4cd679ac0a17
a91852e7f12901faee90a44b5a0920771097ec4c682aff2334c094a6b26c9867fa1e7150
e8ac4611ad2313ad70701d519f5c08c61fcf5410b34d06e1d551e2ec064e09a1433058ab
d080418b08769964302b798b0b2b5c210f31e437348272b1de8d220f1e697c064e5d2ef1
4bd012dcb719036568c4e01f95c6a647bff21e78daef522713997ae152f68c2054d0db74
8d7cb0cb97ab7d82f56ab17232bec87e2ea4586f270dcadd3aa031fc815a2189cf3133a8
fdfb8083284e56adc09efcf38527668ab98f35c863c9e1f51b60486fcd0ff7b4a8e64982
03c64a25595ffd137dbf73e07e416001bd7fa413952e31773dc945dbb3dd87766d01a2df
11ff5fc9f5d92a8e51f75461faa0209bf7d0da80544c6445a3581ee2cada048ce76628d6
6620b0c4baa5566ce0d3cee7320604217b36d412fba354a63c5aaf8130f814586dfdca39
4e29afbeba98d2ccd6995a7ef87a9d5ab217662909c5ad78b7d836a229b764314a781738
66bf0a77274d4c884562c6e93cae147423b4b3e36826495a18a3a219f95f8b54a6b987d9
a0899da728e2b4a76d6e4e1b6b78143ef0a9c89a27ec3ecc1207c80bf50130e8a067cf1e
8b816584d336b65e50bdbf36447fb4cc944248a8648e34c18ec802de39244b29e8021659
8d0c72da6e5033fc26d8bef385e076022bf928332b9f0eceafac48ac10df55464a0cfa0c
a8e49b566b77bafeb1db6516f9236229ea01f6776122d72222359dcee668c349704c3b83
28b9bdc3a7cdb3694d729f84d83594c5bfb9478a739fdc2ab30a21a292b2acd2ced06b39
6b34780089a6ac553b423121ef7543034a0bf412ba1043d2b952e499d2c001054739baf9
b211964bb8643f899c88b6fc75cb852833d9b0122055a300af58bee9efaabed5087d3f99
f4024a8dda2f4a7c2101d002c24c52bc86274972ce51d73dd441e53c96d9cca0cdc05e74
16d1be625ffd906f5d813f9227d5c3aa46bc2ede2c26ef1b9cf17cd0414aaeaaaa0d70c6
ddc571fc82f49f7c3db5234f789d8aae068e86e5f06b726c1f9145d4debfe3bd427ec9a0
6e541a9031918ee3e29d22776982628f6a8851beed97bad26c44fafdbc93bf0ccff500fd
62ae26b8dc9c4c7bf9388323bf500ef5a9a05750c347e6fea606ea89750a0f40ed4625ee
99193940f87e9556267c4d21b5029b7c2760ea7eb93491088b80b62f4d03303140c192f1
e3f7f8660d666cc8194a6ce899bce2ef9ca25a25d585ab460d2839afe7df40c335aed2cd
4c55939fb02b556b83f76b4e18567a3ababa4eed8299b84f4e265ce060fd0ae0e4c737c1
3ce0216d0365406be941c9ad50a33fb120168ecb73e5aad061118f6e064c17a5dfd0ad58
8abd3618bbe831227d6b1f1e40124ff6a40cd37af16aa2dca562aa2487e1fc272b1029d1
64baf1b8145308de6593e5c77ac102014f478fa6f5bbb129a249bdfe8d94f6922361078f
afeca31c1f62c3688d93b5ecf5978fe84dbda11d6ba2cec02638e7c52ce6cdf9363fe079
5f38146b72aa0f314cab1d48d5136d6004f2c4ec16c11d09f2a99f8dd1a72694442ee84f
3eee9edbc968d580416b6624f80a537b323c16553bcf7f962c4fe2658db94ba2ebec09ce
1d9a798dec8b364fbda173cd666b66b4879541d8451de7a11954cf083c1af9c9a60984b3
0d9037856597e60c730809eff6b03ff23c3a5a4418b28e363cdd16f1831236452e7fef28
853b9b5d15093a247b03de5a73e8b6ae8928f8c3f95d4f41d789b16a493b10ce782223ad
ecd1c9a4b31c6c5280e4e5e1e767002beb0131852ca059151f7c786956085a9d3867837c
71d7abab0fd1ed77e62af41f1047d1b641d130cfce08989e4391fbd27407be8332545763
9d96de789a1125239ac78b6d869079e28036dc9629acc248bc151073e869116d5b52da99
da47922a723a27b5392e8b01e5693bfab9cd7ec733ee84a2b13640037260aedd7d6f6b4c
ac4348ad2d211245dc88502f6d6401c71ad2aa7ffa6f5bc0e648bda0f6b2c2a74bfbd900
c8140744db915d465d7d0ab915535230e6dfc7b00ec98f9833f92f14391a05e564f69b4f
edd5918d40bfe8971205a25ef973385a079aa5e3d73f49363fe7341f769f9f47f0974beb
1a4885fd22c4dca43b8f2e6d9b5d091fd1a0ec06910c959a7e18faf16fdbf18d9a1d49ac
bb35daacab2c7a5887ca9a5eae1bbca646ab6c913ed22a094d2e9ffe02bc4329443f0e93
8ca3f63e4fb3afc2eae34f8dd02fc6f34fc8ca4dc95276ecbebf7e0458cbf54386fca223
6655226ef7673a883b9ac2535a2f6cec7755effeedcd13b91138346b27c2f66a15f2b1a6
3bf863079a47208ba09033e81726c6db71d788c6254f37e2c6309c6ee562cc2be1a74d3a
aff145edac94346780c87dad872b0ddc571b5e6a5993a1f48d06006e3c47e2aa7b806ecd
87d3808e6838c07a5f0ef92fc3c0448e8cd888ce39e6e59579cbb110124814c8a7bb8d71
7c09bdca228fc586513af020b995d70210e0f86e760443bb1433e426025a4141db488e6b
194ffab8b044195dfa0278daa89f4150292ad87de94e2abeb60c4e71eefabcc076c1399a
47c79a5c5d8fd23199183b68a74783ac4deaacd7cc8ebc50622066be7d810f5618096160
bf8a1cc5883222a1f8dfc0ed14a577a6b5947d43e8e7d2f7006a5a47299db09d6ca70bb4
31d466a80d7ff70c2da6c5ff3f3ba289010a251abd00e85c4ed380953c4e8e187a1811f7
f11dc18c9f17e8c8c3f0d5f555d760afa78a8887cd02fc7cf22c3d684a77e5f0a78a93e1
a3bd0de902a7316ef136b09d3f2dc023492555a3ef2c936b0c7f214709c10dc2c6cf2265
2a3ea24b276096aadf2a5d025609dc6dcd2ef05c34b18436e64cb02bc88f25069f99d26f
b2bda07fd96f87c6270e78fab5f2723e397ea87a6f30567f2082a574997cbb223dd9d835
d47d09aa9566b63e720dda67c7069a277602329f66147d31bdf71403b4f9f5a66c1a5b41
34ff7b9bb2a3dd4ba8764983a3de8ba6ef06c31ede5476fbaad3503d6e1b33f753a9b733
9946fb0766aef4d1dd42e3720d52a7b5dad1c630faaaccbadc13803462623d4f7b1f0fed
8f92586aa521593a2fa1f98331d0e29836102a7c9e98b71226bae272f2c23d6cbb33625f
e61e1d65ff2b233ee047e4b7348eadbdc4a23a3f8ef793e27270b42bfb98f07ed7b1e18e
30b463f0b5765e68ed714f12ab3c9db8b1883020ee2ecdd6a7a026d6a549de6a2d9ae871
1e8b2b299fb7115d628dc636ebe038f4b7cbca778afdaf4d4afc8b627c67dcae9a3fc9a7
e4cc2edb23f8840e9509ece161254a9b3b620928b0a0a8c6d7fcc8aa5a8a81b9a5929e3d
1824a8b9d9f0d149aacd07a1764c93567e9fb6c4f34cb80fa2eae730026c5a3db81d66ac
a32c1c8cfe1ad2fe49d571c8893d0d057f23e44bd18eac66eb8d61ef1f15d2fb01852f76
e3b95f7d524a07de923f590601e0e9d7d6c7c8c3e11e5f7bc5de43e513cbf14040742792
b68a90dd337208407c2faa5a2c765e49ae3f6d9e22e612e3b7f01fb82f3918a843fb0b8b
5e61e7af239e2ecf78b2d573c68fffb5b2bd064695e25d24b80f5fd955f8216f48251709
4ecb5888b1132579017059e605263ec10eb651c0fa58098666d0711a3d96ec47abe8bd99
ca3ff62a94d6a53c54f5f07b060a9c3ce895ba7f4803aeca3b7004509689718f35c91876
b6f216bb6999ed42d84cbda2ca3d4f59437f68442bf1b9c780c24024799e34a7f3328551
177d62258687cfbd77985971260dc45f7292bbdc166e01b5d20d4639b51f3a9701c9cdbe
afd57441760ac37099f88d42b91879f4a69e0522d06d72d7d20317b95e6071901f69b3b0
90eeee51b8a862f035c853f77379e0ffe77c68f6fe5433eeb7678f9695b59b129dd73602
5aefdc9218a09165ff0ca783f1c790da9c24840fa60e0ae9606b182f46bb38fef83f386a
6c86cd2715423f7d7bcfe0fd45c83fb0d6c83ed56d07099c78af110a600fa39089f425ee
72d40bef9c64aa46aff95a774cbb0066fbde448393064303e6b0b6b0ea5812935a4463b9
68b2e031d316fc8d346fbd5c4965ce7bca9a4df1539821f938dcee6ac75ae6e6717e1c82
75cf3c937425e2a9b0f8f8c8a8164647eb2af0444a4088d68eb0c38a405c370523c50505
f1e69cb93a6874c1e398d174bf415f6d06a612cbcce2145d7c17f7b5d0e76d397aac93c8
80082fe7ed4e1dbdfc827b412e07720ddfbf143599face608756ef8c3be7a846f364f2b3
e577e1be6b580aef0a33aa971475883cef96b391fe55277c0fa4c146bd7b5637ee351d81
96c35ce96f47c6a5de60144d3060f70ad163088b76a2bd0b04d127e0f134c6dcddb3b2c8
622343e3a1ef206d5bd311ff5934a29be2a53c1d88a53911ab7d2cadb9365220252b53d3
6078ebea5b76265488c8f825ae68c55fd4d3718b493af15917c87d5739d5526cffd4202c
decfa7e84d94de6114138086cb1dac82d727a65ec12485db855e70effa3e2cf38054f072
0191b622ee0db2bb7c38cbda770f222e4da7dca2cd1ba3f8c974c698aecd67c948b1cbaa
60829bc734218052df1dbb1381e1f51ff9e15b6ae54477a3e169bb23ad04106c1dab5b9d
3f127bd2fe7dd1346f708e7aebc8cfef43807df491df14aee076da476b911de7b0895aa8
07a5ef5492f2d20d34f7b16d6cc77e7197fee0e89d73dd33fcef97c76d7ea90f9d03c23c
5901bb5e95a0ce00c49c4067cd37e732e8eb2f451df3a095b5f246c4fd9fe2b8b541e30c
051811df7c83e0e8cc797b02074390204a7730328b32bb778a93ac9b040739456eec1e1b
3a649f1a98097e2afa3d14e85885484fec2a55a51847b5e1cc06631fc603d23f6c0ea43e
62f8e2bb2af62541100cf3214efde1c349c54bbf6b76ebf9d4845e2fe143d040853140a5
d8e6e2a9114ad31190e207caa4d68703b4cad0c9c9a9b1f2c21672d72445b3338bb9979e
5d53d23b0455b688f753b02820dd0122adc313e556ae66436629cdf866c8c580f59430d8
da699aedac2c80e04cc49f276e44b20d6758124bdb45f0e79207a1445e3afe64e215bd84
76237d47674054480aeea8b746776fd63ffacfcf621a28113e1345af8a4eb3128436cfe4
4e9308f4c256299274ebeaa06a15e5cb14c7e74b0eb5d39adf2115a8fc622e459f73fa6f
7c7a83dee09a2f4ad7f92ba790e3904d238e69eeaaccee7a07c54b69ba2b80037c7606fe
87f1cf64a5dc73b9b48f467c2897555dfcb9f2c6c363fe608c31c93e750028792508829e
9b6b69bff7efc7f837db1cc06d63d0dd2f5bf0914bbaee29e5b2d7fde5854400ba0f99a6
b3ad5aa684129c5582d50f7fd61688d8779bb63d775f112c21762756c5ed560d4af08f2f
1dea8835428d6b89f96797e78ec8b16581127aa2781429c5da72f5641aa6fbf09aac0a4d
01f8bca1d9182cb574c7dbd6a528fe1722ab2fda4e6852b7064b747cd70f2f88783cca89
6ed354839e5eb442024ff506109cd222aebd0ddfb52f8520906587f9f5f422f8f12cc827
cc78537e3f53b207ff5ddd408f9b07716e51fd4d11fb1211c5d6a529f95bf459889f3a6c
8cf7f0648e7f89fe8f8610b0d3aaf969ceb2474a0b99115ea6326ee15553fe46bb4d4111
c3888ca0aedce82a0c89b032db19124068255f4817c260a268f4894055bbf1dd42279573
a63d50cd49897b582f93e6dcd7183387cd99c580957968424696f146532cd086d32e302c
3bdafd4f11ba623ae7e432b5a91ad3f17b370aea4a0ea72fb86fdb0fbe311a75a404e01f
1c5fb7d012d0c27700acfe572c133bf5f85d3cecdc94837f186e0035de03d0e11b18afd0
283367450124d1939ce0a21353fdee43950f28b61e219668bb6c94b1340675b8875b8416
37d790d39abc9ab3a5d5890c3a756f631545ff0922762820b09d6c90890dbff87180a426
cfa825e7de98d2223704f14390b2fd469c3bdf01b6f40e36aeeaac6ebea7fe7825726923
2c304c326544fad6974b2311b45595a30a65cc6e265a697a2531f84b8000960e8de591fd
a5a065103d2e0bc17fea3170bd713e30e36d2e9e1890df6953e8542d4f770203ff0a7e2b
a938eaba862f3960634dfea537cc1de9870557065a3df67c269acac7daa46dbcdb887e93
f451e193f8d8f386ce3bbf532e8fc099c37e1d5e468b7c9dcd2ac079cab81a13c7790cd0
e7cfde614c711b7c4d80bb234636708d10165a733501f7df2f57406c79d69aa4dd626632
da0651e9e0b6c52cd7ba89a9408c8bd4379cfd02507b27e3f01bce6328b43925528ff657
ec282c64989548b3ae8f785c3f6b25dcdd772a22aa09fe384576253713f3af3c3620e534
fc7085afea8ff055abd909087ac7953086e3e768bef38dc82e7263f03612c116e950a453
51a869c65ab93bae4df4f468c843087d15a7239d3484ddcbd8d42862df347a3655df2813
c9cbff41ead1abc45bd5e4406b7826c8e8724efab92ce2617a345b8fb64fa5d7607bb4e0
902462f6ee8667879f02989a87da4cd817dbc119a2eb7021baf2f41efc9ef3e1b226c295
7fb78fce74075055eab7ae5164e89279d7200cd7391baa8a27b1207397255e76859dce66
d288197574ac9117568f7edbc066f2c51020a7d2481bc9eddf23f461cb7c0509f108bcc2
7ec6ab3822d27a61a9e816d56a1cf3a42ee7dc51bd95ddb150b5500c0582cbedbd28c7ea
7570c786a3c8108a7154a79364b5ffeae715d0b66ef1a41bc04f353f40d1ca29b0131906
ef50df61c2ad2af64f0e337efede930e014a03df8b5448dc90f1c912ac107aea47f82f5f
1123173fd229db27a023c286697407acab44effcbf722c720c7f12bb3061f223805eb7d5
65d08a780296806fa29558f312a5c7aef47239112842be2eeb578bf579852b14b5906c92
af0ccd976365a98fc724c2ac69292bfaa6dfceeff1dab2df647cc0896332ee1f24a0d46d
af6e3e0a64a92050e6e0a334e2ca0a60099000bf8628ced097d69d9d6910ae61dea2e65d
15a2d0e3f6c73bd705d4dd0501f3cea0e7b14cc057257ba12221dde35561df5d10b938d7
1274a891a58fdec99f0229f48beba27744b1f1581b0e223359d2641debb5307542a13173
ead2040d0f6be29dce870116cdf15bc71c5a205e9ad0cd07a25ac68cce663850c66ec183
5c502c654d8dec02521339f38554e1d9bffda72c2b3cf08a5b3c42801847a7928c24f64a
0b74087bc4a5ac8fe23f5bf772cea5e91c0073cfb83cd9ca4acc592d531bfc681ea458e6
3e6f75e34c71fbaa57c6666eac0cab41bd20777fa775e6bc8b35699305393cea5db1ba3e
5c745991891275e4aac6b807d5be89e20db19c69bf9f1439280e08ef55c0aad2e28c54a6
5bacbf3943329f4b4e1c2a2b49ce67671b78d2d246f8b38e0c1fd685655cb0d5bb119759
ee36992ede5817a712ff3fd7865fe186400f9ac9c181f73ba4457892b09ddddbdb5f6d9c
4f01379557834c84509bdcb8a97625e64dbd0bf89d33bc3e86c11c8b480da5e3c5999b32
56cd651261c6c853ff2e3cb6aabdf28d64ceb5eaae5b4e61ad6ed7c299f414e8e366ee75
e01e8f3a07f3f89e2371e4d1ba1b3951e4af41b3c106f6f64f701814c3120f18db127cdd
5892d82792b362735f4e28ecf00f3f26f37197d85f910587e6c282dd63436431bcdbf252
bac06c900f44a3b45127de7d77c68133f9371b3e4875c89a118edfc4d0b7f0ee484c16ea
03b3035688c534010d641fa993b30b7ff080c60fb213742895163793fe139978b35eb6a4
d26e97eef8a9499ef34264d9f028d7ea92f4f5234a074fb513a6d0afda9eed963bae0fe6
164cb9342ca11d73bf6e3d3467acf44821f21f81ae763ebf2478cfeeb5fc7c309e5bc8f7
d630ca7cab59d817822f634aa76920c82dd4859877eb8f382c5a3e87c335f4ac82a67129
2a36491444539ecc481bb1e5addee2a71986e878ac107258182c6774ee73a362adbddeca
62fcfac2548b3e6d82fb9491f7b9390f2a12283852b0b804255b13d162c593a5f82c750e
d03a3bfb63481b7af933ba1fb8a4e16100575b8211519c6a6ab553166f846b8fc14abff5
41ca834a0cfa7c4dae12f08d6f196d843f9bc6df682bde662d4de4d3a18235b37090752e
7c7c19dbdf63edf873a65fbfabeb49c29c34bab4d1701355faa6ada72766188c4638cab3
46f14513cf17b50206788129456a06fe31719fc145785bdd9d809ccdb7ae7f9dcc4e23ba
d58c0dd505000cee14fd6de2a22afb13b39cbd59e43cfc5953c34bd11373ddcda5118746
7813004a33671d012db02654eb1b550f7b2b5e1cd554ecf0e050a50398a96ab152edf9bb
6bc69ef6ce994a3645fac338398a075ca9e058fdcf811ee53183e523434a7b7ed6206f93
cc8e25974fb96f51aa9a8b3be5ed45ed6dfc83bed92a293c96f805abf444659f4785d7d4
8acc28f763c600fbde22c99f4d2cf5eb1372d20156287484d297295ae406a6958c58ec1a
c4f0b5f32c96a03e8c42793b5f2a507780a752773a3c6100156a748b05ef85d7540c4fb0
70ec9938e7d3913415b36bb07e110a30d41a5180b01c2edfa685e882435881ec442fd4b6
14a8bcf0f76c99c46e478de8cbf6a9e1ecf3874663667326000bd24ba41397b16044c992
05eae5105b9551ba0fdff1d659520bcc7c07965b92d85f6b8555fae12081d9993de48d0e
4c5ad8b30d31c54f084edd7bff98ec05741910394e34926e1bca623a04b744f2d0681e18
df07576fadc7aaf51c0a5363bd65a48f8d6a66d2ef80b31881c7c55742bb6f0fca8fd4c2
43815bb829c838002bd30663f1ed1294f47b63f2890c5e07cc9b69d23ac073250b09dc4a
e62958ee6e23a090b6d8d838e9c370d6a350ddafdadb29a85c3acde4bc2c2b47e60192c0
f29bedb09e08106da8baf7f06445fd0b0c056406019c6641a6703c1615c640601e623066
4c2e5bdd050438c420f13ce713e1ef2d4a1ba039f1b4d8551303292c62f51a3c39e9ce54
fbc784d2d4fa21267d64abe1e66cc3d48eee54c19110b5a7fa4fcbb5be7003eac8703f18
a08291ec9d21c4ff68990987dd257ec1eebfc04e3673b0d1b70d12f01f32d1ff18522f18
c47cf244bbad35592846ee2fbe5ec2dd900a5cbde3a2d30f51ea876f6b64bfe3d8268871
008f187e017cebaacede84f2851ea8c80cff33f5d6645ea52a8c5644045c02944ccd4dd3
a269ddde1e87713edb976503f34988e8bc0d6b401f73804855b78fec1068dcd971504fc5
ae32626e70e5b38290b397521886d4d1548573f1e460f93015981af9951dd79aa6b7eba9
ebb81c22602ef5f06ef8322adcc2c37690358bd6ebb3f9b472e060a4c0b5483ae65d1a50
d8ac7b73023710b54820036739595e90feee90ab045b1ea0cb342b88bf6bd9c20e8a7f3f
deb433e1db0589e96fc33104aba313b2c9e7e0d5dbe8216138deff9e710ff53ab2453919
276b27e9764287aeb03db2895b5d8fd02f16d025bc830550db5def211a75647cd4ae9a9e
24ac7c77237d3d2d2d25876bfde0a4793c9780f3f7b4dce2bf56097e52361dea2e9bd336
eb7dac284b31cc903164e51cb2f8341cdbc3b303d5fccca4994597e3ae9df35b44174a07
8389fa00f8c14047618e9823f4db29a037f93dad9266d245f912b0634ed36d1bb14a32c1
d202e1b072297b5f50501a221fefe62054f0ba5f5625f1790725483c3fedcb3a19743237
6ee7aa3f2ced34ed28ea314ff6cefeb90cb5899ca4c6ef1c15caaffd3c3b0b09500b42bb
af7afd653768e27a14e63190705dd961b2864bfb8fb05fa64ed887e97b2bc4519c10edcc
8f1a44946c465d49315368bf86146a25b887d4f4fe3aec0ed0dc71c40c2e9302b0aa6fa2
9ce0fd063975a097af7f22c5e2cb9b67fd39e1dca387236822b59af989e699e6064dfec7
7ae1a15687624680f389354688294df8b448cf05d15df83c7b5582a0737d2ce4e7050191
f2d3789621054edd29a7a1b90df9c9c3de2d65d689ce76bb53964452090e460312e5d9e8
69608cec687b903feb1a80c48ec67ea4d5ebd24439ad4b09f5d30b38ebd4e1184394bf96
f355b155b701804785f5aa8a89f5f85708f09658d0cc1d107ef15d5577a440fd88ec8f28
ef57afc834d7dea716622ada738c42dc46aaf1e9e27ce9ed685e2ea8895d38108726b31a
ef31a7395a7f2dcfd8b25328fa936f9734cf050907d5c02291760597b0e839f48e497d98
43a8f3da0e8bc2db7ba635c050e3f01b57fcc9067c68a0210257f0960ca1b94749fa45c7
dcbf21a7bdce07a7245f7929e1b35e7c32396b925f6c143d080107b49d97c6e77fdfb5e8
ca24a14067439ea70af4d776cd77f4acafe29b3faf03099919802f25738b57f1fc279dc6
bc10e02b9d443b16d35876e9b424b19571bb91a4d88c679ab28c7886a66bde526dafdfb9
457f7e8ecbe8fb46eadf5a59e6ab3b2eeed98e09e5669ad350c2b1600796fb9d962ac63d
2bd7ebdcfeb0dff413562d3a3638cfb3b6917621e448c4c8366fd7ef948d4aac79f8d56e
8ca4c07ccbc49f417131918425912377472a666df5fc7ecc7c0c7c34e866859bc121f484
0eed480cc362896f928f67c6cebb8dc579eaf56e61c16a1530fc9b6a21756903be4a8e23
7704af27db8c0d5fa5c86795af6061aa2bf3ca7e85c7ab15368f0fa32cd297867a1593f1
ab97a3e11bc74ca4ea713b7634137685968a189ccb21cb0782a13c7aa0ad2f9011afde0d
8f2e5b4aac842194ffa6c7044395c83ea3cef5b4fa0e68188d422ecb3806126551240c90
f2712a915b837e2f0030b55d474298a21939865224cb93571a43a6850db43862dd009c69
8f775f1589644648143f4e246aa4a915b55b3a4fec527c293908ac83c1c7776565bb5144
0ddc4c3ca993dd53fc699b8cbe8c5e65e19e63d56696a17816ccabfd6cab53e361d938da
8ef6217db9caeae4df29ea19484508e99e8e4b87d2049cee513a7299b12bae7ca406fe19
1f5f0c10b4d1d7a3dbb95990bfcfac142e32f2b8b96b8e750d396a20716c857cd80021be
26a8238c9ea125133d5e8e92489784c99061f35ceaeb8fae921ccd78e7941cf4d00ab1a5
48a93608c9e61e86eb96138dbeed300bdbee3667e6bd904641096dd3942ee76c82fa6d65
f9c3bc5580b702c401d89056e942a77aab12ee93bd32406bbeb70d0be8351827aca53a0a
7c702667ad20b51d5b58c75c240a04ad9f861e0e2d2ec69540d247d5b79059f9add7d65f
0f95f42d5dd5707ee581e564974773ee51c630aea96d4f27285eece8ef532c9baf7e34c8
fa044d1d9d233faf5fb8d2003571c4978a8c133ce833aca04834bc29818e74ddac201f21
acf2857245de0c9f286a6cb575688459361fd91e12e532c1128848102720edafe7478f6e
6b7f7bc958ce613039b5100765c85f62efe61f419e68d7c53bf330176765d17b21d574c5
39b5d1d003e8940f5f2354e4d7abab59bc0d3efa1ea65919e8f14f0637936d0a6ddbef1e
6ca7dbf91aed8b6618259187f0527915f7b4f908f261c8bc7d1eb3190f3da69d1c455f76
f8c6018f4ccca9a4e4897c081da774b01e94a95825a4afd4f8b232fadf852df94143b85e
b27f65f5fca61ea2c19712fe2821fd819607e78b40807f46c6cb264b8a5ab072f81dd82e
b93d9d618603818ecd79bba99c157de5e3859b8da652913c69b8ab4c15b0ba5ae1dd76b1
ba6f6a4af5c6a9c81ece252d1f4a9927cd70e71141b818cdc365f9be1811b72ea9f6e180
926ce27842aeb5f3381feaceb14aefefa8b05bfaade1d1c3fbd4eed7107cbc81ff81f3ea
669552482a01ba339da1b8aab1ac1a9155893e171a1cb1f24da88e6f957fc984c65c214b
586e529196cea533ecf54033ae15a96762367be3129b8fc84a237ce13c12286c1b5718cc
32399383168308712b4b3227639ea82c2d2ac9083b8ce28e54f3e2d2bb9054a5800f80fa
6d63e8d4d27c043cb52e45711150f0cee4cf746300a9c5918efd6bef7063cea4ffe2d011
5f2b4579dc054dfeddf291c10dfb56e10850619190c86831a5f9031897034f3f06dcaba8
957e398b56343ca507a516352db1f60f39429733f4b3815756f9cd7c0acc4d8431d9d287
eeb8eedb1a2b5d9100a87397b8252f6a0d5654c4cfe4fd7b5ff2702eb370ec70865f9542
dc415e027db089ef3a6f08399f4482e9d87b1d5cbb3a7e9898f5171838592ae343cc22d4
f7c374a4f279e3b41c9a8e2345d824ee39cf975b55c09c1e2f324e8eaa918b9fe605825e
d4698f2189632ef272e2b2116e7a0cc90e1de893eaad8c5ba296344456c77f1952c52336
cb4f480ccf85c4a6c3fd9e960bf8a4d2207d7a2d48351523ee42b5f2b74b2f3265a3fd3d
160004cc7935cf2e4c098da25e0573998022cbef5d6e7088d3ab3bb91184ae5fbe138da1
3ed837aebced69a730d26081a1d34650529dac2dc31c9977c1895f8e3f325b19f39a64ad
ff005f296e3ecb5ea2e6d74eb18164c41e613e890f5d6d66dc85482b190f140806030f47
d43a29ff79039f8bb01f590abd46b19a89605700d2debbfdf13eef4cb06b6456c60c0cbf
759657b554b3084991e28afb9767a85fbc7b004fa4a2f285b9e9c7f4206437063020510b
3890ed2b97adf23d3af74a4f8ee6e780c78780cb3410d9005a405be865314f3a688728d2
06a56552fae24c452ef9ce4fe13e86d083c5e3df6da6ee811364375b5ab007fe7f15ce0d
6989b89e77f401e5fdeeb4853459ec3a30c37463e3cbadb92f0bba021d283425b96c8398
469f9252da673a47f9529be518ba771988c91a6f983b0eba031dda274cdcb9c22f5da0a3
182f58a5a33f0bc7aaa815f2c4c0b36e2f088d2c3d4f1a6f702516ac7d32046bb0e1b259
b8a0784749db45f1ab3821ac5a962e5cc720cb543610fbda26fbeabe1978c9ea71417a79
3e527f98f3f3660e6970b7f5e0cdf07133d089b096e604751332e74c12fd7435b91460a4
198f989103d57655e4c885a0d4f8dc3eea75ef75eb2883105ba2f40cbc767e8809f23998
cf1e9c4633b41f83a3db7db32443b7bb75ef8546c1bc2ea32b9bdfd30be196e90521cd50
f47170d7150e4c72ddb5ef835d4d05ab41a1de251d095c86c85593d1a4c5b94df1b8c235
2de4886f359da3c86c0d32e87476356fa0f231ab0838db27bea21139b9ff5dc7f09871ff
000d67cd1e76c93be841d99bc7c332346788ce1c8581bc77d2b0b96e0609ab446a34002d
5c4f551be2daa00d873f8fe1da70efd2497eca03a2cd2fd225d263b0c47a8c0033b7ec8a
bd5a8b25f89392167e07bd0b292d1cb0ab487a21b4f1c43dde557188ed0a9cb1f8d97e10
989096817918ec8f8ea1683a7130bfa1c258fd7d73747d354224985e0a36aaf87628ac57
63ba35c084da0fcc4c07acbd537a8aae54e2e61fe4391b49ecaa974e6e908fc19730d628
6da2f27bfc6f5fa1fe75f988943fdd17d5113ab71b3afc7f4485c077e19b9e5a0799a018
344c27ca7332d441bafe519892b04acd766020d4f715e8580c439dee16988bb36fb08279
a1f875affb698d59e838a7d978f1c6686dddafbd09fb57f722c0d51760a7b2344453da2c
86fc48166075364fb31fa48e9dce3178aa56bc10e7307e67df1ed6a4d72d772a1fab14e4
0ceed49cc888b9e1b624b9da21f9fc740725705d2b4623be17961dbdf914c18ebec71a0a
ace90eb532b874e8adad4a162004534b3b5d77caf9819cc27777c0432f17e5cc3c3646a8
0b7c4c36925ae0a6fa155e60fe6f27c73678b5c0d3a0139e3aa4b812779bf311f114d0f1
2e6e880f3290177553a36fe32842b237ebd9bf908e273728eba227ec7eb55823875d5709
610e544e877626b3332ae554a642b96e8b64030c3f410524aabb26ba2ad4649f590be4ad
96e62c4dda1c4b0540f292a86362ee6f4629721680ce4d422ab14aaa1aa72ada0dd49a5f
ace36c82023bd67e85b3f95b1e5ce882ecab48db637219004b1ca3ea6bfd598c1bfc9857
1d276a3a646a375be45c328520a4af226a0992f9629fb3fb2e6ff340c5e884b16a6a59f0
ac2a56565f1fd4ad33d20012272f4389bfdb4e16d8e5ce5815de4496d41bdb6440baa7ce
280d87646a7992f7a212e924a7437c1204943def4733a1da68037d814e54dfe4058a7831
8e944397d6a85c2a8ebd830156457da31e2082bedaf9e45458cc579a53de637a5c7c3d72
5c310c4ad437cafefeba21df7515ea602e29403a7c52e25dd74b0fdceb797128bce69d5a
9a2d80fb93d886aa0a22c44a8856998d11a0f302ff018397adbe2e401d29f6164af0b180
05c31bfa8decd41cbc477302a8f19e027f6cb5054c0b922c155146d23e7ef609266f73dc
cff78679ed2495ea0c743251397fa276d3cc6898f203fcf2b15c09c86fb7d83d550a4a4a
a6389c38ab2f81fa19fbe3a92fc2b25e8b1c3222193ddb57bff4de2d424d285c3777c0f5
0793f677e2c01c274c48662539cebb6f22ee9af93f43812553b7cfa99af85212bc4afa65
48faa8785e56c464206e4207fd7cf9d82256972277bb57ecf58074c60e932ec7377004a2
d58ce6c8848cbb70bfdf2bb2801cc345752399f9acfc68bfd12d113803b1e5ead5540ed3
9fd2863357d72c629afecaeb6e8aeb5ee455160150f59e050535ed74e1312c9aa25de73c
d77863dff52d98f0973beb70efdddcc43b7880877e3db19934bc475fe10eac91bd23cf6c
a6e406bea30d39ab244ae1222b523761f499a286dedaad6aed0f6b333f2e5c7adc0a301c
71f5faa0e0860ffa3e0bb3702c4a034f5f4218ea28e46d492fa7b7af455e44a828215a5a
f24ef3577502607c1d5bd31903378fd84c5b387042afdda8a035ad27cbcdd48f1a74f173
6fdd245a87e6c266a1edded5e801e88814be12b7d4912b2856652d652336f40023f3acac
939c7936f423743c7863bb4dea42412e2ffb4b60b713f46412feab1610773b758ebc17c8
d3777a2d9303c832e3b36c17e73223053abd07d82c84d4767c396c544abd8fb9c596ba36
2f0b9bd4f19d44cbe61584bc1b624c863d4d6f732b5e4cc868747ad3185fe4e4c46b1c16
0a241f4793e3b62f73a9ab606a2c3fe9dda1fc4a719c788ee98b24182a101130bbcd69fa
c3700ee39de6cb722d89d00de45b0003e60d32a075270fad2e05474ca650a5a3c69da8fd
0dd3ee811a1700f27c1207a63b630bb316f9fa98ecd579c6bc6b898a01a8cbd9fb0ab717
e6868539e047bebe65745a15d1480992254c9afe0daab8784f83977564960458c4804b8e
9cb4aab9685f6de0e2748106d1a6bc53c60874853d57501c6255c98f9e460e1878274e55
fb81965c8c8029f3b2059e0b3d602aaf88a3cb582337daf07d08adcb1343e4601d3cb769
f3eeffed2c02eb58ed60901f5563bbeb4f79d886237ef0fb29d9bb043bf7f3980cb76293
803f0ccac0d6fd78ff7fc4aab607b077b99ab9ef683c807edd1008b469b89498b8163d16
45b053dd2de7576aa52a0b629cc4b9aca094bd972775ec43424bb9e5275f98ef542c4fe1
c29580fbb9b4ab59d93ae9c67f04a354dfe0dd904d2aa1089654cdedcd79543ce320c37e
7bd4e62e222cc468069f686d0ef00390e73d633d257b63c8ac9cc0744796d7f1f506b13b
abbebcd81cc98959e4cc3db67f4ff2b8fdf49d75148a6b0d25caca5dabecd31b5e721a8a
66eb2ea115374acf5d9774238de08045dfdb6943620546f084e7547c5d85052a8d393fc7
a4643428629407c0d35199a626351bb8d7a8e1215bf0443671cdea85cef82da083ea282b
b2bd740de5b1e6b6c1d4af434788bd898298d1e3340b4e1a208bdbb6379f622b2ade0923
4dd61b1de6e1f4c9aad4eb3c82c5333ac12b9759e13ef3159deb90aa02d14852e80440e1
787a4b415d14449a2fa04a114e7dbddb179cb6229f32d03e4b2a038c46d45abde9bfeafd
47cf9ea3c8911d1b08cd70e374be2867bc16209354a37cf792c4a0642d9ac97d38573089
96d2dc01e9d2087669ef189e79d3831b4eaed0347834688b330a91d033a72b1f5ff2b73a
5cfd58089b6a20ee84745b0a398a577481950b9096be9fbf852e7fc5c5d7c30858c1d479
37c40fba00915ebbc62d45fcbee71475922b4fca6277a0dec602c625e565a0307452fd8e
6697a30bde0ea4eda5eb58c56bc93edf3be6fe67550af25cca9f6d4794c346e54877e4f7
44993b7c4d231a683a0b2c0a6aac01496220a42e5634a3d949355460be7f704eb535a70f
a7906d3862465f81a7be77181d336548b37f42e061bf26f0ae1c367fee40ce31413cc7ca
d0c29d4d0525fb0a9d4a444b1093562ff10b94bd23337e995e2890f4bf0164523ea4b74c
d3822a8f172f941b82579344487a1741964cbe7eadc0edafa4334747d23da42fac4936b4
adc3d4c8de66fe77c132e9c5a336a6662c0bd845c1c5a4edd2aa60cb04cd8f1bb1b03f4f
fcd6d8402ea84484ce0777bf830acebb088a3a0ba39ba7851b2e879e83a0bb6c645d40d7
9fc9ccfe1fd23cc1237c2b6610f5b26a7e6735f7877f4c9c6ebce0441d5c5a3a8525dfd8
45bc1f4c39c08acd57dc0b5a4f6a6a161828a87d82e50731130df2c794ab688bb258fe99
5e4d1b0fbedea215c00f272189de766c40af6b1939438089504e49527076669ae6fd8f43
f2e6b1af9273727729d48e0c499f6e6e900022dd1d0e4d5c950a626ca63731fcca8b6020
1bd4222623431755a6faee3b1a97223f7c88db45c866a9e1888cffc7399866ecc26f8ac7
1ce6ece360ea1776fa278d846412ed9dabbc76d64481d26d67341f19a79b36ff286f5b94
dbf5ee45d124835f7fc770a1578b4e6a8ccc9558d52e213337d232d482df51ebfa0e580f
43052800eecf73d73fd1537d8e613e2f8f5d5d43a447761f33f53b26fd1683cc37a54723
a2e41f7b6394e40cd0aa9d550eb1a70bf4f2fcafab854af8e2da1155370fdcced3d20c1d
e5edab51d287926247ffc6dc40f401a62d13551ff5e0d7d7a48ddc6302122324a7d4a834
6963bc693d5378ce2cd2667ea36a2166f0673b2374a49da18e74d7e1679ed6e1d2de00c5
199e739e6c76a1ba4cb77780d34b125579d281668bcd77bc9e6c17794086671d8080a7d3
cf005b187db2c26febe071376ac0fd8b53afc8ede72211a859b9aab05c187cf133fd9ec3
75ed48c8efde6b08ce76cd570bc204d5a6e3b851aaa6c1f879bae3536809fb2e9bff920d
daa53d055738508349719aa58a5ce997973cb64221f412a0f8164fd6b8de1433ad2259fd
ca88cef250558b948da73fe159a6ca934faa68a4ce9a6d2deee707ab873e128725b570a7
90d746966908e06b0eae6ab06512ba2b2e7c5026be3ab9656db132409f365a07d5097625
39b3b5a796a7dc331314486d7f5d510e676f348a096be9ba8702ff8cf943e5e507780ecb
a42779e72995c841b4f6276b6f305e274d20e03437660e020fdf062faaf1dc18b8142a9a
e2f6348e93c974fc3e06a04af85a2950daba8fa1e0f1ff8ec96b45b983e9a249c3f672e5
028830363ef94dc159a87f3bd290356939846b0520b7269f86e8c2e2d7fde9befa1bbc1a
9430ec5b66b885a2ae41ecf750418ecfb0f3caa01271248a18f457baa8f23039dbfe8692
91fcea003a4607b152593e1f3a8932d6c69771064d7a167de2df0f57969f3076a46773fb
d2509c476db74c935c89b7fd7435aefbcfa525452d13dcc127b7b95fbce2db19f849a7b0
2af4de96b18a349d255c6d57b97cb463094d0a1585cd0018d1da00762174e6b7bdeb56a9
3c9d08f279a1233df1c598b6c34514fd30ba6299b959f5bcd6860715c56e8ef1f9446065
9005745885e0546414c859254824a603782a101d99fc140466624aa772c610ca5d436402
d16c97fa1fa6f339efe65d445a357d664d4d304f60b1663ff1df5fff860f4b827acc2993
250e2bb4a89b92295b3d5020ea0883daf79ae9f245f6a6b6eaa0caa05c7b3528a17601e1
a556a108e9f27e31fd9972ac9d6249259f4499175310ef54940629c8e0d946766986ea1c
38864f76bea056756abba0131670f9c3bd0637ec1d91d9031d00ff0f96b68b862926ca71
c092e0c3852b3840b4a82701c62e41c4863ad7fa4f9098c9cffae1d660682e130e8b4f51
5e02422de6749be262843ace8cb05ca6cb6d28acb01a44e27160cd09c2b001611b193737
fa664b357969d515fbf12ae20a0f8184d586935db16609406df273598095554a0f5b4fcb
11540899cca687093f316ef3c11a46e2e3b6688ad14c6202076108b5c3a4ad8d6933bea5
ac0ad8de7835a35cba5d52adbc99f4b7a42ffe6c5669f7a7c4c2bebae3675bc2cf887b34
03b2394f985b9e835516b9eeaf5c10ddf1a104daec7e4622c228887d3cd66d8253a73f8c
0700186f56ebe1d532f9c0842a844187e3b46a04718798d22fa4eca707300be725f78413
5be808857c53181c86e2fe32b7fb7f4add29089b5e1fb851cb740292a554fdd2df899cce
90982709b304940e190e0f172f8752e61a147859e788ed0a71b2564ee57427ae3eb96771
98c1ce538e554b770ed36f0741a6a96deb106307c992f8f5ffa7063a66ddfa35d193d7ef
46a01488987895a5749ddca4eb9af2579cec4291fddb8a7bf8a1dac38ceab27f6b0b552b
5512ede530453722ba95e1d4744baedd555353d4e3b1d8c94f0c48b454413b27faafa798
4fe6c1ebcd737991d94a681e1605f782cfe96aae0a9473045ea6e23da917ae9d46cc22c4
4aeafb02905f17027d1789a71fc2647aabba856b7d1146fc0821a87fd3bc293f1d8d05fa
b8d72357baf05a553bd6d4f5c4564fd92b4230ba7b5c509b3979430ca712c62e4da16d5c
8921c287071c5015d22523f7234b5892715ac73f6ef3ab93c0b900ce6b014d732e23e71d
e2b939e16f6b43718e8169de82b9fa8d76cd6de7d5fe3773c38583f1923df793dd235260
048a5ad67fe5646ab1fd8d180e214fe8e912e9e73de01b30c610c98091fbd728271c247a
f8706824208cd538e32ec0db50fe706a2c3ad0ed557f2a2174bf8000fff5837d445218a6
8d361f3e4a32d38c036da873a9776d9ecacda6787dfce75511e6af5a9b5697ea58ce5977
736b7b519bfebc9cad4e52ff72fc6532ba27434a549893096e19ffc292615b9505a4c79f
606dcc42ee18737702b8a8d7a5675c5124465ce71b29e0aa486e5dc206fb47cd18930faa
b053446b74f4da9edb1481d74832c647532f1312ef9246aa51283552c015caa9e0b49b70
ee0049e5fff58abd4bf8073343ed04dd1cd602a5cd9e8a7da0a0b197fd5737d11e937f49
80abb8beb55e4025560a86e94c9ae458c7c05ad28096c240c4bae6f4789713276358bed7
741d3b6eb75f3fef8301bb05fab4815df14b9cabe57229fe7ada503f50c1421c58d4457b
99060a83a0d7e42cf0e1f0d4673e05d8b307de1f129582e229dbc9b00b478402220a58aa
f0c1aae8bbd5ee07226c62d9eea5a9e241132f0f02317b0f5d74f2d0b9594fe0209bd87e
1b5f127f3ab837db7c407feedc47e1facbcdfc2301427b43e98a9425c71de9a20ea9113c
525ba7ad17e894f2f1539dc7b904d670f97d0c39c9748138fe33562de60390cecef196cc
b4f6506beb7cd0a8a5f68b39e36a1e2b0c273e7816f9e116cb6caea0e528028194e7dd39
775fbe0b22b7c8f041f3442d9fc67b1ff33d59a6821b3c592e37423c774b99ac40d5db32
5c2db1d0831744b617573e2fc7e90e6a25fe4405b069f4f22e0464bd0b6f1686a33889bb
047c79445a0d265de6290f0c264918d297961ced4f5423962222ba8e7442c2a2e06def4c
21174efe19eae3bfc3a30926b535ce4a0b7c7b737af379132d6ef2e629033ae5310f8549
277d8757cf3332db0dc3dfd550aa3c22f5c45cc09b70c29dd95257b58c40eaa3608b171f
12b176d2dfdbe0ab97a587bf884f459fc15a1448e98570cea561a83e6aa0bad1b2c43675
7aad708fb8897e497f68509efcd6b9d5a947ea48d191e6f0f6aed60cffbc7b10db51e55f
5e2545445f3ceba24e82799e7be0ca1fc1139d9c1c95a79a69b88c352f437431d3ba1eeb
d2f3adddea3021442069cecb16a426163d3d5b919a8a0fc22a67c3bf62c39a4b1b581f77
ce6944e9bfa8997fd6a5f9cef59a7c5652a6a6fa16d4193166d91a543ac31208a00e6185
c405dce0c2a8e072aadc4de6f5e607beafc38ca02ccaffa48e290ebb94d8610f4876eea4
2eebcf363bc8b11c1d519fe15f325720a34266932678a8084531d13bedb128ac8b5ea683
8ffebf165db0f36ed76936cb9a640c0283d5be4595113425a2a381d12466b1b38ce4c40a
55daaf96bedd7c07ee795b20c69c356a3cf3759a3baaa4d47a55e6c82e7831dcaa4e1664
d821850fc7b1a1191137a0e8912ed6bece73922b5fd6883a4904be163baf988e5b0f8949
8c9667d0f108ac20aa6515479802a7ca250b7106451fbfcc04a01a96338ea317ab8b29ca
37dcda0fc9d7166a49474405f2bfcaeac89e898b50a864e593e12787ea523c1d942a91ce
c167961eb38a605f7dc3ca6f3b0348925a82825746be5a0d1a75684468689964b84fcb39
ed5ad05a534307bde3d03641b4e8c1c039637d77803aa83908bc2aadaaa669e135c8e700
c0492b7448ae57cbcfdfdf9f1a890b8e117341475e46bf54e8a59f0cf02b163ee075dcae
f1861d9fa48d19aadb0988b9873fc35021d46c676c0785ae7705547f2a95ba61e0cd7f47
186dd9277a2f58b8edd31c29516a4350e398b9413b4ed246c3684a6892471ba75d6e7319
01aad0269d1bfeb552bf0d3ba1df623e6df1a69f6915f393d01b163472a4f7f02d576eae
d9a7f6e3745717fd552e28faeeecb4c355215c155f14ea93cf781ed44fd56114187a474b
3138f244be163c69a9b25f53a0a32fc5b01f2252dbe5b4d6696b7db299859616f4d3ef90
2370fd297afd4467537da9796646bc93834d88d25dc06d18e530c1c3ad214420da137795
1f4729550108ec4c3a083e483cd627e61aef825dc984b4a96e9103a37898d1615a2e53a6
b8df403f73f1a14967c78e1cc99b5f457536e99ba4d3c4236338c1cda7e80f31e80e8a10
8ad9e31b2fa0e867928b0ccb96f78d056fa588b815f45543dd94d4e9d7693afe8415fa43
f0555b2776b4a7ac4e9b4f5938c73a1f288cabd2da4fe1280e1fda783da8a254a23d178e
0c30563ed95ce17afc075d401447fcbffe482c773ec697310da1b56911f7aebab4131086
682555039d1948466e3d7190c117052d3e520ee397c6d289fde868904e4011063922c049
c9826542ab41858ecc6c16a5a5ffe2e1acc43d0b2836dc3cc44a7e0ecd5fcea21039c109
8360defcf4afc8b7be8a5c161ade9478e15dbd8a9a4bc544a1d18310909891df020e7b9b
8570d5c583db84a8a932be92421e233c715eae82446d48ac6f285c1d339b09771224e5f8
d34aa615c4d2de5c6c5a4af80580709b71ae0afbf7b3c415c85b0edadee7e83c61305bc3
233aa7a1a77aa2ec4ff5014b911bf1c3487d46ae020a80594292567b98693e3ba7f73844
dd19201576260bcb7883caf390392554147e82f3b4e3771cb34a957cfa509e60791d7eca
471e577177fcaa51ccde66f4fe388fe342e17eae71f178ed9b661f5e415a4705fe78f4a8
2122a4215b83821847128e1be96708cc28ad56298a1a9f2eb373e434c6f8312104214698
0668bf5b7c09922e13740753678f011db1b2acb352d3bddcf92439921ae73ef6578c22f0
bb822930df122baa0c99d2672038a3fece45ffd084183230872dfcdb31322e3a3992caa2
9eba0e5c4bf6ca3b9b56408482219d6592d29d19f5b1958d7f0c5fd7959f09d43a727972
ce3058221a64e34481d6c5f76a141fef7d248437eee449c0f1b88ceb02e1332c913dd9a1
ecb35d8a70b920bf8f42f8661d5acc2e58442aeb43b01ad86662226e8668c54cac1d012a
f028feb466101cdd3c733f0bb8225afc954659a0f9d64f8cdccd1dcf5fe98991132ae361
a47e4ec8ee988c9322fc873b08811b117379b8f77a4ddbc76175e4ed90113835716986bf
b61ea00cc38514ff16e3354a56e916364ca355c0d04f5561b1a90a892a3a1d6f017b9a64
7eecd339b37791d0715c7e35c8ca51a07abf3453759f844aefbfa070a3b25bdec8165e49
7b9e9beb1f5e30114d214d2488f45c77cf412222f60b816d22a59ee0d2f0ce3faca995f3
219eb298c661cf494dfa1a6fd062637217ca882db6f1aa2ac3715ce8a51fc5acb1cd03a2
3439b320b5bb3dbc07f2a053254f170899b1dd4d6967a5f16d5ef775b2c4aec54ee57175
7963ab2315262d8f24800b5d917f171ecc385f155264373fcde2e8924bb2157556be80a0
2ecc09b06d086414ca370f6456f506f80165f070b9953d749bc1283bcc5cae9bcefed50e
979485ac5a7478a93e92e5a07e440e48ad6f58a1c443109b86369c794555e6db18d9f721
f290a713dd9e586ef179d02af805c6f4a972fe72df3477df988bdeb8fa7d3019caf98fac
8422e5399bd07d906dac3b3da424cc69ec4cfba5b45c82151dfd79b714d8f1b6339fe7a7
e605bdfd9faf1164d0cec49b6f25f2e4ac38536cb5428242194db191d1ae04d380d79f82
72ade8fd5aeb3a3caea90b3d3aa4f7dab16605b1847e74abe191779fa7e1363a377e6f8c
d6e66dff77e150f9d894bb007835f9ef8ed7096a7b84acde44a2a6b673294cae2f736d9f
5dbd85a9ec056a28a2610bbbcf1e48095929b792ddcd290f59ccc2d190ece6780f2d03ba
c332c281b03b30df53b2f76479b7b0a14d7c5221b3e1efdb10fc14e9cc1db8d161ac37e0
457d515eec74229019cc3e965589e26d2ebab4a56c7516cb19f56739984b2e9385a10c8c
3ef456390fe4997ed458a9e698583e602278fa3240fbe3d54a1aa736ec62050359ee22d2
07486255d24877249f99f4302f9f58574103010a66938ab8c355d4ff5cda1e35df2f07d1
ca046bafbf4160ab7f44e93890ca70ad45f3fab78c41acb446726b45b0f4b0211b7d4e2e
768eec7e172d3a56bb1179b0c11e1541b6d99ec2f519f466ee8e8050c45600e87360d1bb
8355e7b3eb5bb8d1fbf5b38956793dde11002ff72a50741522b9dec8f4bf374f3b90f6aa
0779f8903b005b5af888680056243f37b828cc838690c47340cb5f4bdebd4e60fdeb1756
1ee7ba03159c1b75e13f19935c50b470951df2eb2590ac968f7c4beb014855e2b07f14b4
7d26cab92ac29a64a06457abf78b3327b82a75759fcbdf0bb4f03a3d96b3c212febe2d74
71358d09221aa223b30ffa0131cae523fefd281b4d065aa290f18dc978c3ef1dec7291b7
4dfa3333a70a1f939615eea82c52305a03eed8703a0bcbc4e49a0bffa060aab583713802
38987ec695a365fe2dd42ef560c8a3973bb99a0293c905ac52088aa06e44f878a82cdd24
6dbcc97a0abd1b142b1996c954c63a3d9f84cdacf5ca27d90d2edd3c07a657aac1e69a2e
1ec85b540691c94d91cbad3c062b9202220f4361f45e13bbdf1ee9936a212a03b8f91980
d361d0272e2ed9d8481c6dacd6675f5de4aa07e7606583a20cdf53cd8c911d1f4bbecbcf
080f76e8f8fa8d6d45bcd1d2edc7f10b8ef3907bf72cd17dda9a7a81a69ac1e314e4f300
9c5d6578b8e4f0f9169bf1a99323e7dd44dcc4a23c5542627c3bfd380620a66976a85347
b2e31e3042b8879f208116bd8bcbc0ab8b52cb5ccc34f873bb8bd7bb246a3f43a32826e2
8aee0950ad20ed7e451e4e64bbb665d0a7b018b22883cdaaadf2b9ad12590161720650b6
f325c207e5325a370ea88739bdd7f239d71b128bab4d1a6c49fe990a5041ec517f068e6b
d9992612605e4c7ea26e91903c5f8739d092387e249ae7245ca1f6b3f8ac39c5fb94a702
70cca212558b55e59449796b3780d5e5887d370a9a6f3027a368e4a2bb71ba2fcebab2ad
e7558c0265a5ad818b9d0f1c9b2fe1f0cfa70a989ade016105e895a180f1012fded4a42c
86e87c4c42361599a6c571c814954102b5408e30c71d854e7fe5471115ef5940fdfe1d03
6bf5cb6ea3a118b5c5f1dc0464495a40b8852bb4cd6b2e1c6dd8593170952b0b5194a434
5c5b795b62a0e864ff5fd33f480e9ef7a882ff790aeeca26ebdba84b67074a33cbd26701
c73a22d73c14c92c8ebdfe6e8bd9615d2699cd3ad76a945ef37be5da77fd813812cdcbf9
76ef84b394deb40ae87f9bd157d78b687e459b61708d4b03efefafb534f083424d908df3
77172ef2038a4c57714770590e0c877c7662aca3e3533fc92475ffaaa72a42524de54b3f
9ac9598ff867e74c22e8bfa30a69689cb16ca04a39b355d13fa5801638b6bd3067b32751
d71978fbf0293cd96c117e1a35550b37fbc4f349e91ba807536eab4ad74f5639ee2db14d
b463ad4b400c9dbfd6f28fccd651f07edbb0013157372face20e64432ff2932d93198a6a
0af6baac3223d87463744e68ada832daee35e34795a32fa7153e866ecac746480b0721da
62b9cc0d7449eea1a48ba5d0ff09b559fa4234ff3497112c85e4a26467a24e3b6ca6dff3
09dde11d6d307b0dfdbe93d3df920db6a2e2b3593557571c17306f0dac0df72520d794ab
5b48ecdc451c7b169c6b8590f97c835316d659b8a980e075b2e5d513bce9c3c2b7f6f8d0
0ffbe6faa53d64d44190a45db14c52cc698271104790e958f8b7e2b5c24f362db360cf54
209667686ac504a11aef84d4e797ba90b79ae169a3884245349246ac2fd86a7038202270
65acafc5e01ae6e241c3fe088597e0d5ea1cfe68620c5d80dce3e2b725990d1e26bf5b33
caf7510e9ea640bc7ba2f1b1847c30d62e664cf3577210161c4637e316c09ab145237477
5bf89104b15a19d238f29cc6f261ed7a4fb50a9844d17a0cb4c5a14043821d494c80532b
1b220849dffcfd91987f67ab12df0033cac99688b21545f336ed06c1e6059957b87abeec
30e463aac1d38efd5e234a145fae625b6da01bb3a510781512659f12c05561ecd0ebb042
9722236d7643157164751dadb8ea43a182aff26522a5d10d683e3105238e8fa1a974f5ca
dcfda5c8cc88aec36ebc07b283d5fe1be0d88db79954dd6c918a42fc93dc44f51749aba6
8d6bb1edcb7f988d6e4b93c710017816b27bdfa4e0b7b48a97a301f396462495412f99b2
a9b68747857a4c04e1fbb72e90aac861e72576cdc88ec94db81a7490cf03d0ba285e6d1d
13fba0be27cc20299603687c8a9cb8a1795f4160865bc990a9a246e150f96fc466ff6952
b4dbcfe45137a5365bc82a6b9d97f5be5cbfe3eb74f1bd7df04ce237a9b5e39eeca5bf68
b05374a64c71ce91c043e5cccaad10ed766d53de0640893aa71e84dd2f2e5080ac88aef9
24c21fa470f5af9be81e885a7ee48d4e5599672a233482653760d4d78be9bd5900a4423c
0faf24183967d3e08ac3a8892578cccea5c30905d28ecc87e827e55c430b08432bd01b67
e959cb33fc11ced5e96665520555e47ad1c6c7e358f2a3e57f34ee11d418d8e9aefabe2a
aff0267155b75c09b592a52cd541abc8b9beac8ceff99acbdad0e594af94b92a1fcd1b1d
c295662aafc559ef83d3eee6ff29fcc0ea32b5b4f95c3438ab0ca37742f0906041a08cdd
c32b2315bb81575ca53f46ec9ef25b458db5bb95dc13bd6d9eba383b131cb50a8e7c9769
0374fd5972e0a17876e1adfbab157ceb41f195093f0f1055202de497fb88102372884828
f7d9fb098093eef336bac6164a040bca3cd39bc657aa42fa1b32cde0e9c578c425e44f44
b355047dbbd2900cfe972ffe043c060f70ed7b2524892d349cd7eb2314bc74cdbe5f6d2e
90d21d410a9cad5bad9ba25fd0793fc2cc4fb8a3ef75ba5e4427ba54139dccd2e12774a4
b5311693d54d3ff26c0b8fe52e360eca18edc2b5f4ac5c8a6dde36b484e3db050c906dba
703cf2d18354b512f07a5a14d3c80bdaaa8faf7cfb40ad53b0afbdd4a9265e75a98ed376
5a397754ac51336789774942375f4c72f659547326a96c87b1fb2d7cb5fa15dfd2989f7c
5698664aa6331b475c24e2df43779910de29f83ded42e4c6c043c44d286bb0728a4eed50
5f3cc5cc730f2d9322624748e293011794034f8a9e6c1e633b92c76ae7947521a71223e2
dc49caf54fc940f774762d6cab78aea066d17cd15225d30df2b954e4597115fbd18260c8
15b7faeb581bc21d5fdedd328eb783890121dcd5caa0dbf77a14b1cc70b88e2bb799bbe5
1aac17751a80a4676d12c8dd1e69c8e463aab6a4a4c432f88c1155ad2a0f711f4235dc4a
126fad1ae202fc51aa9b3d4d29e33d640f2092302415243a7daf1c987dfca5031cd5adec
5a0aa9a6e14087021f94200d6ade11160168ca2a9612bcc3687830bc499c60c7a7b22f1b
59dc9a2fee7d92ab9296dabaed88a04c03a695ad8a8ff15e5c8438f21519d068172a667c
c7cd63e37fbae06373aba760e91f174131c5a982efb45938639603aa716bde73441f20f6
1ad6f1a9dbee073738404c0639231e7e85d3653371fb469c6fd049d3b1e0129107227c2b
9a3c23c0c6003985cf76a35287739bda28540bbc8429d0ca0bcc946bc07265dd845fb9b3
b675bb739e129945c31d443e69cd662ec1678cd0087ece0f935242752797346df46caa9e
2b07cd3d8e0e3b25c30e90cdb2b8ab1fcac798c87a1ff5a1da3c17629d31b855bba7bcbd
43a6be5dc208a80f9d0696e55c790f244d66e47c784520328fbc1edad2da457ab3589044
cb0940cb6ed1c5f72fd237598725064061aede7aed65425f9c3f4b4291e32e89eadea274
6ca48059a0774159837d02cdc74d4f986102986cab7884644c7c6bc1a2cc7389350e5b5e
9c6051f6244ec0dcabcbe8e77077a43b19eb9bcced8f4fbb4c02f903a74fee69c95ba994
630c3ec0fe238e7944beab7314bebc1d991895479d2fbba641d5e39eb58e18f98cc1a889
e832d31eb6a7e02fe5aa96c1ff7b84c00c04bc176169e6c5fd33dc2f2e9cefd510f8b224
abd0eb1c03375f2812c587bfb8c84b18ba03b38745655d48454bd0bd7c031633e8fcae74
204957906a309aa2408738f76645635318d7247695eabb1232fedafb4f0c2be1ade494ea
c5186263f9aa45fa49a79941a305f9c3c6838af0c3955798dc9c73ce13f4d3ebf52e36ed
83cb2e57721b1512772bd0e07c04b9b39147000f6fc1b02a4bc935cd36559e6e0e35de07
38496d53280a862c97df502331a070964e02bf5bfebbe11bdab89faeeca7d6e6dfaa70e4
b864fd2aa48b7d24551ab257e873afe792c2f00e1ed77e1c8259807ebb3369ef077fc695
55ad72fd41dbace15338060f0492942ba4bdb665b47246884ad8328188b2773ce44e3bab
ee76cf931919d4fcecf26911b929de01cf42829a73ea0a1b5d1f78275fe90347b33ee8f1
2d10152cf90ef2923df8e2003f499a827d1a08aed62f0f280a67158ef7742f4875916a12
70ee251408e94706088a423cda05caaa86c800f2b59b11fc5484c2417645885155e435c9
0c20f92394933ba44852db0eab5efb6f1011b648066dbd9a87bb11fae75954225e885cdd
7bea09460ff756800eeee3a3579f6a343e695e5343876a8dcb016a303c0306cb5e2070aa
10813d34f383fad7ca53acfcccf42b4b365832078c9e4e47f1444ac59132d1c99e600061
1f38d74233920da64d691cd62c8d58cc64569bed2f17d118d0921016e1ea3f3120d32f09
5cfee4188b9ba32615295d8458a2644c9c5e0fc25a9d8e672a4e4a7c17bdfd8dd11faf15
ce17c7618d3824092a25631280768ee81854141364b34e94afb7b0eb42e95af423e96ff0
462bd22bd07d88a41abdef690c668a2f9cefaa293a4a7f5d73d056d41e8fe8b9b2093a61
63264a92de9323e812b1088e2fdd3529f5cb8cf51abf2a5fe892957b1a73293a55c2bd8f
10a259cb73ca9f40c5fedf52e555c31ab2413d23b15d0bbc0f9e24ea907da43e321af289
ca03db3276c6a48f7b9c498701b58e81616caa16452d0efc693c8290c662ff592a7418e0
6d5301fd1fa594341e5e6fb726564db63e09c2d7afc82f21b15ab834670a38718696cb0b
d47469bfaa42c494fcea8e9a4c586aae017115c83ae1da2661e9a48ced0729a56b8f88b3
40ae17c51bea67e7f627d6a26ce93a4bcc4308621e2cea3042ef58ab9b51caeafbcbb2c6
ba561e449c5729b218773df00aeb76427e0772f9d4ecc301da4068b224fcdfbbec61a816
e8afaabeb5b0fb59045d76b5f72533fafa77cb11357185e49807e0b7030879cd983c4773
ed3b300f33c724faae81eee542c01f4f77aa3fc79ca31b4cdb6d16395d7ca5d833ee63dc
57662ff8a4a2f98c48323f479b52f75acb63ba4625fe52618890f429832ce4c233dc8822
7a6e6f2a82d011dd74e0af8c34b2df8a6443510a8c8386bb79f2b50f6c36deabb7239930
8b5d1f1edd57fcf2e3434cb0e412bb3212e4868c7780b75c88bfc38a25338ab2ac89bf12
6d431077b4a75700ff7306b9c1c10c2421743595a073520bb059e68f14f2b06e3882d1b9
bc25b8285ee31823e9cda07fee998389fc2e822ebe80b48c0d50c4662140ce9901ef5aea
0130b3256bc76df297020ed29a1a6575779db52b18aa6bb488f414da633844bd681607b3
08513d551ab733e3aad4e69a5acc8f9aaa9b88f81f586955038e8cedb23a746c61c8f59c
598877b5a0967537b9d6bdf843cb04c86f5b09e1a01098d507a452760683c5a0948239e5
38847cdb1cad33ec05b636158973f447e2cc908d897671f647d5e6e7e2acf952b1065817
e70a678c9136665fdd63733aacfb726ecda1e8d7f798a32bf409294708f7709dcf8d1c87
fd9980354a999e2bd529b92f0643726a0a3671e81d7dced0bb0f2028bd9ed66d4986b05f
61c54b9182835f6652a79163613b34251ebd2326e2bb69ea84f7fc9edf22d1f49408888e
05054b67f73ea607b7c0255f259e55f18908b00f9c7f5048b12de7e6850c424186660871
9734b856c834358b5ed2de791fd0d47411ad0c5017e9f1bcb6b05f590403e3e2ea33c607
459bf7bf064b6729862e8b109457ab313e537305b4a51204e816fc009dcc1659b61479cc
0f1c6030bb97e5f5a99a9fc470213db25732d3b03aa06a389a08b112f973522fe5641f0e
301012984acd4f3756ef233a6f2b43d07f18526c2ca186bd0684b0512ac35c7c4f01e7bb
d5b98f255748b653cef26d744544e28f0601885582f773afd8f1a5e3decdb261438465ec
63889f6c4b855a0bde8002130ad22542d777e34ecf8f3adbe3712e02fc18458d54ccc1ba
6031b28ee4e25840ecb975ff3e9e91dbf73cc88519f4bee28172aab00902d2ed3404f689
9d5faa224259a9d59f473b1c1b7a0b961bc1977c49c3201f99b3b957779aa79ec0deec2f
63f36cb5dfe75706d6dc3bc6afd61877b0d20f49d7507599e3bbcb8fbd3c6d99d0277790
4d9395e1b0289d64b669a25402ca6862c554c7f90bb300ca46095d1f5b1e8c74ec3c6aee
ce413ed33b2f35885d1fe17af9520540b721b04ada0e9671d4be2119b3998fe3e20942a5
6ffe27e9cc486d810ac81b30b23dfe3be0446355749cc0e7a287f0957299e16242406b48
40482406452398f6a307403fdef74f7899a4662b82e762529678c3591db812e00f84443c
6e3ee73d434dd38db88c990393f649230572eb02e8457c88e7a12b2f86c4fb1fed3f450c
54cbb27c82fad5faf5f5eeb0f44cfd7769c755f01302ebfe0f0826ad267c8fe457bf9ce7
14afd6ba4e61998a457c8c1a75706d7d1b3e02437132226ef3f61872e96d8bf3af5a86e6
da4724de7b2fc129811b72215e42a9984cd21810b9902a368ec2ab253adbee4b0eb683cc
e1c71392bd9c1b0adb0efc611ab0fc5d3e76c0e0f2d4d023ba5671924a58412035f485ae
53c9aed4c59d95d719b0d5024f52e281207804079042a7dc88c494327f5fa02240d723f1
8d3d50049aa3e828a1c379858544b284b682a2de969a62f0a5a57bdbc8e2788b79874b16
61413a4ff3a843b6c5f61d1f1730a23088f295f013ab088d5ffd298cd23419bdf2f4c1e9
cadac957a614529e40fa7d84135364d0cf2befa3ba1c41926466b30d77fc2e860df87f83
b74bd173823aca92001a4c12f95ce7ca46cc4ad42a8b7701d83a4e36697e0988be74d90e
cb3affcb0da11a2f30016dc2d7d5888eed8865abf2b6a3c6fc30ef9da23a8dd94d72372d
1675ba65c4b1ec496449b98e6a9c670aa2774be3ad37bfbe3ea432c20ad223c0c8cfb81b
27ea07813676d87b0ecac1909596ae7acd5be274d9b0bea82a9ca3c9510535cb7347f4a5
2714326a2d9c9d54ca8e2a9460606e118ffda9c4ab44f6e183998aca0e068cb949be78e1
563061b638fe37bf24e45d19b55b4c03dfdb67702fbd7481a6b59553c1888c329c1beab7
1fc8dd2882503aa522ed40aca7718277f5a2332dab3fe456bcefdb0036457edc03a1c794
644dd44c644fe9fff8435e09b0da326d3b26802002ba9d6f5c39478d9e21a053a467ac7a
253927c0b9e015951739512f6c4621e6c8010de71129eccc440fb2272fe9c096b344ca6c
f0fa4222f5b2144f58463a44e4e905716f4da65eedd3607af6a82e1c4de03b5cdf9615f4
16834294b2afd4afab86b3b3868b0a74b0e29b8317be8237cefb357970ea52f7b02ae40f
924aef4815c486353805809e98c9afac8fb91ef9f42ff8ba0a7e6cd7f5866985735e8e49
b96010eb12a5b2796da179c9f466edd490fb1bd8a650a7a014e8c4b90c0ac6005592c1b2
e013e76c9455ab013793bd81271fd187e2db31ec505ce2afb430bc5e744918a7282f9247
5f535a1c85934635b4912138ac3ce31f241ad9e14977a19b58a9ead6c672d903b926a4c1
b37cf6e538fd5e14472ed48ec3864c4d2b163fe17a423a683fcfde0eef163b5894059613
a4894de3db83df980e7fc841c678266575a67f95d57b80918b43b99842172f8f6579057e
5638ac42c32a09cd6c0bf22b36c9210fb6ff9d72840a3754cc076d0cc2a5e3600af2ea80
c1718f1282c723aed1a1db57af4b5234504f0fc4325f6ac5a07e2905e57f119d7e5d7202
da5d0e2f7261a3cf31f855e69da8f095e11bcd60a219b9d0bdd6053d276b071438e96680
37d757ea4622ee3fbfa0a935ad99b195b41166e01349c98239459cafd28193716dcc2418
f72452ea555c64f275dbbeb2347f02f849530877d69bd0eca9723cded8f5ea889aecba75
f8f7908d0a4d0a872e523c8469b5e9f1be97314b2167e9ef8e71b45024b577ec85c248f3
81ed5815255bcb4f7461d48530eabb3821715a25b2b7eda5effe61b987dabffd027f1b57
5ca637ba6644d6505ba0ebda841424d6a938bd2611a36744bcd537a856ed746381b2098a
220149aadc78df4decf177d72ddc47ae7b7755c0434c2c1b42aa77af8750830ec71cd191
e991fb5f2fca9a579226dfbd0d58c9ed2ef45ca0f5aa263bc3f7d29bc1b0b2950f847133
323224f8515b1813b4014e849582f45187dbbca1e633a071e67b2593a72e859215d551b2
ded1cc3f9b561d48603ad7d616f1c7205727f17955bcd9f7c0cbcd0ab218bf59da97b14f
3957b15d7b7ea791a5321ec29bd392927525597e1c8cbdcfa2428dfba1667efa9db87cae
3c3030681525c2c00c48687b6af4f0d93fda8262b5967dcc110fa334636d1cfda5515dd1
88e9f1d4e07651f1b6251b0b021105a756ff85d9904c0a1887561e6e7dafc307157d3b7a
b146110be09228d1748b633e4c545daadffe3e1792f0fdf6823e6cf1a573e3cb4a4b083d
f4ad09776b835d78f5830eb100b55ca1bab4e9998a2a73086307748bb6d88d3d5e1207b8
9af197fdceadf6b307d5b073a392521cebee9a02a185aadd4100bb96811dc17be35c93c0
ed56f8c7b1285c5b1019d6f4629ecc71d27936aaaa2df9ae848d36eaf2f8be8c8a2bd69a
553dbf1f07542095f7361c5b61ec1aa786cf23397f338dd8f3cc4848921b57521e6b9542
3dc7228e183b79758bc3e8ac4c0a1dcc15fba0c41d03c8d70bfc77b9f1a1e24926da4558
100d2266c6c8f2298d9f561cbac78ca8c8f83ff5dd6d10818b8a8a2e5cc33fbdb45f7903
e64702165c7f41cbb7711076022cc28239223508da4621066d3518e280fa92188480ea51
bdaa552473866a717c807510257b71010d472889d4713ac212d4930c863f6d13eba8209b
c411195493989ada98614e12eeac34313eeb7e4b5fee903b894784c54bd1adb1501360ed
ebb990aff7aaa298572b13178606f9d0f1e5b2d3a1ab886375aa3c407333c96232c69c93
4385134505a77c1a96e7e3c21d28e1a0d1e23069ea85a8bf31da7af71a28a5862c5ada26
f15dc0caa97ef5a79181c1187475a8fea2617e29a7cf56fb7f4b3d70fb7f71104e8af0c9
cad640ba3bb331e5e6cd6528a1b03e14abc0276bfdd8fea3c26913d38e8d22bc06d32a93
d3aa51a8446a8f78382da6d0e7709f20705b225bf400ecdcbdec40281c34ee2ad0970790
c2a0c08005960ed37febf21b0930e1f4b6056fc1d306ced6e0d05031074c665fa70d1efb
b6c16202a69428092f1bfe50f0e070a10696454d1760f5be247d1b92c97c0c8d828f034b
f01b5e08a98a05eb7b2dd004293c5f0c12328d68b1a4142ccfcc7ca40ccfd61b59c54d50
df9db3b34a53683848781c8372b9223fdd04a2ae3de25efba278a7c649968453d3ec5b49
2d54fa29230c3861798dcf6746e15f7b6fb9cc689295ca2792fcf36353a8789e2fd95603
c4625e3fa29dcdfa9b706d32631de9aa694994e571e79785ffeaabfca66e467ab4b4d7eb
44a21a8030e696b6da8894690633583946de9fb61545b46557a9489a69d57ed1d9de6602
b44bbfdfdd704d7888ad3ec40bfa1e89f78e6ad7e325ca1930307803b3b5ddcf3042ed3f
59aac7a09a7d34973d71d3bc4a6ee172db8344120db142cdb5189e0b71f5a2332dab3fe4
5684701f195b81432fab96c26dcc3ed4d2b18cc4310689a6efc4bea79c422b42d7bd81d7
3cac9996f02917f112278ca2d82a90f914978cb7ba3214c08ab49185f47dc86498ed0162
b1d198984d498e545a3e4f8b7e3395f2a74e234dfbe048e094496ef78e5426a4c5ab7ca6
e983ba826dddec3c75762590c1fd8dabe84681db699958affe8f51c71650eb6ddb142d93
6b0938ca1c240ba4ce0d36205ee43cd621ec32355db4a5d10cc551a1a5e4e38241c9e8c6
80511f1b1582ade425c0657d1174bdca6d7ce044a7c683bc61535f7100f08a3000b7c8f0
4470b817086347e1138181e2b09a943e659e52224289a65c27b52bb674883f5e4a7ce93e
dd3b1b8ad234d4489323c8dcff26a71413f21abfce05ae99572403c1de8297e22fd450b7
8bebb78c1f3492575cb4f53ccab03f7cbad5917f747442e433b722f0ead0d236fccff8e0
5353833bfa60f88a0c5297cdffb46faf25e0c84ab081e4fa1c4217700b1c620e2144a549
a5bc804c9f57b3521d958a6afb3619fdde3313a355369c9bff923699768fd88e29d977dd
7ea7c8a041587080ae7fd7cc48d654287b00f4d4b60c7b5e01f0fa8b953def43e867efa7
6134898a4de9d4be6046e88f26a5402fe0cf6439fdf3e5fb109db2b4b48bd9a0879afe4a
52fdb6c9a9874d104fae6bf130e899815ef719e0f180e288044076a1f2a47d3b5d14bba3
75772f2fe83a7e28846d8f41c5364f2c87dee7b1608522e8bf38846e7829a8cdcabdcc3c
f2559a79d32cf6849c3b4cf7b8798edea66624a85b8ebc3cb598c50208b0bbf5f6efde6f
ddc73509bf895a9b3542c85318a08f92eee5941337a2a2da2516b8335a63755e11b2fd8b
d474bc8ca52ac12f42789e97413d8fbac4bb0b9b7405158b878e809ad83d7ea7811950fc
6298935df8481442a5ad72cca3e0c97aaea573a7dcc9ddc9895fda0c0bfa02bd71a7d447
63bf8ad78aa3f424cf2ab258464c02f2440df93bdf008f0068d664d45a6ca1cbcd3294b4
fbd3e38c4071bfbef9c250b60433ef4ffb7f558d3f0e19e871bd575a69734d7fec7a6e8d
41a71096f8df702412425ab51365c92fe316487d9a1e6b16ca80e4c9a28452e67abd83bc
764bb3bcba3f4c9ccb39641322ff5186bb426849085365770794fec2b97a8cec0aafcf9f
acf58da3804b3929e9b94a8e1c0082ea059dc3f10570e534eaa8f2c843c03b20e663393c
6d20b43da2deb812bc0de43790a119afd490c07632492ea0f147b5ace28458ef9644f536
ede1f55742a1cf5d5f2685321f3f9b64d81cd9a3eb7ff49165ad8d18c66a4fe4b28de025
4d4dadaee63ec4ac4f4d0f6b370378176213c4f287900f3a4739689367c95f3c34678638
b8eaaa460339e15539d9a1919fdabb2dd4eec57b88e97d384b7145951330dc903abc0e9f
e6aff0861983b8fbf8cc383f730e018a4715bc72322c1149c7880bbbd70a742451158e03
a513b52f16b5988ae72a0a6e121983d7767b48995a4fa4053a3b0af6e970876f87d14a0f
c7f5aa822c97183df422b91129780767d2fa144f9e64a1a06f7f0ead319cd77cd018c2ab
27ecd232d577d67d643d1eb17af2a79f76d077dcd9d398d437e2ff104def2f74af858ee0
7dbf4ef2a8a4357c6f936cb89b80049c8b2bec3a2b20fce5cff1c6d354526d40aa340e57
3843c2e47cce561fdb19b40897a7fc4599ec96630856f788c948da0c9bd5529f4933cea3
31d9d97386f34fa92e15023c22fd0c75493f4e299808636880abe1152da1ca575cec289c
dcf0f80c4362bf782f0845bc1cca962aaa4b71ca484246782b18578b09f801e20fc2534e
84e45caff92d6a66216b3d188ca43eb6c795bb0f97b1544e18f35d9afd5ef546a46c2aef
c7110605f8c63f87218198392977562b54ba16366b380fabda87da72e59ed8b8645510dd
5c1bbaf225aa512ea3173dd5902b4ec9313c5165d1776f583952bf7bbe98458ce46eb305
5a4e0674ce601a7ce8cecbbe7ce5a04529adbbed206d91f8543b562bf9c0f7982f65fb22
c411f929024d257fa7a7e4bdb79f00afb913c744fbf32c799b3f12c09aec54f760a033a9
ee1fe676cc2a14b69ceb33166a3c3cf56d494ff268e5e5fe7f82494140e2fb9fe4816e06
ef932fa0d3e430e5a622e6b14a7854cea243733522ec303a58eb81aafa38d814f579c54d
c56352c9a4603c41a37d837d6f3431aecae13facd9dc85992f52f2c3bbb2e0bbfadb3f5d
73b87ab93b552ae23f563866ac58919dbaabf3b9050e1a87424412766be532f05a62ff5c
c99bfaeed2b8e6e520a9ab89fe58000f447dd460652e5cfac3bc067aef1c0915135a0368
eb0bd810d492cf65a1010ad67b2e26c2c94cb59440d1fdcf5665d229b7c2b08f9f3feb76
de5dcb62e5a6acec82616e071ba894e0cbcf67415218eb16846f500750caac7d3421f45e
d333c27b28dcc8076086824c3685abd2e777e2b0f02468f212fd2b9cb856089eb186ba84
81137d9f8411684d106022a87a1b4715123f91d1d8c6d0a521aaef72ec5cbb3c34d5c268
c795175a7cd34726a8da225d16cab49e8fcab57b0fb3ec3ce5b2ce94281e79e41c382bc7
76630acd228bdd0dd03f92983313bca967642f27cf732136a4e82499641206aabd38518c
79634933697b02a870ca3e5ae3384f758a9f4dfc9048c702dc5a23e319bb68d94f7b4387
abdbb5b60bd0cfbfbd37cf615fc20762a0a8e3e5912bc6a767fd8d29b0788bcf6a07b74e
14cd209b92b9f67721880accc81ee2d47fbc7ef6380c0a9114c070fdae2f61231c9fe579
6d244718cea19433d942000eeb8f57333cec571ff4879a1a61f964ebce7b9edacfee8165
e0c217f3615234e4b9219b166b8c0e837f950cece5ddedd041686bdcda1190868faf5dd1
008e2e669968edc6f4ec0a51321bb17f52c64f47dc5fe15a30bf8cc11425eee250c22bdc
0abbd1020eeb18749fa043dd092f9bb895cf761603abd8769f6eb7b5cea7925163e90512
933f8d415bbe0155adbef2ebdca41fd73a5c671a2b3b6b43410e1638949da53eff62ee46
32d675345afa44953fc73f6fc7279893d80274f139631c92ee9f60ea7cb267d3c647d219
2faf02e77cbc6fd54bcccd727b1ac1ae9f69b62ae8c5f56ddce347995255aa02e1081ba5
8d3ebf7f8be2f836ee7e565b2d7e4938ed43fa7795135e538438fefe947d613d44729fa4
aa9219acb31b596442b102ffcbecd706d734882046170b0bc6d46a596d7524175e42d361
e65fecaf6348ed06f6534261fe878e84b677d42d6f732579f3d41670d70f7b64504671a3
cd2950b35d4f4512f6d25213d7c8145a3fd38b81606d4378b7e210b0f272fe02f0906057
945fefa9ede88d9714ac7c1d5d33f67ab7b47d7af457d47c41830b16d5e92ef38d344027
9c74b7e5fa93c5ed56a32c3e2212c86a9f26b54d78e3ed6f8b9d842df333ad7169c85c8a
fa085a7b933c3231baad458f8e4cad2458db213416aa7a3c6b2ac335a472c312c6dee839
8264a1d86af6bded1121ace8a9168d0996589cabbc4b88397e6f31470fe5d748f88acedb
f7e35384b952a4c216f582b7dede36262b685519759b60e56c9e585e1223e9708a490789
4c84f74a4958aaca70ea5823e4311bac6b30b6a35a93d3fb753c41d91d9ad48e6029aaa4
6cf8ebfe89ca518a1824ed37b4106b4aecacbf1046760826ffad65ea5316808e4ab68457
26d5022fdaaae838ca59f11f1d18357004fdc767075d996e3b019311956a88cb503a21b0
198faac4bc5a0cae3b560a2cfef55979284846fb584118266e0ae254dbe7e8faf85141ad
3b852f3f356d7169da616ddbc540e565aea107e2b32fac70e9ee51ea1349342bde8aa21d
5d964aad5472938b83399c19e3d85ac1a4f03eeed8ffa178dc7cd74d948c891ee8a55c4d
2e62db821050c4d37ccb4941245b29298ac894fac0c1b30adbadad1244479774f75610a3
390cd39768a159304497e14df63be8a4f7737e83c451a5632487a3e7600ba47c9b872273
052e6c1f8bf03e5b8a943918fa417b8db59f572eb621bf2af8a9d1597d4ce2a48eba5046
bec934c5b4fb8bcc391a5c151c93deb2680efdb1c04a2852a06f5a44e7fd4bee59454806
ef7400caf2ab87d851cfc0a2cd9ab6ac2b1d268b06f7cbaaeb90922988bf4a0e94606dec
2080ba24ba664bca85d39f6bdb4b907421955444891596a20d08f8040221b38d88ad7f7f
4c7d21656b0b63e8c56dfd1d16e853a37e7d267c1a9b1cfdbc214d332ee05a73e780a3b6
74224b517bee8a41c48e72940ef2efa94fedff3956fb5c92c51b5c00cc8699d2e972bc6e
dab505de7cb65fe1dc281d3d1793897349ecbf78435c974b778ca5d33424dbd69bd6ced9
87623847d0c09eb3ffb5b9471ef1dafcfc8c0e20c3f6f5697f9c15a32637efe0faee0a5b
b876e9837c8e7a35c5b4b9d155dca5cc890d8b4eab2ca5e6b612caa9feca564102b58a77
0c0619e30f4b3931f7e1d55d7a98bed00760ebe28bda168ec15c96318cd5ebfd3c138f8d
e0a7a3350377aab855c32195f5ec8520789e63db375ce778a002d65e4df84c77e9c332f9
49b918aa5e530751f06bff57a59d8276a90618bbf14299cd6188e8e03c6532aecb78ecce
beb3418e7bee01171c1cdd69eeab36b71ee602d5df905476f408b580df1d813fe684ad98
a7ce45087ec159484e7d11331022407ac62568400de23951283b54e8cf63170f3240c88e
adfe9156704ebcbfe0a6e325f17ade2d7c4dfd355af4feab521f71c4f2463c35d55d3ba4
d907a2e528075c9914c1968aa80c6f9414bd110d3174070efe794d65049d6496de5d2666
4647a639c12db8be0335cf9441ba69015655af0fb089d45685606cadf39ab10c5b9e6b73
a56004614153f1051870300a8d0aba1ea55f622e40390c0252a27affcbaa66379c3b19ad
6385a19d02ca48e8a2cc3264142c77a80c05a7efc63770ba1eca7453b235ff0ce223f9cf
003043130be68ab7a779f14237d72c92eaceadc27fb9a2d28e70344fb1e2288adaf4d94f
1a25d9f229f5a1f9380faabf3d073b6f09ca56c6ee753c7950d9db3c40c3683dbbc6b61e
686acececc1d56a7d32b3aebc539d030cd036a457c345ffeb5e10033635a55f02b61d38a
7222e746a178a17a28fe9f08581a15a6cb3e6a6aaeb5a69964fb076b79dc46a060daf402
806f8e7e38df5644ddbf94d07e0d8ed25f152f6997926198bd58aa5221ca190fe1aeb93e
8b606a302978225e2e36f970935757c6d0e28d46df1616cf735519d59fd8fa8897724066
bf4d72df886189b6492ae87890950c2ca74ede02e7f1470150092f2cdfcf4e31a3312c1b
fde5824d94d8b4420afccefc43979cbf1d30fec31400acd8a0c0fedee9b546b105c75d97
e8ae360c974279d3beb8c8e24fcca292b820ef92053e5be60553d530a049b2ce55750c75
9ec43d117f58545ea7848c085b701668f37cc7fde21cea8b921212a899fd9feea526f3a8
23d37abc67c841428ef58a50fcf9afcefb70da7b4d7a2bb8de5be652d58a895c2a67b05c
a5ecaf8cdcef2b8df66cf1dd8675d579b1143309924d4254095305d906adefebe16c87ef
1f2e596f006f6396c6b2912960a86ea2112c27e3378a0d70c4f053114d62e9afcf903ddb
7fc69388f349f0e1a5cf04ae1f6c378ad9d2396c107e5cab32ad87c0cd7097a53cf50380
341e7a58f32cb3ae04b65f23f989946db8171ce2ac92835ddd890a85dd03db1a5b936b86
90b6ed8d9a47598975c43e287868594fea135e9df00a6dc88c5a1a4792113187d6ff5ba0
6e534370639320586d1bb6151784b4151969ba5aa74aebc4c38793749fdd0036323bf4ac
56fdcb0d42f37188bf67a8024662d03ed49f714e15a410ac6b77b53ff4eda8022361c066
edcbe09e64c1455cd7553c48042e33abfaab406d4ac6d81939f3fd205ba1aafacaba09b9
7e6c8f2681c555624b25ae059b6b8364be0456d3c535ccc7825a8aeeb7afa8d86f28d937
419f2ecf18caeceea1236c494cf86c33e7fd821ff524f1f43c51f7de7d129fb4566c6d0b
3727e9370c37988e2d703cab3e461f52e4a5734dfd16e4ebaaff37e6f859bc0d42accda2
e1551655b1504971b6a0633ef47aa8c60cb7a780405b69eeb7fb4f5a13317e598b48a3f0
f0757f3763517aa34c5f3d258697a989ee609972ed69c6d21c43a9658270dfc0ac73fef5
f825a7981c90350f211ede36ccf939805da86651c7ea17858ac0567b91ba4a9bd07243c7
861571e21c80708d74033bd43dec2d878dbb0f005b6fce3014112e3673898973d18b612e
12ce1c54d615320a88bdf1f4384903ffa64a2afed5c5e2f44b30da890628efd0ca4f8702
e54d52bf5a9b6bb43ac4c42bb49a91ae70de99f0f2e2cee6166d83019023997545c61757
790bffc3576a55b9b3b2368104fe8d982d9d5a20304eb94fdb943cfe0ac971a05e96c07f
cba5c8b554ba7aad4870096824496688a80ab274f7045cc6072a976ad49501291332d774
fffb735c59cb7540bd878fa9bb1f6c441fd2f5df1a17b79b073c52847b57489d54c14757
df699f9874a72a9973cb242575441d12eda0fc091f11ca299a6add10ddef4464832eee2b
64126bbdaeb2bdb4a5f982386c2bd05298c4f1f0fe010a0414893403ec6a98c105009387
f4f4199b52d20de1e87e2635686c2c13eac31989b8b2d5b0d76255f7dbe02b83c3b6a8b1
df8e442a2efaf70c7ff80c11cee3806d0bfe5c00bd9f48ee27e8958ccba30a203892ca79
f5bbefe8d1183f2d7c2d0bf19218b2d6197919946ec634661bb2ea5b574145b845a8ab69
1b77c83844dccd765e17851ff4150bbc80d819558921f766ac1b54cdda007a81fd2e1b5d
bbc8e3a98d325238d95b27912757826642b21dd492f6d1fa37a7a1b850f285ecab09c244
471453b5649519fc86c68e7bbb544c1639377f81909a5efc25c00126372d2ee6f74860f1
bd40418c27887915b9f7711ef365594bdb1bd4527a7ace40efa43ad36a11b776b61c4925
22baca9879359246dd48bcaf56912a112548ab0c8a825a9a1eececd23d0d06ce4ad6c666
3c90d3fc7c1c69cf25aa320eed5ac6537ff81e7f8de21b2f1bb2ac2cd39197bf6516c3ba
be3a5b4e8bbac88264c3a4f27ad218d6c0bec3aa86ffd05b34afb6ec754e4acbb44ddae0
b7b9e102d8afc9ffa0874a75beb217db087034e5e5f27919d9ab6137c0cc473f95a2839e
a7b01777c0f13bfe0b028042114039d04634f4a979c50d5438b0a19515d529e6f033229a
f9cacde4bc55eaf33db6505f58ebd520e92b5a6e68654de4d91bd07a2087c5b56347bdb8
9c1a3a72234ee45de082055a3723e215f3beb2ade55524b3ba2ec5169e9125953f781953
accca237a2a0dc964bef8c09be2e116412df772bd33f16c2ee35d4bc6a2043ac1d5fb89f
ade28b042757b3c9992fba8c2712b6429905ff5347f239399652d81630ba90552b72cda6
0b794e789ee1d7ff5fc64d7faf05b8e1f2742ce6fae1f590bf8434993aecf29b0c533434
812ba411c187cdd9087eaeb2d49e6997df72cc41fc01ea131fc3c247b83cc183c5783d01
31a97a6a0dfc2a68bf9753eca78a89c8fb898b2c68da59f073c86e3b54908130a2c87542
332df396e72458dd58b34972109f5318c1d1a9129f2017fa3352a03e15fd2f94825cc6db
b9278b72b764510cf6fa99091415fa403fa866a78c03cf301e55e45806eab420dbeb40aa
115bf8fec634fd59cafaaf63793ee069554f015c47163211669332522ef6f224b7f0b1b0
71558c9c9e8ce498349cc992414009b634a07b449e2504c36e989e294bcdc8ef2d8c910e
ac5a901a9c9d13ad845f5ecd2517f615bef242284a7b190600669662023ef736aad0c3ba
9130450a5aaf0253f1058e0eb4fba3499777d725d2bc55e2f103b3069a831b4dfcd79d36
74d0adf28619bbdec6fbc17e746443975bd6f6e5d3c21189589a4a0d049836f8bdb5354b
4646491a514b3e381b2da5c1f03b99b95e58c5f19b230d95490f9c4a24c4c00ebc4e7937
0ea2622f5903b9380b2e936877406a48fb15d4bfece8695967e628572ae49033a8f19dc1
f140596df37bfab6f788c890e155fb2665e5947b3f3f3d26029065bc3a325636115e462c
de2a2a7d64e0ac9a72150173f10ee82c1afb8ccc2017b33f18cccf01aa621bd15cb03ad3
c49faf6f4c7860707f817bc39ad3fe1ecaa56cb4b9689caa719986f3eb0f001ce8b2b84c
b1ee2bce9b6c5ec347fa474ac4de71090343c80710bcc3fbc6d2fd5528b13f8edc491d5b
de96f266c8e6aaebb7a4dc6523c7a0d3f673313dd261c8eaf81341fe47b01c73fb861851
07701144f337380283048777fee0fa4a2c9abed8418c66e4fef9546c47d9dd14434fd462
ac7d723d39fb26b403e0d44101d6627d337d24949fa29472e12cd8fa700a3d4fbfcb53f7
acb4efc1510338bf0413440c2671ca0b46d903dce649d094f03515dbacc88a55ab40effc
a05e2329f1aab6a9ad7244f939976c000b8c0cffd6c99ec54fa61c3fab1bafa22a675b78
10a63a4c29426ad61c19aa6c1393fbe8b6651d6227bae8a9369ae22aa5581a0dc18bd24a
0742f92e8b301ee7b177e14821e9e6c211c3c3773a28d336f68acd3cc3d7106cb533fd09
974925578123a6213f65111f26282b2c94c3c97c38ee24b62fcb6fac6f7d6be2b04e97ff
096fa967459785cfb3ebc01f1b3cc88c37f33196822b194b29e2a66b20d84d098ede6e85
b736cc8e67bfe1ddcef162d886ae73f14013492e94957a87d8b680ad2ba923b0c63804eb
31536096ca1d288a4b1a2a6dce5c056f0732d88d2f2fd0d59a7e0159ce185c6b3099619f
e6120464627cade0f3c33681fff7b371b59b58f1457bbffd2b8d12a2671e48dabb634a30
c60761714b188d3a3a98bf911a54c596642b81f4e69454dc97984df5574018046d6b9e9b
886d9f0d6836f542b5aa2fe27aa2b663fed8416d142e705705b0106a660a08e2e1363a02
626d6b04123f03214ce0c2c608281cf8f30f3d162d7068c284a4d8c0ec2e0ce2d1d3a61e
a4d6236794e1a1501c48dfea4d3c78e9f1d9a16373ee5e93368e2af23cae239a53365c5c
4f7e9f5a7f645d9328a0a1620ddaf673f9d8d7e1cb095592ac99fc965a1777da7571d1c8
29c51a2e7a2801ea7753c5f84f08d8cbfaa0caac17e11d56e1a225a80632d24ec54b81e0
9ea43d9cccafd1fa52c29f32cee913b903923369f4157ae759a81a8dc038a4a91197500e
1602bbf1ea61912769cc55f91ed8360791e6092deb346fe4aeab7daf3df395dfcda2f5f5
22d0aac72a99c22d81ac27cf8614b6bd1b2fe64ee4035b03afa6d58328700f6cbce346d0
4d435309fe62677d2f990f4beec7e07c64b76dc4a65d9b0fb032cd50c2437680e52d5d49
93c605e3eddbf0991278100c3cf9e0f8a8574f99a65c6d29cec0f2834b165fc7bc3a4ae1
0b27f70cde6457b1d8e89e48e2def5c70268d4f580bd8074d5b27458dcf24b6aba3676b5
ff929834f25ed6cfd3961aed9ce19b657b9b52a58480098dfadc7a635c3a2e73680de32c
a9654f8b50a3d2bbd5ab47cd30f248374dbd3c1b2e09fb42ff006e2bc8c881a7701de89f
62d3d201b7240324a52806553cbd386a22a3ce52e45b2e5d60334e5f90c1be8310acb5b0
31f29f06b00603e06ab8d1c9e14f9252823570eb1886ec2d859d517c14d496b4879c9337
699a43a8c4ae795e664df6e37ea2c9ff91197845392af9fe6d9466f0e1f703ecb150534b
546d8c68b8f05c9936dd34d409eddb7000371df221e0c76235dc17b64bd477e6603274d0
3f0df1d2f11c5cb80c40cac560750754c27a00740d97ed2f3cdc852b2c5296ed90f0673e
8ed2d259cbc82bdcf155fd5c628ffcecae2d0a3297903bd4ab20a46f04d5a2b8c006dae5
92d914770c227f57c9aea660c93d32743c08d783103b428cc26d7ea005edf20d5d14dafa
e1ea9e6cfb43220db0fb242793227e5d42372d462aa87779084fbb3003c9317d22bb1a2b
59679ade6d1403ffc68d8306941ebfbfde0d503fecc745581ac824f1587a6631746a2199
e609c9400318d603791a0201de9177f464345f48883ef4004a2af59f1703462854852e54
c78ef801c90e4d7c6c8682dfd37c7e7ba092c99c21f263320a2febf0ad248c2f3619b686
03bff63a75ebdc38a42c66b8e0a09ffb582cede6fff72e444d67df645fef774f058e92a8
205d3b2e2fa7030486942e75c0159bdb17ac331130f9453d8f197a1815721296a89d6327
ef929764c96dec0d92e26cbdfb6cf762c637a8e7aabf3dbea57f10e5369668475bf60736
66adb692fc859cfbe58c5d1e19cf456eaa3edfa0115a41bccd59a9879cebe93e3cd4010e
229ac03d2700891a13f802a34ee8c95fc28a9be7a05ba2ff6d2e9b38a0172e93154f79d8
43b25b0e69f16676814d13a72d1c5efa7896377b20f2cc4834f935d3a1bc02fa0c79d143
d30b63beebac38b409947182de3b04d1ec31e5f073f066096de6d08fad32e4b0802f8379
0ef7df460936de2191f8e3f7e928e94c0d469c71b9c8148a62c158d7f744f13356c7b755
85900ad08b92c7c21f146389b0eb7352c59dc5fc974c72b88695d89a87ec47d926e3852c
2238873f6debb70c267e2c5b739fba1b9a4f2299b9b2810a3e04453b0cfebb8b0063d478
c0e35cb3cfb2f0aec73e638358a4760e733a5dfcdb75be27f942d482ae22011e1cbb4dd9
da3610a0dd35a18158063c7c18cdcfdd98870f47d764a562ce76e38e83ae8fab1c99aa39
1a3800d9553e487e5b1feaf1cd153e1a8837952741aaba6aa8c5f4e4797cf3f70d8ead16
0ff7b794821b867ae38f83c49d835f3dda055992f0edd682ac74c5bb5e51aeb9118491c4
887b126349fd5e3f2c3064724237c375dcf57675e466151223977a361adb508796d184e8
5c4bfbd0d5e4c67327a8525125a19166758bd6ea9ec59b89eced5f471849b09768b869ce
3e5c730befd57fa6bc9430cfb10aabe8a93f59c699e18d08a8c0e1a18295de9e22e48029
1ade99d30e99372341341b92d1d1d2eb13f8a84d133ad511b983da09db5fd7c42fbad152
3220a13efcd18138cda4369c9833c741b3c106f6d63d25e2db05df7ca8856a503c8f67af
84df36ae38f6d448d6bf18cf7e1f86f37701898f16a36aade1b58e4b7c570a478b94bb36
ab6a8b8e9db876551c92fbd00034d64d885d6d78795835c6f75666c0cb9d81908367b111
ea8cd7538a74709bebe01896dac5825aa1cdc14b522971f355f369db40015699b0f4d0c2
d7324d059dacb4a68fe3d47d30f31dfe671b8179dda32298ce7ac7150f201c2d54491777
a8b4853f3cd10b3c89d41da44bbb2fc9c28cef67158cc2a72d54b7f0f0abab74415867d9
ea60e4c95d4553e6eff4040cd1f4341b349239cf0f0e8ca1fae37f55b83f19866ae83aca
a9de5285eea95b7152f640423c8dd3a206d0c60aed2d17f945e04674cfb6532c2c7591be
91884cf11952472d0e74f946dbcbbc68d7a0dece34fcc4a06d79a91024c109c2d58b92b6
a3a4cbd56ccc6d9ae3e22bbef10f9c2fb8f2e94a4668a064a4025e9bc9e403a0c10e832c
12c2882b67780906a46a09f6fc7a1781d3762ec4b02d3e1f3d5aa194555859ccf3471a43
3cd6dd7a6bd9071a0e755d9ae8a366fed0fb2d0dfa08a03c23f05ab60c96c108694876bf
af17a6cb7c0dac467990be06a09eb9652a6e08fd758c90dce24af84dffa5e09768fa90b4
9ba4549c17b508d4f645ab9e2906a781c5b44b2a26f2cdd64cfd176ad9c78fb1b1087816
f7be277d968369078b6723eb366085041cd5f384b4b60faba408bae18fb0c1fd55b5c2ed
fe33eb7bc85b784afcd0c14ce92614a63aa31a842932035634e8ae6952fce886bec1c6f9
fa6bc3024961ff9cfc1b8ea76666e81cf02490202999c0b079be4b4c9c72c8a256b5d7bc
7de1462a60f93e1557f39fb764b31fb4728e3315686b82d872ce4b5aab74da2c5e18fb68
3d5af3b17bdab5038947c3b79261d479458c3efa6dde9e6a1880ce9669f3e8dcbe880186
41d12807136ac74745a3d851d86c8d7e68c1c80df47a511e5fd6f675ac366a8684b18840
b37f175cd41143f605da95c3f3a929e6ec791b1f1dc2b58c9523f6260dac9a1e0b1e800d
e9d88d1f87ea8e471ec5f5fcfdfc90a172af99a3ed03639b0c23096df4b2993659bd1d1d
737f36e3fb7acf82c9129c2d341d46f05f8e07037fda13eceb1efc26656d2d518c9b74be
ec34d7c4f2eb23a409130f09de994c9e87286ef7e5c68df3bd3b025a1053ce0288fa777f
a985db67804da03701ccdf6493b2212da9bba3419daf139097faa0f5ec74f91ac48cf0fb
069bdcbd8eeddf53d590c08a538a01e799dae466845e9ce6416aa5e0cb44179afa20e53b
83ab46edd018cefb2da418d93f8f3ddb9dac8b2fcd515d22c3e731299c54a8e42d4ea9d4
ce86e4451097848ef81185697b4754f30b7a320dccf0da1af37b0e49b6b2bca7fd4c2ad9
5ee2a76498d1f88df3d65b70b91aae5ad5a74624efb7072bcd6a678c7c83efe2d66e453e
ca653e0ff0b9214163e5b5174fe486be843eaef8bb64b260e8e4354389425856d69dee28
e0dae89ae43bae920cd86a3bd1b80e31ebf60150c71dbd9bff9483d356c021f855bc3e77
a76c9cde8a6715346cf870e26acf5a6c9f1d3a9d42f1b4039b057d09746b504e50c892d0
a5a142962b78ee79e9ba2f40ded55bc0adafee60847d6124f881ff0f94332acce42e193a
6866eae37b55568bbef6cc1b311e098c7b39141e18a4c1bef7f37daca2a654a644995ca7
83145b6d11e03fdc2adb20e201f2aeed30b765aa120b4bbd198c7dada6ae732fc51e58aa
8ac070dca116b217df315881db7874e5e6589c9db63cac73b460f2742ef0d9bb1c8ce0b8
406549c6704a51d2c662a08a551669b05aa90918afbf71604dcbd68702d7e2a3a2efd51a
8790f1fa86c567bc7f2632d97272497ffcdefed8b8694c27c6b7dca3a0b385baea68e5ff
90bea35c67d8746416496c48d1a0c9397e02d441f2e14e0f4e236e46ffef9ffb7b7d1743
570fad7b7441427d91bcfe595e8eac13bbe75e93d4e8eba841eeb10eb5eba7f3bd4c2039
6bc88b7dad9e707236c1e833a6a84dac95f44f0efdc093e6019d8f1043d3dbd9ae0e7f35
152bda974e56f2f9e92aa7bb35a7bf2261bc6890716012cb6f7fed0d93f5e13e4e79040e
6a1d2f595c6ee2bb5d01e94ffe35f2387e5752328dcb388ea4e9421c5ca9fc3259b630a8
429af636d1bff53c2281a28c1d9dc4a00d26d294fe86018845f8a14d3585585a246df15c
86100be8d997c146101ba2f9d1fa63667c90f1443b9562760169c78cad568bde392e04ee
507d02bdb5ccc72afb62ac1e01cacf92683253e9aa48310e12671a598a9091008ecbdcc8
e9868979d029931c0cc7143d992cd6319befe83f2e5538f4f1af24a5f0fb008acbd0e84f
2157adde7363bc8e6b6fad3780bcf00d34021080d3ca84d091ae37fbbd70b30a15a576fb
470318ebccc94c951573804855b78fec105d0eaff4403eb426fe32cc1c391fcc01b18166
59f4cb9290d0ed142bd4a025f93d29f20d2d341306f9e96d0db6692c3d375f62fa97b99b
18e776c5938d01aff2fbb0bde141b668223fc8e1897100e516cc8f144976c58abda9fe14
16c427cd01abd14615986e54169647f2a2bc1cd4c5ae2e41e206cdf6338002d5c09a34d2
de8f2db037afaf509bfe42046e71b78a1dfb39ca5caee9894f18bbc04f3f42ccbc569fe3
483b1e9dd2d8f9bfc3c60b13f33d327bb747427a7be608c995dbc8bd892035961deea087
25696166db097312c62272dec14c1a922c9c8ddf89af7c18310258d7692ac435388119ee
70b81cb3f790be1f43c171db97415e1c5ac8ecca42eaa33c40410a37c2e436c72d96f08f
ad0f197db8f12886507a384658e26b58b8fba4fe72eaf7853ed78cbfdc2904ef64680db1
377e88cdb6d644a31bb0b56754e1fb8088277c0d7b59ac4ef4e62dac0657a6f22d1d0512
b71944c3d189f338cad8267a46f9f780e37558023f0498cade32f1d3c95f704300087be5
3a4b9c31025f43cdcf15d0bf7414fadae63eec93e58bb3beca7b2c4e830c9328c9354015
b391c3210a0621b65c72d4e8019111cce21ac826387ceaacbec7a3379ae559a9dc0d83d8
039d078c8028217ccdeca4e1ab7eb9b3fb7b483f194564f663d885f0372aaf90f3d8020d
fc957dc4a93579b2d321fd9d070a6eda53d6840c0b8eeb589ccf953853714d1c8c1d9abb
eefa0e11adeb9d67ee519e56410281adf627dc50ee697d951885a70ce11d407a49e25ef6
faff02712ac60a25f07c602d969a71e0d8398a0089cae65a90eb8b6980134426f19e10c7
fe6d8d18cfccf8a558089f7703adc699e8aca7453b5cb7db0d907ba91ed31488c05d3c68
51f0f131e212289b5471f880864344a26810dc8a46a735de64365b247a0500d6a81d2a28
2465c1710efa7c041de4c74cc9c829c038df759ebfc5c6b47d9d7eaf3893a26f1b4ed5ce
0df4521e311b8d85b98a9621870ae2a4a2869c7dbc1fc98a8e78d3fdd125007463aca39c
adb8aa19860233ec0e6e50e26e5fc06617f7e37cbb81b9a3c546dbfc2385329b006b78b1
fc36ccedb1627c5f290501db13497fd109f45c6925150ac7808816593e5e3f92ccacbc8b
64cd46b82013eed770879dbf7b5ca9afc34f61e360b5a565fa777c337b30ee88040b480f
bb0d66306f7afa816f90625ca5c661f991a320684fa65c97a05fdc1df5de19824f896639
c33b553f2c380f4aee08249ea8a93169941534b136c622c72493eac79c62b2dec49ebfe7
aba846a92e0703e46cb17afd4633799e1acf40de5ee30e0db5a4f4873237d597e8013857
c44e50a4e6c448f020b4994b41cd0d22155476abce4464e21689d0494c02cca078457f57
cbb9e11b03921b0e26306a86f09879a818f0e29f73bb4deaa3e63754ee333e0a50c3e2e1
21e3284c14b922f0f43049c2ff5b690e21239fca2a2fe64dc925e78fc5ce15b9b1947776
083fa0e419cf1f555b82e07dc53583c69d08ae5bfb0682b51d8c3e7a593c12cbc35ee40c
537578f2702d64d39919f5e84c5ddc85a345498ae70f8bbc3a89d823b4b0afa9a96d0462
2308decfabd5372c8e651d3264355a97227cbf7ccf74b27916db97b5e643132ef63ab8ba
77096920b3ed2a96bef91a2579b89a1155ebbcbe3a2ee555d93ba97f3cfcf577b671a12b
4da2d23433ed7a8e8d925227b246c45c26c155c4899657a5e7b30f6ddf0721f0ccecc694
fedbfe8006461502efbf6f7f0e164502324a14cb995ffe82f2a5d29793f985e79a23a427
92c043e13be55d1926f2ea015e2729fad82a2bdd6b69b8e1264378f2d6388a73cb9ee3fe
1dfb094dcbfc2650580a3d37a481ffb7ccb88e0c99da74fe6a7b677f3f9bf351aa3917e4
7027197e12e2f9e2335d25389df21423fe5a2ed8922f999670a80a5acf84e789b630e57a
a57fec398cac7dac710a85aa98b2ca2e9b21c9882d8815bcc7176a460c2a8ad1807a5356
2211c121e878d08bd9fb54e4bf69496923347ffbe0b6797eeacc4e4a77b5674c9b3f191c
24ce82fe0401fd29cd2a9a9aab60c25fa4f92b4ce90f6f8556627c666ae1791fe65cbd15
ec7d380eb19c2cf3e6434c5d45df64721b509791f1de6896eac42f2b214b5560354dabfe
7b017e1b0b5af8d8ef532a200b8beef7c82f9e61f9f12ae13fb0210c9ab412493157b298
0b67a4a9b660ab18b719f08221c49c4bb9b8398154218441da400d34da6261ee1e36ce73
8109e8c8c64d3bac2a801d9272d72a1d363be6c757b446fb1fe4758b2f18c7134e2ba85b
a3a2b6f747840f6812f0f8281de9d10f73051c2fe57367a0974950ae395c5462cc7453d2
91528f5feb1bb3476a7170fb9badab503e3e21315baaae3f296a496a8ce9f5f9985d1144
50da502637f7df6cf08e198d4ce413f5e086078865cc1685e086c184f5721dfdc06e7075
49df4e793da5297d9adbf175f0a68c7c2d3ac7cc3f3ab4c3cf104036ca5bb9a2463f5253
728c9ccb30341c1d7fd802c29d515f07bc8e8c64042227efdacbfdfa17cd6a887ac378f5
2027f343407bcb0c99ae6d42d02213218f1b1a6f56fbe0184036a58bdbbe3f39f71b3767
75b164a19f314d802f76d7aba0ac25e74f4894f6bfdc44601c3412ad2e0ea558f27e61a9
419bfa1b54dad8b52806eb825e00f569612430002519c651a58d83b5d2ed632474be0117
dfb55ca31723aef09e3ffbb841d6e022b7f2bae588e557430facd0f63b09148b62eeb577
9e29f5e2ecb96d73b104a3a14aa421a488fe84c5be324ad8aafafec1cce6028862e1acf7
b31f4514a21770f3eeff620bb45f3f626f75450d9c9a2a795d846ce377dd845788bd5978
45887a9ee992c1280a2e2fd2c5a56b1bf51620b267f948db44c3b418bf4e781b7ce15295
8072356c2d65ac4dfd6dbc3e2892fb07f98d02bee0354e55ce0d72b17dd6fcdd6115213d
4173c2697a9343174d58c5b22df516e4ca99d0cbfede3205f9ca90465f3b627c66882145
7d47b3a86b4b022060e1c2c60137532d1e7ab2695efe9d96f247fc5455c49cf3470d9f14
93b7df0d9c4fdab3226da1c73b6eab6d58ff4443063993d4df926c44641f5bba043a58ca
c9ffa1236f7ca19ca738b9b0ee767daa26f2808b50dcfd91caaa1fb95a46c69d05933914
f7e5a178e0edff3a97045c2cf8bb915c30337cdba5771e86ce9cbc3749a630f1c931c8df
c6552f5087c2b7eeb664a7ebcfa7511814b1bfa310de3b1dd99a3059abac31ea40e89272
4bba8073fb3275118d529f5d36b457abdac36de41b6ff48e8925f72b74653d793662d502
41eb858b16e506bde02bf871f1ab18e444c1a46ff63648529c8ea8aed71712c2485dca79
3be9983ded15244b0e3b4c5359881505711f7a395e7c291044c991a9822150da5d6ae88e
960d4a59ad256b46a2c45406dd9f7de19dd5b296c471c1eeccc74fcd5167412682b8f6d9
e9a08c3d09f315f1c9ba9131b45ae298b7177ffa199f30f10d3311e5944a091792096d8b
e1e7a9c8b8504a8c06249554962a523e63279fbcd3ee6a1d5f67f24cb09cca5ac03ff423
379542f798a23921e97230bae2245e2e6585970ff93a6a34be7d9325eebdf51d1894f8e9
fec3106bc40d4a64cc171a1db1d44c1a3f5c7483e750f27443eaa13d19a3e450b9507bc1
75336ef0a5a8e6f9a613fae5e18d51b6a9e82f055298404c87c5e9dba3c5f91177b708a5
3eb3ec9c63d3f2133e68629dc3b50cd5aefff1e42c9c7bcd24a729a12dfe35678c43fb47
0e39966202d735e82e3a512387261a3524db2aec3c79225f03e3b411a80763224bb77c44
92bc7411daafb680b347422c65c9eeeacfae2b5cf1e32bc75c50f81be4661a0aeb36346b
e3e7fb4f70216bd99a1bd8f02a8662e297cd2905e37b14eb05e03639460252fd62de8b8d
367411c2564d833bb8f833b00c0fa09580a78e718aa8b842ecbef525a0c98725d2569091
82cf4c7fd7ed9cec3d7b137c6ba124c6944eb6bc4fa902930b4bb23f25b63a8dcc65d51e
f68bb48cde56ab6cecdb472bda8a9c64188eb99de00cba531e954c2da2ad66f67cd1edb0
f49f58a0f18a8f5ada5613900f1f1de2b5cc77753889f593e322362b52a1e4a08d95543a
77bd6421391f984de33ee68f6874ddccca2bc64dba83dcee63df7fedfa4b6e659fd58aed
defa70cb4396a284a249d6d0b330aebec666e91f4bc68a8b123b4fcdf5151c685d3403d9
af42415a5ae5bda2e3f3f29b9aec83c1a481dedd75913744261a6ed69b5d40d3ef36c239
07eff94869684a9a34ec1f4558f231d32e4796c06a15663852e9e1ca67295f4931631411
08e24f24242dfc854bd2fa3e58af077ab0aa394a212512ca758ab82a6ddfc628e91b7e55
a5f33ee15f3eec9d71db0311cefa0811e24ac4a1ccd508bcfda35b4b39d4716feae6e2d5
7c0e136ac107f39bd9705e6522b9b2dd05a716c2f45db85da7dca78fa75bc00d2ce91aa9
45f6f12e2e27fde445c980e1f5ddd1eebb594ccddfc73a4fe78955352c871ba079925a9c
84957f9713cefe597ce511f8e187b404af85c2c741c9fc8fb0215651d783eeef39a39840
cc9700df5915232d03211e22c791cf37e71ee529eb0bf65ad92db60c50aed436fc08913c
231b34c741a296ca9f9133a53ef71c93263c687e2e61a8cccc21a23980d811990fc5d599
f76225f2c996973a64e13aa97c84d5b348e67b53b2ee22cecaac7217e46d556a4dda0c4a
1311123eeff4d8dc4088f0879db4119f203828bda1d65452aaeb6d478c303cd972ea2ac2
d8c49d939957a85f828c4a8461e32289105771bff59f8fc8a1997d2b6dcbe8332d4f431e
bacc669c3f392920c174f20db8dbc9216b73ac5f3d854adff26a24b3716fab80e7c63a80
b48b43e5942162bcd86b3d9ebb69965818a1d408c0afef28711f064cb12e31c53da412fe
d899635fc059227ffed7e263397f0be99dc9b8f83683af7a608e951b040ce82b02cae369
2484d1428e6d9c22086fa5b9f64c846d6d22125a9a7c30d14e7383e6fccf331db352468a
bbf37836891ab643b98ee789b33c4af24f6c381b064ddfc6dba6b940ec7a43d1182fe761
287ab214bc1a168a17b1a270e63e0b6e2b3d488b11e9f8250eef194213c992b450e11060
c73ee99867e9f9d89e6909ba1e30fd3d74137f82dab1ab2e8456aa71d8f5bafb78525a35
8fd4f284a762c46f1fb3e6bb7e72b67d7fae4afb0c00f66da598bd8beb8b8db49420042b
653b94e7d742c1fc0eb87417be7efc9408f6fe847d7d668efbbdeeebcb88262bf0b787c9
0d7c9a3fbe3337488e1cf0089cab35f863a12cd79f592ec795b7aa817cbefb91e6337a78
5025bf092af8c2efbcfe1f10dd340c4da8e19ebcaedb8a0148f52367a40fcfe329907154
c6857e2327f7bf58d4e44e782474d08f12287084dc63568d4e04b91a8716cf8d67287816
1d272e9a4759a83f5c8789b185be4daa19aed200df4b8fd150cf852589df67bdb17e9e69
46eb32f0c2a96f7bd1d44acf708db10c071076af86c194072d197b19796c3c08e21aaceb
dfe356eff8468c8360283cc36a84cb88a313ea1c7058533fbda70e754192c0033a7a863e
4747c93cfaff82866af86fc7dc84c8fee8e7f969b4d54602828dc61b62a380df7b2e9b73
accb75dadb2c62c12fe25ce3209ad74d06204882971c44b0dcc1bd8f0ce047bec918b960
afabf249d6d5558c4af13f44e00351a485b760aa2257a362b6b3689955a4261827c22d5b
1d110f54c1f675eef891a66afaec5b6e875e6200dac27c66f618d942c4ec460fbd8cdb80
1f80174d3f44f2a3b5e17435244eb12dd90b5ec0d4428054102cba7b04d0c875dfbd3f4e
a0283d6a1d2b94444d039d6c2d55ba3b6ca9f9f729506b03aa397c6fa0d6612ecfb72e6f
ee995b992f336d81561eb923a662ac35a870aac7e434f397e91e2dc3e50de6008efdc8c3
36ec8a73ed167c26f71a60bff3de550f627e82c28a06fa116741d54a2867337e2d24b5eb
08d69d0c67b849b38b40dd1b906e2b88ae0f5ab90b105731d5d50a90c089e4ab7a2c4b4d
ea8996c6794ad95f6a05c8895b8e1f561666b8b64633eadbd6c7f08eb4fb74a68e33cd9c
b2e9fe014da0d26e7d7ecf606814368027582960ab35f32255fa5cd788d18e8dab230015
b27090b9a9b412758f39930dd66b25c37796aec7ef2808fcaaf011d99b973fbad37017cb
aa15bf03dd158c9333238c9353562a2b7af75b45dced2a388f60d4e0d9ac5ebef7273110
8dc75fc40c80bf199d97ced820ab71b77b8f106f03fc0352f749eb7854bb834f1ba97041
f996dd9eece7bbd120d475a8e6f96c0b62128b04eb0d656b906fe4a55de792b7fced7250
28a20be121031d0d59903e1d2a033f7ac6a7f6c2eee559b02bff114207e97a3f7d9016e4
8f12935de412001eb484af5fa0344779f95ea964942bfb25975ec65b0d316371ca92cea8
c5ff12f3fe1040871fe08bf5afa2b58c4dd7d3406e4561f8d01826f4a844f6c73e739e0a
8dcbad5377eb06efc234037b3757eff46b65c935ac67bbdcdbd48bf1dfd10ab95b61979e
86f68890b24731141a70628faa916887eb00a0b2a83c293aa30b32f66917951614794f28
7a554c7384a431f57dfbfa1723643b45cde8b74b73d104b5e53dc292511b8d8b6de95ce7
ba35b37fccfb44625978d2a308e33ed36baca52e7c79cb16aeafc10189ce39581f64bc95
00357e7635b8f010df327a98dd445707e3d8b298b1ca728f64974542bc457dc7049ad057
88d4dbe0a639a73e53edbd66cdc905f5575184eb621827552bc5e29657587ad0c98f0548
28e21a8e1652fb0e219a43c17514b548fa956cb6b76d0ebc69d1b4f536ee16c31ef89e22
cb22316c21aec05658b798510862c13ed5779904f1bada2c97090cbf7238a023fe61aea9
99ddf24e47bd71d95b5421af863e2393c54654a6ca7c2f440824d44276fce6d66e89d8e0
6f0453a84aac6b2c4327edd8c097b1b0730bfa1c9c5dde52b5661d335d8f02e4be893cb0
2b1732f47528f6ed5088d29803a21d6270dea3273cc3debfa781581dfd1ff6afb9714354
bf14f3257ec120c5fbb59808af7688cadc241e6a6e4d361f46fdf61976d90b58dc6f32fc
bd85af4a013f66a3cd7ca5df59da0c6e066bbf8dd633ec6e1e4efc5fbfa558e9f7920539
44e0324a08846d7ec93d4835b2c5cbe7178ce022927140bc8b2bff2d4ed15202d5c30e80
3b900c2ffc77529a99bff3c483b98f182d751ce9fc1258286757871092b3e90be7ed2cc3
cc709efb5250972060502fe52ee9e7cc3c772fd80f85702b967cc4cdbef6137d0e50ea55
d055aa69f7411fbf6a741f1adea128c04e27d40f695bf8c244f7fd6a6fa1104179f0658e
f654bb03d399dd143eca69fa002cf0e73688fac1ae1126c1a38f0059e8c70f009bdffd40
17a5a2955d66a5a721f15854b1507ce719ad38d118413a06dd5c1afefac978c8c8f8a4fb
e458f444a3191fc48c35eb91e46206c756ced17b162a464f9a868cffe13f36287cde45ff
8dc971854130a17ae0e2f08fc504ae5069d7598bbf48025db138de6cce491256b4b8bf0a
c75e56522eba0a197510c284a8911d049246cd1f248d87244406bbe4e296b2e9f741dd08
a137309b0b0db89b62aede2871bead52fac367dc1e07605e8aaf45a6237fb9dacf67c6a3
70d99d9e11a43288237cbbd5b75d7b29392fc1975675e5b9861ab626f8ae3264ff1cc245
e3b242afec17b738018bb889cb5d5854336417424c5a621e6228960fa3de873a536d344f
e0e73ce75b397e97307273785f162f12937e1c766d3ac20d005a8704800546eed0dfa764
12a7e4310a84fe1524b017c4f85742a205569fdfee149990f1d47bcfc337913590bdee05
a107dd06c8a775c00cbc2171c9c35f534f9c0f7fb97ea5e631d24678e2e7f67350d746d1
0aecfbd6fb7d58be855ec3b82ead71749b123ee510bd14319bafee46227b7fc81ec14db1
df1c3829eaf02b66eb33a2f7852180a8f3cddff003e00b3f0e0bc58f3187872fabb8f4ec
1d3a072e8101b5e91e088d4371fa3147f52f6a500725fbb2dd86ec95f2463a1b41c34c9e
146e3397ecf905a5f23527fa4f505662f01e982a07e71ff290092b93708bde9b15745f55
e5690e999ea7ebbadd7fa40f0eaff880d61e4ad9257d6cb55748ff748de57c7697dd8ea3
9991c188cd15dba14934ef5edd0c15a9ecd32a5cb575924e54c0ee77688bcd70b6d56a8f
5e4e64c6a4f01381502787b46eda79dae6e9ff267b9a4c2661b613296c80699857ce2b73
5a16888395516578700fde0eae4f76ce769e1e52e9af72dbf68ee5bb08d033ad0448d86d
eeb895ac4f41302b01313ca8b7e19f5d0c9e253cc75478e7806259089ebcb79a84dd07e9
56c7b71c3beac0671daf0e5b12345b85d06a7a9b749a02f1205e28bfdb7556003b781979
8daad4198aec806760a7165aaf6e0fdd42da24d1c911945294f29e0563c6f51820c63919
a027b6d10bc5cac5d0e83071a69591a7428adf669cb22e166649998881a70e6e0505e5cc
905b3e5a7c39d8ca72e631eb7657652f5c18b450dbfe8234e03c1789905f5aa215c3ffc9
d5ac70a0c9e09ac6ba59ebbcb3e3ed7fc5b6e606b42546bbfb28b43deb78568a45610ffa
e26db730dca59d5deb8f9e0b0a1bb354ed9af94c277c92eed3d3a60c07d3242a13a5082e
cc12534a7fb80406752b4997b6ad57aa97377dc7bbc7aa789ef770d221180e80ecc6ea91
d863471d0b2390b89e40231c2add1a50d8043314ca5c20e9b3a0571fb36450210f4a1e37
d0a3af38fa39b32c707549bbc48d131624073b10edb67928d70a590ddfc33fa4888fa437
e505f7f8eb00d9d75a48fbc4b95312c52a62b676e72711ccd4e4800030a900ad20424b71
a639a402c5ec983381e4e9e3448996748519cc162a0ad96ed08558c291ec1ba0b05d1a1a
ef32d2c6d8d6e0508bd3e9fca891b237c1c5d34b03033072429d30f94e158e4e7094b0be
77201a3041409747dd8989937e8d88f306ad246045ec4ce1c3d6d0288cd5256e16bb6fb5
cbf7d2b035ae3ce2e0886179b5b7b986bb36f34e277ae0df26dc4a73cb2e4e8d2461885b
d330dd249a64393b20ac2137a47b8c10460468b7170a3edc8dab208fb62250488c68eca3
60475b276b909a239488b3372df9ba5e086edcfa878d29e848b57ff27a7ddeef61720c66
448d4b34114263b23cb92f68afa46f7e9b6adbfc17f417ec8a432ce6d7c3fb837c497649
0805fd421920fc2898e971e14a33a02aa1ce7361add2b44ad245f457f6e0b6ecc2636c81
4767194280a3f46dd2b931624468f8ba8fbf24ee28d899d2297c22afc410979d61aaffc6
66db1f042c6c175f5b88460481239390d27f5386d7f39f298e59f6e02133d1b76cafaa45
95f3ae2b86f44198247b5a204e645ae901518fbe4230a9a10894bc17cf3fd7147ae90023
b08b7589daf825a1b8b75ee0230074000bd14707d372e717ecd56ae4acd32f7b2678e988
9607c9d0253a3544086a29f83b675f0f7fd55f08d7325c5a4930a709957cd32c942c4718
137037e737c9588b6197bc48743afb2c76982712d20162454161722946d71d9a8ec1c120
788b8d4dedcfe345267dbe236e389300179d10841c33c3e810eff175887e1bdc20a63340
563facaa166181d92405eeaea5da82088f103f13437ba2d0359c373759e56b4204924e44
7af24f5948f34f6c583fbddb134621f4a35ea3438200e6b5c4a7720d6d6002af80e634c8
6ceee024fd1f8d2938c4096c7d1a839b911df8ec61581a7a9ff1a0423777f48749fac37c
c68f05ad1d69e72ded61baf84df90004946cab253c738f0988faa69a6b43429fa32a5589
70392215a608d48302a773c9b7a4f67ca13df1a03d9cadf6169b43f63885a3e5cab9100b
e0bd59125cedaa7f0cd623ec62d975ea7f67c3a9d56b6b37f45fce690c15c5dd695251b2
dfd15d5e2bdb1a409f5166a9520a2054bdc7ed75217cd56977624506b8e0cbc7fc5dd8f3
14e30bae38ceade32e177e5830cfc5cbb84157122519b28a30428b585f05c9e4431a4e7c
463d19c91f1d04a56ec2dbd531cbde5ef510905c998af70e55c9b534bb3780b99903fd7b
940ed34aeeccc32414c367a09b287ab29b29ba0baffc07a6f7a38db36ff151554281921e
404aa2a9ed08b1c03b6b42556d0f727d134de7d634694dde2257f414f72326f269da5b8c
cf496a3a35b23a8761adcb28890fcbc0cf2899993299a6062961fe06ef5303d049e4d4ba
06148563cd72e9c97984a856763fdaf2bbf86a1c140f534592f5ef1d1359ef227871ad79
753472c7b5f97059c0ce9d6a2614c3934c8ea95a48f040d3c8733861a8ae4d2d56321c54
5ab2e803f43bb9141985859c56d680d3e5f1144819d237ca8f3a734b8d972443140aa001
5ed9eed950515dedf163bdef1d4f3d880db8c122903866649502b95d4dccd28c388c13af
fca8f33c3c0017707f2c55d79b6cb99792942de6643d64ce97f4c62c55d9c3cfde0cda90
40ec6a65289ca3253b9595eb1ce7ee00be23d89f4bcf77093a96e69a910ab1964fec5e8a
6258fd70f2a3264b17f368638f87efabe2b8f823ea872c6985eb667968ebc923efa0ada2
34afd7c259b224fdced7ed283bdb4aeaa4678edcc1161ff887d3b1e8163a68e99695240b
0cc5e4878f412c31651b55c01d5294199a4cf74ffcd0ecd6142f2c90b94976c51f8ac034
c9d6f66a9d05565144facf930c0ee53c937c194cff79ea779306039c7c29cb82dc91cbb3
324b8085ba3d28fbd7fc50627ecd89a75850d1ca3f72684021511a655437997afb446e55
995b6c091d38517e9137f7a49a5c9c56fb011d5830638efade866faac0ca9f0831783086
5a0c34bb7e4ac2c00cf4dd26c0985b51a3a9ab1c3dfa77ec69e5f7f39e661ddbd28bb5bb
d5600dadf9037b498f25512709942e973fe31543c3c8c99e9e5f61828d0e05edc64f7c2a
060a1f838b522886cf32b6d2645fbfe663184be4fec1a8db407b708672ae74e4c25e8806
5515ca2f39d0735f4cc1205f3963c1aa94f2591e567f0f1cc364508f0c254ab5ac4128da
30127e939bffacdd7b75512b81c323d07690680398156ad2c8719e66abf6bf8b3d0ef004
27718900cb957edc0aeb4909a2ea589d6922f84dae6980b6e52ce959a3fd15159ec6a52f
4c32c9912599cbd74e0eabc98aff16c20be8f459907dbb87147c5ab8ebf8f488353f77ae
743645a39049f95b5244bab3ba24a282bab48cd070de7b59197c0793c1b91cd900e51eda
75cf19d09e472a91de7fedf407b50a612ced5b0bd600e7e3aaea92308f0c28a34eaf23cf
3f0aaa6b9edaf035e18a42c44caa4a827284b53219d65170c8f84d89838c364e86e7a6ef
316e74db5b3555333c888f0873f91bd92d2dc5bcfc17da02a46afd30b620c976a40b1cd8
9d07f82ec8fe1d222822692d90fd78ffa7c2921480358a6351b1caec9fd1d96814a7cbfc
a3846cec9833a46961cada5d04107658451d05d9b7819828bea4900d185750bfbdfcacf7
ac9078f7e41a1217d3977f04a1cd3c30155ce6b096429afbcc3243dec1fca342235d000c
b42bf38659de4abf314af781497ed2b5ccefdc749d0c7aa0e2f2d10b91b4c707c909837b
c538902d9eccd50c7633cd1e4cd94867dcedc4e03dfffb68e8bda3893257e3e28979441a
894a63edd488218a09d8fbadc889d5ea82732cdff84ded7049eea407bf3a6a22934c1078
682530c1dfc1f91a8b14a148fd156084db46949f05244980cb85f9b15f398b8e1a08f7fa
752ea10b181db9b18232d5e2ab8db74cac712ea35a4cbef76b0bee99a6ca605be0746eab
1f652132c70cd4e887963fcc758a3db8f835d94ef0b4b1c1a1d1ff05aaf3bd4df071c29f
674558624ac14615e1a1d4235a2171d2e26fe176bf7b4deec246e085ce495574a4ee3e21
4fc1e9b5ba411ddd0c5d0aaa1f451b90d037222752a75304a910801c27b2867f57ba9e4b
33c9025417389ce307c14547b5972f458aad676135954af7945ace0125a2542dd1a13fc9
7bbcca3e5f951a056c6affd10a92cc6f9061ac24f1119bb35ace4c4e28575e9ec83fbb27
5c8819699ed742a1850fdc80e3d7719bf8d31be026428ac2dde9e716c1723fc3b1e0e528
a9342c20c88c6f6ae9479c6e654b4a27a34b0ed534b00b46f07dae8d884d4f399bbd74fe
f773441a0ffb88bd9c6d9589cacaaeb7276a9cdb4e74649ab06cdb5d5d0d60aa6527f75b
2ae9ca767364f55506c119625807ab7321aa5ffd868bbba4eb17a6724d131a350dec1e5a
f07699601fe28e183faf99a15c7107e21a7531bd74a73a284c0a672d0eadf78cd8d8c151
bfb0c4df348ffed1476564ab04953885ee30c5a70282ff9fdf8824f558976695df33c5fb
e369fe260e773e4fe1d26096ba6861596fdfb7331fad40b1229c3e8a5f686473adec504f
b494950bc806d50fa6991db66db13e437096deb5ec0ed6fdb142e76e80532901ed1fb50c
830c28d1a82c432319ef825f0b8f3f4794e5119f351f45fd99578b80a246ef31d1816e2c
8be09074de0fc00ecbf8bdeb12b00164cf1202c6eda3b561c44ee1e968986aca25f5a9aa
8c216dcdb597d73721dcfd36b50bcaa47d36f69276d894956dc41204295b2114de4112a8
c57d7866ba994034e33fc68cd784613f533b94c46d98277c964e0233c989ac6e6002c6d2
064cb80c1f9bc5c8bf0b6797bb9473fa68afd079719d56b1a083aa3e262c2f270e1600e5
326c9601d1f0a995f2c4d5fb9cb6f763b6bc5ced0e84c0cbbb903f5ef5d63b9c3b991767
8679601d1cfb51174b5ff0021d81592e83b685caa4fe7c11602c89c331c5fcf4bbe74d8a
0f50cf1c37eab7dce8e164eefe7c0447cde73d5b87c9496d1647e9d7a6bc4e757bec7831
579eee5b80a22056b0a8d24e0169d3bcac3c1150c89e44ac019cb0a362ff4ace3a37ea9f
0c7f6b2157db9fb5f237b08a8401f6985bc630902edb41455114412e0523bf63d30ac02b
a9c30cd0f571dd064ba49c1f0a6f6d198973fda9dfe546b1b3edaa3c0b47b713fda68ba3
49c5b0e10834e04df0d29c8a57f42367857f7f91f73d1fcaa9b958fad1ae27a1fa966469
2ec9a03647adef08aaa45f7510e99fb20910095f6da5a7225aebbb7bf115369213f5aa33
9c5d3fba42adea944b82383b18319d35a38493953f41bc94fb65be63e032cecf031aad6c
52900d298d291d985d94b1cfe11ae4b70e889edcdd034d2bee3b43dc8846bc9f19e4fdff
7c8f0c1d4611e93c149cc8fa9a20da42ac6319911c77412e52265a62acc2528a592e3491
044fc6e08f14bc7bfe5683d7ed9fcf79e07adac47b25994f0711c7543ee98f2d26efa321
350db4b8ae126eb54fb4b5e24ed80a0c4df8ae6396963d02b3f56720ba0f2697abf41788
5118edbcccd8afdc62e96a9e1886e4577a17266699b81979c251161e7f207b87a57aa556
83b2ab47fc565812e3ff65e0919a1c2b1ba8bc1d549f876a3f6de7863df3b9ff82919693
47e962099340812b285c37dd1e7f475b7dc2ddbf735cf5e6e81de5a4a640a9be68af2ed8
1216451ad58fa0e34c1c7cffddd873d15e77665e35e17c58639781d23491dac2c3bb1b8d
005e49a02e12f5e72ef3630a01cc17a362e492d31cbdb6792a40e6bddcf338ee7cc9054b
54b4b54174672a6e8361b0176fee967446881faa951d64004b85ef5dd0cf8382de4a36fd
b71877b0b0a79a1d386532c19a634911855f3886a51100cbed33e5310b3b1fb80f337599
82b77700e23aca95c370d7ed606bca2b9c4e581f53b7c5651afb0708fb6d4e0ed7397579
4b74e4bb771147080e959c2344ead64ce268c96ecaef39cf7ff308741733e8f744fd7df6
2fff851b9cd900aa571f0aee914cd13be4471dcd9bf0b4a9e52718c786d3391b6f480d92
5090dd2b6d78ca7074b8b1b46b320a2dd72ae47053af976e6b2651092b39c6c7136e2789
f9de991ef328a265978045ce536a3cbb7052862c8acbe63cab1e029d1bdd457b5b6839a2
fa6eafb86176d33f0acf2786491edb98a0ba760cadc3aefcf4d96b9ad9cf6811de45b99f
a506ea411e265932bffeabae6b6fe400ba66ef7fe47bd00f5484f54e733111e9012f044c
396213aca5a62b6898dcb740dfb204c935c8800098d3d970415e9564c4106672289a2197
381bac0aeb1ed6b3121a845ae10421e6e4638f8940bccf6797398d78620df45f1abc9865
e7d727e1a588f72e1e96a0a96c78d3c289cc69ac33800991dad0370f1169dd4f55a25dec
b4211c4be72fa32c77793cbddc5e8ee5e19677a1d16253bf8c1efc9402fb804e618c2319
a686d4fdceb1ea39009c5bc6f819ac556f3df1e906b3afc19e4b7ebfa17ffa647db618e6
32206f51d44915be9f38ce9850528d223f9fb4663018385b1aba52e15c72533b3e870cf3
e99f10c843a84f09a29fbb0db2398e6b3d8a8a8ee433316510efa3b2d1e6a95c21d25e10
03dbf98033ab52519cdbf7b7e59109b68ad47ddb6722cc76ff8f08628a9a17a6d6fc8fd3
5c0bec2a2df215863c0a16e4959d5af169b700b149f0ecbddac911f3030a8376c9c690db
0fe93d0d3ccc65845091d3a3a862ecaeebebbb31173f6f76a94f90effa0645d4a4a8aeda
4c8fa846000c3e7ddc2ee37d2581bf22ab6c094afc3068d67d3584a953c81cfd40594027
1e70a62a87a973911101e42d53407fb7b1851d0fe3c90f635351da2d4985678639c261b8
6e79687a43e11ecbe125261856cc91abf5bf04f569ff35c015ea9c7a0b575703902e5431
c05c98d0a489f9dd35a28d80e80510aaf514b2f3178a523e4afeb43f2105b42947bbddcf
f0f5d87489d6d77aabbb7c7a08cb4c4eabaedacc132caa555bc51781a3af04053849fc47
a6c5719616a90220df629055c5d1aabca902d12a7ab9a8dbb59bd5c70c15dad919f9c1ae
fd232dc0498422ee3963e313e70adea04dae196e37ccc4e2e7c8ac808e59c77a4fe2f461
8e22001a6473c6579e2c0c47fe45875d9f7d5378f8e46b74a16c8ee4a2d9f58df3d07146
6c293337ef9bf833f8d95d576778f3ed18fa67026072230735312fa04e68f0af79038a10
566c681012cd4190d310bc0c3e14f21ec446fd5c109b4c08f77d54376ff36208300e1866
918a378663a5233770effefff4b1b9952e822511bad65b0107d772239b3d4168d5a0bf4f
5b0a9702f950cf9510ffe7a0c1113fe1ac124002e368e9fdbeb4d9bd2b155b0dbbea333a
d63978e76f1a16fdfea816eee097fd2e5f540902a3f9b0330028677bdd75ee70bd41b6b9
52da926f24fe221269ee60c3be3647c7b36f58359fae9422313042ed6550e762ff8ea68f
9c0e00b09b16683917e40eb2f4b4583dae2c4f5903fcc93c65de79b22614d57d378aec1b
4bc9a2ce46a6288032166cf390804ba17aac5bf9600aafb02672972ad7bbd482c0c3b80f
e4d5a7ed5b9281a808a678c031b9e967e9917270eff261f8fa7a74ed977a162e1d504cb6
296de3d8299be103b84920671bd5e93ba8db43787401aa1affae5620effe86e9a7308b75
805e32b314c603a7c7eabf1f4d62dbc4ed2d5c2e343ede3c1e35316d1fc03be14f39f4e3
d4e2a7222d8d6f6243d6f58cd40449186f9b26ea92494a2f88054e657ce6d5614ec3fb13
f8ef2acd515fd54888c074fd8a00b83144db1fdab7aaa5d6fb106fb4675958dec916ac48
b41df10a4cd3db85d2996dcee309cab1b45145b4744c7df1161ba04f9f83531f4e9b85cd
58246f63d4da610ade05a42c9f6d0846065a5b8183b066e4774290ca1d03c3425a6711e5
0acee91e7326179d9119b8b773ca37649c33071cd8486618c4b98ab2c6f152f102b0c08b
97c6d2a4eb83acd395a3b8c151c62bf1b0023816fbd3e3f0c80afb19b77b7b283130e5ea
d0fdfbdabd440e312980851a85c0a2c887ae6a518b55328ddf8ea3ce08de1cca898d6927
02e3e0b16fd5feab99a2321d4fa4a158e5b3d0eba00c92bdfe7a8049e16187c144a9b511
e259c7e9cd6708ab4a5ba4316e71eae5e71226933031e6091f6aedf60adbf078fbc72b61
cb0287f2c8a571fa1515034c202bd92f83ccb303a319a3bc2e2e1bee8d95365b7a728c3b
af49e2f1c5af49410653980ca440577ba37bde37495b986ccd7dbe746e083f492558d40e
1a8782d6ad5df11a69c74969386e39a7e3032f75c57e9c7d80ff3b68eec3cbf90e97f498
9eef6d8c2ce967f4456870919a268218fa37ebc21e38deb1c6211180eb800e6c6d6a3498
92e900c47fef71e084aef1aab3d512c315dd4349ed750557abf8239f695f6caafa4cce81
014368f0ff1aec9359f2791a52113570734d4c2b774d5e3374cac1aa129184ab068af2b9
d817e535c573c10dc9f94dca2ef3f82969f9299ba8be1e1297d28696497830a17decd1bc
ff94a9c87004aabd88a912e8eb47d589f22c1d1c33ebb634dac14d39980d57e6ab887279
c2182cb72923121a9e4259f7649d4dec1d4de8284f3c1c779aed5a73e4ea4ad5d1f71b82
9977652c966d193eb1150b9af9e79a0118911aaf0e4b1bacff7c5b07645764819ca7ba7d
6a75f8eb6b5aac383f87f6f6271b635ea35c298542686d1fdf03cd406144b5ad1cb1ee5a
441b4de67651e2e414772bac0b08a0fbbb4716ed61820063f39e63d38adee8999afe2adc
a4d14863de7c153b32244d0eee696f27cbb1a00a3120ba3f74dd52fac1c9b544c68e812e
7ed0f878a452ab9475c22e28e6ecdc69b2bd4b4c8178e238b2591060490426a8786219f9
ccb4e52b40f04a164dfa58a1e188829223f39a5c417854325462f5184e4e15f62c1eae73
eb614cb5d6862e07af090e1748aeb7b55a131a71cca302618af3fc83722aa80ddb5e1fa8
6aeb966036553d73a3ada301b3e4bc90b48701ed5e7ee5bf5b26c7549b52733ad5286bd4
14c7eeaa0402644eb2988bfb2fd493a91f84670779853b03e2ea997c729255eaa0633372
81e1129e75b21766432ed390c4d139f766d2ea4f4536f19553300e7ce76e1ba325c996b5
c8aad4720130487ad322c36a6b7f87193a257cb3c40374c0154bda2cb48f7fbe934d36fd
5c3701ba9e32b19c3bf9049d1ad13569722496841132e552616b57d1a3245e8f1d2fb759
6c446808d4c0d4f128ceb361e1df5d4fcb910066bab5721b2645157eed20928c66e59be5
0f3984f84a07c466121ad6ebfcf1d48413c50ae2b7ca1764b48a1ed8c67516a7db286a46
9b780b65385783056b00de0a06ef255332f9d215b6c9f0f138e7ec8472e0ec60c7bfffa7
9ffade66cfa1b0591a51e29095178d6cb4ead37cb70654fcf322d5576eae6f410be5c242
4f689d52748f27578927f5dd19aed7b632da14cc544adab61cd55061ff329813b4c83d88
2ea1ae2ad5c8501dee532e78c4d970f45c95c0dfbb104d313b13bb3a88f387ba8db38adb
b603ac76f264f493ed6427e7d9c089bd456360639f3c9b7c3c8e1bdaf6292700ef0faa3d
7fb0896572d2917956e900df1a25875a342cb3657ebdb72f5c51f3248e3ba0ecd181bd4d
47f96b618b8cf98c13181d2a2a0ead7bd1411e55278b8d5fecde02a63f38181cad9b18fc
230e4ad00758a1a988375238cab250b17fef2261883864cf97fb64b1e03e2f0aeae3c9ef
0e2a02c339633975787b3bacac7a96efb02f123a9518b857206418e30a059d08fb665e55
d2b7b9ef06ac34e0ab3d3c477c353537a5b154b4f7b415ea4a6eb6b9224b95bea5cc1c3a
d06184be2aa46868b95b22bbce32f39e423e40272cbe1d1468171191a737dd1824f8a5ca
03fabd75c25a8d9fd9c78f9bf16bdd1fb2a61318eaaccbfc8d603e9bda8e5d1eda9ea085
c2a0a9a7a6b5942f0b24af7e7fd75b211b4a7bbc46e61199fab5256a0683f466b4158a31
721ff0184189ed150892328ac9610b97726fa957f056d4130d0b79436aec07f5dce96f52
d608e9d34058c81b91ddff701087ae015a114931819c6c4e2de58208fcfcc193acf60e99
b2971c9fd370075721969b394563a1d516fa428a10b4eeaed8bc0a979c0479bf42e481c9
cc214488cb37db039b4d5c0629a226ec130654f49c6332253d949b9fbf79c53a4900c5f4
7f6f7c831e8cca8633735203fdb09a26e913d2c8f1fd766ee2f89379bfe411ac88656b63
212eb421fcaa272d4a7e00220216a84d03f0946d62fa6ce8d8475ba99544222a8992681e
838f1bbdb3614ac8cc09fd651f58080e0ec0b4b8452c632ffd3a17c0043ea8fb64833ca7
4a3ff81ffbfa53df812f0a1a1e6bf932a862cef7feea6d267eaa90eb3938362ed57795aa
4e5993bfd42c03a737001d8d5ee2d1d50911005dc0eea515460d5139f2018e1dcd09f9ec
7d6f7299230cc1c9c3a30fc6dc604b71c67278b2e9b4ac31e99fc53707f5bf60c644a504
425974a39ded0e009d008d97c01fd3005d92bae357a4a8cb33cc7fbb6c6f92a060b7d8fd
61b29844b25fab39406f85b5dec7ad33f786fd3be207890af3756f0ce876152abaaf0322
423214575ecd53f6aefd8454a2c8ed8283efb1dc5996c69a66457f6ae6c73d84763054af
3ae800c04af61d4070ba47bc275c0c31011e79f778b02c4f092d07f28a0a6cbd93d5fffe
dc24c315f8ed905390f604ddf96629aacbef837ea39b845747d019d92eb58c58562e8a96
6a2958523a8b2e4981282287db7c7a4cdecc4640a718a00a9ccdca32cdb65fdc955ad6aa
1338e9a43c9ddf5ea13667b605e0f721c1f1a12d2ee35200cd2b0427faf55d52d66a1651
bd44825388d7e94108500438f6f6f544811074a4dbfc079494c3bd2a848028f1afaebcd3
62a389e1d5bbead5d4ff43faa5e0d76a0bf1dac29c041f944ae42c3205b7966326b72d83
dccfb5c08967b3b50c962d896978485daa35a1e87ea464b0d4d824be084b55b068e2d481
c5cc155da4329e90562144ebad24d1a35533c0502df51f73607fc4aa283cc2d904bcf0d2
61a31e48079626a906f89aa3859f76e4dc9bf5a8754775b4e495f538370edec6689cb414
90f3e19724f1d313c747182d40aef92e1b9651b278512b961fc430e7fb9e5ce7379f62c8
b277d1c392cf048d204e1c0bbf4d3f66f30c48c242c91a55e01357cd5a6bbc798d991d13
124c959548b2ec1714ca3a50a98e3051fbe34db7525054da8c71921275f2cd0eaccac4e7
8ccf37cd8adb46a1a3cfcadee8998533c172b60332b50e638a91d844622cde4fe99cb175
af8abd5e00eea670ccc1648d9f2920360bbeca06799b95fefc41bd1dd801eb5c4390ba61
d2d290aae814a5b40d11e96e0844ad2bf2061e4f7a648678fcbd4c1354ee634b538257f0
28d2a4297f10c67d8040c138ecdc3795002ad71bdd849ce1100f70f17fdb40a6f8a3f430
1635750e6e8c0a8ed6952a6216cd3f4219b5f61011481b8f079bafc289442292b6ef7c28
8459eeb841430be2d5407e368dadff410c508361361d01999a6efde7e05e245decb0f8f6
e8721c58c8170860711d2b39b15ff5f922efd706f3f359c44c4e588a62b04b661dd468ab
c3fa746266fb8e5dc851d0c309c5162c2d013e76476e639e7087e147a3f3ce08e471e001
cadd732c30b5445a2698b0f72ad428c34bd096b107ffbb12458e25a825565c0878cc0637
6f9edd43872ef34e0a43f61596de223587a20b00eacb669e65df06305a2fb6555a7002ae
b51fae6d5495d07b135cfa6d8a92b30d3176c60850fd3102b6402b1bdb3438c69a02a260
e38e6660eefb421eb310d9216c02aa948e12c1a6f4e0035b45734f7bbe051c17c1e8507c
f38c76b4aeed5dd62f2aa4ef3c45da891ae432a80e02cffc0b0590668db6d7f47630c9b8
7149572549cec0aa81715b97fa20308c79e9aafcef07adb8a8cafadde638aa508b491184
bbbbe090739f4e44b5f584bfdf27eaef4704fa38b819881d756477d9d11a8f4d003f144c
89f585e0f1c68e42352082ac8370dbf552126665b0a6b26604190398b7e6c7c813654d65
801a47a56537de88ed540285d6c129484116ec6f6299cdb252c5aa0e2162473924c0dfbd
9abf5abd71e09729f2312394f2372349f739a5e3f8d432e513595139ea000b799922e515
af396a250d5a7fee78b0b21c705d2278af765a50a28a6a497499b9117abbfa554faf37c5
6d5eaf5376b9a69d8f995a44452bab67bb23db760d8f054f2b57d2e48d9f38e916d83ad0
2edf32df75ed1e3557f0c84b30cce6baa6d4a62b3ce63ab868b6acdc2dc99681c2451bde
a682beee318163a9ede7be239682e93fa491807086517944b658b9da4cb23fd5494810ff
a29ab3ae70e54d49f4b282030d4227c2f77d2e033b51d7b0cdbbad09175421aef627df65
e0f0a49d14c8bc794cb2bdc18fd1ed84ed9779bf5cb9793753661e01d010313f2a616e08
04fb83918469ebbe5f7a9a838f68a4cef12434185a446de14a993f29ddb570060fcb647a
c9e1a875230d4aebb7bc44a936f32917052feea49eaa073e94a1eddf7f1e8e48be436146
74a6c66ee5824c7c56abe2212f269dc0ec072074a953d80bcbab2cc743297a137baa47cc
e661a4e866b80911bcbad0738c240b0e71f4f41dddffae7fc7f4ec0ab878eab087716b36
4a58a368d0ba93fdefb5db4bba104ba6b8a8a770ee4de6ba0730c2c0848c031bbae33a37
1cea96e4dea7ac4b639a5b49fd13eb086c83396cf5012c25979594627ccb50dc17dad8aa
9b4e8c6cf57f6e77a681249ec21b67e697057f302841bb3102055e73d80b2de9387fef94
ff669b66055280773e38bb55ae74276a72af4385163434cb59b13990a4e713f710adefab
f2d4df09524c9bd6761edc3a139e1983dcf4de6fe4aeac5097883beb2ae36b33ab244e2d
48046e6ac9786ca697d9bfb642136b50c864af46c741495ed9e08eef9e839f89d68d7114
4791a3001197338a0d69cdb7b6a8a4dc267d84cf44a0b9fe488fe4b26f974863e535c188
4ec1443de6b9fed72c243b2842a2d9c639dd5c3290d38e0e0e64cb526a6a96a9dd2a29b1
785eb23fa134fed309d9bd4031dc93767ac77eca65def3fc89c251ccb0e19556bc21205a
1b452a2bd8138fdeb2183829eb9c4890e3cf467f3b3a09abe723cbfef4d7d6992835424f
a96c75852c85f2295bd8ae0cffa8267b3f045e2a255136d10ce3aec0d1b0380405d1b0e9
7c7ac5886b31d55ad182d5e9693c02d64311eef52473071ff6b5662954ef6d15264648e0
2a97b52983e965b9521c8cc323c386a595e410b8856e0628bec1e5656dd9c90a860db41e
716f014a1b492e93af3ef3c8045f8ad2b5730709bcd00d8fbfdc8c45db34e36f5a0c7192
2e33a9b44d848f7faac4426ccaa5e563e2c3c388745988de8918ce5c33a1212ad1c6f212
f9cd4e2847c4c0a7ddebba96391d2e9baa824ec0092b0e7daa213f23b19586e36e6cb47a
6b832d428f163051290750f94a308e22278cb85cfc93f863055fc48c55ae0c96e695ff99
70159145647ab6268a59ba933416e3131888414e1a048e3952c98aeb7a78b0a651e0d380
9595dfb63b67868f7bab4314a26c7d03eaeea4bfb09f692fcaf604e748d213b527a39a54
cfa1dbbf135e631b01e52d584b2c354d34e38acad69d618317fc083c20331abb5e186f86
40067420bdee471641f857a6fab80c847c3fdbe641dd7ded22e3350d4e50389bbb09730a
31b7f46a7308776da5d1a015cc9b3571253561030ffce512c0fbc6aecb71e94d8090be65
426fe6540f513d586ce89e460fd096bc0d2a0e6c33f333e0787750a4b723dd19f98d15c1
c3da0019f0c2b36a7decd15ccb01b35e9790e34143c80ff88024ea72d0061b66ce2b16bd
09c0f8690adcab11a730bf6932ddc953f59d3a03797717e3331d7342b67b7093b07ee943
264d87545be3d2c6e961b560690b163f7d800f6574c5fd24744d567f6ed85f69cc5aefb7
ed84c08d5497cebac1709effd08fd539b4684e3cf58f8fceba5f78907655164888315126
c199b0f36aba386948283047172e8cd26e5baf47d67ffca5fd14fa63f8d494c30212e04d
b76cd8b2b9504e70712a17879b485e22c423b8c5a8bdf7c50b86d16c97dc7fcf48897c60
8e0fa5ee658480aeae86304d941e42b69c113b9dcf6f8952f9a4ac16a0b37807dbd06b2c
d2211e81fb909d6db44d1c528bd0c133189ab072f0196718569f8547105d769c3c7ff2a0
4c81b48f32b2a8bbbf8e00ffde44b5cecc5df71c037899e58c80c4d6f9fa615bcc48f907
abeda625863bf1fee20b5737b84b6672cf310c7cb06066f2cad42970578b7701737272d4
379368ce0771ba47cd510a6374340be57d6652344cd9e06789dd523e48bc2b2c403505c9
3956fa6712e7fc9a0c84dc3c00e540d4865d7582c7a5b14a1109536231d05a2c6aaf909c
f3e9d0e8a4a9054dc1d8ea2b618de03f1c02732149fce507149470a8c4137bf5fead21eb
d322bdd01315993d927a6e05c0891841918ed66d8181896b609b12ae6e7965debe463369
eaeccec495de7863150812f7720e7982ceb2bb06693d888deaccdd646359f173270e7f5d
5cfeb193fb486e090da331cd378630a4c6931e7de89f194ef4c507885ac014785807af06
1b399d890c026442a16c700bbc613e8771d5b9cde4d91fbbc46aa3072515385c9476a4e5
bb8b49af1b1b3b8d72a41777e4f27f452dc1bf271e49dbf6903b7e618c36f2f2fa11110a
b65e06aa35fe783e6b630934c658443d32a1d5dccf0729344bd9f4878d64d08683bb4f4a
364f5c15398dd93092fd9abfad2dfebdeae685e4f62b4d1bb6c8be610fa31aab940fd514
8640aa7b8e50fa75f303e09b68eb78d88aa752f10338ebb5325f555b647354a54d14dc7e
360dc8ffe33a81544685197230c7a44405326e9cf604da06cd1e4eeba5d20bac0bbd84c9
158035cf9be40a37e2c80ff274ca2879b7601fdd3e3b224345f12e12b415cb9c3889f6c0
8f2c3231d4b52dd2c0a4c55eba641b48e2ef30f5bb1f7ca0e6d9edc8ae344b9da91932a2
31cee21367f4f602d4ac80f6b12d151126679a9dc458400a38a7343fa5baf567e833d6c0
ccbc262c1c621caa11a16be470c23809c4a364713d5a414256e832bf8eb970fdb07b68a6
1f5d4bfdbd70f0e10d6731321d149177ec8be84982fe7b4b27bf82b2a1aff6d647715bcb
3ca02c280b1474c826a09ef29ef7eb3443064f025b06d292810895fa6bb67334399ca23f
7d22a63e66158e19aa54d06e417672a64c733dbf750acaffcc0f7a5aac62ea0757caa177
ea0995eea89f37e8d6b8131c233871bde5e2aa1437a49c48bef7d02d59cb7ebb28c9091d
16c3328439d977aeb5821b9374e144e28ee6bda63b257e4090a05bfae5251f6b224946ca
fbbac942a2259c89e3422888ea6fa12e2804c957049bcd504f2ed019e97c598d92a3a176
d31f19420cc3ce650677a912aba7a619a5267edbf2b418ddcba14dafc83952201c17c3e1
295c58a7397c97afe070af4b585e8e139cc2322cb7a668707facd6fd04c9c327fe9b98c7
cf8522a5592b79159858e6a98bc0a12669c42ad3f18a34018b5c8c2a0433592fa40a1706
0e373f3de8a538c6a52b868a2d93559025799db80a0a001258bf826237c64e95c813c57c
88c01d3a499d2eb67ead00db5eac7cf43c43dff336e707f81264065fa335fc75ae5f7d37
e0418240f396f296707f996d05ae4f65849b12cd9bba3b968900a7361540d315cf0dabe7
9bc58e4fca8d61b8f1e9f0923e6f56ee4ef0373c5b6fa5eef1ef31c5ad89e3f52b0f2cd8
4ec6eb87f2468475e72d16eaf6e9000a405c62fad078d2c6735ca4919eecc76ee0731961
65e25f8db9b5bc6f6606d067f8412c71265d4ac74087239000354c3b99334010610df268
87f018805cdc41cf414194fccc84f8339bb9e8517b2cdc9c344d7b0799f95df0541e74fa
b1883181e71ea14380e6be1ce6d8ef4b078a78db388353c11ea9b9c1e920f16287df5547
7e3ce7b779077ac0a22bf84f24de1274de882d3e770d84b62b788c2705fb14364cabc055
5b8854b335c602f979d822fe478e3a176d83b61d9f38616c1038e786e9bfab1044f33f7a
db4fe7e7c04f08deef66d9bf51eea0eb28a2350eaf9cb19efe1be18f28aa1e8055a74ca5
ddfe785d99720983837679e6c975fdc86d8320c9a0d18149ba088b41f0faae983c7ff0aa
61d0edda87a1da9356a8e7b467d5b3d30f26347a42c5dcc9c5b696678f623886e0727b4e
c336b21efdb22bd3c172e477d9e825e8209258b8c16cc3b62762b30c0c0729587049bf4a
398b6043f344f6e5ade78041848c45d52635a9939d30032b5fcfc43fd092e0b7f41a3b76
a7bd9e4ada79be4608a8876b136a1b2940207b9d56f1dc96c95eea7d0f06873f5c8dc7ed
0347da70b4a65f22ddaf5ab2bb8483b54628e336b1e4cf23a9a985927fa584e3d15f0894
6b6e666543221b9259265aaf4e81462b43e82f1dfb9fad6bf1e6d3c460c8058220b33253
850c92b73a671329def4038c97eb4f2c6f84cf148d6140ba81e4dacdd34a4badd25ba42d
ed46017d7b55d98089e4736c60896c341957569d025c2fea70d839536e9b9fbc3035b4f0
9292bdf750ecc54eadd50a832486c1a05e33af8eac5958b5b36db1706999060895c37b1f
458c928682217d3e515021cfad6ba21d76dc660d799bcc0db4da0917e0613398c1518a22
1f10d7327fdd1bbfc2c96415271d1f77bcee65c052abd72d9d19f4ed22d98f865d1b6e49
a009634116b390fc4707971ca98023cfcffe753a34f1c2dda79d469fa2753f29c037a3da
cb122729254a31e6bbc602ae6c1db6ddf7874bf338ad14cbeec97fc79ecae1210eb86fbb
921847105bda89bb837e9a540f2b3ad4fea15a6f8ac07871b4c66e6c38996ea4b6990068
884bec52b6b5532ac18251e07b757ea72db0b7d6e6dd36434d643610a8bcf5d46f633c32
4f95d07b78695cc8765b17b7b4798e7f87d166a5dc6f35b45f5c470427d462e20cccd06d
5f4d42fea7966181ea779f2b2ecae81328a24a8e1cd665d9a4cbc4b6851b2abf644d2655
01611b1937050c2ac0da5fb7537d1bede046547c9b783fa0d2daca34bca23f39faada0ac
e6797427a00ece1088af7568574f2fca3e5e455cce63bca8724b38e4343238fcebf9a939
6c1851f89a56ea92942845c69909249ad2bd7fd7249b8b16ba97d2abf211e03fdc2aef09
60131e2ae718d481c73daf00b46c3675f572fbc6ccc2c4512358200748a3d77f0fa9ccac
19d8c87b51cab1bd9fb7c47f168c73d88e3ea32b5fc10bde7cb71cc5b3836f014ac53683
19ee1461734121139234f2cb0afd57f1d20b62007364bead9fb81a115baa5e75f0ee0e1c
11315fb0137be0fc58ba96f5278b1fe9aa8a1007edb67fca7285e60e07cb7abce8faa8b3
7b1aa83bff966a73e6cf043a9bd93db26752cd3f89315fb18da64982aff4d607317a4abc
49800601f5e9e1b604d00080fbb7b87d2af2c1e2c2296d28486e02895bee4eb7c12266fe
bbf4b213f7bd73624cac7938d92b86274de3a383a92adf04eac41e16e72e1e81ccb3f679
41f22b3bdaf4d9852cba9bd4e489ed4e371ab03713842c716d854650796ada2d2c235ab5
df4087963bb3bccff61714d177d7faee58750d210eea99964b4f873dafa9f767cae14107
ab7d327f9d6a858f93939e36637ecf9a13aaeabd208d29e461fcff7dc97e80405c39bf85
25d7550c544a70049e1a7453a25b69a088c6f310d9b897747847f9806233dfdc764e2b2f
22ae3fbd13ecf9b908c790f90ba5533beb3911d1970ab86e80f0b425bc2bdf049fed0c84
6711d3d94a5cde03f58c77b9a05c8c9175b6c85ade3cf763d5cf055577dad8d2501b6e8c
44d95a712700a501f85ff20cbf9e6e27691c388e5827c50dff70997ba0eab65a4718bb6d
5a8ea614199038c5d629c70459fdfd6103dfa479f3daaec77c45f161f3f671a74c9589a9
9af2dc4480c7498305d4f4cf23e19495a939d61904eaae8ebb18c709eefb5880ac366f56
c098a20a1a709c9be4b2d406d570af191498ed6b84c083d1cbe5237c46af3ee3e05de5b3
4167034537fadb46016c31adb2139ebddfd1c49396a9cfa6815f426c7a1d4f0da5bbebd4
97b81fd5ffe1d482e715b3dc35dd2a406c2eb9ae9f1e8caa4d613252f91f29054702931b
711925ce3a2e75666248e43c3a64d26c60a84b071810db527e3215c0e060ea2354010361
a946d386cfe9f0a56278f5d481a100caad99173324967c1dfa3307a6f3d88cd0fa192972
c76dcdfeb8a32eb130a1f26d514885cd273f61f8ada9bb312272612e031b4421e7c70789
efcf3ac6eb56ca124a915411da67dd9ab392c0c08e4a2b6dc084f9b477b51e8f305e5c53
ce8906ba07d2f09d039785a5d091ccbbe137f9a0acc33430b7aefa67b2347f6917ccd38a
27615f8462ec10d7328c01fb0c58dc4160234c8bbcbcc95d3d4040f34844ad35da46f972
63dd741ef17c9cbd03ced8f508c0b8d865176e9329792967779aaf3e0cad32e9bc01f61c
d45f66082a3587f43a5554c64eccdec979487aefcda5907c7878aeb20edf3245e686bd7c
35ce11beee3b751513c1650cae0e7899c506a72f8d7392646f5e8953cc7e18c690ba2455
57a45f010f94b64125b93ae55da23130a1d066d225c947eed4923ed93a831067007c1ad7
70c0b9a5ac226f47455f36ab93d105070c54805d27eab0bfe2d982cc112e5386ce2571d2
1f32ec54fcff4124d5be8593bed4ce0d7bd47c73b2e3d7ad2695e1ab9717dd509fe74ac6
c57b79f83f8cbb72c3ea1615199185b048b327db4a8006b31bf04b6508c699e3c96e0249
ed7410d1e86410769aaa07362e9372727b19a46f464c86a52dd9896f44a0d31008da1530
210d53ff02a1c64f60a4fae4142a2186b228407766c03bb7011f66039e852b8be6c50b9c
c650a5e1a805f5b22536d1669c8d4856eab2147a755c9e9efbd7611b96b27c69e01a67f0
dc8d35b11b0ac2e196fd8ca6df7b3a64926e45aa831473e7bf42d31b7c7324ec90e0c478
5dde40e141b2b8e02f80a8c92a5b66eed4c85a6fbb97e7cef5bf9fa4dc97f156b6b4e4fb
be32578c79ed783b3f1d298ef67b0fe48f4da6706c43317942bdef2d8a5f46dafe38dd97
bb032872d5dc5b5e03b4bbdaf4e7c9b355b9b7a0068c2385d1bc1b5aee988ea189d85ffb
fbcb8391fe16c4b3fab25fb2ec5ddc63b776cac7a68d3bd1e2ba6cceba9c5185eef4f751
a161c8aaca895ff57e70ea165a58025b1f47d48d7ff19c57b8934f0270e6a4391974963a
a1cb37865b39667409be8dba950912a5494d93e495e5a04cdc9672f937d28741f23ca01c
51da7a8f909b2d063e4f35aa4142c221383356b2fa559dbc49e97dca5ade4fb605f64596
0107565d28ae57a752793951b03130b0a60795c63858fe23ff76c98d894114270b3511f8
23d676eaff2180373429ee251945b31d393ceb198f29ff4577f245864890808051bd7db9
adeec33429ee9af36a518e57183b8fa21998ff719ec4864327608d7330d72f4316026448
356f466f7065e9d4751d2e28be505b38d933b6e2cff603f57637eab395d8503cba3a58f0
71bf427928e246f619847f5fee0a7e008d043f0d5e85e122d57f44abc9f2977735ce410d
590cab82661cf3021da656b24684d1187b851ff9fc1125ae6924bb415f85ac6cf15b52b6
a04e51ba983af14f333f7512325e9f35b2296e1d9f9be47ec9a5b7656696ae0bebc5b4e0
dffb91d5af2e6f88ecd419660c95b79ba9eaf92a6f1e1731684d033b8a25890b180dbde4
43f3dc54c23a8fa74ee7d46a58a2e184c4ed36314ce997940cc2857f1b800bbc45c86fdb
0b94b9a28aa80afd2ba7571c6f6b540c2726c14634a077fdd4a0f21c73a12dae9996b835
c9a499aa159f01332ebc7eb65bfd764f1579a8b98cd5175d552987c4a61ae457d4b75153
b09b76a9f581bb9734f4acdd51d0907041ea9ed196016461b0c854188a6ed26bd8190000
17df53113459f7e6397065798232be4374ccb489e2cfc45d85bac739b07ed5f3eddcb272
eafda9c1ecf00fd30224419869e3d0b095d19ebcdb0762a96ac1819bfac39f004c7d0310
dadd5d92befccdb078655b4d63862b5a2769506920fde05cfb81add0fc978d8eb91ef8d4
003ea419e931fe3400d7659e25ca34f07fb2a551210bbeb7a9d9d05ded453a40856874d2
7b5b8ed78f18391e5ec1e2414b243e1e4af9d1c165ef395db4ec1434eb557ea1f3dd4e2d
279ad0a825449b682d4134c11277026eb0980443d10363e3d90d3b1a97f610a0e032c719
83f05388f1fa170d1360426673c9f2389ffd8f77030082ae2dfae9a93f7fa6a2ba5d5bf5
4d32574bf3ac76e3e2dc880a18e8aeba120d8db5790f7411f8f641c57f1b58d1b24d8e82
29bb6ade671d66c01ce36433a758cc6093a5b12e845156f918743d81bb8ab436aa6820cf
6d3b23b6ae6dae0417e49d1265b6b7f423bf5d3fb09244d914ae968e3e4884b42c9d9a70
152da28d66a1e220e861390ab1bdafbac880c7a588e0666f858c98f46e40291b23d26489
14aa93b82554d1dedb17136a40b9a1858f3fba9de01cb7e6cb1411ad843a82ea786af567
f210ac7ceaf853730b98600581cf56de68bab7ba657e23ce7856562a21ce47762655a243
76e114cffbec653321241eb28bbbac1acc423c421a73e1ab74a21ec3ad1ed5d508ae31c0
e49431e88cdfb207bb331276937475687a8b2e02262aa141ff2057eb25e1b892c49eccaa
610d9c613e164c50c0632e69bfec9f9f16c8a5eb0b8e064ef4131491c1a9bb6202cfd54e
9e50af4bfdea504eafc82b2e995de5ba81c5d4cd1dba4b988397287a51bf70866e61171f
0d7e0a57122887d7c9a5704a6ec1c96e767cb76a22a7179369fca5cfe2535cfd590fd3cc
42e850469fc611a7ad7fe35edc507d85b8301cff71d78591c9f2e2eddf2e52db209dab95
d1f2af825a97f0b6670ecf0cf90cf14e1ec2d6d6f3c1bac2b6e9d7b5b4c062e78e9ce53d
9cf36c04badabf6174dd2c5813ac29ed27cebd4e97bdfaee1da095979b29f8de727fc294
8fec866d5ec23dc0d5da380c223a00f1a6abc45f3cc7783bac0f5b211da2e2fd04682d77
bd8b26b9ce483fb978b08cb79e1dde4641f93345f4782338c173c157bf83c99464251f8c
a619eceed0570efb4a8bdccbc5ddb611911312b23bd18f93ff5191a40295b0edf2089d6f
3c1243d58c10dcf1c4b8b8edb7a54220e28d59c4abfcb52ddd954a12c35f865d6f4b1203
455dc23e29e5d9a660474f07695a65eec1b83f8850f5ee5880a5985bc7819fb19f4bf817
2a513a8e8071d9be4c763336fbbf5b651122db9f9e8ab5d4ad928f7c485de78be9efd8f4
f62d32479a1ac0a5b889c5c42070540e3cd56ab09aacc4e7e95fdccae8b7b0c4b12a64a6
6ff12977a0daa37cd2eb0b214ec690e36c4263b9a94f32c660b2d69ff30f1e3919f2e650
397b3b7adc089fcf2b790170ddfca33eba488c420cec4fde0b9a13d32be15a23e377cd7d
2fad6e34fc5342535a9d89a72981f31d35f2766b769db5311cde14655469607592e3c12e
5b56d07b2a41a0f5836344ea839cf682712c59672492f0fdd2127120875c963c3aa89a7c
9248467f3bba16fbe649f5d6451760de2645cd10b019833dfbf7e521ad42ed8b73720b1f
967b23188c05a788bea4ca9bc97c8072c6da9c598b8f26f527e599c8ef4a19d7dbe83df4
652a678036f09fbbd8c268b229e49b55fbd02e481e88c130329d75e2aa086ff6ab50b8c2
0967736b77648e94408cead459e4769e7c4b1714ba52456ee50fd8f0c93442054a74b558
d62e7a2ce9d9b5fc7ae326ce988c2fabb057b6e2c6e78e436e5ae9730a4ee22b44dd980a
d41dbd1e73c56f2aaabe911548f51275893d38ccb7e964e0f1994645e5cef30606c7d2e7
ed98634e0a5232b4209f12d10fb26ad6ed0b01f396ecec31a6c303f0686464d936521998
d8b753ff2b322a33fc8b5f1dadc55ddb665dace2fb2c25dc1c717a399490c9a27ee0c418
f8e346d97b689250b2f974177734795769c65b633c0bdf916eaff475631af73053a08e93
3eb9713662317874d41577b26ac7501f4fe5125dc3e74ad8ea1ba3400875eec6d8bb6d3f
bc238ccb755b2fa15ffd3ce43d6ba6275904b0507408e11620e6da6455044b3d4d5bde43
40ac6784a187133b563c6cbd0520b3e067650693fa810dacd22ceb8c0f6d546a134cad7b
5ccc80f8d9d77cfaf8599f783329ce7879a22f414ab30e2d0beba95cc9abd33f3791bbc8
1bdd5631d2a159983e2b9588a3c1ca27ae4286406728400a082f148b025ff59da5e78bd7
2768dcdf7499619b6a140ba8ec7d21a60ced57553a7efa2ca67df3d7cd9df3f86dc32288
ec1dece713e6677053213d2b061a9c16194ed2f18024a8e34b6f61ef5d1161995e31a644
4e3704294692bda47f68a0ebb58f95c95e620a4c543deaf39b64c865d7b83b11fd4289b1
c55731e8e17e8df4dbebbc6d75851994445689a5c0449c053296ec780a05e57f431f4bfb
0541f354142be9af06131e9954cc749f772338c68a88377dd4c512fc8043a40a21522dce
ca1192b62eebe5216237e812b81d0c9b3f14c46e01aedbbebf0f43f7f61aa19557fe3fa3
99bb976c9eb9754dc23502b9ba6afe8b80a57b44ecd9ae557ba1804af7c2319505717907
b3731155badfe5c749ba537d89c5980420c4b4d40fe13e0e3f0b100442e6e5c11dfe9078
3793d9ae099e219a734ecdd6fd936c92f45d74dbd5ed2116d11e82771b4384e3bcc90d3e
e413d740cd1256f7eedc01d85dfa134e9330f238bc3e410f060bd0d5cce2907d6d5ec1c0
dc92f2c3d8945f7aafdb77d2fc54c98e686ed5ac784b30f310e893512f54f0c942104a6b
2111dd76bce3dbdf5cdcd4f061d97d8d805d136f6208d6084ff4aecbfd44af675bd7b9a5
e441ccec5cfee8a4f61df1f2ce12cab21f0b4c599137fe6959694ea584ea716f2f551341
9bd51d3b3ff89a2eaa92a66c977e060c50f55fbc61e82fed0016e0c542e895cbdc3e34d5
f87856e9a8a404047e9d2e379acc275730a8589641e0362d23709b185245755b88892d77
643c54360450bf1ea60a6c1b58039284060c5b948d02b459835f99b4d334673d01465c2d
2ba9149670c37e29592ca26b4c8fecbe4ffd90ed28c0a2c33148111ed4c7b0d73fdc262d
cb3624ebd54d02a26fba8b153fc739fe785d070b168ab65c3da8af2a29a940de3b07041d
6647959ce4fac7346b9de428c81a847e3b5628b7056cc57417541f8a957852c48c374b98
50adac65bda274b0a3fd95af4256ec2fb8f056605584b2feb6e8d8c4f09104868b9436b1
bd916377d11d99b9a818e44833c047872ea609cd4d9d7b8944cef3e92797ef506362a580
cea3dd6cf915f3cacc5ceed7e3ecf0d8e9431c8ce77848e6f9d4f5fc6334a22b79358ec5
0dcb3ef50f8b4cae94714f10284e5e0fa8a11864651bd458fe51dea8e52f134c3ef75598
1cf291b667c0bd58470990fa10902a1546dfba435bcbafa160386927914488fe6f66b7b9
73cb7fc365056f39f700d41e66e2905bb3c86a11d2386979bc519b8277f8a7d42e71f0f5
4f0f2f772bc4ed6647d6f52596b706d2f48603dd816f0be43827014500db7fe81277e4a9
314ada9949a784d571043f7f1f8abfcf74e90638348fb5c28ae5da2afea6d0d34fbcd694
98be4974852f4ebd7a8d18bd2ae0418b9f065e0c1105a3ee6bc11bd9ca616798e6b9b146
1effc2cd408d026b173f3d5ae755d655dcaf857adca565b90ab22dfe9e0a8da7fba44532
70953df1a636d02f9de1a710bd5477cd97496dcafc475689d93bda4ded67628a4b15b2cc
23c8bf954ee75c3b882b5f5d44ae7557f390c3938b282b5d0b9119a094a65cb05a061a81
398418979af6665e5433787f33697dd08d7658f6ec2ba5634d7d39cbaf6973775ed7a088
07fe50f87060bf605d598f6877b31e9c7d162597408149841336d45182697b86d551e24e
86a727dd0b77ad99fc2a11113ffdd9d079bcbd17a079585d65839d8cc13a9e3f9b25e190
a31d3011499692b944ab96858b1c9f73f7d3c7ef8f045d268df1023205de9502e6361d65
5e61db2a442858ae37c7ea399722dcfbc9fa4e85f8136216858b1a29d2d573cfccc606a7
8f9819967ef9421f0be6b54aaa7430dc3b4ac79c91a17f1b8b2b17069ef97aadb68f8e3e
f71395a7a062d0f3359bb40f0fab2cca1630c422d599eb8d189497bc9f014617db3f9d9e
819f1fa6ca3bf18f096b1e594497220dd1c025debb2caea6c8202d66d9bda02c875b737f
7aa2de41a8b7eaefea8b1acaf294f20b5eb2b80020e77a10bee6069149359a2b30a8a448
618ca77ce7604eb4f1bdb61ad9ee4f1d6e4243dcb4475448a75abfb022887f4f44dc8525
72ca27652092a008fffc9afe1397a5ec06c0d30f29c4b9bb25b1501432e057030f7816d5
7e0686d301482cf68221d5e0ba8bccc940cb79f75e9db3f4ba06dbf180a13220bdfecf19
8a948e5f878a1d82b5ea81a691d79e6647c5fa97df7753a28b326c0da8a163b24f89e217
eab8ed45922604342beb13f4f882e9406c09a28cd9426924c3ccaa5b20eb42f2a32eb92d
936b0938ea59abcc0cfb4a224c48f7b0dd4fa0e75a715e4629da13aee2b4e9480036664e
79d510ad48fdad82306515b9e06bcb03c632ffa02f81870ff45cd5ca849360996e7c02bc
40a4b55847d3c54d5cfdaac987ad490914a2725bd727c55b97a0fa3068bbe2509137e7db
2ec54de30841ae5312f142f4adf6d441c72d1fb44527c258d4e0cdc02738c988fb14c775
4f7dcf2253e1f85faa9472baa21910e918dcaaa354065b08c7489829b2652c64082e24b9
39608d911815ee7eb1eae4c4c319019e47fb3e86af23c1b533127e91e5ea33a8fada2db9
ad2e29f669377459097f29e8abfd36631bc6120e4b54e0401bcf074a3ac3d9ee264d3dae
66b4e5e0bb2d5d9dd21f772675e2af9bd614043613f1e90d99f259e6ff5609a8d1991257
a01eb4659e8fafa1d65d4ac67ec9f663d435bad3c7394cce1b8a124cd0d27690d3479dbf
c7689ba7c96eb8f2993014c4c25b7a2e8852afd2b99bbff019524b9b80da44b19871f2e0
266357a9dbca75ad52cd627b41498fc326119c056cf8861cecc69eb24ebb888eddb0d3e9
b51bd81e19e056c0089fc23d8bcc8be2675d73ce510cda6183aaf33b4ca2a2fe37aa13c5
338b631028d6db233721e17fc0f33cda6c60722ab3c8916965507914f6bc825974f594fb
1029e964aaecf0b98d6124d230d491ee3ffe85221c2817ea22aa11955828ab11f20607b4
2a08768612996c2e56e123e71dfbb15ef66d65a95cb15ce2dc528af6e4bce059b74bab48
58fc706183e08ed148bb7e327a503a25cd3faa39c57470ca23ad63d1a4c150165a44eb3a
6cc5cf6ecd01fbf9232a26633fdfe83dc9bd3b2bf8dce021b2aa7c3fbe96a3e634acebfd
8e84e14b7b8f0b659f39cc78d175f6d534bc7e689028e52767f9a24abdac828109b9487f
35a67153684d2241cb837a2e7cd116144dc5a04572214c998a2b7a2d2a56b990155dca67
f22b5fffa2fffa9ab97c4cf2bc7a9de278b7e3572d8a3e88afc5dca7b0184d2bcaf12b17
a3c52ee2a67cb21d69a3585c450de3953cc32c249e48293748abbd808fc02dc4da2655ef
2425303952ac386d219ecd2f002ea388ed067a5bebd73031f407d6dd3f576965518e0e3d
1c488dc242c7bffbb5b091524b050b2bedb6bacdc4501cd3308655f46afb78217349275d
d79b51a60f0e67b9540edf6e9cb01634f1f2251acc65e50ea63851adb552361c166b97ce
cd7752e271a1ee3e9c6ac91fc2fa962db6b7a0209fb52f39431578339f2887889809b334
99a5fa0b39447984820d0ed6d9912ee54236c99e72440c489955abc6312e8ea4aa3a7b29
9ded42329103d47b072d3b87bc1bf1220ec207021fd8f0c6e8a4089f9d12e3d426d7d704
8faf3bb36a9a166dbb98d4bd82b1c5f3ac18bf9332c0179cf1af3bbf95a27d69f94dd0d0
38abf434d271d86af487cd5305629f7e9b5363d1e5cb89ef65cef39dd59152345c53e1fd
f9471cc67a54a9d2843cb707bb069734f1804f1c3c759f9b211f7805fb6f7eaa933d5615
1bede8fbe2bd77eb582ea52b072e0d30a97d0555558c546c505ab98e9381902797cdd59f
fc099d9af351dcc1b1ba143aa13e40400d34d5bfa32cf587120533d0447ee7025fbaa2d4
ea530a61b1885c12bc36cca90e66d5bc9a15802628c39e8f950019904352012df078eb3b
c1535a12f0443aebcb7eac05e72febffe3df2ebe018e99b61571b7ed98f3ed94bc34998b
f530f5c2f172ca252b64f93d2df9ec5a9baace1130dbbbc1bb2419975a4001acd6c3938e
ac25f7f485a25f7da671334474403cb37968ef510482e92bc06298297678597b6ab0ca4f
4fee90f1cccc37f629752748f1473dc64fa99860304668a06565e78c5e3dc9599641c5ea
4abbe705f15a5d84052daaefe83f2e550edf3d71d2f3be0b6ce47118f6bc3041bb75cead
28440f8d365273573b31eb68cd62eba9942baa5fcc65aa733b67d31a4663f88c4059d030
549974e5499bd9d631a4c8ea77cf08326791637d500fe581ed655cb4b474e2d57806bcf1
a5ad2b7351ea562f35a94378645d704aec9c81d7fa647930c505bcc48ea4fb225f9b3805
55e61520c61ba6024f20c9975b5e2969289d1db18ca3f59d8b65f19c9db17677a9b0238b
0f40ffdda77aa24b0ecaa7458f04d4c38fd0b81dbfd555d203e8a086f47013578784df96
8651399bebba2e76d34b79a29f3dd060519469884daf236629d29a5bb84f6ed4b0c85a69
a314f4271aa6a0e8b97b8cb1cce7e463205e52661be2d2b2087df01779206cc1987e527e
18573bced09bb2eed50aa10aa7b926f46210af9fa1994985750b927d477908c94cf16d1b
333db91730056f1d7c5a490176287c394470827c79b15c09d21e05ec37fb2851294b57c7
ca7dcff88f96f95ab9d7f24657dd2457754a34a99191d137480b527dac5ba55f60cbe716
2a9c200abdd06dc8ed75ee4731f49509dd38050559dbe7cd4d1ed7133535042086a0a1ec
d445275a5a8e0966957838897e9d9a06642295268523576ed432464e2655d7b17b9a3515
0f775a0f25465821daf81e9ac7a9f6deaead847c6e0c3710a2307fd74d78d8197c38a386
631fd3df64eaa7c5938f271e130dc3a112ffb6a18c155e1a5fc2e69575202167df4d80e8
bfe174f84ca968c0065bbd20f7de87dfa0022c6d1a18e567de52a37e80a458807be3de01
fad9847eb7adff6c0b5e01e3a972d07e12213af0095f227528075cc6d4875e458f6c84c4
c4404be019a68bc71669f69bc98002b2a27b71ee039bd71786e4a541c97efd99ca74e12f
7a1cc31a13cb4274dceb777ac7dcd48585bb25ec8ff369afdb008d4f29dbd851c2ad9bb8
08338a590dde19056d80b350d5c42d64b3ab998fe2f15da7fd43f762f34f284c67e09959
889f30069fc2e776c0a439126558f2d7c1f6ab3eb38785a28f4790baa91a5b9bc0209c06
7534a334c1d99b13c14b71d1bd3ca4286d5800cdf0cfdb1334d437cc616a5cda1ce8f416
014bb577a7a8cf834c99e4aa384e63f21eb3c8bedd731460c78b7b3633f788c17b2e7d24
d815413e697f4a8bd95271c251213169c491879af78175e7946664ef398cad21f7a9d70f
2eaa11233904c27faed68e89d8a02328141d302ee4d0ca621267d151c83da11c1ff1ccf3
a86edccfaf5f83a7fcab7315dc07a3d19565de84629b4e0381d49bdbef4ce4f32a1c60ef
c3131ce8a936386fbd5052b5202691376d207f62fae5aeecaf718521752effd58639bcdc
dbdce211d8de793c16f1bae32d538217127be491fc86f4acc255230bc341d125eb7c4b50
fb0c7ea79cd39ef76a692ae14c0f2b298eec29913f5b7594e2460c2b6b5420c0fced6015
8780046dc282d0522fbbeec800736ef181cf3663fd31dd266de2c5eb11dd1e83bc430712
573eee6c0c9a0e57c505dc5464a770ac29c4702ae62de2f46147542cb48cf27b85325575
c3c45b09675489cf7d41ca238599360b8a0e313f7173413f9ed5f9fef99c4f2cd068934e
8afecc450d1d8ed95dad1d27ef0c416b2bb5b38531843341cadd7c361678e51819feeb35
fc3952627f065cbdcf5a5ccc39ce30cb5e75906fb195dedc949350c7b87618b46d2a5ad5
1b76c7000f34d912a1419d16c4cd48c8b6654033e602dcd7af5c11faf560baf1557a90ef
274c22082175bbc3d8d38cea770cbeed7e0c931dc3d204e644f58dbf044bd95ae67c9098
a19c0cec4b0665820606bd982e05abc0903a0de733c2ed354b5425eeec2ffd4de3552d08
82cb2f5b364b24950dfe346a8d129f5460d7e694a7cc54802c008fd255815d70cde1f600
e273416271dcf95e2781693ec2187df73e646793b5c1c1e9a49753722b1d700ba7a729cd
820d0e6372c24c598e7567d7f2258264b6df4d5dc32fc32d534e9e26a3484c71918d8aa7
80f10b5973924c922dd5c11f5250591c40d1ae9aa7a1d0ebb819ef8862b5bb3fe97146f9
ceddaeb6a1fa0fd34fe878883311da77765b7e0b4a99490f5b2057a97527330b64a3dab8
fd20cd9441c9041583fd9acf3d401e325bfb574b0806a8a912afc2f88b99da18f7ec1bb3
7f845529e1a3998769e65243e48a9f5f9e419e262ac22631002048054a6d499ddaca63ae
c371671e1c303d956d2f5d74d7f79d95c8437ea077885f18234ca34b0eb7146a9b6c082a
4c649b2f67f63846b23ee2e97fa7c9953517cadb0d611dd6f884462b7dbe547095a10e74
856bfb402e7d2c341306b6c319deef00f2390037a00d9b95d433f49fb1bf8ead65e922bc
51ec97402a96a3637847e16fbb14875844fcf1b950213f1c6a34369326a00405ed850cb2
c1ae731e636d57be420696c2cc20a07d2c710ba2adbefe0e6cff5e13475ffa450ce100fd
9fd15a21ed2acc81f9056ead6a8298f9a0af8f28202c473b759882299cdfcef84e9cf8e9
4837ccdeb82eec1bebc5fb203fe7ce222dce3f07f9b9c824ac509279661373484283bfe5
b6b995e991a954e0ab773e7440e8010b1924e69b029a673c1d1bba9970330f3b30de341a
c26d7f18f145ece41918159b748dc1c0aafc0f273553c0559451a2f02381831e349eabd8
3b355cea718c0d66da54f6967a12133299b1b5477cce8472791d0dd566d772a3b95b52a7
1376079dc1f5fd454d4daa1d8fb825d79c4c32d26888262b62ba0a7528a790161f449571
002c386a3ab1b69a338d8a9cd44044566ab1823ef05570829ff2afb3a04517c3fff0642e
1113ff8183006215901e4f9ef0be12439f0339b9106a572dbce8ae5495b7738dac42fc90
8a4d2163d7c1f44d107f5fc00dd7fa21ad687a81da7a061816daa87461a460e92c4025d7
c0819f49970a2724f061cdab9dadc36d1970f56ab3ebc123fcd83ac63afba6bb30bf5ed0
e7b98e0152b90d473fc717a9cbcc7ebdf5c56c1a4064a8e7e500cad0bad70f03d7621e4a
66952d7dec3106558bc024aa34c6da09a1104eabc1331bfcfe6a7461765710c95e892d9e
c92ba2addfe5845a8fb7f888e9702b5207b1f56f788ac214a72fdd70f99e8e87eadeae51
b2e912cefcc5b571d305372451474b8310a71ae9b4423fd50101e8821a69ba1f8d17f01c
a7992c13fcd3cbe158f2d4f1d6899c6c8e4631e366f42bb4b87f10b08693cdadd4ef3b52
288da3e90892c37136b8743d51b54aef5c4a70e2fc07ac1cecd6f578cab1f695f4aa1fd5
3870bd9a938564d3b61f04de062a4efbb07e5b6d643ca47a2b9a1f1fe04938d67dc98475
5eaa2141e610e925ecfe6992408858e1494e61d660cb94ba836bb312dfae2962ce8d921c
13a46351f861413efef2a3b2a9a87f1cd3475a4923ae1a18d88e7f2021c1ac8130a6e374
2d8523f48dd1ac1bacddf741822fb74b5998d6d678b37698c5f6894f82997cef8689c181
a49f8497f0c4159260c2daf1464d2184290b17208e9a10b011627c3fdb9e7f092d966478
281bfebd0341df16710951457201c3956a06b30c003a91f7d58489c5c570b0462458dc72
351763b50cb8bc5c3e4e937a07ca111186e786936d206843c2d7b21814993181783508bc
2bfff676e5b258953150f9ba577ee19611210728eadded31d82e8c55a3407d741fcba38f
32ec046e5b800e5a493a0742a592da72583fb2e061a5d272d83cd58a8834cf91d7121650
8be8e7427963a8bc5774ffd037d18f60d3e741e8b452f78885b0aa52503d988a2e672b22
ca654e095ca61f4314938cd204f4a907770bf52eb7030a064c24fdf662156fbf33988677
f23cca756820f5d9d44f634f5362543f359419e6655f1dc97fee3fdb8b606cbc4bcd77f3
1ba3cefc8e489c8b49257d9e7e73b45a4f7ed48f4d6db768be1cee6c2395e03deeccff3d
a59c802c844e2f3c41fb59e0663ec3e5018431d998a07ddcc203f6ac840f827031d3b29a
3520d3b37501e99cb00746c87e5d0eade534cb144281fed933a6ad9cb62efeb31d6f43da
091db480c01002a9ba7c5606ca4bebd889e524390c71963ec9f590ad7c5951179db5120f
bf252d2f5c34f304f6190657d3c1add66d26cfdfc8e9fee2d5fa7a54b17dcfe7f74976f0
98d23ca804e99bbc5d481b51bef7948833add2b47c23635a5ad8b639821b6072cc6b5b66
1a732dca07f333818d2993b152b6e81f63a64fdd22f8d542c9c2f4300e201486e5c73433
7cb1f4061c586dcee2eb899451555f6641add90dbba68f08e50cac5ee5a27e21c3e37ac5
f6f783b57e7c19cf8fc5e5c10426e7ea5d4b01883d46a41605892bc70e269f84a55e7a82
2b69d97027387962adcdf1d00aaff3b78483d5dfb9cb53b05be6261b21e41abc692f4aa5
6d9d21b4c44c379a9f4eb466fbffc2ba3ade79d519f1fbf984d151e8570cd0ecfc40ddd3
bcc1360917d9e44daedca0c5bdc3d2fee847c4a97711242ee37bfcc040072a78cd08278d
f116a32bf037100ddcbd1f982511af674fda64ebe1a6014fcbe832df34053ee75bc33a10
70202425c4a8fa189662a3c3a1b1777d0a2f0a812aff68c724751f37b521185f253fd9da
c1305d3a327fc595d16646270361adf8a9a44245d0d3370d84401137836c8da724b46de5
9730a4b67861a30c35d5104c29ca827fd21d75f1799a620e51d296830f316ca0d535e69a
1fd0dbe94fb3fc5dbda7e43dd19a714b9ed5dd6be2e19514a03e4a7952b42edcfdb92345
c860392449f487c3624dd91cfa5b22143a4851a64857e989259d2a96c3f7bbb7b6af2dc5
e7495833a9c2a72b61aec7616b80afe0a2f32c8b5e6712b0c68b87d05a049767e2fb6297
653ef882d33e6bf40a088dd1dfe598320ce063ac5ee38264a3d5d3b245381a0776c1bfee
48a661b15faa1345f0516c5d40917117b63fcb34a59c3ae50a659b178c92ca78a59aad85
afbcb9c37cad978c290eb141465667c435ae98b27858538a9d8e405847351c5fb9a712a8
ce6a6d60d0e666c9af6f4cdae066c26a24806e02899f13d06cd6694aa98431c3610777c6
0cd13d113fdd76cd53c007edd6789aead754a8655ef4e18d36775138faddf790eb1dd5a0
7e7eb47f5807b21928b1bff2909a240bc76f4efcfe0d59f50eb8661c3bb279ece00bb68e
3e6e85214ba5220a29593e4bedab499c33d43ec1e14b84003e56835e05412c57d4432d45
fbd53cbdf33211ed9582108f203563f71ca04f46de04cd4a802f0c106f5a29395583ca79
0b7c2042d075dba8ed84b386676af18905ea9865f18cec4c9834819c5be7abd9c001428f
6fac8f661efb135837315e48a1e8016d6a387fe96a1360f16c28059cbcde5a265205647b
600c18d08ad51c8777a8c38b8ff17055c31613f92a305cb60458db35f5b423f651325efa
ec072cca2f95f5111bc7cfeeb87624ff98755abe045ed85e944ef81f8ef59e3fe0f88394
d3348ac12800d232368ed6a134a05752b16b2b59b0baaeb27fb817af2604881c3cf8d1e1
52f934649487b7f0370d1533885ae0e585345eb3ecfc6a3dc14c0a9975e5ce2852cbaf04
ef26b48a7262e67ba4027ec8b722bdc8242715de365c16d167cb0eb507d1d1708e47276b
66cf749dddd75356ff500602884c43c981b8ed22cd0aceea60fa3c33942cd494da6f0a60
d6fafa7d685c2f607fccd6897222879d1aa15787eba6aab9463d694523ae4ef78d3049ee
84e7946b93752dbe0b6aa4033ae067a208cf8484eafcf5d379cb695644c7a890a847d670
dcba3ab945e3873c0fecfe3b7474f51e5051644c7fc3baf9961f602a5d209d4a9dfb5ce9
31e09aa5e3cff81754e50cc8ae3314b76b472c70958cc9f5daac68a713fb758f672c9d33
fb658595c8a032ea32601fa0eb0ee1976099c45bfb0d165ef1f3e46c51982e35e622aea8
04bc6e7ea835039b8e0456593e2fd240de3ca828e662aecee8e59ba9e614d175b75fbfbd
88aa4c90be7bbbc9610cd6bf3a05df2b5f7aff2aa90198b6e9d0d7cc4e0b6a4db0c2daad
fcea9ff0907172b19a1566c751aab4cd44e08c74f8d29c04dcd9f32d005f73e26eefaacb
6e1668f392138a3205dc9edf858d408993256e27a33914f6ac8fbe095dd184508f8c9735
668e3c59fb16424dfdc720d3a35aa34d3de8a8a4726adeaf3ec77a7974d11e48472713fe
81fc6fcfad43f5a3a9d259f3f4d0dbcb515b1b33ebf58d20297c9fb88dbffeaa70ae0bad
9af80078b734604519c588c31595b2911f69bb0cd2bac23c98469969028f1d76b6062dd8
35569277d0e77f46765f9494adaa9fdbc5ec36b1b25c82706ae305ec3a7aa210c240b3af
9b056e9aa85a7a0c2ac8d0a0ae7164846b5c2ad06c33a3f1bbacc377bd6a80398746bbf9
87034bbcb1230a7263b297b68d3245183694808b58029cd36f0c32882ef1c004c432fda3
631d12e4f59b7d2d02525d28d45e202b4265d447b4ced76faf1342506053acc5f185531d
7584a67110b917b278e575737b1fb5b5d3484e92c2e5d2219f21d95e03802eade1176985
20433c2ef77a3947068e5013d6d185e22b00b956223e7464dc4f60c46d2c4b1062c26d3f
a22356bf82bfa0805fa52d41167ec365f4a7ea665ea76faeac563be556dba41360d98ece
0196605b7fab8d6015121dcf6a9782ebb39236e0ccafec557f045f2d2ba0ce25676d4f20
e330d65597f3511124728f1232c2aab0b43b1e7369a34dc9dc6876423f86c4504b8f2a31
3c0bf44e65c457df3ae62a01844dc9ef1311fb932595857b1b1fe04141be1d8b9826d6a1
b9220fd9f7c1b0e3cdfdb46bcdd7f295f0bf00666616456db2eb60d6c25f8f27861295d5
88c73b9a27aa1137d8e023e00a23390c5557d75d58ce0e127f15939691d891196b980932
3cfbf5e7c12bde06be1592eee8ad7d35bbb9957c7c2ee498de3c90d2004593b2f9a1413a
8470f3b7b05b6a1873fc5272c6bc95b0ab6c8dbd8c56a01bdee90190615ed41c07a6ea3c
658aaec779fe434fe0b365d9b459e22d8faceeb09a6fdb3c20c0d7b621de8dbd9800c2a1
b9caf0dbbf06184a31a63e3bc705e3aab7c86c06fdded8df147f860851ab13a65c28ac30
863abac96a23837c069fcb0717c58879931956e68228995dcf4f5e6cf0e332969a8675cd
047814338dae789e55acb34c80d67c94f54a97c168805a230710e39afe0f4add8c26dd4a
0d541dfc1187f6d46659c5401f4731f9198b9eb63b31cd6d6e5a15b238ea65b87e269923
99c66eb7e195881d61026534b4c550645b7b01ac3e2feb7ad135ebad1985f6a71daa2150
96e0e761f3ccf73b59eeb1c479d6c48006d29a101fefc301124518de90c7b528f0c48640
32eb215b2220ec74beebcca4ef125adf14f60b96adbc01f602538903aba248070fc43ede
3a0b6427e47560b80c80cf8223eb98b61dfbf65321d53ecfd82eeb27c4a37d20db09e7cc
6f3ee8122fc2b4c7dae487eef8ef84c96bb9121ec6e0d31a4e7936fc6d40388562082656
60f2b055f737c9ee253e1705384d56c5f753ffaf218bd82a6f65ce5e28a119154b4b5091
092bcbbb5c905c9c83c750be2c98be6c470afdf03ce9942c5392e7f05ea52e10f30b9e49
733ac25544589acf127e957bbf5d1475145ace6040e30d1f42e928bddb6a46b9e9207c95
ef7cda0864b792823151973e980bc2f90c5b7e1501c7fe99946144344f709a550b35bee9
4dd60b410ad2d7ca0560344f0cd45fb125d81583923605f3b4ef481eebdf27d8daa7f7d2
6e15413ba74a2dda808d07b954088ba2e21bcd8680df649f98c0254189a4ac74a52ea0cb
185855f30d79c2eebb86e9ab68ed8b3ba54f4313a583261eb5b9bd1eae0be63b537777ac
ce34489514c499fc62f3ac15baaa10bb8cd843bab1a1fa7643101c1b67e7f8d4b21fd865
5eebed19fc6d311e256663fee177c8e6a889b7f8c0881f3f23fa77afb67b5c9245ed59a3
646ac36788b616439a565871452ccd42773c05387a06b6c5e70362dd97b4bd61ac462530
ec1fb0f440783aa8494203b1383039980641bb9beb0b59736b05eff88eade7b5a179cdf3
8ba023795ff9d49c56f998ba7e3cb5ce9f04fcf30f66237feb126ce122cb238ec3010ec8
b492cb249ec9b0283e8420a4d71bd176583bd9c03a27e0484242c4ed86d596f0259d1d84
4afb713bd512885cf1b2ee5ccc55be163807dc4ac87ccbce71fb910e8eb102168f60fcaf
ef4398e0d8a8a6aa1fcdbd801f880f7c34bfed9323489846a5351638eed2759c24be6505
e98aef957e5706a173e172bc0f50fd3fd5f43e6a64f258e49360580fdf74ebbc6c569905
4e5752e766cfe4d2944803dcabd23dd1bc1d74a0703418a48db56169bc1299d99ca275f6
5e1fef6e51965a7998f5cd6486dfad92eaa26f74d972c3e81a5df4a67b5df3a32ebf77ed
e2eb293af2d30df0b04fe1329bd125d65ca6c661ceed16bf8b6e7dd3276148b7122c432e
87a90eb414286cc97eaa69b2e805b06df5a40c9fab854700aef453a137f3ee77a9ad915a
bfdac1b6c7bce3f7070134df1f2ed962f395c06847550986c45067a9b3927403c49afa6d
6d46bf1f537eacec716c22ff72c6d739579886d292a3a374fd24f198fa7d5363688cc226
0dcb3632961c2230c29d3f9b0a0ad27d262819cd4b7b0579e5df54883b0ce76815d1700c
cc65862f7babd09654f6ab13642d526f9c1d4ead0de071261f45ae02b0b7048b48a40649
a9ea3ae356b8a08ca5ad8fb4e3b814eb947a27e7dae6c97300061ca1f9954403a673cf6c
6b8873880f2b37dc0eec47c8bdfdce66a3e6010d1d0a0ae52956c2d760a48c3a00837971
a9564b4458b14d34c0322ca64b5e4373bd8ab21526ec2ac270b45c88f8d15d7266e3391f
024842f40ad52e307e58c7d20ba7b7df69d90239574642b2d3ade265adcd34ef8d34226c
a6cb0b3d670dca87139d9bab4554861f017460eaae9f170f25bd137c7e98c14d1a64c7c0
ae621ec4e56bf62fe34cc8eddc8a182f38ba3238bc77a1a59922f81c0b97cc4df98434dd
6a1a157b0fb5d25f2e97bf0e007deab792980221ad1e716641a8f26809a4c6b607427306
c262af900de66ba907cb02447fef8028d9c55bed829b99bf797965806457143fbceee3ee
07072a424666a1dddc76a51a304f4fc652c43f281b4233559c9eddc36281938202ea7218
200e718d11e422a47ca431658333b934ed82e58846ecf176586e58d0f702e5db56eb60f0
f5332de8ec1118d7b09fe9aa10c63f4e3e0c57cee58e0d24d06d4d3ec16bcb0debc2df50
2dab2b646437823126e068bb445a6551fc757a3b097cbac9611d129ff6c678f2c08e095f
3421224388405235af03af66467c22407ba2bb1527d7fe32d10b5a4ac85b2fd006bff081
262f6ce5986bbb93f180f3c14462bc4fc4d90fa64c472f49dffd4ef54fa94a6acd1bec22
a639e21f43768c173f70bba3340987e269ea4b94a81a00cd97fb89f9f14c3fa811b3605a
b386069653b8a38c3f1375ff3d5ca19688e35f48beef5f7f90dda64e10efe94bd1d266d6
4322100ca04e72c2bd7540ca634993193105f55a0103a7e720160e9a9659e55806b87c84
5c163993cbe35a8cd1c1540f5f51cc4cc3ebc854b730789b794a1a0fd7d65a020f579595
bb5edfc693ca1f25eb3c2ae437bf44da8252cdc737656e2f407c98d1981cd40ad59c8892
9fd80d929be09fb46c3b0c8d0d09daf5b4d2145d224e3cceb642a398967826600b5e2a95
75796dc58f0cb68e910f0e548affa7d8de56ffc697981ace11954b6a23a933e1506ca7d3
9ca97668dcb0dfd0b4736a1de5aa1fb2ec97c72cd213596119a7a3c01637b3e805c9e14d
861e489edaea9c5d3e0b3b0a4bab6c3f62a2c5afdbed3514258dc0c630bb69db12d5a30a
3d3459a2ead5616acd131a963e29f99bd3c44f24cf456df36ff832c8362c4fbd4dd9bf32
aa227b078cb3cd0a6bc1d5123520cd3a3cd1469fb000f62acb3ddb0408303666a63cee0d
7f53b0b8c5526e0a858f55ad1442bf94f99910d67cded4d66c4abb156b8358b871ae6660
b1ed8e9b47c762f2d93e65b365dca7a65285510030a5503c1f7193608f7f3c2b2430b2f7
00dc810322eb95e58f0c1be5e61385372aff181283124e1c08d38b97a728135f6e3569b7
52378cf478afc0b32a9c95c8e197d00fac46294f526e846acb0258fe4bb380a80d1d234c
bd7647084f2b96c5f8f13586bf0d321e7de7bd779b446cf6c840049055807c30681ad170
437caf9fc4a66304a11ad3f2f786e466c992ea75e036f0941c0f6d441488b692507914a8
024e596c3d3a316a512bacf44862bc023a5267bb7078a330e056bbbd5e19fb5301325591
b6c403e5b5c146e58cf1496330d767d0fcdc6f3bbb56bf05ffdddf032485ab38a451503a
08eff0f0ef71b2854734b3d8495d57994135826447028b055f9b98d00667d669167e800f
7bd88885e48c126a22e93a0692ad4bb45f9523d4dc72f061c1fec693e08f355c35913c07
879ae5901526b7d2c4a7d981fb84dce9b4a2127e39a898d4c5720baf80532c153cf4df9e
e1bf5f3960f4f5b2b40293b34bb00309694ec82990d5f9c40007c48a7a993d303cf04987
e5c4b366c17d86445a3c987ef928d95bb878d9129811000f3510452ebe8cac228c4a3ba0
66bf1442ec3161ace98abc09011b1b9991fcc8a13641671915656edf853c7ac2561bf6af
7d5d4fb16bd0b299f0af916064830de457b7e83b999d1c533a15de468198eb30ccf183c6
17643de74453c08f2fa5f08d727f93bfa5223d3f9345046ff1269cdc457b6b0f2de4e9b5
6ee0e7d15100eae42e910fb3229e545e70beb681b30814c21dcddf889ab690cbd4fdb69f
80baa5c93a6533148293921f1507a03d45eb706a13862ba9c6f3ce7b3138d5ef7dd826ff
a7a00296e069d9a98f9f2e5c136106240b6ef4e2fa5a703614f52411f46022c4279dcea4
7c40102577eb1c1f46d0cb384c7584f06c713ca026e4a85cb22fc80865e9661162a30be0
ee1b49a43587a36cc2a6d77d90fd7d30fda207a31a5f72e4150af6c031608dac022d5c7b
9db0d99c388113c7d3b1912b5267bb438d1f7898633788a1d8737d2b48fb1ad61890371c
4db44428eb2b5a64177d487b1a5c9f2c1fe06a419ea3e6499bd0b8b916910e69d7e65c38
b03fe6890986bdaf9d3b84bb893b53a2841027f575d0bd4722fb32776555801a096dd445
54ed5361e96acee3412b68dd34487d6b56ad985ab9a3a639bda4bd3df354174eb5902bdd
10d6e6f4698404268d90aff23fcfab33563130e9cd714992dd476d6078a846b627526614
6bdf3c96ae0f83a5ad6ebb024a5ba9b19b699cd17b6ee502c34ab8a9f4580c5d9f2d9681
22f50a03440a0fcfbc25d19e263d1df4bb6f617bf332a27bd1f6212792e0d1e1cefd717d
a5f02ef27923993ef754820e74f5d5f9dab791ec02843e79554b58bf27bdf282216b046f
90757b731000dcf9b4ce5ed909804cc2b8f2926d0d8ab02017d6fff122867d8c47e3a24a
37b128bc3a53a54c4cca5253a3dce44ddc2b529f9570c2ae579808372be700a1c8e1eeed
cec432bb05fd7baabf89e3b3ad7f88339beb2386be2208ebf1401c89c9b1226e1c8870bc
80b442ac4c15886e8ef359813c159ccc464deae9b4c4b82030bbe231c02d25f86cc0ffcb
d2dba9ccd23eea354d62dddbf5474db6daa76ad2aa7c190b8ce9d47c12196990637292e1
df416047c7330dc68ae83ac1a37d981fd807ee6f9a0ab38d313ff1a4ca39e748b2286a74
3228dd698d34f6ee72732b8fc5122775d0627f8f84f6da40c5ab53ecff738212fed5a6a8
f40dc546c97e54040377804e6831a2fdb93e6de4b17d0a6188696f09045b6f10dc12dd8d
8025ad35efc0f56000c528d26c0d4e25f0bf475e404b28f6f75de58627ff06c14e7eda76
e152b0e08fd926d1112583c10c939ee0ece7748e2b63662a8ff9e4f780adb48823a622e4
f643f339718a54d4f242fa7da3183652fe86c1b156ddc26f079734c494fc6cc52e85d185
30f6eb2cc64d361d05ba5dcec1c06c24525d5ed0f558ace77f4c87b601071aad7d427967
200fe675415df8213ec1a398e6b765d33cd07a3a864916ed05b90397310ce06c4fb73854
43e8d8dc8d218983860c3ea456e9c199494d6b9ed8be06dfd556e39b02af97e8c7483f22
0f0188d56f26103b8b1c886ea298bb1d694bb499b734f3d9abd7afa6b5eb7f6aaea39d9f
5515b7dee47669007b63a2138419096656e9fff581cf1e04f2e95288373a2c372154069c
6cc0c2253fdb2557e82a9719c419edfb2db33bf8c746b0158298cb7d7460ada053036864
dcbd54c9dca93e2a7fea9fa87cc5194ad5038b323a947df9d1697f9fd7f8a11f217145cd
fe8f78c674b555f3e24290d22b277c9a314bd8401b06efef413fd080a08611070838fdf9
2e869a3610d39bf4518c4ccb2b93f3c6ba9c2df977a8bd17daae20bff82bb78388de6c8c
3a035081d3f59d4ae4df3b321ca1d03fbf6214202323f9a3de428581c076cdf6073d1681
eb7903199a5505aefc0a3411fde1e0b9d6a8d6f3611c93047e500251ac09abbb9e0ca98f
2e3209e421f51e65920097287f9d4f9b1c2eb6730c73d9af0aa772d00a3979adb30dbfee
3323c5ba3ef57bcadfcd871fed9625686b72816c0f8be751d9041f189d16f890f1992bd8
0e4353664800c278b6187b9d5e35f01803ff4002271ec415890018f5da4c2cdc79d57608
e12e2432c7c5319b7c43635912de4bf4f77873d3dff38ed3b1ff85d79d665d37e3628e67
7e5daa48cc0ebbe25a372751b0dee5ad38bc48d8952771c76bf51b6c517d771203902a18
284ace9086807b238fba1153de0cc9bfa42348826e4dddf967067e6ea8ab27529ecedbdb
d509da2f89d77d965467733243216c5ae77b1b9dd7d5e572e7f43a9101ebc6760d2da36d
ba585cf8610fee791fcff4f8fe3803a81d156b5e66098283e10570ea7086246c3702e1d3
54d4736ec8fc09f84ed9ebf0fa456725fd771868fce9e902fb0d804945512c21dfe85005
a85fab652831bb2312bf4edf25dc95847d621e6e9742d4857c2d6728cf41f4beaf3ef975
15219a23add20200a9822ff396471bf5b45dcb0264ae6e788d4dac74172af56a520382bd
693e945638fa21496747c697e243335bb2e093d902217d8e63c4069903f682a42e52a647
2ce43adae35d787e3d290743176bc9923d7152dbfaa3cb5aae847c7d0cef1534ea6e73c3
6b14041eb47b7cdc9ee534f7b8bd2fc37bb5578ad8133f596367ec279e46972a85e7abda
aac6677b053614676b7e5ed81950f912b7ec3836aed320a75544d6dd8b7075d3455d3fad
d6c2a60f1894ea26baa1108ea8ae2c4d563702d8c761973198b17a23db59ba036f8b241a
f68d13efdc8b55f459d8526a3e13325e3e959240a62ccf865c086eab72397032feadbef5
b35b1941147c74563b04bf6b9db4d7604da26af65f881d1a75248bab9baa0b23b3be4789
7a6c89669ec290d06d9fb57b27786bfec2f1dd6ba6503e3b2a60c2c3e2376d3788818d62
654ed51eac441fbc91d8d1491bb46b91df524c6c454b3421859439da730c968f62578d52
ac14aabe14ba0b44655be9307bfe3d79b2d633f2e8f47268ef74a421efd11b68d32197a9
972b648dac67c380d112ccb9ef050fbb510465ac4f5d66b03ce5faac14580fb44dd206d8
e41769133904ae59210c617941990a89febb58db3ae24f65bbe61144c85ab9f252e01cd9
57bdab253b14f6ea13d602ced5998021cf9a394a7d2931704e621270a2efdf58792741f6
ce6ec44813c07a85d46eaa726660b1be10a02f61264a1ec1a8dec18122d0c4db17923387
70cefbe8b53720862cd5a9b537a7b41f6a84058b8d2cad55cb5b0355994d77d4798bb41f
09e84773cb5e7173eabe610cf867fff2679ca13ee907eee58ebbe75f0c2188d6523dd40a
778f9ca4d0cd71c1d990ec603098b4a5d6c32c57d15686800941725cb46bd0f07565ef2d
b976c64c41229e5512c33b6b67319003e9b271347a2b5b950cbac3e4692aac20d1df6327
51bdcd2240fc1424e16a7f19eab705988314074c7e8d3cac224bdfddeb41059b926c0a90
da971d98622eb504aff665ddfc733d593d539e87784c3ba3914f2b56b9d1a7f2b8e8daa6
0bc27452723fec8862ec3b38b3e6f3a42cff9e7745517a674a1a093d25fb9e42d4077add
bbb5775bb3253954578553459317ba4d8aa1c29b92b5d310dabbac86fb9b6fc8105d68f9
8648bdf22f86fe50e8716a6344a7951ce7cdc7bc2d16646a7c173efd8c121de065d8a12b
25d72fa0a72a36b917d5316eeff928f43a0089908baac997d9984774b64765e9c99f6d0f
038238c735e7b9dddfb4688bca59b90b0297cda4854ac7fcf3b29325520eb47c1ed3cd3d
b3c25028359a3d30c7bb3429680fd4f1a6a0259d7eea010935930873eca4dcd6b814fd67
5ad5757b24cb5092216c935f4f2d6105bf279ddeaeff43c73282b956f92ad840a013f69f
b8031f885e523b5c522d4316742159477b8898a1f422ba57e7b8b5a5710a9b0b4d7f458d
54436986dcf2d7fb9bb8367be94397cb5eb8d5b00d86c41921ed9f01271c511d8db484ee
d581244fdc1c33b665460e35616ba7cab52b904dbc4ec699e0158952b60a077bed52c952
639f232923890f41cf1f3521f7340139d6e62de0866474d902884eb0f6454509e02cfe0b
a52895c33fd1b16b35e46d64b67e28c2cd6681f8d454ea10b1ae57db8998f9fa0349ae6f
36fa17cbb3454c6945addb03543b915aec4d1253073e1fb1bc85932ab6d096cb417311f1
620e62f03fd7d952abcdf884493013a0c799d9456bab4473dd4e75837de31b25a71fc46e
a57f0caeadfe7df7e6fae3653ca9493ad17384e87cb6df9647669631f5bb733dc42e9645
4e5ee391216bc1bd5742d9ecd5bcbd8e1e64404256b4e2538b8eb05a5f4841f1475c75a3
1fea8366a126001496b65905c0ffcbccb66b7c5629607fedbe72954a4a5ece4efef4c8c5
f5498e1ef49cae4cb65533bc706b5a1b94a3d2b15f79a91667677d572163da86f360ad49
6333aab2093b86d65996e1e56b40b6eeacf261e24432ce73dcdd3c8503ce4bc3470a1fc2
3a31c2ac750d661d56c39a4f7a9bdc8f88c1b5fad66aa8656b54bc3914a1b5bb9d312719
a935d645199c5a77da099d2b3af77ec37528ff5adc13d6a0990c38348bc98f747785d91c
e09ccaa6fd4d7bd7794eedb8a73f74750f7cd44df821a652a9528e679e506e0eff12e0e8
4af4fd3c34c39b49dc3ece4248a76c0f68c36b18fedcd90f05fef90988f159e5929b363d
d02af54011ae9675c70395d52b6534494289f612d96cf731ae368e4eca35535cab7f100a
b8cba0a2aaa11f15a506cddd1fc6f5bacbe32b839f20d80c9df18d1088e5123f78448339
c4af9c42688f148f1fe55d61cceb8de549007a1b252d760f4864f1faaf67a1da54663198
52c66db53f51928e3ddec1fad681a3c32ec28a1b603386d6aed47773dfdd11b14b2ef063
baf86876b846e2a738b9931e14f0ad50e119ea12aa1c24b16ec3282f9baf7a660170e50d
4cdec164ab6216503f0ec2dea89c02efaac5580dd3fe99a16b50c47f4ec920c62517f11e
4ae825416e91fd32e191c59a1b25bf2378204f1a59fecee792d63e7cb16935d28f7d75bd
731bb4ca32a8fbaaaf1aeb2e800fdb6cab289e697a497885c0beacf4d6c886e72c8a254d
f888cb0eb21ff999d02bb329a494da7408e97178eb8a3f78b0636cd64a0797e62cc56f56
d6281de345fb7d6e7e894fb6caf96595243abc7876064a5383e1c574b117cc2b039742a9
7c14c8d06c50349b2eb32d8a1a74e1935e92afe9ddfc960417f08b0ee14c9623db233186
ab14f0a9341aaacad39ea5fb77738fee3b625d857947d1defb5bb6a810b90c2820ef1bc4
0fc78f7cb8e40ce776f576d68adb6f66c2dbf7c6db86bd4e3d20a067d6c3a40ca2b9df59
ccb7a808657826815f6f8a3ac20808d384c293d0fffb983aeeaad11dcf7082a6e6015494
58d0640eb557a3a51681c2e696c61b434ea3ed554ea824e11223979043a1c18bf59e675a
51b1bda63ae07720a639a7bd2bc00677679b30b35c3f3f08639aa064a7df3ea19cdc80c6
3d1a55263806608d4541765a69f8b3b4288aabb3ff7f0f4bf25a93d82e024aaff9362d1b
089534d238b56f13e70c2bb1f1e089efce780ebf3356d967a3158f1c7a1765fa9dd7b796
4f9aaf4d81d860b3b73b387c894830d1030b70e318f1a2e00fc5b496d655cb87b923f920
48a5327432570c38d082dd23747f61527854e9d888bca5b28b4de30aa88ccfff51e5c99e
d9e96cdc0886583688f62c7727279f8194e3d3fbd9ce33b504cba412430da354ece60655
dc25b7c66b17f16132afd28feab444af0d55ebeb054c4bd4fa1dd0cf951bf1e8007b81a4
c64a5982bf9f5401f0e9a43a401379cab8ea462ac4774bd0f261ea9fbdf86688dc209adb
14e77cbf5a53c4bb98b08ed70f9c7d7511e0fca78dc6dc0cc1512669d61f8a028f91ff37
b593500f2c8debd44fc92c6d92231fb313a27ae704f87c41ef4ffbe39e8c502663034e17
fee6defef11cc3e101967f73733a4f65abb42533deb648038adaebab6d4f3ef3ebbed9ef
00425ee212d05f328a4cce7e661021c80b52841e76ad090b45388548b521d8223f0b6faa
9eb73bb35e9c560c782a6a876e0ec34aa645d645e5c5092bc81d18360c8a7748065211e6
e031db6b20e8c640ea65b4bf05d0ed672fd4e5689a9f1b732253ee795d3f909ea0ed1ccf
d7f4fcfac47f238c2ea7a77eef42c46bca8ed97ba1746b56f3c75a5f1f7a807a43c031a3
a6b1e13f4625608d9f37002e3f58c8c07f5b6032dab8a7c3ed0925c6629262d070276d79
849ff33218223ea3982cc6a3c8ac720cf28d05ba2bef909465111934e11a96cf61341d69
90960b3fe2c02f9de7238772fa709578cc4b7ec2f6562edea12e8fbc447db40b5f31fdfa
ae3771c0d70e9515284fdd0b6ea4814712832463d0a8a4c92235672e1789de9631cf71aa
8fa463278f575b64269931637b39fcb8037815d76279d0314cc2aa9d305f823946b1d257
dbbbde30a764ae56299c0632f999145bbda49e67a82cdb9355fd158e9bc55e99bc04d6e6
bd44dce77c2737e200226a603154a8eca7a492c61a2f787ba90a76bdddfaa4354a99fde5
1b406b8b304a831fcd748d205ac5245fb28dd9df7d00a52d21e790f9d2af2eb689c77ede
9343bce77431afa08fd1856ebb637a24d92274f339b97ec8c6325f352456ec1607b72192
423b15c9be241ec34528286e012adc5c8faaebfbb110cf450c9e1967f4eb6a50a3a55e08
ed95e9756c6995a6fc29c9030b44ad0e615a61eb4f9e93ac25160217d26c68f04fd8af6e
ecd725b5d6136cf92d9002c1d2c65e0285e35156ec489a53bb10583b65bbf72e474f857c
892d434179bacb0e8a8da0713378e0aaaf7164dd1fa2c11e42e56ed92192ff7f474c449b
e58149d2f2f39ececd2e3dab9b7efe1540c753d6f729a64ca25dfe9118ff1c6682116ced
f44d5cb91cd664f7e6f67cbc8ddf9ede3898aa555b41cf778b093b22921a3247a5906aed
69641aa91345bd24de4e61c59cb1268681b04152c7477f7325828ebe5df30298190352eb
f99edbdaca9364c178e23a26c3ae4393f07402ade851d30c4a9eabe0b79a82958e49f588
f5ed65fcac8aa76219412d4082f1bb01734e8a2ad656a384802fc2817f8e589e4fe0d2f9
38a71cb1d87da63c5cb65d863599f306d62d112e6c79085d71a4f047fd8f2820dbe27bd7
13ece6ab56b019b1cb8cd33381eced4e923e7f75e77d8406348ec2fa4e26b41afe8bc45c
132a9cd4004330eadf4274aea1caefb8d92f2a2fbe5febf4ee89cc83ce48056287f76fe7
c00b67318ef7e34040e6e7d63469023074dd30c11bbe6f47d7f51ebb3291fb9065546298
adf70fb4fe614d0bbc58425b47a655e0e03c301f982c8035fcc34bb11353c21c9d93dd3f
abaafb632c13fee975f9cbb81f56a895f83c4f53560c0f11e9f620ae6d89bcf86639d979
8f25102a47d1cc100f1d4cce33710c5756768d1cc074682d983701333ff547fdc272f33a
1ead02309b3113b52c6fb69ce30df1647a5c3c51bdf13bbf6b5be4fdec7c0a4701e3d353
32f47097aa1c604eda39f2dfb81119d41adc8a65b9944537eaa42e6174cb9b267db82582
2e40afc47bf82edb172ec98843107ab083402f889271e8c259ad27ee34facd2c7d9f7db4
fec5fe3498aae43f1436472d2381ef93a2aa0eca821d61420a8296784ebb3dc0d999d734
2d937275f94ff295cb87d29b11533475b95a6fa53f19a893c3f6c17b749d65af305b0513
bb4c650aa0135a249e0c36db09fd47f46a23baaede4de1fce1410a2ba089c7658bf165fe
6e2215ad67d5acba488f1e2a2b1945016b0eec6345e2f257fd8f1fce390df659a91f4ec9
72ebd3882e1ab16cea4557fbae06a541287ffd9acffe1d945657313d4dee5158b0c35fb4
5a20682acc59d1cca2e479c1d18c001ee08306269a9bbde8235fa0362aba359378e90ddf
383456e91f4ad961730c7c7ae49d231e9f853c28a7e676946fd86a0807c238cc8908aa5d
8cb4c048425d9e503dec53186f0fcfc40415e213d133e95f08374db06a14bfbc5b9814fa
e4f576f0596cd39a19fdb55ff66ab3d2a872ab0a8f2b587a6bc18523df7aef1a81dd5b36
b375ed2f500b5e01d15fb8c62a28eaab4bc6f8cb63fbd961bd6d7235efd7c5b184c7f4e3
b6427413229afaa9032f6bb79dc025b2105f6308cd6bbadc387808d8380bbde15763d567
17a77534807489c3648b7fc80999d4843522d27aa530e011bf66564e008cda8a50c92120
95ead9ab6204cc853dab098ba8bcbfa869335068d8109f4022d933050e324e0294566331
88665d40560c58ad8ed5f3a8a67a1a3d49f92f136ef26512cbe02c6164357986245c7895
57b175ccd58f75ad3b735c2db6480ca292a8e60d0e5ce025194523b066804349f156a2e6
bd763b253bbdf53d59fb7fd662c101027b85a81eb4f0b3ae2496cad172e2254f1ba2fe8b
4626ad0f5bfe4a8772d9dcbe38606ec3e6f6a93fff79a1a87eb90c203433286aa0afc09d
5f5ae00e425f6c489c15f986311ca11df21868423c11665927d54a5ff4a550aaaeac9644
184730db077609a42fb794457e551d11a2c7e783ffee3589fbb0cb1f75f9c53f9c2e2f7e
5b593508e727be2a6e2c992f253c0cdfcdd407f38715cc6176facbb0544731ec64eef1f8
bcc1edeae601a45261999b86a1d058cf33c239aa2c39cbd8e1ec5b23d7dd68a5641da409
dea9dd3057642ea8aae6da76f2570f169c2f4972754ae8d865316b994f8acf84d609119c
b51d1362c208935ee417834c33eb8c7e4255038f16ec772b62b8d8d7269f775c9cd3bc9e
c7b0780414a814e26b4a9047422e79fcdf7bf3e8f14d89e16d395702dca64ff22a1f5bfb
ecb6413fa6148b45025819b298dccc46792752c7aacc45679a3c3627a403afa916c59176
c13c9b79de09c0ab5bd5d7f038513089f4382ebd018bf5d55f9b0eadc999900836188aa8
e1fe844de816f0868f01b6b560e7453a7c0d650e9f864bd4bd7948e1c8621c57c8408bbb
7ab05f35fb494be58b506a5d312fe6fe9dab7ca05a1aae53fb06bffb39cb12c50e5f2554
b662fd249f4fe3e77660bbaced1c4945c7b641ea8ee244baebf55e638447dc37cf0375ad
35296fe5a5d99e31b290e4e51e470fb9ec9d641079f7d0f42ce0850b7f565e44d97900be
0deb5f3db0eac63b160be3b2889b84f1b23bf0c1a5a3357c6a48cff11ad339a8c56f999d
f4662521c1062579e388de2e935871e511623bc9cdfe1e0d247e0deab627bd37314a9a74
5660bef82e938d79b82efe5c29716d257bce8c5dc573a909e16cf2fad39a40109039672b
d8ca210e8ca6c6edb11fd556c999c7458d8a8ca88644ef930c9cca39d4c39560185a3e7c
dca590aa367c8984f7cade3ec7ec4847a966a7426fbe0ebb9632264a62c98981c4299054
225c0a22ff5dd4618e239574501eef8dc005ae4014c9ab6a5710c541a750db007ba40706
ff88f8ec374e329966cf9c1c4d15949b27e52c0545d71bfcb9b53af2b8206e3636ab8482
7977aa49b79cc86350c0b45eaa41c512bbae6431ed0f0e096f9c56be4a44264ac2c4fa78
b5884a73459fbfbb2c67bc97cff149f0e25f92f23c3e804e530a6944d1e023bf39d2c3a4
a968fe5da2dbaad9073e9b0b9453318054c5800f5266b5bf78bd4f536caa4955649bcff9
8df2cd2f668eef4c228b3cdcc50719a3e860a23c70d047c570c36433d2c78e2f19906c73
79ee24084c14fbc50cbb108982eff1b289146302ded3d1da261877920cab345d35f54ffe
22d7d53f05a88a3281390a3a501da317e6c1880e5f31da228a6f018f1068925f27fe06d2
d91c62005e5c5b1a182645e705cfc92d15817c21431fe2b2fffe38e7c28277030b5ec3e5
071c057450ed0b2152535927e046d10876dea1920e88ef2a277dae8ef5462bbba2a98975
0e18554f6d4284dd29dbc4c721abfd8399a603b9a3ac2a3d5a77600329201c45221221af
64d76b859f29a030b18786c431a0fc2588e0e74aebecf7f31f8dc6264585bf0f953f1799
0599ec63d4c39ba8efa4b88d00100dc32423791bcb38bc6829a4e7284a6a1ad4bfc20aef
cd9a1a439172cbbeed67617d57d750b5dcaec3e77b82e7435ead5271c86dc3252cd62b24
331e54f3d0807e113a9078608142deac1eaebdc51377c088297bde3b1d402d4473ef5945
3b390c4a5ff556cd1b07260896ce7ec35de66f3729a51f1e6579df7bfb4b45fcef2aeb93
7de598bac91174012fc1d2b12c3d01b5e600704a7b3d6904e0ac3cd434cc9d729f41a27d
c69972e2c608332e6fb749677ade56a7a42c009e789aca2043cab2fcb86ee2765ab1d390
aface091a88c8ac6d8bdcb6de29197a91ec36cddc7db2f9886398c5bf0687fb65bfcee8b
6f6921714c06557ed81b0498d5fac4bb9cb01b5b3bea108eb20923b52dca6dacb59e7529
b33b4cae8862406bbf6afc92afd4f97dccd7aeec038c5919ff7b6e9eadd8cf11331156ed
7a4715439d614a0094b8ff554db48ea3e330973b7ccef0f4129ececdfeb563306b2ff3f4
fe0fbcf70ff8ec5734fc3d6f2e64b1504863727e6b061b2ff2c80f1fdb96b0c19c92fbd4
75551b099f8a32dea76e81868767fc4a0a92f59e8aad57d522aca89f97cebe3a2c7083c4
d8f212c540e44b17ee4faec73e2b3dbcf47c772f57862fbc966720f7350c96edf4c70267
75657eea951f68abf9a99f1cd8f2e53ac81a9e67b5ec6688f47a29dc18ff330035d05007
55e75991c8504c6ea25cbc592c346ddc7a964e28c4ff9cedef8237264a5f68b7b737b0f6
38cb5167bafeb71682713db21a05f85eeb7f3038cca06fbe67001f416db18cdd67ff154d
66a26a5807ca7bcc99f23029151d41a32314b356f3eac8ac04344190e436463df9b39b8d
6a43505213df1ec224ac112ad95a0e23e7647c994b61a46a409c99283fe3917d673aeeda
5cbbfa3c13f663531b938ff7d40172e0fee38c74eaf5c2d8ed2a6326afe370ffec546b0d
bfc49aa08cff1c51466a218dac953f7e9f8411a1d9c78fbffec19b0cbe05eafd2b805c19
d6b26f8022c615927cdfeb9be3037fca1962ec3a1eeaa417db58b149f0598ebdbfdb5352
ee33336fa9a20840bad1d6dbe1d47acc93ef28890030bcf81fb21cad9efcf80172d83568
339a1c937489bd68452af795fc54a13dc8f1636a3e0f970d8d4676fe3f1d66030702649c
74ada81fabd27d3227bfcd3ef0e43ab0247904cad49afd83515d14aea864a7cfc95622ce
3c2e9c1a880a2de0dd3d1bc9b1af0b45f4aed799be96d562f5d26d9b2e71a0462c5a548d
f16471566f481f16bac7ab85fabee2528f23678779de36d84b5d735b11b4f57c3ead4957
f708db987eade5d4cfbba5a052dba6376a8ef205d7920f379b817e862321cf553f6130cf
1478e28a71ef0240e53d74eb7da7908c533f6ca5ad576957214507e69173d919582dbbd5
cfbbabea296d02cbc4482250a80efec697b5f571f4bf3c0aa9fb552549cc9d5879eab75a
bdcbeabdd4f850a88b87ff5045d430b0ffdc656a69f4d67303213b1155247be394bc252f
49c2bd152cbd2dc49a73463e25b710b0d0b03f222c02680679c2354eb0bc70c00e409b1d
fd420891571ae263b0ed0ba03e374935d331ba0c93e10ce2b45bd99da7d9da53e582233a
71630b8c6a651f4eeca640e753b24b94191ff3c1b8e000638b85ee200d6cbe34dbb3f332
ca51b2c6b56c6559040998d36f7927430ff89c082d287f9f7a2fd5a3a039a33d705bc76e
69fc79b604199657a9b4624bd45ddb54b2b14cc13a119b2b184ac5c3c9702abd976fe536
387a7eff032d6db2ac7733ecdc277fbc924d2c783ca9096eaf35b62bcbcb241bbac5d6b6
6d952023cd0c458f7a9e891095777887e8f9f95fb22f7c833d17928b960e3bda5b8b7d73
c12a49a953541c66a76696f7eaaffb74dfd8986321a5cdf81fb1e66dfd27ce45b45106e1
40900606404b666246cf0ec99f43efeac2c68353c9e24a3283a14ea227ffa1624de5bddd
f7499e8baabc53c1365deeffd57117e970bb77308e7cc37858310b166b50ed8f75b83e22
4ba998c5a1122f47057ca4b0e808fecf7496002a672c3772632f246e2940c885fc029607
07cae54725dd2db5602d637c6ae10f42b0e444712c96d5d86630e3b1a21845d054018352
7817aeab0368f5fe08f34037c27bee554274dccb9089de6d7495c8b9a1457199f06b32ef
342ab1ea1f2bc9c5dcff4a1c52d881c966947a03f1907f39b65b97376c66587855cef767
9f904c82d920f5bc0a67134570a795736855d45c0923a054715ac381dbee16b00f8acbba
1875a9211daf8e5f45f885e5f14ed93ef7d4e043dcb58fe45db799633ec2a97bff04a335
7fde505d491515b67b0434d89f1e3518ced05cb770e3c5ae5f112583a703d11ac9ea5489
1ba1b9920755b8f4589e19fe4c92b38262c9441664aafa1e1bd63fc872896ce2b9cbedd4
2b4980ad3cea18c477828c3caeb2a2421e97eedf6768cd16265c855e3a373ccd1157f830
5d57fa5c146fceb21a1036091f7242699a09c8091ee133b16e3ae1f8f0df43d0eabfcd8e
02aab3effbe83f3fa372d04317257b94077697950cc4f23237f48841fa492b9b813b3c2e
232a7e5a15216df63e13ec9eed4fbf5564e9633b026d62d887275501eede05bad84dd188
06822ca81f6b7cbfc3386ade42c9c1ecf57ed3b82e4ff358507cf459bef4da6906abb3eb
cf4448384eb1503d1c54188a62acc5dc55005c9bb1962c2db5b62365a1b29fa9ab170c84
89f3fc2880e83de9e720ecf0086d5348ecbd3a3e1f30619f43db6b31966341ef721e40a2
b5d3496e0efaf67e77d17d98a7d670b41906f852b7ac2d7b1a3fac933b5070e420484db9
f2c7cbf7585a3973392a0dcfa204c284c184025a83a8b4b2a0067d8e79704de127688261
431f04560ac4af8598330f9a4b1c02f173926ecb34c92e0fcf83b15eb3fddea5346a24c7
46479f6a0613b27ba5697b5ac0f40f014a8c66bfd9c92266f18f38a889b7af476c12bd51
e1124c38d87f0a14ce8bddf412a00ecad4abcba16033c8022e11706ce7ebdf6034d21266
436db4057380aab6d0046a3c9c3dce124b64d2547d33bd7d03aa5f4e9238fd23c5363c08
86adba84a424d445bbd65147d2089a1f50ca5380eb421c02ae7fba4e8c153104ede62199
8e5814bbdf09fe7fa5c4eb148de2e1517355edf837cf8cc07a33910c901e9af78a5ee8f1
58f28c6af5dc28896d99cb4abf3e91722317c44f36320bbaec897e68c9b4d1997b1e2028
07e3d75666647ba6d99fca2900b23cf7860ff7e2ab277efa52f46b077f31e4abdab0d13e
4a3ad9d74edd7a66e136851c7c603cd9a73428140dcd1fbaa0847faa225b36c18bfd898f
36dedf9f7e99db324937000df032d83acffddda46101778d7bc7d8748428270e36d85c00
745e93f6eeb2f692472cf2ce98ab1f8f912412c6c665fd53ebb5a5d8432d5a0ba96bcd56
701c962366870c1b1d685a2eb85c36412a6baf988a3d9209e4e437ee44487d191ece7cb1
cf011aaf62ef95b24a4bbf5bd5e080ab5c153098cd5d56e8f1f396242ee74b5a19442eb2
7137ef0b7e8a5972c24981f8f1a9b81b4c7e75644871691395325b2dfcb579f48a223394
0f2cce5f3f8bd5b1dd98d1b24cbcdcdb44a3ef3811154126988ede0bf53b6045db214801
acb6a97bfebce80b7559f4cf39ecad3c3bc1b33fbd166c51a9026a63b20c6e516013c14f
2016bda5b9b1fb5f64aa2fc5ebe42b7b07809beac495e0e19462486e430d75665a02ca96
c2fa9a8aba90490253a8dbb4cbb69c929bd0846ce9ded2a7354af9f1f20bbaaf10c303e0
e882803f0b7db35cca728c04a19ae72e38771e087b5062df449dc9eb6c9d264ceeb4adb5
fecf9020b6c942198e25ef880125651bb9c3d70236bf4e71bb4db59477d25481dd2c1285
24f789d5db3d0d68f58c90c9fc4a42074795a1497a361f86188cd8ee97742db159a1ad5d
0409a89a0bf85d7282f165e9de62b776d6838dc3033b72a31969e5ba90ae583f48c259e6
2d9691b965560e878ffb077a3ab852c25d37e1f0c5f8e7d8f33d56d0ecd7ed8cb7c89942
b4396053d8be39131c9c430ec1aedd866f1bd0106153ee925c22511b0f876b234d792ca8
1fe0177a8c917f96eab8924e04636ce9ed692009b994696dd449fafb6839ab8f5f8b6139
923d03bc200e7f2c3d91eb716823c0cbdb34fcb88a8631950f057d90d17a6871c70bcf3b
55e24625d288ab0615e499f433328e3bdf56679f7ed726980dd5f56f37b2af03f6167f3b
4150b3b8f301d04880514634b7154960c8df55aa5fdb5c1a1d2d9d7c0d17887a65af65e1
4e4e48eafaf7da7b7dafe0fbf0271950a8b6aaaf1255231b7dace37a2186d71ac29c91dd
6718c38b05545694e34a59e19ae98e2b1de08f8187fabf31f24536cb5700a6ee59f32e52
9c4d2dbe4ba68ad79de88b53fe99e06f21f5b22e1ee69ebe6c617ce8d3e699545b654f8f
df631365ce650aacf5d01cd996afa65436614431d8543af8fd6dac9dd0754d12414aed91
3576ab3e77ecff58154c3280054f91ffb122f473d3c56b37d79b8184473730ca1e21b70a
c3d859c4f70b1bc4780f5bc236673e414ad0c4175b64a6e11691ab6884be3340513a98e4
e5079d26c2a15c2dee66eb1bc5ddaa6e9b2347f7d78f0a63af712f0372dd993742b6e595
92357823b1b7ac5d0a70f690d4851f27ba270b958f1f6d2a78ccf4bccd20ff680a17fb52
cfcf625d5df5f435ad8986de64e697bf2d74745b764b25dc9f967cc5458d3efe722deaa9
d29a26adc44ceda355e6a9f8ef603c091976a2db91c80d6a474281adb31506728beaa6b3
1d0c273ab49e759b136fbe40371f00d8156f0b60d35236c81e37c102560becc58a735816
31eec8a958a806b8c343498367aa343d8c83e13b9b07047253cb20fa32a27a883cd714a4
6f9f8597665988d3a7fbd4ced8b235959b930ecc63768cb470333c2653c071313023cf9c
e0193f8a35c275bcd76ae0cd265de74f171ef28065ad7c53a317e14608bc3ae79a6aec89
188c4143fab376f2e7ce977616e7902523ab4612647278c6f0b280b57f950734a74cd585
7d17cb0aaabe6c40ce14435ff8c3a1dedc65659c59c25a4366cc7e4fb61743f4cd6522c5
8dcdaa951bb7c33a591534f13e6988aeb8c66d04965fe50ccd2a46412750f88923681c23
044e74ac6947b7d1cf28da0a245c38a26c00ed2028f940cdfdaad6bf0f0f1e087125fef3
0b0e5ad50e80bf044c8769850f5f5134189a9e46f0729dd537902c4c4ed5c65bcbb3f4be
c65d7aace4340048034ed76d253a46f3370f3756587bce94c27b860891a231380629cf4b
7a727361ec3189440b090be6310319eae5adf8dbfea3c0b8c9c2a8dfb42f1f94846d327f
46a1bbd9c0313d0184ebed1d22347a95a46287f9d5fdd6a2e209f33bc3b85691aaab9363
17a5880dcb0bd97fd3831287913bd8fa2cc2fa3df6d5fb91079922f5abb0d2fe556e3326
564a5a6afff212c1b7331c692b49c53d2ed215552d57e7b17e1327e5a7f1090af81af98d
65d551bf1a4f6909cdab6fa9b74a71c7e1e389fecfdc81e89b92456f8c39cf0381d60827
7c1b5d957e67b72d16964128cde92cc6882ded2179fa9d8bf7abde843fe5f463051b6062
74593bb0b978dc6293b7e0a5e01648343e41d7d99f05c24526027b2c8821c35a3fd9b31f
a9226900205b9b7ddca32d03d07afc926ba9711a6fa25b2640cff70478deca6558aca53b
090321fd503569616bf9b871fb52f081e9aef6557cc1df68cd341253e08d2cd9f49a181b
b3236e6c02b738e49cb6dfbce4cb6d98ed16c8c3f2cad94a95f3a3b68e87e414f68e663b
bdff42cb821ebe4690b7dcce80f7839b6b0aab4f61c6842bad3dd00f006bb2a061f51f0e
67118686f040e5d560dd93e00583f51f68dd14f1e71d9bb11ddd72439b02f2fc5f364681
40f0caf33b0e644fcce26a0fb29417b4a99e05713685985a90d2426aa99bbbcb3585fc7e
f69799a0d857c1e31a0c0a0d0c5c5a25e386d6ff5c76f22a8ec803bbb7410a3f0f327e6f
145a9a3fceeca1daea230128312ed59e3aee060503b361e83911b50c919d94ee87951481
0de71cea304094ea9fe277eef8b5c03f1ef10ce86220ae2b1cad508a884cef78606983aa
c4e7a1a1eae007482ea718275f3e9905834b0a9e63ea908240d4ea742fba43b08ce8c6d9
dd122aadcc33734c6f098dbf1a160792b7066d544555a458bd3bbc32da5524e2f03a2933
c2626d08afbfc99a964a56e32adc25c29b0d330e83c034afcc275ab21c28b8c24d1b5d07
d1b537bfd9ac3816eb90d9a049b5640e89ec5aac153267c6dd53577011fc1a5743203e6b
9e79e7f1c846bc029d1d2df3d9351862f990bbaff83c139e0c741132dc43e9bd6c1b788f
406c1bd63a56be30a48f018ad138235d0d3a03d9d0db5bc18a0565a74f4826b68e61dbfe
f6c9b90fadb156be07610a5a382e96a780a5dee410dff762d91eeac3129db13d5e05e026
9fe5c1e947e8e19cf41bba5d874346771cf7d743daa8206a28193e58f51dc4d3814d45bc
3f2a95c3b967ba7f53582c9f09c51a3c76b6e7128998d9062f00064a6b41c2b8b82e7c09
f07fd8dce552da6499ec152491ab13fc8473f049639854be028ac1f3c38e399ae78975a1
7b615badc4964bc1cc116db705d123078784c7e47efed4c4e66bb07900a2d1d38f74c76a
d7109b120ee3a87688730a3e0f3cabe284d62b86de02cf599a45f2e291b512bbebc51409
07ef20b86279eb4749316d5fb6477c14b90476b716e930695450c802db1ee5f6c7528507
3dd664f66bd596a83800becb9facfdd3519597ea6a5b6387ad711e26b5438b5db85b4c01
0bce2deaab9ebabf58b691bde524dd3260c5331b66000b6fd62a5a5c23351ea419c44ce8
50d1a6540347108576a0f4c949049f0496bef33c7ca56ec36b21499e57dd3797898bd270
cc3d36ebae7de523142ee1b035a5789a7420b799ba6671b050660af9083290ce6db41c96
e07e93f305b815e4d14674842e89901e8456ffc0551f1c6715b6dab2b3f4bcd050fb588e
fecfae5c985043e5d7ae07e74237ea651ed40371ca71cf0bfbc2784025efaa1170e0a25f
9cf1ddc63324993999beb183ee2630f94b7ec5e48dad356ae93e5d68e6036e2f52057a91
fd10ce8e09bd7631096af418fcf9193a2c2ae6aa0ad58be464b132326e1510cc584f5357
51907d530a2f8901d8c9c68590b6fe95bc144b348edbfabce39018881988c98800d01c34
5f09003670d67cccb1a9fd19e816952f18daa03e7c8a5d3ac61679a4c78cae12194915a7
4425751e4881793d5f112b43cbf31a997360ba559557938c14e42ff72b728e353d919a49
11d4bd3538633eceb4e68d765493b24bd328f1d19f3b8869ac1f2ba54479dd37264c3ab7
aa582b12446f1d822ea192447c247b6f0de44353a1c1d7fdc89cdd2e8d9448bff9fb2625
db3e68e1b64660959c4e2c7d0938df0fa3eae17c0bbaa368e03b56f4dc13f14806caaa07
ce9534dd9d20a1ebd32fca54b290326401c73a12a9160f605976cf5511608d3e13443af1
a8b716e6ed08f92230f8cc243f4a608d3a0579567997049164a26d8f4b8a249b33e81c67
4cd29114597006bf2a8da8ae18c3c7ef43e4fb8fe93a316f22b207326046dd4087f94cde
94d0e60cbd12eea1fdf3a378c459a9d2371c690b119c4ca4b508e07a98fd9a0fdb5adc10
245a9c0f242e8f2326105f60902d8cb86f3e3057d007517191b26ae067169ee4471a1263
a1cde54883d7ae1b93fbc117a3f62708a8b21bb2b190769a2aaa8a2d79aa6f725410a7a9
3de1e0c6b973bebd43f5b1a8a59cab82578d6a87c5878ed9904ad432ce8ad0f05ca9610f
731a559cf158e52da02aba6ae4cd85062e20e11f287b7763cb86d657300ff44f3be0f35e
1c22e332a6ee73fe3041f901f922bdbeef3d6937a94316b4b03ab24bf9f9416b1ee7d12d
b311fc953e22ee9d226f46320b98f12e48d81b136af807c784bc9ea6bf9969596a6c891d
3680f87d5e7da05a19adcc288390990c638efa2aba72fe25ec1bfac099408164a5be00a6
7ca07b27ed04fb05199315e8d732f8034d84f49fd70290c5db664d062e468603573fae1c
51ef3dda2874ccf5b3ceae835f0f04f5a2f04ca342dcd0afab461ce342f0b79255b69464
0847e4ae87df8d7c9f2b5708d2a1c7e3c9c99dc33b571223ca0f7ccbdf1d53a8fd4c7584
2d05710fedc3b67be0c12c8dc486f81779e70e1450bb6dedaf3cea143b7c247811c40dfd
f8bf3f363abda8be396df77d3035b41923416d9fd69118cb03fd2abf856cc60ae710bd57
66fcbb740f65938cab2c746327d8808d4dac71d425e87f55871ee713f404cf84ce410f9e
4e90cb9d5ec88130ea477a18c5faa2fba7e43fa29b6376b44482e16f87422448b1ec5780
405057f2bcbf62d55bd617308f0c7775c6702c6185ac39b60d798a5190efe5d09e21ef9f
4728b50092cc9377bfb3ffacb559f5a41100c9fe425643af3c5eeae65fd18644dc76f579
e7ec02fb2ff60bc72ad34af5a313fc2690d39be36c1bcec1c7d7acbc9f8d31ef095967eb
179c4bc6fdf49447a4be0ef7d8e08bc7c4fbca754b2aacb11cf74541b23c079641527149
5059e688c116f45d2727094e478f94e5775e42f1e48693bf566530baf8ee94799235241a
c6b1ade33fe057d0952e472b81cddd6f4f3da1407bf735f04ca19b543f7f7e28081b2d69
7b85f6969c1734658acabcaf94b07ee0c28ee4fed7fb50af960a6c531b41c9a76ceb939b
10ba729b5eb6d4f4c5b6310722c7a09877b92a91cc7721ddbff83b8dc6a5ea485a27a92c
b2a254417fbdb396fa0fc8f93f0cfd7f09b27f48ca2b8e552aa4fb45cb870ea1e351b1b1
1dfdbc3593ed1ac144e712aa6ef90ff0d8f7ccabc7f041d57bf3a23276247a0f1ec53956
abbad51b4c772e67c2d3ac3836f183fa99f4a2153e284cbe5b30d8a9ec771e15f5ec9e1e
de3c56c7f983c6b83947eee00f8b449e666dea6e2bd5bd728e5d17cc5f4f9e78f203a684
b430543daab586e42eabb768335a3cbe7a9632a6ab46e0550c08c23cf4a7d532bb6b3c97
c1df32f2d1b1f1f06bf90e7afda44dc00d3a7d3c0e63949761ddfc9780d05b2972c7e283
a53ccda277800cfa141f7f1206909fa941c6762ec594d011d546d43b3287f1681f4c9650
022fbfd28df9e28f159ad4305621415eb14e5916fa88753faf8023bfe57b02e9d15f8e87
c09b43d31f922e9869726e242b41134a3b97e9aa3dd162edd645290d3c1a17d40b871081
12aacb45503e227bc753803511e04f0f4d922f55f5acab1880061ad794543e90b1704107
2f8db860b8ab45d054d5220b824113c90609ac154c59b34188b7f1db92041b716bda5dda
33359d26870dd9913cfef289bd7979c09decfba4cc34cd2b7ec46325a69276ef8938198b
730cd35d161a77ae74d5216243343458ed20631e98634ac1ecefe41139220b1bf5327bae
39fdc54ece171363c97294f666a2b5ad5273eaa692df9d0f200b203484c81946955f3096
582aa9f3d960c69e3626c3dccf3cbce347bbfd86e5d34fd8307361cf74c6b06a7ec1eb06
986a6030e94329b165140baf8bd94792b701a00ec1a9b27ea1ba44d1556eeb442f1792c1
b5d34f5a0b865031b9b50089d6bd9be41f0327496be8559dd647739999b5e6b52d16a47c
ccacf2ad7acb1c79370ed151a12b8f1b5e9fc222253b44ecd993d4f8f7887f5f392bc457
e23713ab693b71e57786a91c9b001c79dd0cfdf0fe3f3f8e2d1f6224637e40080c2a6d7a
3aceb5e614fa82d585aa687eda22f7092ad17c491094ccc70db4e892f891debb7aa17794
681340d3c9eb437aa579547e8c25b44e3324633eb2c71de4d5e1770e62217e525ef24448
6f1a7b887741c093948325d6b8adc06c63c6d8b8e53b922eda350e6b54c9b53be6029722
f0799be85b9d8662482a869dab0fda494b4a7cdd6d09cf33d1caf26907c1b9389015a13b
88150e2a9e4885733d98107ab0a3272e622ac7ff995f29a71b3655d3220c2fcdc5d5597c
3da6859a3253e99323c962d2ba059d5b585e73db750796bbd1ab37d1fa94130454f9f8a9
49ba8e3148602e778bb7057e40ac019677569c0455eca985388400c3e2ab869b2b58b983
88bb83bdff44b310dccc2263eb2c55869ec186f3cbc74bd50a499e3d34b6e012eef4c4df
89e644090fe130da930c8dbd3cbd4408f8470b3e29332d87448212f75e80dcdf27d0d5b0
8ee3d430ccd00729c253a0de2a6962fcc38cc8f42c409eb7a9ddbfb6e49348bb024378b2
34f174c0d6a2baab602a7fc0e97be8e2174c0cdf4407c593aa42b60cf585af23e950e768
14a63a747e172f542bd84b56c2904a0c6e53092c9ac42fec7186c50fd658787ce8fabd31
216437e1bd5bb08eb5a6576e7693f837edd79fc2dbd3c73955efe03eb9321f0e8b356ab9
f5a1373b5ff872a80a7970d73c5fbd237681bcd9076d2c99cf97d78b6394b88b898b8912
b339489d2b22f0d616b76fb3ae39b81087735528fe8c4959490500d742900c0f77cdc3ae
e8a647ea0d0f54f0b4d597fc978d4df90b914590bd0c217e323bc9e100fb6a0d2d5f1348
6c7a0d41ce825b041ae1afdd359ab62090307234f3e6212797bbd65477000c22164a85c4
8db39ed4b11cb4b67024fe909b92128ec487e885bea148fe16e52173a8c366c1dc7a3d48
83a135d001035205343f830ba1b9004a4d5b659b89127c3e2d1f263817f28e404459ec99
b53be4e929783a5bb864a7da8d8286ecbe1505f58970348094ab39fc605e441a3bde9acc
812eaa5a827d8ecaec4388ea02b34fc68deccbd1ae2859821695e204f00e65b7c48e8797
931095def9a00aabdb7ce3df417083212b7d05492e2f585c82161eb7d68f6b20648f9646
dcaaf0de6927271d618a6445d3d6692cea1acde30df584435a364dc91f1459352cfc46de
dc46e54bb0b17f645d659a02998e7bf7e97bc546f20cef90b20c5f01b2ea5233a7c70703
c0517c979e9dcef70f7767f3901d9a9e3abb454f0f9abd5e640f2c1f1cc5391f61d8ce27
09f7c1a0b93e0b6299d6502f85076189fc660c613ed638f55e28b51700446a63777db397
ef4932f6d4067cdf3342f3e2d67593b92f1755b0740ec7a222533e5e9ec18dce41109df7
aeb52eef6598630f0b3c140722d5535ba09d96eaae98c45c1e31aa6d12596e40899b31f8
e897e2c88aa99eda15ef5b7445d15ad3382ccb67c89a9ee9eca30a1f66d6836f64473969
6dfe4fa1bb884940099459ebb59fb333dcd028a35769683d6ca7702bdd3cc2052c2cd548
f0f0becf69e3dec7e0e982825984a5a5a569c96faf3700466459e496b3c93597d480b49a
95d2dd39ba7c96a3cd79d6a0fbb952a74659ee3ab2e41806646212ebecd5739e028b26e9
ef349b262fd7d47ce8ee1198065a2a496615a0f0974f97b673efda682a9b0c73b10bb975
09e707bff56c8ea86990774220e6d17725d1052d30dc8f1b81aecb9d80ff1e8902236863
f538597b896509487398e65cad60efb08145300d83036248133fffe59de1907ab371970e
dbb75349acdff6ebc4f60a027f511403e8339df13ffb0fb75f3321cafa74e78237dbacdf
4317b2d62d2f4cffa1c73c7998950f910939a108c46b943d6c9d700da98530447d244ab6
d5b303c61e5885ed3c17df983198833171b0de701b7f7b8a4ff1a1c81089edd5f0a8787f
2d2e3d66ed9f3b107a4dc1bab35e99f764794fb5a3921fc24fe0b8a910a5f6b2454aef22
cfb7f6a12f1b0bc95c2787049b13067a197d161031a2ffda924b3bf5757bbc1197e2754c
e4b10ab85c10121621df841c5fe623cab4cebc5bedd72e45f5c229917ba6148dce9a5658
87902da11601f27c2c26a3e9fb97a2676943da55adc6afb57669dd44bcc11cfdb7412ab1
51b88ca42c75b3a18c00f25c24e8f22a915209d4bf9a179118b409d0a7fc8cc3e04d3940
51ff09369b1100fdfdc9f0ac911d0d984150732042f83b4eec850ac22a7231d32e0e7fc3
f44581180c4fbbfc70e7d0f98a0e26fde94817a0564f926fbd83d4d02a634b38b6028eb5
1fa70b757694e03ad3c76056497b4236196eb9902265c5e246f004e2c97109663803971c
1aa29660542c1bb29b7a53068c212bab539a84c16281108d8af938ba4e278a7f51722e0e
7a63d8eacd331e485c86b10d4595cdbb0fd6fb4cae47f1174bb201431f9468ec2305d118
459562252622ece6f47db287687103bec4d9aa55874b5ccac617770476b03dffa06e06c9
fd38c9db1031db198231a9a53bd946661bb7ceab009c8fbbb977735ce9c48bc9c75f698d
0e40957775a3902a9bdb9bbf3dbffbc6ab0467417a4e2172d97934d57ca22fcb5923f0b9
141e2e4416c8f009ffd9816fd58b8fd00753b4031f2cb3500fd24f3e0e8ccf1cad50f2d6
77dd5c2a1f62fe9f865c8b6d4f339c56a2a7b9bc1f9c47a738ae6b905940ad9a59e22f5d
eef960893383293d39b59c420584fa9dd4e74325496d7b0c9ed5f206000643d6e4bd95a9
92864390c3d46f82c3d8027faa650c5db6660d9d6db74bb3247ee47fe735c49be121434b
934aae09bd32425d24a65614672ea25f10ab41a46dc9f75a7ee258b8b26c805d36991d9d
f277fb7d6ba63fffa77b83977240f7411cf5d15cad44daff5b18df92866ed3e55d11e8a5
b66ec53e6fac69e52b2ddf998864f01a6a1896b923080dd94e221552a2c463157c01b6b7
892e1815921f5a908cab4e52fc51c16782b2d4bf4bfe82a6c68aa516c21857c27f8e1e2f
f2b3e94ce0aea452aa84641f8e9027a99d6c816bf528927bbd93d23a83c661a77e006e5b
cbcf7669d81b147e0c8beda450340ce67d686e87845aa773ecfd3afaba1b4f5ab9858163
546f6fcf83f0d19335de9036b61156dc5e9b30a6349179337f92cd5f3d3d954fafcd4b2f
b1c4acb2e5b781600b18c3b3b70199f05db5502aa0f8d8006fc93fe6357462c468906cbf
22609c04cc382a38b8cd72d18b63123c36900ed021b49341f1f5e96c8e3f6583310f2f1c
52d6d900b49ac1dba918bd499cf0faf3e9213d1e7280629281679d22193be309d20700c4
e0f730a09fb43229f5e34ea8d4a6b9878f5140b80a94a91e0676bf1a91dc2a7b80bdedfb
61326d0d4b4e8b7fc53ee878720638345a355b5be4548eb381cedafe667aa011473bfa9f
895e923e8ba2c35be01625185baf9c4ddd2700fdc3f4835779c5906a3ac6cc7ef5651ef3
c334ac48226398c018948289aba08686e600d1fa60ee5fffd32fcb5a3e59076e7db7d0a1
6adf8111c2a78d1581ba4266dd2b3472ed7e2030e1952f713c793ebbb9f2819cbdf6ae4d
116653ed47828737e9d901c36fc978e27387287be829b491c13cec58b6907ab59d5bc12d
acbdf988c4a91e0ea0496bcd45dc6a58094aa16e377241b0bf6f8c8b3bad7365bbb6b4bd
e5acc58bd12c04c4784d4c91af293d07462f876c785ce7263a48d66d25db0e61752ebbc0
772ea8863b1c0f6f7f6873a7c6d0cfc3f1be868b3546b42c8e019de582b0b3b8a39ef051
6fdab2a18aa9ac3db1bee22bbabc285eb77bad8097e17047c68234e7650ff769b690dc32
89b209556299ba5a86057502aec9cb046abb7b0c5f27e0ceb5f7a0ec187cc5da6ca46de9
65ba94203f8785aff32207e26629a02ab7ed8d62697cc60e8ecba30acf0f5e8ef8b19c09
b7cdd7f1ffc759b74855b44b92be651e3b424b56f6a4e35f004bd829dbb3ad47e773e613
10193dbd8ab990ac9fe5c1ffa10534771956965bf50a8ff7577bd3af66530caec6a4ebe7
10d944b846e3b49d67289be11639379e9dc3191d4f25fce4ab68dc996a69ce188dbfbc5f
f5af77b435ae9418227cf471fb29076b8ea81fab98888ecc4974396fb9d9bce55852f44d
e46c25dde5eec738f5d689d9ec830639c6595d36214b23877609af3cfc67a5752d924c77
ce39bf23d101005aebf8a30fba0a8001eaab5a75cea9c9538797ccd777efddd2ff12c139
68e27b932425c49611cff9446e63891e830ae2a5ad619f8fde094cac79d793cd13fcf0be
5fe9e2f1b7679b41e9b1eb85fbe2c1054d552004c050de9b27c0a2db706b66a057c607f5
c62e9ff9ce8499074b8dfef1f9da333ccba8c16f63dea92a0dc27e1171eff0b751a365b2
69049b258d764afd430e8d61c8a9fd7f10c2012870527e45c3a024221e0843da961189d9
6a180ba759ee3262e5c585d3f5cd23b2050b596625fd8cb38bc63cdf6b4c45f98cae6ad9
64162df037433e6cfef9dd027e677518b923c20488afecf5f5f57cc324c2a9e49e398ddc
1e01b5c6a66ea2afd76ae44d199c5c4312b47f3a0a2870a68bfbfe29e51686927d947621
c89d9d7767fc4193b8df8c05716151fff93dd24b74a5e1783a5439954d78fd75fcddd90a
0ac6300cd481355b24cd09b4f14e8c6eebed87400048619b020bcf045389434b3695bf52
61e38464f4fc2e0b05dd67f1ebbeeb6149c6f3d21710274e5fe4aee5e0b6dbf397b3f56c
c0e63f55c16776897a4723c860d15b5fcb6049a404f10aa5ad3035aa94b94ce6412de8fa
38de3739208c3fe7c0fc9bf54e884aeade03f94ca10fdf9d30a18e005895cd6cd1772e5f
747f834f3b27bdebf7af50622bce7d505586c1174ba233fa837da1dae2ba520d2453ed44
2dfea09c7719c91a25c56917046abed7be18695a0be0ddf156afa26671996f61553af299
1a1c70a316507743ed3a36298c78ea34cbb587936865e6e11d43fadb829681ab04bdeb84
3d21a403bb5abaa5abb13385318b191c654570fe7f09281a7a6666a0fa8bc42f3a76aaf7
286794d2f7c57d64aed3146b2afb24831243471b43a377409788444416b82f6679063bcd
f8e30fe852c5de448ce3f05e43a8213251042cda0d63c1fbbf0411b9621ae4b6b9e914e9
cce5923a0f23a78b438c60e656dfe58a06345f9e2c26f0b2524872fd6857a9609bf9405e
76e7eae6d51f7c2d9167ce696bfd881a6f3ed03659bf175effecae7df2ab8bce90d7f0e0
d8f53724813f4376da00ec3d9637990f12623701a337c192a33bc452065048eb168b35f7
8138222a614ec9bc5b6eb1fdd05507510215d83785147d56494d53f3a2edec01c5ec9b88
a78f6fbb658e7fdc9be00bfe848753f4c906d6dcb148cb91a2ba344f0281cc9e809f4dbd
2516f3a357d1971096999642d236c34664df43328a942fa2fabe960d6ced119df5d77c55
8ef73039c020347b2077d25a64ec30b1744c8cebac0d969dce2cdb2c3105e38b27a42f90
1f14297c69dc6685214eda80b4a14a06c027d0d485a8d2cd741bd48306f2eaaa4bcd682f
dd88e2f9435e58408387c55cabc4fae05d68b366b46a2892d5cea363845c70fe26a09264
572a5212b10a5392d5714984e2731f0f4ec1bcb32d2579a7ee71f894f1ea6b702cdf3c0f
76979d35166d59207cccd0f0b7ba4aa2ab1821c6c9a05ce9503ac5f4b5bec9ddaa6d8655
ad3b1cd802342132b1945c3a6a7984aff04592edae32782f750413f44d73488da6e6bacb
7f9e871de0481d44df84304d65eae585eb5cfec3f14f34a62edad2531c88abcb1df6af30
d3bce8752d1381ac079792d521edde755100887e487024999caec034084d3a26ae3a371c
2052e63457477d8aee56b41e0258349f5eff0d8dd4f7a63920487e63219eb0d304752b86
ce8adfb45994be0c05edc57a17d094219465908bc3cd3a83cdc330d774f8f9da6ac65402
bfafb208e6089cfb0aacc51e962f4be64304dc90fd6ebe56fe8cba33afef680bd617d17e
b822f19c47fabffea399c641cedb6fa3d086186e2c1eb38b99e1f2e11ae118f3c37d212d
57352c1932b82b2da3e7c7e9f25efcc5294f395518a34e55493638a9733a62eed91d862a
a2baf44697ffef73d026a3c21a40760984847e5021d1efd3d0cf3384bbcaaf6298fa9a49
8bc99c88bac15817a176f9e85a406ccb4db2e8d3c100907dc9d5aa19add78528968a9834
9487d2cafcfb2b44ebef333c477b8b1f7c9836fadd6fd8dec1d73a19e77342e953d0241e
bab804b1948ac51063058cb569142fe4b98f22ed46fac98ce7c68b90a30836ed47315efc
42b57ffe8ff7c37840b95064369bdc2ed4525fe92b189084076481fc087ed99910ea5836
afe6f4323417e5d77b07127af7d1ae2116a4be0d7b9430c8c2d3a3c7722047e32c1721fa
e677f5dcd62a43afe5813200d10d8d182cdac39c267681a1b579c767b5c149dff08e98c1
ec5cb31766dc6c302922cf7995bfbe6eee7ddfe5be58952a119ddcd4c53d8a18098448cf
2864181b30620529a5f98ae41095aa3ffb40bb32df93ef241db629b2061356fd517322e9
530773b12137305ee5ddee807d5ee158faa8a5c7c6afc31e054a1f844a973a294c64ed03
6c1eeb242c917b65c56418a2db14b46a53e694261284b8a53acfdd191917cae7c15c3a91
8ee34df512ae484648e255249a9ae38a3d2a3a24c0eb6e87a6f536bd849e3f1322a5123f
ca61f56e020cef77a4cf02c28979ce4df544ed022992132fdf94044d522e146cb63c2392
8673afdb2bcacec19e7fec5c3662e5707fc1ed80b5e312ca47d579b7974c98bb328dbe29
71671071a31fd1e515a1a1ea806a69c15bb9ea1f49b41755ecfdc203f8a0534024c46c6b
ac14916c20605bca70ec8807b235e81e1ac2910987ad8d21d8c077192a6bc1bf344f571e
f8e7cf700b47ba7da64f7d632505ac01b6562dab2940f9a9e3cd797822ed8b890dee1c25
3b7135268e54da1e168687be91009a3752953627cbcfd715f0eebe5a467abbd3d1360d01
e29405aac19e0a2b87ca1d407fee84c99a6a61dd9ce2d56d57f8432dbd1b45b08d497786
3ae464486f5a25ab3f21b3a5f5754c75d6f164d2f26b15151ac0ff92cd951bdd6633cc01
ffa25e662e0309006ffaf266579fcb7314e4887457dadda161073cb84f5ea6f20272fd27
5edfa99577454d9636cb4f99f990075f4da8fd5dc04a2056f59a14019db20905d3ec39e0
3ba72dbb9f35af4fa7beab23611c5d3692df99ae4ec0ed477de61557b1538e28cd57cacb
bdf3550751ec1d39e56236ab85adbcd6c13c07eb74a12a7b389fea5f619e7f1705402fc5
24dd7482ca6ff568ccef0cfce812d5149b3c066e930ffea60d26416d8a2aa6da708c8dfb
e839861b5409a3216fe33a4322f15a51e4c1407a0a203d2f547b0ff18876dc6becdfd310
1af5e522c5476d210129c7526b95a1c83e39e575e7178e1dd9cbdff3d5b9988bb2510416
bd0b75b6bfbcc1c35a54e372d8e2ac47923ef6c2907b70bb1ce836f2f5b65b45ca357e07
ebb8e757db1dcd3900e99f21826dfdfc36bea0a66082676df9059d1d1b0cc3312da9d66a
77ee792b817753329d5be1bee9944846d47bb493a8bbe41aa267878e625eb195ad1afa1c
ca143aef2e1128c48145b17234551d3eac01249b4e479c21e78b4a8e829f6629e4764053
790322e7ce1a5c85aa8e2595029974e38c3550e4d2a222ad66c1ec5ccd1a2eebc7dd7730
4768a6c395e918c89f7a95fe74ea09a8125bbe985d8a4e7cd2c1c1080951d0f4583bda6c
f001c9cd3e9a8c71fc3bd8ee2ab048dd55c0cc32bd9b6a9ab8f5716bb4208b3f008dbb7c
e3b4e9dc3b30d325c471569fc58f8791e2e1a4c8ff2acece3c1b7fe13fe944174b144699
196a03a7f331533b5719db20fbe2ccff098bb6106840c01f8c2ad781a772890704dde6a2
78675d45ba271376f314c9026e85ec2500497a885923e1ea61cfb201abc528a40ef15561
fcaa3e515e2e593f82b7d75049568e685d4ecb0b469044ce53da04aff98e1e3baf360713
6e21f53b22aa531670c7007e3f68e68628c47feaa47a55b859ef59ff611b881df0176549
36c97e383372ac255af3661f0c42a0bc69f98aea7a564d9df2a51a708dae4e93470d8318
3e9b138117291aaf4dd8b951a359ffc626226351fbaa39ab044b3c6520f4db5322680eff
f5b7645314dd2521adc2c3e1936d99574e04b056fb593accb728bbbb2dd486eefa4393e1
3e51729ed9dbfa6cf5128ced713d1cea4f30eed223e78941d45ee28823b00c688cc5c538
d0f43293e714fc300edfe117cc966846fab433d6c0f43234dcbd51860585f906725257ab
17f5a5c0fcab35751ebdd45b86b24f2bfc08fc7ede72fac2c67f58c65f788522151189ea
dd973f95872800c6dfcd721cfb3be1adb6b749fe26ea4408fa1dfb8fd3e275a48e4218fe
35cfd868474ee393a704165657419ddc72062305d7f1af070ab4a9ab3f762497acb002b2
0eee564e27c3ca6d06ce955edad59421887b8794f1614f271806974da615c4cfd5ba2847
b0e7c728c5f01ba62a28936f62719d11afce63b9dbf5c03641589df5a367aa8819b98e3d
4b30bca053882129d6811ed6eafdc813262fada58101025e82eccc1be0dab986536b3051
f57cb3a8b3fc233796ca701c0c053e844b15ea9c8bb4be24efb0e2351b4ed3b936baf452
bbb9f81316f73c01453c0419fdff8bf677b52624c0a0865df1c8b76e8a947930e5bfdecb
f117bb14863b6ca769bc802148954a7066e46d4cfd0fb9c24927e4a74aedc555ae0f8063
a92201269bb6e4d7e36a6153db8a7a889cdab062225cacde97ed0367a44e92b3683f96b4
df180020a271ebf29fa657c6c0200d683a3faaa68ca4cc099af4867a941d60eedee659a0
da4bfd07fcec49d01bb4372336864221806d62047f7977812ac73654c0bd2d0c9f939ef1
2c4479cdaaa302ee4d7b7fb4780fb93f7fe919588c66f6db9d76f86a53659a0fd73b2e07
aa141c80ad3d49c12322b6c5b8cf61c07c3b252c14cc88999c9857b9e708cb5fa6f935c0
f25dd86b1b257a1d3aa25be55409dfa101d0d23dba8d01ee1d8e57367c975411666dfc60
7dff3c6e1c0d4c0ef92b6eb86d95390485458b27ec3ce9157dd276ecdd639f9ff5e0067a
0ca4ccbc56ece4fb0613599d4d90cbf6794a570e70636066b6785f8a2a55a65508a8817d
5e63b45ff0f115f7e381ea0782643ba7bfca5e80e770fc871846b2bb6391be96083128a2
883e1c9b175590467197e93b6f82647d61a44c0cdfbe77f2a2a55a61f4e8e67ca1d98560
36151909f9c4709e90cab53b46da6012c71095d18e28419026cffe4456a059d9c0b84e54
76b8311e280a5e09fffea25cac45cde4d531150319d1a3aa4f9d8918199d7a881eafade6
00ad8e221610f0c7bac3d524554c1c7b7dc47ed1f13afdd116023205d5423f0073113ee8
5f411d3972048c824f9c7d2fd6cab7f441a5d9f05cf7120d7f5fc616c35e443e2906c9d2
465bf588fb961bd3ac79f4b37ca5692a7131ff7abe57e1a624b3128ef289f3c729bf03c6
a65c5a94c90e486c3b3f65070e0e12e028c7cde3532023f6c8d07ecaeabffe764d005b21
1ded51daae41071d644ec63054b802e1315cdc70456059886b535e2e0be7caf857e1ad75
62f1bae43753cfd79718a77e785c5466525776aa6ee1d11283cf21485465703bfe54309c
a2616801211ec7f16310b1c5245727cf54d3ef4a80434588f2ee547b864f27faca25463f
50f6fd5b6ff86fc0457219bb443eea989b9100536ae6f1762015b5a559f4823d0d10d156
61872e288d7c87bcc23e21c8cb6e435c78a47bbc03c462f89565d9a6eeed0bdbe2b2d846
7c2eaffcea1c6ef41d9ae97a3fe4c2a331fc32de4f2dbc2d9f8354569132fc85859e40bf
85312e51d959bf6a0a0c27261b63d13d3bf2c0b82345e863bb7a625d3565433205c004be
5e52d3cec4fdc33aeacceead76a808bcc7551202651b2fd66bb2cc9196f05caedd0fa925
0914fb5aa72b09e52a0d16b3d151edc372f14ef9e2b44dcd26734975fd816e3af04f8fa4
430a81fe6851e91cc2bd618fd692110e0d436af1170b806790ecf17296560d60c9a178d3
0361d90c52972a2daa6b87744e1cce0e18a82a8b796c8d29c531a5bf1d11b3ec232717a2
82c38b7d8c495915eedf984d62253fbeb404f3d4489e84eb5e574154807a3954579a2477
5e9fb9a72d8dc5c05fd9ea3ea16977f4eb628c1ae5caef0e010b7472915899e87da9bfaa
4e1bdef9cbb54b89cc7fa41e561de7d250588c1452bd008db215d449713e01f46615ec68
db774478bb9afc3647ea352cbe04d0d1acd9ff1a7b9eeaa5aa98810e7616cc5aece68dd1
82771186b8f60240b71281f1473ad7cb5ae47f654b5d6367b560a4736cd2d9db87a9e6c3
62a23755f711d45c69cdda936aa2be371e53c6088e084671feca975b5ca2ce091eb6fdb8
bc3f0ed3afc0d6c0ff0cda19267009d63f9c2113f783f2f77922c10e098a145793167820
a6d819b041cc8e9bb5d068ef3be1d924e89443b1919fd8ef229ce2d03ae9ec8b3ae467d7
6bf48b20ba4fca17e251ca84612b8e76ecf86b3240901b293c5162695de43c52f62bc772
5f6b926c80fc75b352beda89515060dfd98199622ae08823c3b7645c6d0f94c6bfc728da
0a245c38a26c00eed59db83b2e114de928f6a7c5524497f25ffe03d8ef5acaad15709526
5159394eb3b82a370456b35d4872833997fbcad7e1e3157fa5ba51464867b8f671cc35c5
fd7329bd34b0d8a8794cc01e2c6f9f9ac9a8f74b95a388e6a311f2c9056a6b5501fe82ba
1c9410ac0d8c889d03357dcb7b10f5cb03f7a233ec097a6fc4dffbba53cd3c6017cd2048
b0b6262cff0664b60bf6ec496a9457c7fd064c7ab10cd4be2b6a3025f0a46820c626900c
709c73e575a5ab6f1b69eda12e2cf3d8cf4d98f40247da4268258ccc1f60ad2c83c3c54e
45a0220ac76ef5d48a9ce97c20d42631feb0f44674e9adde511fd0ee88061c09760996b6
f475051bf67b083e57c10985e96bdc5db3fd01b98f126b3df9e74416ce48a7ed37745aa4
5cc01326adcdf251063efaad53d4375f4ae7c04aef1560d4536fba3134eee4bdf3ee5513
d96e897b3fcc118ebb0e5cc65f5ca0b2a416c8b4906de5da6e0c14e8d559071998a3e88a
6c05a81613f72843b695a503f7d63ea4f44436a60e872e2a604a72d1387429d6af55c107
149a2c3b1a79e1a3f586741bad8930ef563be69a0d288a386535594e442e97b35ae72a09
ed1d5f4ff2af2631933314c6e5f0f2ada7cd5103afa16e60456c83f4d979d595eb292cab
0ef0e68cf92ca2e2d0f78c52103a24624cce3251a7555813b8fdfa694ae07e3d8277214d
d16165eb62645195072e68a7ec1b26eb850df1393274c5fa29c7e1a73cf86000f566b346
276a252cb4f9007e96beb10e08426b2a70ca581ca3281e27bc9994b94f2102670db0ad75
4790397628bdcf6bb4e166aaf3406e863dfa6c2c2bc3cfd1b0388920a717085c11599918
ae72eb9dc3d3cdb8de1b35fafa6dc8b802d941efe772b1dca1c11ab033d3e060c30531a9
1e998c8ec7c6e24d8711824bfc67166fa429beb9bc939386f02b112224e1cfb3b0ac0e44
c8f2272562ccd00a4ed3d762b06cbf56e3b29ddc6cef0d0f6dd8ab88d265fae5dc924c48
b8345ce071f261002f727b463fad7c9769302bd7650dfb73713525e7a8506fdb45ab7ac3
e2c0ebbabc83071bcb3f99c609070383610c282058f5380e835bfa5496c1b7ef1bab01d0
2db1b78cd5598faa39e19128ca22dc76d6895a60b355630742f7db6d961cd8f7012e40f9
2c4dd92c855c2cf5ea27a18efb11e418f0811306d159b83192df0f308aba0e5f350d5bd0
2ff4b5b9d8a2262ff7bfea9cb1ceffba88a310a889a45d961e7377e24ea5f9e860068787
73b4096ff200d794d615749b7c7d349352cee4ea3493dcc43e39d8b7bfbb6dc2cb81007f
90edbe5d1e3fe81647ce6b66f57b168fc86b64164793065a4e741ec103164f1695d308f0
66c135fb63b023d9a9a9d7995142fb0bd7d3ce9c65421d39eaaa4da733690af9f60394bd
8d53fcb4b98cdd1280027ccd23f3da0c30b516d8b60d22e45e07f12e60f82cec324d600e
eb6358c62df918a8a1dfd259ed4461e608152957913d699fad5e323f1f4d5c10a54678fa
d066c27c1b90126873d38eedc5d8bef21ae3f0cb6c64b5624eb7eb02744214c5b0169ba2
07bf9827c24bb7043c7c28cabdc7128701c086c11e779c7449b8bd68618ee4be9632c479
0978767bb390f2938b9e8f9a0438cc5531f397dc9654a93559a5169889e15ec00a12feb4
0c8a77c6a3aef3ae742cf7a120720bfbc2580971b26fd09a7f51c8b95583c06eb8bd84e5
a9f4eb7e14ae122032ad9f013c9822d8f5d9027c0fdb1e100d21f2a5d68368d7be95e99e
b4d1c345f05a66564383dbdcd8172f36786497b5609a8979ce0c1ba13d4be55ede358d9c
691921567fd6813969b6e8f818aba1d2b58bc26d25d561864fe86fd183bf57a3e4d0be11
1dc58e94a100cd27b2e354a9fadb8be44b75c97021e3b78ae88d39d207e9cf8e01205dd1
9e6f45cdb60dee63f57d2abb12c649aae41ad3f4106e1afa97f246862eac5310898ccc5c
35dff93ad65555edf035107f75b6d23b51dd70da259af7b0d9fbbe56ac8a6e3d12ebd8f9
65e8718e508de2fd244b4bcb2f67b38487b4ea3d7dff52e750622d7e3f16fba9202f847d
ea6ca7b735fbb970255ed4ce1774c0008222485c7552b4e5221b189ca7b0f6804e292178
a244f8e7c4424a77113af6d404cceb4851ddbaf2a89521bd8251b31e384382b6621c9e00
39c76b9f3c8e755d1b2add46fa73d46c4834db4cf590c92ec49d5cd93f06df3890dddf09
02e0ae2de85495431a724937b1ae4a312578ce9ab318818076f182d8adcdcefe3f37ab22
b08f8c66b7f872fdb38e85c27d2d91c20dcaf09c95712e80c9931f65d0aa616be5f1c990
25cca6ee78464cfd70fb9c21d32bcb2f5593a5fe39cdbff922656d3130b5cb9d5b5bce30
4c0990cd5d179a3838b0c5a6c2e4db36edf4497fc0fb49e5d99f9bbaa97a332d20a04785
551ca4a0e516190401a5d81e2c93c6b2635a7e4679390cea8b4c57dd882a0ec5b9c2c100
d331373c12b9cea1e244019ee1fc1f11c926afa1874fd503842d8ceed21b6e7383a3e70d
d94180700767ce722244bfae14563bb20a8239db5108143ba8a5465479798b7bae534420
5bf9f6933d6b5c40696b8a56b077f623098a4165034b81256225a933821a5977cbcbdb1e
8bd3073f457ef0dc9ca6687458bdbd2c54b8b4f5b17fe8d2282a8fd572ed40fe4cdfe46c
e3c45b424f41b44bc8c6793e2cad88c7d96b647957c668475ccb5440fb4c0764d790b06a
7791f958894bd4d666e2f071d5d782f8f7a94394cc2d60fe5e0229161812916c65ed7869
bded70af5fab96a7c11eb10c4a605f66b2e9ecc645a629ab4777bf608fbfbfdcda0fa703
525eec239b5c67645f2900162da06743d392d69c5f57eb6c7dda8031eeedd364e6dd75ae
cd4b32884a0cb60e29b7eb9dff1fed2e99e7dd76317cc0da673469e8ce4fbbc11c427ae2
bab19c460e7552725a02e5ebafe8032ecf100513bf4aa9bfe67a54a8a62b14f788b3cab8
0930480eb745c2eb3a1a7c113944c5fac88a50d166997835e3fbc6acef5e0138d1d8c959
ef3cbc0d32b788a8d51f3445c2ec0796638228fce5017aee6921560c53e4f30200018bb4
5c4591c7ddd8dfd0e17084ddd402786e12d896c12951020011c716519c2c056014d406f7
e9abc480405cb3f0a72cfbcb32b1ebf60c273b741b70bb0043d574d894ddf4a0bdad872e
fb32672c037c7dbe0bf8c5ff5f3356671db8f42a08d682607c5056b37eeff3c3e09493d6
fe444c62ff81ea26616901216a00ed3ca08ee7e52b620f0dfccde098c4119c9fb1084d2e
be495386a7b46a6d08f92bb4afb23cc41817e320bdda43323b0e046ca040acedb390de02
406ebb8b5e115a1169852fcd3557b4583cb3f39813dd6619fce3dfcb31560c67fc62d6dd
38329d0ef41b556f19ba92ac31eda5baa1a6aa5d4e1a76045f3664286b865e92cc58ed94
d28bdba742c79df463ac2f97780428f3d05f7ac6fce48a535ca9dc913e247c666f4fd56c
b01928046b0ae8b44cd4e16dd479001874cf27f9285b454831ca54f1de6b6d8e23168513
c3656d9e58594c5587c7b0c202b6bd96a1b18106b3e1843cd72ad45c4ae0418c7cb5a9c8
2c4f4e347ffb9724e1e104c9bf033c336550fa1f78b2bbd15f3599d213248647ce34c7a2
d5101c7fc456a0d13771f3df069e1e46d75d6bfea6de2fc02c7066c7c7b1df0d9c865e33
cdd0e6653153ccf6cb972f039db7f333e27daa2721baa4e699c0da0ba88f91138b63396f
03f4ef4b93276335a36c732292a2a40a5a8fe045094d8e38fda332741f1d98e1742fdf29
66ff01360acabbbe1f7905ed9654a7649519d2e1c8849ddab58ae7ce778baf62815ba0b1
02fe94739377324142e061f8be7ecbf9da921b524df0f48bb777b996da43626ce579710f
c5d9c15e9fe8134778daf38ffce04483d2f3d8265de787e22fb940fa09b15c25a4462f6d
3b0d93fcc35e95266ebba3cf435b5fe0f466de438b5df784da0906b311250cce866a81ca
60086e95b8d7778fdac5869344087929cd5c60c6bd12dab42069bd8e0543431b5c9f9411
f9a1ba3a1ef6b4f35eec943376e07effdd4d0517f0040dd12079365bd90b6dd5bc79375b
ae7febc626675f51d68fbf3284ac062e57ed17c87caf5cb698cccdb7e984edea1ea6121c
f94409e7246ef9fe6702bfe18f4503612c5042bba7e71b923b73df54783a5119b15c9962
3b33113b4804b9a7ae1524702891394859cdee0b78a6f540107ce6b17656690dfd239691
469341257dace0e287da5e820cdd5b47735c990d1ae283b0b0da225de91f70b29ffd759c
2d46ba60333a43e5e817f03348c2a3c6d2ffc627febef544916908fc954655f3f47e3041
6eb8f4b49e09dde835d589f4ed9d59ceef1aa30ad39f7609c42d7b3875859a4fa8247e72
a51af182f4b8be8328ffaa7a623847a97c45080233fbca7d6288d3d2cc479d1e0a799e28
8bffdc27b1fd8f9e1b727671a9557699aab6a04c5b40607e8a9eaa1acbc68cc49dc204a2
f6bc12b7ca8befd612a0a61a9220a97d67dd8ecf979b4d41ec886d1b61ec5084ee422f9c
0d34bd2637bb9554cf7a016a2d9530a2efa5d21706a0fc93816d87b3bb0e509062d99879
2297943b25defe2e0640a97117fd83e100752cd908e788dec55dfe0c87ce71ee9eb37e30
894663035dd3858ffe97785d820c489a370aefcdfaf9e57d6cf7dea76af4c52960c09b40
71cbd2f02dbed69045b85f04acf8b46a1432f143e220e3fe4a7ed43aaecdf4710856c661
bda517c908400e32a0f7a295cb8580b0a6f6ecc0577f199f01181c4d0b1ada2c7834ddff
edaafc38f75167b463a25003c0b51c18a982035d5a36b42cd0d596ee2a4b28e4af26383f
1a3c167ee618b208da9568aeed754ca48899c562a89c254c2f785f24ee37dcccefea8ea9
88c5aaf9547d39496daba5518d55341816441760253c133b95a9f4ec258db6bb51f1252e
cfbfd7b6111152e3f03bad24d668145873fda8e17c88ea05bdcebdf41340eba65bd671fa
de90eb6c0199a157454b4fb3f2fe2b2c02e1b519851b626cfb891db749dd7f46801a6795
1ff9002bbb898d69cfc716654e8bc5eb8ab718c7b4b476239755b7a69a6a7f86802cb190
280b0d8499976138e52ca429bb7de8c9e85daf152df914f4dc8866708deb9c195a48d17f
b68eddcc3f8607721156ede126c9ac95d532cd09c7147760e198c89a1442c22f833808cc
f4dbaf9041980d2edb4972bfd6d694c7e6a76041de33248066f2bf41654ca9647812228f
7ecd541bb94a098e2fb75c9139b40caf7f2989cb82b70255336b25ab73c132072f6bf7e2
ea6243a837dbdb650b5b00509e336ce1c6724dff59bd6c48563764e1d86b3d1b5831e11e
8d8fd1d58c6a14f4be92df6c741fb756b75a3ae8ea19c40541c315d45fc26b43021d7095
5ecc508cdcf4629df2e6dd4b61761b9027aa35e6778147204e296576e47fd77c91a122fa
394e25a7086fb8567dc41e06b61a2598994356a4ee435edf38f8061692cba0158dfc9cf0
a39075bee6cdbf002008dcfd5dbb820451724a8e13266f8d83bea661e313e9335d6ea33b
88c66f4c7cf7011a84f921f6ffd0b18758ee78431fdb759bbaa39ae385702d0ec7754089
86c0721480500626138b4425b144a228a1885069cc5d6290e2f0c670b7435c3be61f8d48
d8c676d58c278e147dbf31c81249c566761655a5ba26f0fa2a908e23e6f0cd120d760e46
6ee3e52dcdabe07d03861b168515c5f4d6e693c39e191358239a3c5a18d3fed477924587
f986174cb296567bbc9763bcdbc244f06651d006d87b91b4b8c2be603c8c68d976789720
3491b6eb0443f2f6e7598590dddcef1b4740cb5fe7654f5c96432f973dd8be874546e784
720c957fedd781688ba43eb5b896f8f1141ae77338c6dfbdf682b85d5f37a79043c2cd5f
e328361a9b72902b0ac361e927ef7a00e12f8f71aed4c8f5237912858674832e9cded35e
2ee584889fd489ae345212b1d68672deada54dbb84d0e255a6b4f907d85b1978445a56b0
7ac3e09d65b752e2f1822fc51511c3f590068d9ead00d6d9e473bdc0e2c3fa7fc7716d4c
77e272b20367eff7768d98a744a7a0cb530284a7ea7de0deea24faab68b2137bda82d67a
74856ea2ed5210db5500f5a32e20adb65f1225c3e5c14c825f4d30bdcecb43596d28d867
003b01f75728ac904dc4de79fa7c911da0098e88f2851dc562b833ec471b5fc5989a5e6f
846e25acb3d3b3bbe179ba9a3c5bda37a22bd0d94ee38bbaa3c3f93fa3a53999b59922f5
efd3bc02200f014742a67195e148e0c01506cbc520d5c5259e1df18ca61ee6098749d406
6237144f36c42284412658c35a97829b0efc7cc9ffeb7b46a1f4367a0cc3df09aeeefea3
3b39f30ba00772a46f36c0c3f4ccfd9001eb70933b90a375ff94469575bebf43a977ebd7
a7b720bd4e70de5d8c1d9e7251aa46f90e906c30265345d8d6617c101f52251810ffccd8
6ad18143a806f3578515f710893c0c1a4303f4b6b20ef5f0a95882dd38cc62e0dbd37355
9259ba372a32d49cc1a99ce581d8857f3121dd7c99a6d2ddca027dd3194d2a803a7cdf88
2cf73f81288c214018dc57ea7d790e5ecb7dd436f5dd3e89eb030feb7424276d85e90c31
9df3ade3b9a27a4c996270ea097d5b1314a4f54d089b6784fd50ca2ceda3468ff0cf778d
816d107c52dd6065107dcefe8478ceb99faa86407fb14d7fc039383a35419f4e6e2481d9
3f3f45524341d8aab18698fc0cd5feb7e65e41a2a578e9e9c9ea2679f3743a4c86653b10
678bcc640b3ed2934203216df0cf533b929cc85ac9a6626e8da4db33f3b744d3d14aff52
577cb5ff50ab745edd4a177fbbf1eb3e54975a51eaec0fd6d5069498c76e6a35c8585a1d
def73a3e14f592da426913f197d65474b2cc9aa00b437bbbeed29babc468494691d331a4
237898bbea789965b8e9045b4037ce1eddaac3b78d7d50c6fc9b0a260c108a0e11a2f978
4e5f2ba3e150ec86ee2f204855d6654f67895b17385849faa82f54bb0bc2ce02b9415238
4cf9ef46d6e0d6f5112c6679ff697015114434640089eefb40f93898c90420a8e312988c
32fb782f2854e7f1fa7430b9ef2b6bf780fc6c6c53f020d9d93794a49c4e4b2b8a909dc4
bb9c0c24ae60f650182614cfe13e1bb1f7c53d5702f1708702d73a28782a27aeb1e132d6
0004eafdaf2259b2c1ee444b85b1718af0d13140bf9daa997868bb9a51d4f5561294fb25
7f659651aa40577008df3323553f2a0db8af12ce414ff9b75a68dc0e661875c8146b3460
2ae592ef9711a355ab93c77eeeee5ba65713e5c88c16f8c72b755092db3012b35fe4f943
3296516ee3a670704bd4c012f447c913c4c9c6aec802e523665651a3f778cc1c63c43650
c44c73c0a78e4a69c11eba5ed06a122ee8ffc4479b190f335cb11dfc9ca850a0964e57ee
f22644670a42cf4da9d64d8d1a458833c4ebd863c4ef5f32b48ff1d825ca030c9a4eb837
144b30edfc5e2cc6cd2510aa3365a7fafe5e32351c6e84120dcc362544334d7dcbf4df6b
4d808bec0b4b6d62ebb0e0e21bf44960740db8305058695c7c286ac7cdfd62d8c8d6fb8a
f839e862d81ba1346e23ecd5851be88bf9f8602b32ae20684644193ce30ad5a16e1a13ad
eca5d7b6958bea4c62c6570a04f965b829f82f0b9b8904f62c77b7f38912990494fb16bc
7b02769d935c7b3a49ab705388ff7eecb78dee5ed31a1f4e7e846e6c892859ed17f09091
f8ebb978831dbb2d8aae3f6b3a6201161a54fcc891a9cbec73703bb43d2c01763b5d4e8c
99fdab8a144359dbfecec0b8fc78888b6aec680832769024d8320f0caeb7ea70dea2ea48
28c77b91627755d5b311bdc5334784e728e0b3e2ba008c1201cb6a150dc88dbf7a2e900d
9992103bdea237c293436429c44c82872e4d2ecd72f9374afc01c823b4c7900ec5439e3e
e4458693c3b3a562aa0248584615ff01eb31bd5304aa964c3361dfd49be9b7b4686b13e1
d2b9911ba727878dcb74ea111a5b20a7ef8b9451079688f7d7e61514fda0d1f66f8c124a
0f2ddb9f0d54135e0dbc74236ab32310d9330ca932ba5f717c988436a16461dd142fe2c1
1c7d0baaf3f46f8f9644f5dd0a6a062fcc14ccf9d58147a816c9cc4a25b1e20a94ad39ab
6e33148708ec1b572fe689130a5ddbe8b0602f858e7cbd7bb90997e865301476174c3f74
f92f294a2df43fcdcb520f955e4791b9688492b2249f9fa1c3ae987dbffa76655940b3f8
310013e9d88de89916b2920b5b42aca2c5053aef4d907aba5a21c071ccbb22fb7eb38a41
578ddf9f5932104aa0595609b6a061da1de5ed2eb1b225e77501a388f17de8089140e788
24dc7f64694a6a9fcf131539565c49b5eba9d4aecaa9aef10e9f16e2fc15a952005d7995
80a40eba7089f42618fed82eae5e444211182bf2c4ff053a71fc7564a4936e74ad252a67
ace62a6d394ddba6024919a4cb9f512cabb2902534276990b7c1062d8852fa089471d3be
6eec6a4610e65ffee0d3fc700708f19460053d31b97ad64e45f8412c29e1ece044332ba2
589c5d7f2d4e17c72e2b8da6cf0ef8245d17019a037c81721e1c4e26145de21366d476b2
93d29c3f87862dc4283b2ef3bdb78463dbccf00457220e1322c179ac7549696183c34081
5d6a97d910c086d5c735801ccbaaf3398b2d1a78a781167dbdde97cee282c84819a7809b
7dab3eabf2aa90e09371f645bafc0ef6f96e50d64bfb0bd1cafa57020039d2024388f4ae
3bf1640738c97b467554e8888924740398f1610eb90978dde908fad108ce54217f617342
b918630b8fc937690c621a2b936eb4582d5fcd732e19d386f4d6a8caaa507c64cbf3e857
ebb7e67d37d11caca72afd545aeccba6fd56d57df70b57c60160cce4a85c1dd4cb34ac2f
dd7c2267c705024ccad6487f35ef7506361232ee98d033cc86b3fe15bd1301f1155bed36
c9f18b176afe40da6ffe7c87e5c95bfaaa35ae01b89b901c6ea76e29439e36ec6891b36a
a1b0542f975a9ac3eb565989a505d31405452f3ef7bc8723659d8c9617d7081a9028224e
a59417cd5686e5084d75b10a8793ee74259b910e386d077a7f00ef1b893f0cd4a7285284
d111ffcd3abc8f1ea1156194a3d2dffc888e463980ef643adf0939cb9ab041a84421fe71
e97a9975b29c292997729ce460a5fc43ac6006f791a9286c0426e5f65edb8d77fb10f935
9c4fb300a17756f16100a8a33e9301b8a939b443f71a720b0643aa1ca9b1005fd48379c0
06aaa920e2d8d19c3eafdbfde539dd21944b1d962ab95e93ef602903334a8ea1a1399b67
a0eb1749a6a80e4fd4d397ff35fc62ffe893ff9364a9cc61040e21404952909c9d9c906a
b855aa79fe283017dcd83f37aab8edb6e2d3f61dff49d6625bb365e0dfea194c4d86cbc9
1af752e39612bc73249b2f7e58b9e05bb49cc8d3a90a2fd822963a3b7f8bccfbeae1e4f5
0875a72ce84b99bceaa121a56e4e1400596ce1505e232c21cc8a838e2498b9d971d1d87b
0f92c6f2cdd3c2e34fd3dd389e20eafda9af5c9e903b84df946d973df01b086e439ffe26
f8b818d2b16e5da50581b6ebdee80f9f7610ec3ea6a95b2fc3df96acf58cae0ab12755be
6c76118e3a2d2df7941cd7899461485a8294a8eaacd602d0e6b34f9874e0e24a3ea1ffae
89acc391c08f9ce676246fa6e4eed451de2bd4ad14139cdf522c4af67ea1107ba20fdea0
83b11a24d30e8c1197cb1175feee1fea65254611c7d37ca7983082347e724a0c153a4313
c5bc4005ed2c3ea13199e53a9fdd5084c57369028f7640956f240c6145b19b7b9faface0
56e8db551d8216ab5755884c45f7e22181e439d4c033fac880966f395186c1f6a62be1bf
2ac9e8bb19425660d5dd99fd680665819921d4d7d08a88e1adb2d4ea5ed147eb264d3d7b
3e04e0f46578a4b93e46c3b798fca851779a060f4b5e870afdef40179496f3d85f11f410
f51a27f436916b11d7b5e26a32e4b6cab22461cca275aeef1a98458157ecb78b6ee2fb3b
f7274fb85a0ef4248c154118a0fbe04122b51b75f2be5178560d28ecffa7b2aa0ec0a02e
64971d4c03962853d7aa64cc174a7c4cc640c2816b904d23b615093f9add3063cadc15b0
da7e2a0d2ec9af3972bbcf4882225ae6ce2b59cf3e6a1c2441e59504b2f806402bc7bf0d
c9074862878239a18913f3ee619598d48fdb3413b5a47737abc2292da2ed92caeaefa6a8
3115d3502fa6e48a4dc24ee537e6a87c2338c52dc3a7ae642b25dd23e8cf9a4ae71d45b7
d9e49bee40640dea8ec7c8b422837d71c4292ddea99e473fc9482e2c8827e0c546c90ec7
e117329dada646e87ccd837f38ed145d46e986c5d41a8994f5d0c4ca95f04865780a64f0
843f4750f692b2c7b0f56abc643c7dfc959bfbcd8bef85034b397591021525df65477c1e
714769404e6e37ff633359003a41661a88c1de6ccf308b688960344e7583839f6a6b99f0
b4767272024d7f405934c907d718433cd3e58f913995ab2398f13eb837f4b41df42fb957
329791f1de689850c6e805e06b6bf4862e07bc07c50fdbf5cfa60e325eb7a9acbc757ba7
1d7aefeeaa822854ec3422267032ef4810d26282c7cbe194c058405f39aed41da6ae3ed6
f569e413b7d63367e4044d4902f8c5d7286709ba1856382a984b548195bc8617f25677f3
cd5cc33683898ec9d51b15b3cd392c9fbc8588b406892f234c47de525fdbc33a926a3a83
17f44b98d7ddedd85bf9eee64966591bb78e9d8bfb0d1f512fc32785f61366bde12a0af3
3dc40169246ef307eea713640217cfa7a2aaa8cfa1f5056242a74ae29e48f5ed6c7fd2a0
c6d4bbb9eb550dc66943b46ced2a00a4127414b9d42f965b573a3e947d5ee945961ac2ce
2d26c540fdd58bf0ed4642611239bc073e450d4aa6675e9167286868d499cb4f8aa03024
ca7e7b265b23fe45f7813b2b4bdc15b2ca96e86c754d53dbdc218ad7d2b99c5f80ae6cc2
e29dcd8d7249f48bc65e9e588a09fa4afb06a85d8a75efc1e46561963e4cabdd10b234aa
b0160caeb09cc51cc11f77e1977da5e8bb053a3520ac6de687bc05e024b107cd59763f11
22d3631ad5883d1f8c2ea2802aad64ac04fac4d20dfc1aaad529c6ea9efd31adfba2306e
b9b2327e527673af53c24cc3d7c79c17100009cfe2b8889d1bfef54e1c5f6aeff549ffe2
fc6f98d84086ea7249a475adbebcf77c6209cbf57bc45aba97bdb4cdd6a8432ddc1376f4
0742fb291b1b60408ac271d758e95137ee6b9f02d6993a5c7734a10bafcf5123d79e93d3
736484ed19d4374eda75cc09403e392f9db4fec279d73d2450861648cce3fd706e185d7f
99308c0cc321ca7be3f5006fc9baa330e23cccaab9e7881a19facb392b40b2df2bdca081
82e12caae0ebbd93e3bb8eeeedaae165cfa53b27c14233d2c878b8ceaf485221e3a20209
1174e0aa55ce0ea618a702552b1933d3d47f46fc50d189d585f124aed5ebebfa8d5f87f2
5570fbb583fba3b02358ec51b3f0b8d8746dddf964f8548814765ee250338773221f02f3
167bd3e4bd3aa02658deea5aa0690a43b4d804d36157e767fc63e09f3fd3816e4b834a7c
a9bb482f4cf99916507b9798e40be7af3b0bbd33c55af44aa2f750d15dcfc50917bfbe60
7162bfaeb47811383ad74605c76c22186e219bf937272dca0a7526fcc6a98616ebc484a3
13f0af5d82c04ab4ef0572194bd617e868a63bf8058d1e3ec878502294759770f9b257f0
6c229d3c728364327289515e9bf16ae56e095ac2e2738e7aff63091b02e76d37d7fe1aa2
5d27f7fa18d6deef8f23eb04599bd6516f408c1193e7515677b1079537bc7658468f4919
424cc7ac43fc09001858e36c0fff8039b37af966998f69172d887d164a78c01a63b211ff
dcf33b786f7f885f6fe07158c4039132522c5cbab3779f9db83d4e0c944dd70f5c047f8f
0790112a1933d340fe3f2f547ff3f14f0ede1c4adc85198afc490a0afa3d3c861c3bd3e0
b83b033c3b976ad695752e6a6b0c6c72d7b4fa83702b3e19171ceb494f2a3dd4f222523c
83609817571f9bcf87ce60ab63862e1567028ab9accde75f3bc544ecc094f0d68173d8d9
b2803c3aefd792c88fdd7717439bccfe0a970831a87e9c3137f6cab7cc36b5c37f12d4db
f28a74e41315bed1cceaf0ebb81ba5b25e5493a366b34bbcb88ca58048ee3fa16205adf1
758cd46daf7413ba277227c5be3c5f21577d5f82d67218a940bec434fe529a9d8c0d6705
b5e485a59efdd8c5b82583635fcf01f7955e3b589af51e650a250974764abf1c5f6656b8
7e18b8362a87630834801ce8958310d98f362a18764c3d53be96f2331072c9e745cff739
ffef54153990840c40a22757e225628d7dfb0eb6d20aa8580b069334952b7ccc56ceb168
607b957b19821e431cf5ed400fd9b49a87204162daf4b19eed9a83eb385f6504637d4397
0499776cf8fdd5de2e1e90d288660192e0697bf685cbb7b9fa6290c97591d1c747c85854
d05af94a9639859407bc6864fdd7025bf9a9d4980b18c3565983f88732080bc091fd826e
7e652a98f89012cb793801abdfb32efcf9376d350b3b786b0a496f0144d508b8a6620c25
1ff80b02c661b27fa2a5d5f4bc9e32cd1ac866da406007e2bc9467202e2d7658fc3f490c
605f57176830c86e9e780cb08274a9e63a6373a21e9132c84c066015564b68b6c8bbadbe
c3e3ec0ac9da1160bcfa62e11e53861d24bb158d828d11ed869c380faeecea46fd209413
79830353c972ddb8985b11fd59d271c60b9eaa261b06db818c3ece9fae2cf687527f6b70
b2670d901286c1b2068a2c19096903d40802026320e42666c7d144cd7054b409b0f0f117
7134a6e32a2adbbf809d5fab93b4d84fcae0a73efce8f707c86daa9e08fd678c30c86417
103e6ae3ceb38b3659c8881ebecb14a6e74d415e7c7a674009815323333e7dda6d97b73e
951a7198f112fc25a1e603cb711c71f80adc7c607da519eac8feceb984d483e4ba078777
c31865845f9204d41161c85970dde063854cdc8f4743b05f605cfbd207b56bd67d6ee556
9ba318664d6f114834e75498ebcc33d0cfc4be5947e0b525be6ab2dfe6562cbeef9a243e
0394aed8808063a9337bddf46d9dc84037076768110ac9f2ecdf1a337efb184911509c33
e32a935728c7841e0b5417ea5df03ae48b09f5bb0e1b0a0576a80feea61c6874055b4b69
13c0485356285803339cfce33ed1f5880ea632d0cc22c8fd34e5b9fd4996b4f4c123eb3e
d3dd063b29da4d544434b1552c24ba7f775700d52335a25897714463dcd51578c89c17ff
93169c21297cb93c8b23fa72857c753542390ee0b2595dbcb6953cd4f021f72dff1e36cc
8580e9fcb6218e9ae4781f885b5dbf49ccc96ab90d57d50c9f58eb773073c942ea651dfb
9d2550309885531a8503e96e91e9fa5eaac7dbbdc64da4fac3042cb171a3c03ef482fc7f
3495f368328d5acd44b982af9d42b19dec92a182cffe0a70f2137c7e24f8c6fe1b091cd2
55f9165b2e72e40c2de2247ef880880ca47d3fccca3e0e811e0725b5490a65d5a0b965be
f2c9a1de79c3872ff82c784f0bf4eb4d8e783c7b12d01b54c6b9777a07c588f7de17da07
0dbff996f88deed311dc06cd171e16b06a135aeb3a82cb24299b18fdcee04d69941dd12a
81c0608cddc53fac77fdf47e06062b9e7f4384b17b85c40448597919c50f91088b3bb3e8
f63aab942826093c9f8750c6d0a6c550ce45950ac56c868c0431cc0eeadce24ea9c0099b
fdcfca009f0a4d431fc7314c0da1a630a4f5de2bb0607d2f90adb2f21edc4371d8c574b6
10f95ff473420d85dd06a8c9567f70acc0a023fe3e71dd12c4c610e939af8418bb94776c
87335c01f9d420d85553f12e237f49c65259248b52f1461734105c4194699ea2eb8cb7ba
87e0bc357ed3fe3f7178654e3f7f4483febdd82c96eb3b8184d792b0097a32317eb35539
f14d05a6c02d61757f37ab0f1d838f6d411e1a2606fbc511fb350d963329754e6aa3570b
83000ae0f34e54c9d7b1f80fcafbb5e2b2f74736dceaec469cc2e373dcac1d48f89936dd
81f9414bfd3b6d4b6a62a7b02e3b925a2a3d2cb450adf952a92c272703b0c14b5dcb0bfd
698090ce63fb05e8873b4e27c58e144988b20b8c57972e590f58270f6b292e8dd691d63d
2c2854779517e91d8279ce9c639d3110750faf1f57086caaa2d5d99a2e185e6d27ed34a4
8adb91401fd2c35e7b2bdd6d9cfb02a2f726446dfb57024ed71fd97170f307d8a2f1de16
5bcc5af2778589cd9567a24d2eb7c649efb12ad633465fda1b90ffeac0d59cf68173833f
3e572ea741a13decd5950d6e938252e8fa3b7f14888e85d032a7e71318d137fba1a7eaec
195bcbcf233757fe4661d7ecea1e43ac663a2418524651a30e035e3536378d7a6e2a6669
64de55692e17b8b5d31084169ffe35127d7dd2fe4472cee612fd9081f137d199ad2e118f
f521f6d00bbd2ad332c885e32d406ae82a989e00aff105ccc88ccd7507643f61af6fbe2d
f44b4c7f8cc9c4b0c3950b739861f91c39b72cc94e1f6beadc5cbdd6e70c9766d7b8ebfa
3e08fbd3b6531b85ff8f0bb77e88719e7426e6173fe94fbed523d90719cc5a48bc1c993e
751307c163325b03a175706ed6844b83381239e912318ae7bd906c85f4e25eaf3628df66
bb59b811be5fc4773c780da934ed9fea6fcd2fc7cdc90098fd0268e471b98e4dc6267354
d31942535c2161b00f9374482d9c598156e4135d893f1868a1445a871fc2e5e5545a43e7
4ceaddc34735b770800d1191751d98ad82c96d524b7a742954a512c6b242a9f14198b789
848a2d23913939a8db9239d0221dcb5a0a6ea766288a736c144e7d9d1747f2d2016d7f98
129653b5b4af090b12326c3bd03ead864de513f2de7af0a6c488f702a29d9472951a608c
e763783e6bcc1a37543b92805c70fff9e906902353caf333210121ba5ce1378b16cec120
e77261455543efe45670e7059b65953120cec6a95076be59e934b53c3ff07d546313c4b8
9d9fabff2ec9ef26e7e34ba5fa6596be96bba0b58cd3837421d72fff046e230ffa91748e
a6d852c7e9bae95c6d2aee00437242caf99bb96cd3eda7e9281d5b2a27bbc782c27fb39e
4ec820ce14feff52444e64a59256e21005ac5e4693008a98d9c2cbdea8aef0825c302ea4
74600d7207b3d98eed802c77c4c914980552b3c2f3da32a077e079c8f0508baab7e54fe0
12a58fc319cff2c20af21c282967801fe457b0c6841cd7b02fd2d391045c86a605323115
ab0bcce51a194daebc73b9aac8d66bed9805d57638a927e658f7b3ec07327bcb7d74ac7b
f9c1bd4b52cc5896dcd23ab5cc7d775ebf766ca5e147937d5462bfc5d450709de9467e1f
131f39c62e1248d61aac0ab9292aa38f240c7340b8118112f3c203e74b734b373ffbaea9
6d8a495bcf5c42fde2c67b27e51c700ddd6c24d0a1c8066942ed7ab69f5ba131cca09d8b
b4e92ad698fede79061254bf2751ad98ed727e9aa60e980c83f4188e4185ff1f7862c674
9400b59668fb6e48938299fa147a6539562003479148b468fb01459115230d448fd470b1
a3d1e249cb97f55a72f87749ce0c50351fecd2ae2fbd37aff30f07f59ee56eba55915ae9
81169e0bb6af7bfce464d0816080f96b63c128757e89dbb02dbbdf21d48dbe84b30096a8
8ee573492a857304db273a734d55a2dbcf0356d487935c3c074ad8d20b7adbe331eec53b
c42cd30d345156fe651830718bdeb2fc86a0b33ee7b281d4c1ff2b90dc1f5d70886013e7
70d583a870a1839436ce80d6cf13f509a6ed591f3edadf39b67c6b58071f17c3175da090
144e7aa759364b69078a91a5502700f2075200422ee97f8bdafae8b7e4c9fd1912820aa7
e34f7c6b18f63995a5a57775cf89f764cb02f9f54dcc8f88b250045e82a58b32ba961afc
c7af88b64b7cb9d3b30756a64e62404cae03d9f83ff4daf5a07dfe02f80f71fa208bdb91
e3e9aedec4d35f2717a7aa2f489864715d84a1caba3a0c88728cac0beb493db6a6f533d6
11b6691453676fbd9a68b059fb5fa146f520dfc6fea1ed0f6c32c9e3fd31b10b3b7eb650
1baabbb84ede3ff3d05adee3a1bbceba14636f63e66a62fdf8f38dd47348d4fda4270132
65cc565522c88b32835a2d45ff8414c057842509f4de4c29220d834d8d4595c7c73d75db
b0170a87f92cdfe329d8d5f8cce03162512dc24a9ee310d3cbba9827ce56bfd4e1bad1dd
a4835f9d074c5589c69b5e9267d5eee152e04d90b7896c7beee4723e39268018e452b6e8
4aff7c3a6b78ac7eb9cd0563d9f6e2a865fe06311f72ff67a6f649081c7b5d8147b03b25
304a174873f3e49f39a96e1206be518e8d28375cd297de1f9838dc92420b983b7107c083
861223adbe66ea22d0cae9afce497593f5d7f671a6b1b0e83dd2fc2439f3af2a796581aa
1a286bfd1860266ca13d3a057b0da074a56069abb19e5d5f6b3914febe2e13beeae653f1
329f34e8d193c6b68f78290c04ac932df35802697fab8d660926ec3c055975f82416f0e2
1ab489ff2282ea4aaec2053612a0f4dba5a4de923eebaef6f7b19868561ec08b6b657f79
17cf8f779bf03e7601968abb2d1460fa71f948d05d799242ea1c926a365bb9b56f46663e
272f123e8779872f069b05b9226f1cdd2aa12dcded63aa1693cd138d921c870741f1ef7b
ef02a9c7a3513f4ec029f968a634bedb81f452e34b722fcfbc5c7366756420e3e29ed382
f1f1571c0ee2f5a95096c7785ba591beb664b9c2f5eb246406a79b73c38f3a40697b1d33
10be8315c8f3003563a4f833329fef2aa744cb5429b1488155a41d4929191b8a10048461
da0d05b72b6c3f4041d82b2594c84cf09099c6f8a5fdb1eb19e0edc69c7fb8c4bd998446
e5d1c38ce6c7f98420c22e775d0c2e3125ff20ab98d79021d6ff6c395d766039fad14048
d5bdbb9304622072d7502729ec0106d4963fd2c873ac33b56b082bca267d72b29536ebeb
f721263ddb34a0f6c9a3b46a083e87351e883440bdc0c0acc348a5745791edd791c0255c
b844b5ae8b647c585ec54202dbb52048f32347af3ce00ff9800a51cd960bdd76af7e4a35
5ebd645e5b4570b8bec95bb6b81d0d2160ee4b4cb86b6c523824fdcd2ced338a0f80e135
59b2f661a1b9af731d19b44f9b1683cbd491a067163d04a7b6bae0d3de3a8543c4b92acd
2e84a35c125d683a0b7d4038c5bc59384f06de7eee6b18d97aaea99511e100080b2a10f4
54d3b627c18f39b30fcd1e5148849d727a24e6bfc54c2d74731634a11fe82190990d2af5
596b01392d71da191d9251c5a80c5c43e78c19d2226b85f87b33fbda68d8c06b3b8e98a7
f805002cb5bd1b2b7a6bf71bf9372f4bec393fc72f160d8b17e64bba525ef3caa9e35534
aa6c65924213fe9e2293038170e43f95c56330c20a706cf3e7e482782f2860e09bbac4b8
933449386c1331f68be6b1959ab436216866192bec6e0a6669307c2eaff55301841449ee
9e62dd5866d5e44b45b4eea14901e07ae6faa1602733120e122efe6ee0d88f79e8cbaec3
c0c0446e5e329ad4fc47919b45505c345b35bc97b768bdb39a64ec4a298eca11ac0701fe
2621bd1d0cd931e7708c0419d443b5f3d3a515758fc6894d9b1ad619d4c97889cc687a20
95d34aae204da11446ef34e57fad4d1b88c3e99b7bbbd9220c140af4e5ef5c02aa02bd70
d714db9b14d7ccf5ead9ed027b334154dacb3dc6b521f4316f4426d5cdaed9f4177210f7
08bbbb180dd7ca959598eea498b5ec76e3aa98bd571f7672ca8e87ace80d3b6f4cd73e27
9c3d2aa4dc7e39e7d7a1949b71af1fe0cfe3c7509cc1383d4a8029d041681033812e5d8d
17e7c681deb4c124720f4a5fcb8549e08bf38f869236d35b79347590b397a5e4d20307ed
25691ea06b719ba9236dc62c4754cb8070c722cbcf5577a064d8631d3b5eed92e4d54e85
f39b141000b26199a3e3dc61c9d4a9b63729e8cf7200252b10110ff20dba7bf8fa3c812c
d5b8e0955420dcd8fc8563862dd1d9f9210080e8eab463d8e29ecb715e36661a46050f07
d23eccffa3abb46aaf63d21b9e9fcf7c78d3fa11b2019a5a899df71529d48a7aad623ac1
f746b62c9438cc59cf4db5d4384a0f576b96fe0b51c3dbed366219e308ff066cba2185ef
eb57d75971d9da00aa021b83d435187fcb774e860e6a9880dc72a24f72770b3a983fc9e9
021b6436157d0b7c094115a98b72af60cd7b1c1e8c33a1af60ee2fcfb6e582e5264b4fd5
2d1f3fb9b7b78c523a5f3d296104cfdfec6dfbd5df32841558f735943d5b2cd4321ec59c
43530b401a54dd4637257ef664fffba6ca856f645818328182d98daa05b40c72ffef7acf
b4097ab630d6d23b2259b4fd085961c54a8c0b76ad833163ebde40524d3439262d2b0ce6
b7611183544eba43d76920e3bc992674221910dc5d4105d37698bc9c8d229d9ec06982e9
8a47e586a377a77c0313dd64d43f27bdcb261899e338ed2ebb1186099c50822498a0baf6
4b0694ad7328bc2ebcb5b90fc23b0718df2be9ce2dd627bb84a860bd15a5101b047e2fcf
5c6c0c1e9e8dfab4a9233d9407deadfd5a245c0f60deac39a961cd9cb59aac7a3b11fb78
09f739b8336269092208d3c921636f56160d4839bb7e0f1750cd3696b46ccb3043bd58ab
6da6c0b2d9383b477e84798e3d505e1262619ccda14e0c448a3db05dbcf494cfd1a16dbc
4b1e37a5f1bf8d5a05fd91890fcdac618ddbb0542281e07e495a5f94284444bffe53c1cf
78d0b29985a5a4a7ba3dcdedb207df12075e5dfe042239df8127f1cde2c28c0831d5b2fd
91a1622477f6373b2d844097312135bd4bb044dc89384bff2971c260a18e487f7a55ce12
ed76bb75369579f0038cf06d14894387e8388de144486ef17865bb844fe61856dea59f9c
cbf685b671296a8b8ab6a3f7aa347cad6d27d4dd793b1d738912a021e5d3ed58302a7ac8
357a2b7b71bd0fe8a05ca55ee42ad23da963422f1d55069705e7c4e0e864c38cd10713fd
28a826d968e5dc2be7a4e465b32bbe3547d0b2aca4362d72175947b2674d61dea9f722b9
cc665a6814a7cecdce5b15ba2de2059e6c529eb88f21ceb668573532ecd967c950ded7b3
bf13240e6883bdfd4941f3532cb848ff85bf680ea2ec0348d379effab95e510b4c394a48
1c9981ff0c0ea809cdf19c1ab1d6e8b3a42ce38439e3e497c5f866b6b3824ceb5a039910
7339f6ddda50ad08ce037bf41645c5df0fc9a90c3ada41b927148e3bff254856e7dedd51
a88f1330390c2d8982adb02d044ed4d522126842c65852ef89ea865f401fba391718eba4
46e7de28c59b681f8ac29e0563e904c67407d158ac8ea4381f025c1a643996b332948ab9
362e1e69bbdcbabdf52f40a5d73d59ff3d3ee14c7ba0292ca0a6c3ee92b3c4d13f8fac2a
4d574c1927b9c30b24d2a3fac270c0d3868d595d8fb4268836b5e75de3e7426e022bc57c
46a2753f97578f3291f1f335ac98d2d3042c9b387a256865c3adb0b3c6b6386c3fe6bb67
89f2de84368aa3f9e7ab5d87fac8f1388eeae2ff7232c96d9a8feacbd3f38e0f97235ce0
1ec181ccf7cddd1fcd24996a7003d7a9a7b66cda5c4be90afbaeb6fd630f1b7631d1f7f0
ed86bedebeb8c096132b97a96134a7d956ff72224a748391aa7163e68f85dc1b438a7803
7e6dad283a2f8fa208405d8812cfc18999e2d3c0cbfd6a9b51ecef473bb5dfaedc8812ad
acd92e64af27419c339326d62ec67f8f3e9540d05f9fff2c2b0de4a7e7351e143a0a9e04
ae1204deca3ddb290af67aad41830832294c8e4819a285be3cbf1ecef5ab86358f7923a9
13b4ce4ffd8f6db790e1a60529712a165f4f72f43878e79bfb76f9fc78ce504532cf7f4d
4c29e50c354cfd0387bf5bb7c4a16a9acc319120a24120eba60a1987d33075f09c7b661b
f1410a4071e0562c483056528b89dd458a1f2880fe3f0cc3ffff64e20556c8d3393544c5
8f723e46169904c00abeb27f3de065f192f1050710aac1bfe47c86b2dbed08b4b487e18f
c678680638e2ccc870d12f4d1ddc025ee15da941f132b1cfc69f4b046dbbadb77f21fc90
dba1906c73dec772d568e95c5b4605d4f67a76f4027d754c6c0dfd76b0f51d4f53db2568
9e901d60a010a0b21089a239afb2630c5efce26d0b7423e5701819eea0f9033083f06117
5d804d92cabc16984db77547a9b10f85953cd895c35b38d7fb84c5b760b4bbbd759978e1
e0b4848bcda7bf9a8d9a1d7d79e66fc7441c2194ec3de3fbd4a3fd72651c49c7b92a714e
073189700ae0fb301982a0034009df6c06f8c68508b77c8cd10944eb23201fafe337060b
5f159f55f9ec6929cd4bd713a18f723a7a4a6b7702e81571e94de1cacb86850f33738eac
a7db11d2e422b28abbc1a4eed22c2cfefbf05a201f6449a2a7b27c5b7b5d5407a283b9df
4f12a1e71a735f9fa74c7ba7b15ad7f37574cb04577687005f6aefd4f36afb183d862081
308b7c9c2e839903bc3bc9656eb2821109b1cbc76736defe3390792bdf1bc0705376d7b4
b9c398b8c36f289e9a23c776227d1d9b920f4252b48de3c758bca1468efe37eeb50265d6
720f42ed572193f72dcad95ca3756b21ca2b23f33d78c0663760083d94bc7473be20ecfb
396e9f37b29aca64b16423f2e7f790835b57ae44f84d58ec4e2a8ef8f53f23a8ba57a578
cbf830a9869a299415c88d7bd2c26c619c72053bff3ea6dfbc385414efd57a5e24e1db6b
891bbee013e2bdf7728be0980a5a837ebf2e58693c2cd7cca44ca5edf385fbc0f47f379c
825569763f550253ddbb809fa16ef6d2141bd6604d32714a746747688454b283f5f47cd3
95b7b8da6f643ec934297a9c8290e491cd34ee3b4b214625ae9f05cc9dd9020567a8dd62
2cf2af3fc6e3330d9587295c799ab525619b47257d23164549eaa64d10852b22c88b9307
e62290998d4a9f886f19a055a2315de80f6988157fa347db9ccab87c394fd17d473d137c
3af2089133ad5f61f7e1ba76aa88d1fb4908c612890e350b118146b13c3a713968b019cf
397e7332e8435e6b573d204cb9fef034c7f9c9a8b0d8681423d34b9b335ff5ab30c112b0
eed2db1c6fa44e890ffb665e55d2b7b9ef4eb8e45671bf519dcfa74cfbc518a113a6f95a
4df2e219daf0ce7aae6fefeaaf2639560f92e600c7572f45fdda13015098d3b1064dd43c
023375894283e477d76feb413c083cc27f7bf8d5545f6e59fc2fc6aa47e0f998a26303a1
08d4f57fb976a5ebbe592216ae39096ecaaf8bb5cf44aecd3ac9ec08664e961dc51f49a3
b139b8e8dae067c7373448739c341c3f901615bd378d1a27a8bf47b53ee650a3818ef182
eccd61cb54b841646340dd3ab79fb17102feaa89a84d30f64f396a2911b1b90f9e9eed2e
7bc2e6c7ab87f8f635f412e5276ae0ad5d1da7a2ff715987103f0c9515d93bf7d182087a
7bc852ee0a7e6c78740633b52a8515036878cc2f879786ca30ab02a481bbbe3e673ee38a
cb26ba9dff3918c38a81c7090ccec4d45be7f16e2a76cf215fb2896c99fe9ab0bc533bbd
9b9200f1fac37280f129ec7c6e5505609ab7255bfb73db91bf4861f365736a5a4fa3ce7a
487108293ec4d2f229c04be938c136b5e3ddf4a62df1d2830118ea132236ec81694673c2
dca6c57577c7a5682bf8bd441d41e6de9b6832144748a5bb9f07aad1575365782cdb0328
f286adb585eba8fa06782f6e1d81a15539535a68d233717a08b467d1e0b82ea377234298
5347f02637ac6c46de3dc05332a38b62efd6a9e7e9210e1ca85129ea7fdd4993d4067df0
2126d8011519fb87b64908de026e3316b82a87639111e6f8bd5e4cb8870f9c46bf82ce65
17d94f936c5e9ffb45a5e2ae103039e0a8420c8bf705c73859db3bd0fe8bc6f1bba237c8
84e8b417a08d9c3ce91b7839014cbb5e0628155b3ffc5c1e0416fe5cc91eda10fb1458bd
b808baeb3c43caf8ff611c947eb909c129b108b192624038378bb306433575f9e8d37285
afe42435463c3bf8c65be9faee45bf537fa80ecc56de87bb4cc6c10163fe703dc25a8201
63ec5759e99b71764dcbcf374279ec8f4cb3a29932a9f65974d6ab2d31a8ca2bb9fb0968
ef67a2d77c3a8262b45e96d216eb0866247eee10288e95444ed5624bd5b0130c2e895b4a
debb5dd57dbea0783bb5340a1adf7b1ffad847eeb3b13bf5674815c305a3ea9e9b87956a
d4518f0fc58135e096f3458a15d557fbf79512b9e0939d579d73f857ff755e1ac40839e7
6fc8c5989b401f5ee58e6fcf9ab33166a7236fbe8e60cb5029b219bf872b31abdfaef591
038ef26904b506f53fe67d61efdadd42485ca6013a081a5dde31905382cc79a2e965e4dc
7fbfd1c394208edf6237c8342c89a37ead3df578252d23a72c05c92b49afdc15c6b069e8
2893f32c316027e5b78f9a41fb3bf3c1929384603d790d07d01a723f72142e25d4631750
e6d3151c8a277b3fe300d7c2ba69ebd8cdbad40167fe820eb207ad4578ece0cf46751310
014a2b962ad16f5e04248dc53bcbeea6651a84939f49725972f7353892f3545b56067362
cacb1900694efe1397f66a72283070c9a1ed6732acc65bf3238c3cd870879b148c7c97e1
2d4afa5f174861a5261ba8e021711dda0a644bc09bc1ec544a2797a277ce2fa92edd8a82
7bbedf06cc834c1ca9714ce70b4ae97fe558545147dca7135867c6013f6a9d91eb65c5c3
ece06189fb88d316d0fc0f7696b899ba869d41a898e05e7fdc063a8487548fd86553c359
a524b8dc9516bdcb4a18f21948a8852b38d00d082d99270359496592cb32c5628552cd6b
793262087738a3dadf61fc7e513b55902a77d775a070d35abe34322284c5f4bceaea81cd
027cfc47ad7db0fb7f471e65018054fe1450917483c27422dc2cdbc3ba9fcb190928fd08
0584a631405115bbb91f432a2fa347a7b221c76238a3c2fce4b266d92143ac9461724145
13ded4c142fbddebbd71a7429e62ec228cf51dae4f181c2a533fb0066dd17971d002e573
79957a39f7a736e40bcea2829d40434b36c3a9f0d97c3711e0d8e32deefc843cc60442f9
d91c25fb105b1da08a6ced6a22e89e08a7c865aacb53d026c482c5b4a4f7999bfb53943c
fe22e4c727879aaaa31e528dec7c8e04cd4dddc941aa521e00ce0412c168579504a95844
6b41a03c014afba82f06e18bd37e6cefbb21dbca46ab429bfb687d09e128197521701dbc
32bac2aeb1fd7f0d68bd29191b0a18251bab414903fd1db4ff2ef401f5282de53408b9cc
eee625fdebc417ecf90024e7af2fe9fa7fb4c6ab2587a3a436099e6a206f9ceb7a587045
d46e3ea03e365c4b0aff6ca0d6bd16a2d5223fa05d3a0586238d6bd36ca955ee8ebb00c3
8dab8218df584aa15a5324dbea26edf4b892730fac045d905535439316589d174dbe1aa2
393797ca8f95272c134ad0b9f4c67de9275997f19383e19ec8f1b3ad43652f280a36ec44
f6de742d39c46b0de3703afbdf8fe0f4c0684ba847551f8b93ce2a802e95113f63f946eb
e5cd45a0110b00051380f4631bd325b395c47e965f8dd3a5e74684e8a32641765d610063
7586bb6424b1a09961b4814cdca7c58146081ec7dbcf66d4ba88ef6c70ccc20254061286
923a5d69397832f7e54ae29cdb39ad36e596e67414f75aa1ba0a7d8c1536ca12c4c8fd45
70b4faad22eb47efe319aaa0f5d84c266e0e7791ddf18704a749193b2ec4624a2339b487
965192ef7954ba8c30a1f539b99ced1af6e4938d90c6145afffc0c02b70299e48b0dc5fd
02da33ad8b7e935360f585524b658bcadb48d3de19afdcf62055a8c4198b36c6b9377265
994b985e4bac239e8fe3b41a5c5c9f1cea82fdc22d095bc3956339af61991a9501bfcc46
9197a9c72d01491330f925502458b298ad87b3ae84f0d6d1ebd4572b44869bb5a1bc0749
be20055ace0a22976dc9d6d7788b5e300a397be242616da8577cef64f10339b4e4a47268
41c6d6663da64df8574bf297b9fdaa8ccbed68f8fd6a8ece5b2e55b16b97d5f09696fd40
09d425794396f8664cc7c13d6475ca01059007ff3ef22791f7d14d86314e2f989ef8d079
4fa7611d356b8f8c9848c6fad1e57c8f54979dbd5c49244f8002b21684dffb23d1392783
eb6cc705993123ac55f6f521f0a2946723043c9538d19099b46f7bf4e1e34a0c04d5b4fb
8f851a85669dbb7f2026a0d94c7d6de9dde713770f7ff06c4a5026d3686b3d25d7c5eb1d
9834ce655b71c04c2d8cada2ebdc449f75de64c5d8bfd350a0744036be9fe67e5dcea6a4
6c3597e9a0ddb592f3b9300e82b0c19a26cf3c94194f565ceb15ec56a5e7edebd79a53e9
b410d6ee1db326b4b2765889071c26d0f9c7eb1e94ba6568ca72a802221b86b52275343b
82b03570c95125054778c6beadff97a7163e07a28818593c823ce8dacaec7b53ef11742c
9a4529b9e8e2948e5b42eb5e0885f395b8814d677f5bcaf6c8de4d7c7dd803ef0c72c93e
ebb7d2712dc0001cb27e44570b011755f1d74b1d5952df670f5f5d3d0b4b1bcfea368f52
264c689a8275707bcf24a7180608eb51b990c51d62b6d03d41110fdfa8f85a47415379c5
94cb22ebcbb09b1cac318f9d6b555fc36667064ec8a1ade6bf80f385ed175678d1733fa4
f19bed34181e9c02429054b153d09ac44fca2d9a7ee8855616f5c7b6d3a08d207508db9e
53151f2799dc78960a5355381bc629ac6cbf623d61a036099237dafd69ff3c2116fbf404
df4737edca1abf71731a4afecc63d81785260e797366ddd5a44387b9d6943eb6eee28338
90569c4941d6e49562ea637f7d82bec38977631e40bbe3692c2ff18be3e4458b3a9585f7
d0f7852feb909b580738cd6beea2eea2a71d6d82fb3ca0787643c34ce88e18e2086ffd0b
456dae57c9cbebac167554e4fbc524fa7fd350c037cc6d5a669e7f9027f7478ffd0cac69
f4a30aff8d44dd71b01fef268f4acb1cc0c4e0590d34f369ac84fdb7d923e13e70bfe2f9
47709376703f17d4873444874e10be61797ae1460064effb57a88c99c4d0b6eb997f473d
6179e929e96796dc7a13bc999cd7928197d81ddfe96833b34713907ff0493f34016d2587
6e7227478bbe9dd81a20ad091131889c017a300478942371a9f463bc9aecaa4de6378f8d
916d3e83d41baca7bf037a0c086f363333e25aef3473c5e8c4cc37bc055a26db567ad34e
0b5eb94a95ab57febb5162f32b6ab653a5b1ba8ada00dd2ccafd8463e60dfb4c2e506e72
ae95919c0dec872bfefe47f63b6ea5359d4a0d0b27eb6681fdf15befe7af20a2fe54e6d1
46dfb8a454693106faee0e3751314ba875a801afdc92fd47818cb6e620f043a4f175ca21
c564f8f05663f8a7c9a20f94df200b89399fc3c0c57461011f3f41276f01cfe6fbd3486a
759d0bf740ddc19bd495b85f3b1761f0338e2cc74ef148c0bf2b8464a860b9729ae29e30
a5de6f32709847ace5f181851d5dba421e8cf60e54f9d7463fc780dcdaf137faa20b19b4
2df9ad3c78b98c73a8faab7c5e65022de810b67e572f5f68b8e9288099f85cf247c31fc9
8211d213cd8eea38cee657212afaa2c6112d5f292bf5f3651e60029b4340cded1ade3a88
df90609a67f38993a0da1f0f69cbcdab962fe0d01b972d9f72fd3882ad138f6df4b133c1
6a1127a21e8abb87677571b1a7dd167226359186e8af016187168a1783eb75d0b69f7d52
2816b332558d6754079ee90acc64c34a4905cd25093f8cb1d22d3957da65160adb3f125b
786d042d9fe3fc1c55192615d8e314f623f67ef1a9c3ff37502378425c48cd4f743ed1b2
54b7b5a6e100bda14937e999ddf5ded0c7bdced30263f10984dd78150819a7df8e064218
91c49d3fe430711d75e312bbe87f5c1e0458ed6c7e97b9c24ceb7c3c01a994ebe27431a1
a3af192d5c828c1ef57de77eee76d77c3645652b7ee64fe87c98ce064ac73c12d6c30a8f
b0d4fec4ca7c0bdc9da1b27ba5201f551c299dd03788049bc434c8109d848dd4f2448f08
90eebed6386d7ef0069f6a253bd5dd65fbf29f5917d9c111ef7a47f9b5340ee98e8dbc69
05a31a2ac56fdb1b27485b18fd7ba8519ea833c812aee7606f592bb5e4111748cf2f1c8a
94aba2b4d3fe34191ade519d306554365d0274111a536501a1fbc8c49084a9c72484fa98
b3ccec09e7d9f15db8bbc08b22088dd6a99ae5482fac37e6c215951f67afb8571e95c6c1
9af3e138a79c5e2d09ee33d50b91c9269a101d4a92643cdd142a45f9855f3d0d78843991
200db8ed33d9ae47c151d16ed2288e2846d63f36ee7638a6d1cd7f704c4428f47ac114a9
27858eb0d99d32bc08d2c641295629876b32ae949f38b9fb418f246e201bb50e4368dca3
f058e4424f04c4996cf50df6bfef9e2ac414b1fd78d4a976bdff87f0305c95a4e973802d
baf4a16f80b88d1ebae27c64d53d8f4911dae2aa653c46a1fef342ff323d6622818a3371
6254747e2dc39c861b88f8a19833d2245c2ec0eee107696b704edf46e2d468cab008bfd8
c07839bcb4826950552f588579ea626742f4bc19f307384c11742585fc8c3ae5e3cfd378
b99c44ce618b126b7c30a2f4d2335c501e9c1815397fce9732922cdba628501aff6707ab
1017d92d7013485b0245917ef55629adc47208f1e538284c7397904b5e5436420b1f1760
52b0a98cfa3f91de02e94014231095dab65708faa8b019c29104626589da413d736d5c2e
db54a0cd4ec9b1289fed0bda401fe9a8145a0f447dfd9f889357b298d24b218407969d3a
85762f8bbac733527826b0ef159ffd55478d2bc71de5ca067954bf86e82a62ab28d25922
c5752882d47cd785606157a5baed740573aba16848f7c459028e97cad5d8093fc81f98a3
48af859c3ff9ca10bd148b6ab04c980ad3e269588eeed2c18f28797b3c25f3dd01263d3a
6b87df07a039c904015e3e6848ce8d80aa21932466f737f853672cc7055526346a34140f
da41dfcf0845435553bb46537d67c6c0eb2cae51429d26b9837bb428e608d4f4b746e665
27ac3650ecbe23fab6a0d828a6800f4d18ab7df18bbc60b5ea7c4ba5e337beeb62bb0ff4
92a902d38b0d082d9117308f4764da5fa475348ebcb1d3091ee620fa7da026b5f0644e7e
33ca6a7c4ddce435035d642f75500afd66f0653c7593dcb644df07e3fcd2ab6f8f697ed4
5ed0694d6ee0a7063769d128c9bbe73511bcc9f35dfdc77522cf8d8d1c54042c8f4f42bd
67cfa277a7c42c994623b3e05b483f5c642df5831ba8024e51c6c6fc11f3237b3048d98d
538a79f89ab8d717185982d483818c9f1ddf0735c91e8dd3a3c7192513070f8a31c14a49
f10506928a29f21a0b5e02cb913edf43f55562dcd6955e2a9ac9c7242b70c6b4b7524528
c7655685bc49eeec7ec16b68a138c36d94a05b9ddd315c7047ad789ab0ed11122ee22293
9d9837d3483b2f7eaac0c62e5a116cac238d0dc563cf0ad23cceeb75c10b98b95dbed076
fb3b7948a78c311933f96cd9ebf7228b9ffc243609b707292d567a2c256e4f1e4b2454c4
a3f627dda0e4bd4b626b2680d774cb38429b5a6190d73f02d11e0973f322fff96afce339
84abbd629972c1e99e91e80d7f9aadb810164399a7ba2576f4f480871eb3d66e2b0095dc
be36e43ee6aec3b7de194e17dd7c44ce892ded9b9e60fd8756711ac6db026cb931dc7bf7
a9f91d040e4a96a1e71c80711ee55e1c27222f96ce8866e2a186729b76967900168be6e3
9e89e0267efc78df965481ede11815df6c2037876b30e2017fa4646d585db5ba15aecf57
67927ff17e67bc4c622fc19b08f3994043d6287c3df1785aeb3eda50118d3c9d06e5acee
73239adaf18501908f5779cb5b6f07aed63504fc7ca1f0ba99d472ad772ff3eab885cf83
61263046a930263997d8e4155962214ad28322b8f1a79af35a1ce80adcf09131bdce893a
32aaa1f03b21d43b17becc14b49a12831a549f39fc4666724a485820f51590e863343dc1
9be7e2cd2a8cace0ce9686d99c417536788d44514584e3c4c9f8508336e5310cb49738e6
10c6e61ec0b06583ebb140d2dd885a87b8e3c54dc8fb31181a9e1fdc7ae57ae52b01ed39
6274fcfd2b534fbe83bd73498cf8b172eed3c61f12c18fb4af9d5f4667fa38d73e776530
517a4f5303ead869d7cda48de85b4c90218c638a75e84ebb352eda499e56bb05182fdcd1
66508dca5d13b3b5bb1e5d2a19dd9af0fbc31ad578c3e1824d30a29c48bbb5e9a9ae4e56
dc1405a2ff2be41453bb8df6d8c13efbef07571a58b25460c477331963f095b8e392f916
9e79c9ad15489f0458f4e6b831f5bdbb7fb74a7a9555043353fbd514489460b69fd42186
5ca1a76e778a293978f15b591df12bcbbb970af67c3ba6066b7642a16d3fcfd8e25ec3f7
1107434b29186842af2236895b4b1eda8d706281ac0b22522ae74dc5a1268eed7b004633
24c332a92b3e2d9b9bb921980d2a20a3fe29449687a774597b7d689206eb62b5ac7d3792
838fc655e0305af1b8751e710751fbb3aeb22fbadb0aa53b94f636259385fd8c4d49f387
4cdd36348540f2a851334f74728e1843954aadf97bad85fe0a91c0f8336cc974e3f811d6
d77598c230d707bc21014350aba79ef855d249e04da1c7eef604d50444ac6c7bbac432ad
ea7ba38c329f04981fcf1418d2c6ab9bd65fdf4baaffccd63f322bc3f398902fbbda3aa5
b4343a6583057a29f30af81f67cb73592c7e954b79851b7eb42b17b7bc042c3ec4f5c746
4ce813200a04755b302cbdcfe3a95b41d3951b80a3de4bf28dfc13313aa07be889ab28fd
6609ec04e313a0011f0b61c7c7bf8ecb3ce90fd0cce80a605a67b5c80b641ab6fbed99ca
4041f7c1525a070613dc17ea1dc44918f2c25b0e483b822dc608c0241d5ba9e0c5376d1d
415b0b6d8e8ec2164de42ccf7e1c4bf5d11750ac046f8d7d8922d4c8466b6f81211cd245
c71e53fcb0a5232fb9b302f650384518b934b06ce9b09a8ae4961752ea4df2cf4c8971d9
db4028f8daec7b125add19eac37ea52177615390cc63fe2a2ce29dbb6fe2c7ba1b63498b
907a84e1eba8d9a63318bb2805c4faf99d921ef8fee8b5d3d03b8a96d3263046a530cd12
fa9734b47bfe7fc094c8e545dbecd42b625dc600f0cb16ab01b775f3e578e98fdac2ca46
eab28440c6a3cca5ac356d6e1040c4e2fdb4ded8ec35334331db8006768f491b08fd5dba
b670a8ec92ba4196d21bc1230bfa6e88ff93d8c6ad8c16695f74c44dc950285aeb6c535b
edeac524dfaa0fc0d9052526571833bde1bc4323d16c708c34a863c150d5a2ace597bde5
910d4173874d166ad9cb0fa23bf95c4a0b163d9872b046d9a1cfea9fb7112d3986ca1c0f
af45e033383defc00ce942ead1afa8f4f01b9224a01122ab4c63ac622a9c1261f1d362da
116a9fce4bae7348fb767b681d2d9693da312527dbfcf67b09bfd2b1f555f6ffdb2df74d
bf3e0ec652300e43e4516b19fe5c9df12cf52facb8772514f6d25437556b6ba81c55f7bc
7dfd8667c0ac0c5bd94439dd43c3c0aaab70a38274a39080d7e71108eb2b3ea417722405
f1c76ce9f593cc0038b73bdc195bfcfb0e7b3391e7500c73028692002221082ccf55b881
1eae0be9871fb49d10c01305b904352502dd4d914d8ea0d35147f7ff8db269a8a7e7ce7c
bff39930b1289c3bc97b22263f59ca2bf685e9764ea4e85f29d795a09aba790d2047fb49
fe10960eac24b7891e15b4343bb7b50efb2b1cbd2f70bbe3f543629bdfb5844392baadd5
beb0fc4c3718b06a8a887225ab887da559e8d321555283da78bad2b211ca8fce3272d0ba
6b254919de42c38db578d0d53f0d3907064f5b3178be26c8cb4a768358ec0cde2f14dc5a
f9bf686389a16a5968d870def050317918bcbab74b7cfeb93934296c60a7e7db35c1f40c
507d0a4761f3852fa0de965a1189e6b005147bd839b1b554780830af27e2dc6c449c67d7
bbe35f04aa4a17a495e15ff2f8a473c30b436191e9766deeb09ce159f959090d7f62d386
8442fa9fd97e008a8a7bb7cf6033730db7b5062710ac210fab770210c0634edd1b211f1d
003031c1268a873044d6b8563bfbc39acda512a04e6cc65f71ef9f55f8bbc226631fdf2d
b1c4b02389a9029160d4edcff8faa923cf8bf3fe8ef9caafa7ba227f80c647b38b8dad4a
3a33629d16da5d0a3c8b757600694f9b29595d265bcb40ae3598df927024015f0a6f5b23
8e14e04bd446f54b7bf2fadbe716660a52e5bd6f1fa89623bb73dfc452d2380320327a79
015954004092a61ca434e146518c024cf63a30d58cf985b4c3c116f84b415d324613ef0a
0c68df13350b0672f9c84de6b567fe092acb79eb81d614aab2b612ce0eaf0d11e13d2b4c
22b146720b6298473ee58a04b29e047e1fa334db3b0e0ba523e2f488a6cc47c9b732c6f2
dda5ceb78c3d513541a9fa7a5400823b7d9d933858da470a118332cded2e45fb48e30153
fe8160012489c7c89470f630c19f7de5685ed9288f39349126961ddd7bcf088c4ad591b8
b793ec51283035784f7e5ba4b249ac21e21e12b4a5687edcf61a818a0b5174fe70d0d066
4da047966b18e786e96972128040aa2b2ab8489142b2e36a94e136e857e5d1b3da2006db
a31b1bed9670de2b1699c5a91d192f25517f520f61ad5d7b0ea75ba016c2fd8435e60799
e4af15107aeccf9d25710d111a0c87d1706751ca813dd5e298b76566e653ed501a4e272a
a3e96006180dd858e1a254c550a7721b6bd24067ea87b0f59a99146541b162f1f7f2ba0a
a3af063b21092df577ebdccb71d7440de809cd72915ad77b8a43a111ede9d2449cba0e31
7a720c3fe4bf4eb2ddb85a527f395c29924c0844df8aae738eb959ef6c1c35e3a91dbf89
816b4b976a0d806d879f8b17b0acba4294df8bc4598a763247c370f18b1ff0426619cfbc
c7e84e5e01ca064921a16f06c13b0367bc477b640d3942e09a2022122a7d00c130520552
f709072671d2193db17e72bc036aa84cf699317f253ced8478699fb27387787bc06a5514
3c9be711ae58021639b81d3cf60515ae507683b4001d3339e81c6898acb37ef3b0c1de98
df32a0899259804996850ad8f979fb2662dedce5c20007622d9282f879a11f6797df5092
6b44768a658a60c4c6fbbf1836a97016396869d5bd3df33b49b0609a175e3fb7758733c1
301a3284a5ab17eba31978aebc307e60ddeed20278331ec4b805532c135cc9a88e12df17
d6a8ead4b5953a31410d3d83702abb7ebaa0a799e518aac3b3edc4706eafb95497424099
4734b518c4144be62b95342d5aa04cd27f7968447c7f441ff5334f0638b9a10b057a2a71
fb46f1e10c5a3594765ad7d14f948b013fe7e67d1159991c20d58f2fecfce1ddf45003f5
345d0153fa9510743d8c87d585cb8971e4e7290d34c23f93ade496b9cc9e5d76087ee131
996cd1fda1fc2befe7ccce93691abbb22abe97a1d23a4f50852c2eb6609fe9220955f9e4
0a512d0fce64ea765a993f658c9701770d21d1cc8f5885419ab5ab4652ad32d85f983176
39919d0a1f99631dd9c238572ec1d76b64a04d736f0618ec7b2d64e030ad4af2a88fbe83
c3678ce1d4ee6067e28771e12e2c7343d560feca3fa623faa897b89da377835674116622
711e0398ceffd813b7b92a4fab01ba9967fb0a48c2302ad7ecd5e970d00367147c914e3b
a99a0ab5f9199cfc4f5a49abb450636709ed6aac1fe9a2d82ff13fe432caf91fc28392ee
b785728f12e870efb70dc9a991b7cb69466b5cc6d217abf17bb79cb1429175bc8c41c922
fd1ff1eda384877ca555f5d56b3180c0ca681bb569c136988e6c0702932503b34d42a3cc
0984b303431418d0e8fe923b9b25517420def410f1cd9677b714ec64a0d568b7153462e3
230d282a7c8de4205b49e03a06cd21181fab910c117632453114dd09c3cefb6e3f39f513
aca8a3eb951a6e51cb94bd38265a51672f4b6ac923f1927a9c16003e71e54e0824707514
0be64cd340c1a9e7f55602dcdc2a34e6d115795134431742c2d423549f30bbe8b0c498cc
7992d727e0f15465273e26f95cfd9f9ae8edb5a129aec28899d03865c7c1091aa5cc6a23
196edfc6cd5c5360a91d24e239b75ec82c3eaf295410f97dc0164ae0bfd9024f4e14504d
70fc82115da9023d263896766af290223da44e35b01bc8f2fa4062f39756df006e7a461d
140eb541459a115fe82d400cbd297f3e5351ecd3940481b1972654f1e82aca21bacf640a
59bc4655de1f6afa26eb817ef21dde1b99d5ceeda463bebcea1bde40e4d88da724ae458c
93bb64ee03ee88935cdc9744f17fbe0e2463669c20fbdb80767e763cd4f129644a0e35db
475655a1f2b207327e74cd9501fb9557a53e63eae195d39cede55cbf35e00b18c242fd54
a34b37d933a45059a98cc9ff5f72140a45a944cd945a465a55e90656b503eaf8c265b3fa
6effc5907b0160081ef40c72140576c7f8b0b8c7a3dae315078523246605e0ca268657e8
f4f0c8413e4962d74eab4758e2fe081dd098b5d575d4157ec1a03ea74b4288e7cd7b83ef
ef4cc638e5aa97b0a3b037fd87cfd26f2baa9f47240ce33e9d3abdba01b0727860d4663d
832946262d6e48979f253e3ed2e089ebcc64f12bf725bbd302fc3f93cdcf8bd97f72f3a9
513dac6564132d5b87dce1a2f63fb641de60516b9dff93de4733cf104148a663ca95d7b6
8b37c6c44f58137afb188c558a9f338b6b9a05d498fa03f5664446656e79381e3a25f3d8
4135ac584c0aa2cb0c474908f814e0b5e213d5ddcc0fb4d53bfd27b023d396d82ddc6eda
228e272e106a81bdd2a5ee115a69983ccbf2fcebfacf811d78900b4c4e78c1097dfeecb2
9422c693018dee4182429f06cee65d56b5d007a20e41831b74e54e0a1c6af0b24efd3f18
790dbc53d81acb0af768513c387448cb63b4a6708e9ab8a7b0a9c530d43428152291acf7
fb7e576ba2c0818414a883d48a05ac01975cd7129924705ab22b660fd823ac339131fba9
24f3b756c0fb68f96636d57ff7490d294c3c85ea6c1d4d452b799ebda04d45a4eaa95196
21db8504f6f8e78e305cdd159c0a330db75cc5c2bde79fffb2387b6db10499acac024e7a
0fe74c16eef0d11161010866806dfad21f17967654cf65fda3b113dd89c39e025db70a2e
013726569787580fdaeb6c490c2a0fb13fe5090e99df188c4cbc68f87b74643b1a6f389d
07a203e713433064ac7a98f53c7588956a27b0044185c52543626e2a728b4750705e095b
47305863ade4e37238b723dd2411ceb4258b9662dd3728f67b73818c6ce86538130e7d9d
d8e792e93e5282f167df58a07a87c9e653390db589ff1b25ce31f6c0110afe54ec15fc24
0c87ffda0b3274f557f52b00d3041e3c57bee79e920d14df087810f1600afc6119193427
0a1d88ba41fbe090c32e5d1d2c85c6a3deeeba6079187ea101be87735da1949d1b1bec6f
0dd8c74b6c17caac67bb8861c8ffe9041928fc55670f6f59b6ad3b97418381e3b9a11a53
162cc297e9e0543da7be4ab39f5f93485900cedd91fccb359c32bba8d5a6dad07f908793
170383f9dec07d857c93c265ae608459dc96e051e205db1c973059d460c850a1c1f0f5dd
f92da8df7e34d4b2f35571fa43eded7387215ee835d3030290b00d7c697cd4f76aee49e9
b28ea6d1e4fd5ef661e7651af8b64fd875d03ddc03f7d4541c2c5a528a73d52231d5aa63
594904085090e7861013bed6973fdd01dc4007079c406d23b7bcc3c959b20ba78f675321
10287ab60724e209986157dd7d595d3712dad6cefdeaa916b7dae84b4f6ab4b4e79e4383
b627450752006baf417ccb4293c9e5775b603428363cef84f1a3b5fe30d7b0130cdae535
2fd63fdf28c162fd04abd8fd6027ae0512f3f1351ba4e6b79e9878f81c5d820116e5a31c
e95f69156c06353fb213c92c0592c457fc1b27979c0720b31f4d5d07a8d313d184978ff8
790109ba2058d76ad2d476e23f18aa01263865dba36bdcfe6fe18efa474b785288e59ede
76de7649534e9892e2a72610265dd2bf69d561dbd79d54c67dc54c74bfefa623a5d28216
094c5e30d09669cf82ad8b47933bbe50c7171239ff943dbc2def5f24803275a2c35e2e9b
abad5d644b308b05a76e9c9da10000a45369957a65f9b4c00c27f530dd8d5a12f4d7aad7
870c418bcfa6e70e26d0c7598236995525ae8d58861ba076487fcdc6094722ae5fe6bc93
1f4e7d96939f8499f331105712137d4d3742cd4298194648229163a09ed0324bdd6a9ef9
a98c0f94825e9a68076c2a50595f6a16faa891cc88b09e5dd066d6a0566f0f332899a26f
f1aecd95414c4ec102877f0ae3b667c16904a27cc7aef4241cf97b4793b4c0a2cf635c03
89f074c3d9bd8decd7aae7030824a57ff478f2ea1bedb517614b84aba6d52546d00d1d65
a2d1472aaf1a31b03e45e39469521d6a015d760b1af8b3eb870cdd9e30fc06569fce9ea4
9145c1abe5af90368b319a9f41f413dc148802c884fa04af26b7ac3df1ce647e561d5514
ccb73eb40482bc4c97da75bc7f5c5769f5a4ceda898953a9a396a1413ec4b535e33439a4
18694aa98cea1243f9fd7782c6b05a8d9a6307b909440e71dd9e41d8fd1d4a0c7e00dd84
129f008c9eb934bf1dd31d84092e6d10bad70c72e956271313a7dff1aa7a6b2ea6a02a8d
9bdbc71e2c5596f5dadfae90351e1bd04d171b77205997b9c1822fd6c1b1622c483470b7
dce4657ed1b77fdddb17b715cef68bb2627bf0cf06995a7a4026f92056780ec021fe9fe3
c90dc6cb1946cc5abb9e074cdf27fbbff388e011ff8bbbe51f3556d63a1e10eb81cdd8e4
4578c23c3df3303751733524e25a26bfc2ba344542a8de30ae570169c64361d8212e44d3
29461018cd66407975e5bab4dc9e7f04c343d3aa5c5c20d33a53aff294e85cf88675e9cb
eb02c96d35a9eb5ef52c569c2db6a4249b9ed28fe167a852ccb1737ad46a4f312266f623
c5c22d3273ead381ef0865e01cc175928c16ec871f4242af8381645af90a90b922522f24
9018cbb094a61ee2758af80fe2b09d349423d688267cf2583aac029d05cca0d27e987903
aebe1ed94f6372cf7dd95e5033e294fa0c433135ddaa6e4dc57097eca3761ad24df13d1b
973515e3b7dcb15c20314d211a2e441a0b819c015c00b16268f97933239a3c7d027c76fe
c2226b292188b87bf194ceaceafe2a67c258f29932f2da79854be0ab5f51ad4e49b158cb
cf5b6780166b7c52371b25a124926d08f30998e576facb04d897d8d6cd7039faf5c7bdf4
b62363392fd241484bf652e4f9e229150f46f90147dd4d18d34cf03a41cdd7e618b51249
a98419cba063120a42e3aaaa695b9e2fb106c9c84a6c7f2e26d4052059ae607f509adc09
1dac460aa3330d5a5c3a596a9963014d5332fc0241ecab81ba6517b95b09ba07297f6646
f05ccaf1b9a33a2ca7f7b0510c640941286fafc92b5c206b8526710b57e0f7da9ad9075c
3d4e8cddac9d7b39da1704351b598b342a7a46687e40b1dd974d07f0cd8b35b8bfb08a73
9e114ff5a06aec0816d6c03843c1aadd4e1ff3126b9f922bae716275aac786b0d665bd77
e841effa6f65d2681f858dd6456640899bc9640577795420d926eea017d502449336de95
336cc1502923016cb526a76cae7a3ed115673df7f0d13cb98c908c999262c91bc84ebc46
b388064367a1f7e462856ec70b71430a10526871dc66dd35cf01b930822e917190ebb234
d8c8054337fdc22f12d8b363dbd65fd330172caf1a985b77de8de719739ccf31ea8af7be
e2d533f530ac6108c646b36955f952afa92f69f8e648b2a2496901aa53b2f6724720bd32
83c81f3e403fa84c32a40521484484faa586d993756a1d512b02433eeb8ef40acfde46b0
7ee73697c9db236c7c1a60bc488fea8f33fee1e103802f08abad64259597bb1b8453ccf9
97c1f494bb42d2dde78d9d7429aab8416c63995d5b8d4b4f8c2503c644ec16e178a1699d
0d3a1b66b130e9e1fa3f783d1d0065359540c3275e145914fd2013996d0a13c48b63c3d8
1a7b321d17478f2021d636c436f6b039c38c2972a3d4d139f1ab7f2b3b6a8dd92b34af84
a6fb3825f2c4dfc0d8bd21daec5b3e58b8a26b426de6921e6f096a46a7616976c3a1f1a2
c45d5a11f6028517c61a4d474ee25d8b0c0a26bef5dd21670e721cffc7b2e08c93965bc1
abe262069f931fc8a10c21dfd45e16a4ebb826f702b134b75a035bf6719b4ca0a367f2d6
43297d0ed8e949671348c278c8d223911b2902e19e4d9fcd41f0b095388b2e3d1fc257cc
2b4ba41aaf76652a90f9272d0b6248e43ef26004bf2cdb61b167763fe0dcf9e8437da860
a679886cd2090ed8f5ee76afcc95c98d06801308c727aa599ebe29ff0a53ef6637250f27
528dc998fd6995be9d9530baed2abfd6f7dff026a561bf9976d94d8a253382e78cf19c07
8f34519695db10f17fef290d1a038adc879bd6a3e0e653a28c8f5891b1882385c038dc0e
4ba1522218f8176bb33f4cfea6db8b6ca1e9b5badb91690eb255db147ee1cac564464409
3851d7ecb9e6083c56cd576b0ebfc99bbfcc20705e2aff41eb724b4cdedc2e2aadae2be7
123b81cce9457f43ea40b3b02931e36d02349eba76063e8d20ffbb85656c48b0cf0bb734
51f95929a92e376a19a00159be3d238d498abf6fde64746b5bf375f2865e5046c0ec668e
0362f5e16a2888cd41ecaad377f375606646a96f850a02d02b8f261220e1cfe9454c6480
c59110d1fb9b753bbb23de0dc08362f14410e97621bea7ba7e36232e0ed97354e1deae85
dc4bb4151207b19f4e6d343f3b705056897d586723453e88bbfbedd059cd9de360d34ad0
e8286fc63b8f344834574817a3de0d493e5c4578c2268d5f2b6efe94e284629499b74acb
7245835cbf4b6747b845e5883452a6a496ac09407fba1e4f2bd40d6ed812de27204a68bb
bba9adabe17215d9e8f6be2d60c9aba98b752a166d536bad50560ba491dc3fa12465b96c
fc8d5ddae0693795884ab21c17a4cdae885a653d57dddd5e587014002b6fb2f815a175c7
083b6faee53ee38d26793acdcf7ad7e5d4c2e440b834b26d0b5af35ecbdb6da21938185f
2c2fbe6ea5104d07871f322ed37a3fcd8e636bb7ce31f69eb5c8310ce4d153e60d91bed1
e1f033175cb37e66f5dd1b384c7a422e8094b909a97088f85e7cc675c936d546f75d97ad
087980f8232c2aaa4344518453f34e33e89bfb8dae30a2721fcde71d1e095efa66f62e76
339881dd2371e9964c70907f658f2b7532129175798cf68fa9f1e71258c4c4661b4a7a72
37d4de72c910381d42296d51e2c46bc2da400e5de96293d639d6480a9ea70d73438b4f20
44afad213742571d12be131ce236e6e94f4ea2a793b3dbf44c03a88517fd6ca3765f771c
8844c021108be735f3050e5c29dbc180ca531c653af9f53895b860d1af4a29c5b9f1f67b
8e5d4805770a2b0cae80dc62336946bb7f7d4fbfb886def482ad67b47c56e71c571e1957
15c413a394509cdb8f89cda380fc149ab4c4f68df902a9139bfc9456650bd29f4cfd72c4
8feeb46919475d4526a490dc9864eddd7a8c49cbf0f0d4ea43b67fd7940065174fa9a995
9d83914cbcc3baa1a4b856d74bf0154695fb68f439339468debe812220365e01559292a9
ef9f99ce7800a6d6bf5d6b3ae2cb4102396b31979b08e788f63e1477f2dd74922d7aa0df
97da61ad2b8c573172bbf1b9914dafb2fe9b0c25eae4bba1f5200a57a2e4be59fc1a1efd
50895872fa6a8864665103694737fa96d94eee0ab0049df8ea031b7c28ccb5d0e5670dfe
1b65cd84b1c94d57cee68bed4733c2480e837ad86cb77dcd6b673ebeb8875f7895d5d283
a486384689dca43278a60de88502466dfc54f03db6b6b308abf9c1989478bca54235678d
044063b22958c87e5cad8b1d53ad790296cb7a78bed41efca65ca19d2c9791d215bcae32
4fbb00bddff90705d206d218e614d4e83f50246561796cc6185dc46116551145cad0fa43
2b3ff19e464135fef64e2a2a914ca8bb8b3b189959b4c855a11661ccc0db5c31c432f8b8
0c8a612672a426f2e0b4643f54c3dc8cf0ad1cd9983acbe8f7649338eeedb64c2a23f54c
a998c6f19a731c32580e4aa6076e80e81668586eec34ad94bc79729104715d0480e52665
12ed12b2f71bb233f38ade4091b6c4add9bbbda9a4c56fc71ebc3e6f24970225169c453f
16fb193d32e32155db1ac5ff3fac7291bb71781e5c8f737cd9d050a3ce6188fb99b7560a
df3459c02a5c313029b5b66a21b0e01ac01945bc5d94d7214eb9feaf50d46799d26bb760
be6a395a7dfc74d1543c76db84cc73199a64a908682552e4c294d12e18a8f34988f58c8c
4b562f814a4539c51c37b5e49ac3adcd71856f77bbbec8855912c10c80dc858eea473681
89e99c701e2f5b06bb91e4c5bb385707a94221a9089464c219333cb2552b36a9294da234
da26b1af9029867acdc293c2a6011f5868c094e99fca6b94ddd9433c8dc49978bebec612
4584fdd38cef82cd6118f09ff15353ca278a2c611a697ffc5585bab8cc9c56743f40baf7
e8899683ee147292a475b191bc198e438189638f95b88eeb205a520320690f288b868f8f
a1d87dbc627bcc7ccf2e285fd9aaadbc4c94be43e8d28cb83fcfefc6410bd1944111bdaa
afb6d41f177af34898c26ce2c52dd52c3c09ad99b9ca979e81784739bb85c9143d4a0436
8f026201a92f7fed8982a79354218bf8c9a6a0ef273e66fb6d54ee5dedbb42c9308ef67d
c5119bde2b4375787d6d2ce5084b6d4285d1910c9637a459037dc69ccdf2397b09fe878d
170cffc5a8df29ab8b3e2368bec167406e47e20df0661506b2e70feaa4b900ec278033be
526fef169d572665a3184b71c0da1fa3444fb8f633c379332f598a0983ba64934d0d3e5f
51264887f94a2aeee950e0f139bf76b4945b566eeeb065da2a43d156327a18651fb88f1f
9f76935b342e192546d8421c92413c30aeecb5669d99780d1eb6a2e966cccb1c7f0286a3
47c4213e57a007c3ecaa72c1b8d72136ae538203dec3ceb4776fc2bd51d504a0eb411e11
ec3d45582765f51f3dab45b710de1517197fda53a1a565608c08d3f80a12c0011b481835
8685e5770cb2f64dc723f8c75c92845d9b6feea3eda4cb8367ea61a4b9bd42f3b914c342
ad9dd2e7e87cbdd08131dfa126b8fe3acc2fd0f6181003c2876318447ddd5271cea53ad9
c1b1726586842ec3265b62e0a752d5247ad72a50d9e60a6c9767f8d25ef29108c470b379
354b54941bf8dc219313a93417992ccfd923313f1e00d0827aeb44e4fa476643a0ca36d0
3bacd14e871b5a488a55a763561053da40810a79c74d962678f01dff1829f8a8fab309b6
fbd05dc4252e0eb2ace48f7f45200a9ba35658a1307dcc75be1ad050d59598228d5b90f6
6595efc61a04cb8861d053164d8eae93cff129c4e4185bf629aa010332bea0443465e371
0c8876ff3d1c8b27cf4666a92c5c0bdd164592285108a9917ebca07c9de606ba52a0fcf9
224f19b4dd96c836d09b64bd669693d4bac5ff083e2b865ff63a58fecd2085d83d8699ee
f378c65fd394e1f1db0f45dc25ebeac494996c677c89549d7f3d8e02f7e7e040c33202a2
02d4c7b370a831c62326d14eca416997ebb784ae6a16e33bb032e1e109894faba8e58925
b18de5da8152dd3b8b823d91b6982b5be7a94993910ba481b44ce82ef62e4fd68bc1a0e1
31f2d44def14a65f3c75135051ad0bfc57b194f902231269d6927575a71772cdd1e1ddd8
f477e88fdedb3c42fdfefa8d7d4ad114d229a6852eb6c90fc78ab74758ee6b00b0bf57c4
2e7b001c6e6e3a8d6fe1fa2aa79d4180be8ea2f350991ff0c853554684d58d132363b79d
3f2ac2e299b65c08dbf471e869500dba6a71f15a0e751c839ef4d167e1649d19892cbddb
cde5ed3d32746bcda4f911dc7d3ddc9fd9a1564b22ef9edee8c2a020c4cbec651b0341b3
d30b1dff7c8b5300797b2f875a026cbf5b694072feb8052db303d896b1e1e25fc999555a
16ea2278a66f786b1799e9a116aba6aacbb8ce961eb2811b2fd7417b04e0999ee832017e
c5f6c6e7b19231ad7be05e3790c074b46fd071e6fbb4c630ff5392c5045bd178e9b9bcda
06f3785249c738c233c94ffe733aae01b18eac05b061b19073fbfc9e4a8b74d629f53b6e
7719cf21978601248a35f21b42a53a187d908ab5937865690fe5faff685e0d6213305056
03d086d559334884e27e4535af5b5a625a4ecc34629a4fb45cd896fed192dc0a1c82415b
12a7281b65d70e8cacb3fdcaa31ce13751f6086872bcc933df0a1fa16f81d1b642cfb0e7
4fd33b42f10ef45d969753d4a7c3d39eda27a164dcf1cfc240298fdc5607f4d207c978c4
03a36f8fb01d97346c92820cfe21c0ca888b505b0eb80c0ac8081b572876ec0769992b7e
4eae907db3057c008c4b67e1981177bf2a71fef1a686c9001b61b1a6ef0faf179b9b6b86
ddca91addfd696f94bbecbfbea999aac249f721c6e8c849071c15b7bf2caf1a26d20ae36
36cca577c107079dddf23d3d65dd9e14b0936948f794ad1d2b506e8a2b73076b0e00c6b1
52068bb150226694b8c1a7459ef0f89b708fa78ce6f8a8d9b3998f3bffbd7248fc3d2840
91f2fb43d8ad69f41c6be3f0e43969115d2c4b2a3a9cbdedc5ca39c5088e2f4e2a44f55a
ae50a0e5623ad44e9f2e506fc746cff0e2bf59ab204be87e17fc8efaa9b1f743f7b1d679
626f371d3f3d905fa06e70968389b70b7efcd8b75bb042f5860ad29dadb3af7d886834f3
79ba8be3bff172d9784ee645471ce5a74c108620d69f9f4f9a62d9df3d3b58555e48c9f7
a09873de7ea699864c64bdff4df0c037bd2433901fd0e875e21613ed77ff20feaeb030ed
6de937ee7a131c6ee2e38bb7506b28548a48b46e8b8783258128f8cf8dc81c0918d32f6c
928aad833479dfb3a6221c2905d847aa1579f2cb4d4f46919d34af7d053d2d997f25009e
d93896ebe5f7667c4bc523354da18049a1284c204fef136d911c0bd2e477c356a1bad5a3
3262af80bd0977af6e1dec475b5b709ea2212d433c7940b0971eb5354af7331cdf38decf
b43ad7d92ac54192603b98868f89ca680d926aac978284cca807d4b8e79c70001145d841
674fce39da7f03d2b28958812fc50fc58f7b0510bdcd91033ff9ef5c1e1d7a5486f138e8
5c381934717380b3ab53e476631af0a594ef7b497dff07527eb9fd55b7c173508cf33bf9
49e06e4aa53c6b8dbd5462b266c1318c0dca01d8dece002925f96916afbce44a4cbea215
4a2681e5ceebe6cb62dcba39043afc34d15e5348cd2d2f8f5f081c8b51e76d409ae2664b
a424dd7955bdbfe0ac0cba5c44b58c59da817e5ab2cc70450d62846ca9d9745a7f2e8091
683908e087fd657de37b47df09a8eef6bab3e1b797c83ec37f9121f44d9fb48bfe31fca2
bcdca052fcaaaad77d08238ea061c57de26d6d903ed59ed233791bf1ae2791ad94c67775
61860cf87a0b8fb54229276b1f4a10b044d108d7a2031e11676643532836b38c4dfaa9e5
d037ce58d47e3a8f2b3cac1dfb8d3d29d5d5804d621126f1011248e7a2adb101928d2e07
c3eb8fa52fca32b473d5e744b393354f47670045e230162402ac96b94577e18acfd358c0
23ca600b7a30dbe6997f3bb3b2d313174aeccc636484fbd0856735c458e8fd64b9581aa5
cc2f1bccc47c9f1edcc9a874dd640ed885f3d7cee4a662de75f6f517cad56487ed9964d9
dd521c16c280f9e3d74d73caf292c2b7ec1fa1e00ccad5eb52ec3a25e9deab4ae4030aac
d629cc003f538b47029d64c0e928ff7fc1f797f6b8a73922be44f28d3f7c2c1967005142
9153b1df144e6bfe7db58947cd023cc0c354ea190d16fb7547e9ee5ec2263c8739b3c6ca
17cad344a0316d39bc1fd549b3a3cc09cd1ecfd5c9d34e3a56872dad435b342a8af0ca58
94bff0d0ca5c02606c6733307822609407431aa4636af3d059246fba2f5b7ae84a7dd9e7
40f84da0c85d8b9e7efabfed7672e38ac04b993b0daac65d8f9065e8e4fc0e1935dda7b0
d696184d4fe6b5e498494cd2fad57cb5574831ca258adcebeeb1d2e1ee0f78b07a52ff2f
01888468bf97597be013a6edcaf9921e14ce75c5a9b3adb4548690e5d565c99c3c7d7d66
308edae804a847700cee4a62c9db0024adc56776deab425f0d0b98b8f808c4625bbace36
abbae0f34963fdb0fedbc4b83818618a346cf8488185e98ea4a6339c47c38c0bc2bedfe1
f3aed9c58efc20f699dfd254e96d083910a24177602de0439f434431e30cc36763c11cce
ced1c563e5a74a2ad93b1b219b6727619d13c7c9a77439ee125a904f3d393c1d1a42c66a
88392911def1f16a44770cdcac190380fd51c682786cb48c6fe6cf41a3f9e7e5d309222e
83e87bdfe140248b1d4d98522f9e6ba9bff05a120f339c548c020386b3c517ea7a2234d5
55633359a011450c60eba6227cc09ef16acc6a61c003157020ae4cc57ea28a108fbcdeb9
32262640a5a6fc6d3589d10250ecbd7e22043d7af7f6106de53ee981b4af9a2a882de075
099566e8e03eeeca594bb644148422227f0a7e8a9fad49dc573cddb58c23fb96c5351f3b
27bb35f06eb0f5ed92ebedff5134aa38b25ebf8e7cea9a4df6175f960d1d619a191370d4
fad180c3e78dc7ba0576987e16b648dd3a35da179fe50464e2f7b8d5e8e549d89a45d0ad
392660c7020fae03ae3e47cf0f4f10851a6ca190a4b30f17a3dbf6157c8c9c3a65c77993
49113fd693dc7d93b08e29435b74c859dd3f495442605181d9a682e2cdf0c479c3f3a883
1722daf59e9d73405d810cb32de893f517a486596dd202439c2c82809f4d0b4ebdd3e565
c926760b5fc34345ab0603fe681962864f8e9be98635d01d3578cd58edbf85c9fd662282
c8bd8c1c9140ef0473b9dd20ce17656cd8592c866b25444b8fedab588dfec512c3a54709
f7098d1c75914cd810645c74dcc99eb857a7f1d9c083a76e19cf1c8f26c2c35563967d67
533428621e5ef6e5e448b4bff47b3d624fb80f93ca63c2a05fa8c3066869136bee13ae31
8dcfde762010bf6627ab3b06812d962e24e24ac40630952e560d53157acc1b8dd8c708ae
0f3169c376f2b43f8d363ec628c6847ba08cf6ed47c3750ff332ed207e087530d51b54cd
c821c176a19d8e04df4be20f3bddb7bce39ae6c01f7620ac85ff532b68db81f45f4dd63a
087bfa3dc6dd10651e051067e4136de5dfc63c936223135143dd77eb36c45991e930241e
ca4c4cf7ee730ed11b9c2fdd6d3d08e615c9b95d89d4d34f640c2cb33cc762cfd50a2dba
1006ce49a37aabb38514e2dfc42ea9f0c3cf7a66be8b607e482239e83e021c0352800698
895e5e16cca94bab7197dc25369519bb982a15768c66750733d214afb8691459dcfd4663
fc0a3ba8efd36d2ef6c228ba43a91c52fd3ca3525dc094529c432438661126bd76c7870e
176ff2a46373e4856205de61fac181bbe160fca3b0b7844e472c004741006980641c0f6e
37b038e78a0fe36adbf3f76242179dc1a6cb9f66b0ee89173a6869363a70e06d1e46f6a5
96fc75ccac79458fa1ff128b713b28db60b28153beb1c75dba961f4b30d70860e4c3e36c
73350c0687781b348672ada903a2d8685ebba43fef978b6ef30739fd01e8d375295d42e4
224f1db5a3e14cc6f78607f0cc05f7f40cdf07f69d3ef1da39001f072487ff3f033f2638
d335fe80642e01dcac49233761d78419936dffd5de428c63f17a2090d0dd66abf1d9a86d
488e955d1f76543b0187bde8600355351b4a8c9d02fdf33ae0043d581817a08cc26e48a4
c4833a8bf5d98257263c448a987c4e8f99638c5c23b0c5ef3044f3c68fe2e578a1f99bdc
15e3edc1fb11e7212f844b17e30d5eea7c5e0b8a0f8fe26ee0cfc84e5312e9c134dc0e37
a4ab2eb03576e867af590383a4e8e2bf305a1cc92b8f9b3ed27684486de9f708b58d7e8e
c62a009a5d51e6d2e2db902ef6fad115dabd09dda15c5eb66964976dbda48f27b01a43d4
0397d2a6b05ac6dd576cd6aa50fbb4fb3cf66c052f5f2c608de0b5daf142a373f847575c
1d6182c034bb7a8e40bfdb8405141b80f5d0a08e19ed331f6905d9dd43cc042f5e483604
ec90e0c4785dde40e146b85b9724b0a28314cb221fb9061eea7912864b5edda9e4f84713
5c2ab4783e69db66680348a49d9efdf993d9213fd7673dfef99ffd63c968d9323bcd4067
41f06b286045fe6ba96541185b53932494b25f7f9cc64fa56e3ebf9dde81deeb72da13eb
6e8b6cbaa1fb0ab717e68e39b13ee67eaac41511f5741b76777b2ec72b9de0b9c4237efa
0d7357946200550f547a3458427e385fa6c9532d88f0bed028eaecddfd9c5807f6aaab8f
93b279e41354b066a1923f46f141682c5cc1daecf9d28a587befc44dcaae07504649a6b3
b25df384853e880ec1c3ae85535f517404402ccd0827cada9dc33e9cd8db3477876797a6
5f9ee13fb66494c9a2a768f01410e0917193f9edf9efaeb778babbb6e24c01f49f801156
c0d7391d2a96612d3922e72e7f3351833430d91edfd9c5666998939c3c9a2a2c04a25eec
4d4f2f85531788bd3923b5b3bebe5f63c41f0467c73fa1fc007bf9851aa51eae43adb156
2d91b3be5bb1c688d7aae35ff86dbdd77a0ef7b286f5b61d2255c887a295e87e0b64d840
bf7110161d57e9c098084d9cfd6b7177da0a43236e8f35a10243198e399123d9d17e329a
e377cce40b79b666eba4f80238c09cbf87d0be0185d866f4bb2dbf2a0a5e53ab6420094e
869581d407337bd5ebd3b2ec90b12a11689805f6445d8c454c9dda1a98eecfe4e5abe944
1c7711287ccdc9cba7da5cc3d6a0688e79618990b2bead324a8b6e891b8c556df6ef469c
d1b05f93a63a394a30ad815f1a411895d2a6b054fb083aba0f6bafc5460bbf9c41ccaf76
0b7ca42bb4299aee738a6c7f30b42d71b8509fc1d138563b3e4978b93065f538f67f85d1
a5961a2c8285040cb3a73a5f5a893062f9dc8d5781e9987f4b93950413d6245311f04acc
aa1a3c240f5a699ddaa46af79941838dfef9b88337ce5a47528051ea4eef95651635820b
20e15a375b82b7d285fe79315ea3e44ef5937809421c0ec9e255892679dacf5fb082c627
fcfe37aa13565710e0d046081ce838937e75ddcdee59911bd32cc8983193b55e76dabe49
a70ee93affced9c8644eb312bb730ebd973145dcae8a1371a7312289f71d5ee0b6b66a48
df5ca2472d2fe2172e109f11b95f1835e57a8c8e93b5d35b2ac9a7501070ee0c5183ed03
79e23b7ded8a3e0134b60bcb141d496c40dd40c71dd44ad21f31860b9e0105927de2d9db
246fbc9a9335cfdfefeffed9525708bc9b4d66e122554fc3d67df8d40f84cc906ac65f4d
9364ed2f69618cf9ce8904576c50753c683245d920d4a8c81df62aa24d9b22c05441f5e9
186eafd021a0674635c386894745a1bb201a2411505aba84b4907292716fac4474405f62
3b69ba5064a0c40b59efd66d9447f522f348c648a902db115a43d99eeca9661fd5397da8
fbe8bd4bcf388aa3dc99919dddfbfcb272d2c26d8373739520c3c9d60cf7308a896b171c
7be9610275482a2fae07fbba31e6c59f251dbb37e4363f5633435e1bddbe61bdbdb8ac5d
02f8a0bcc513488587d4f6ebafc2bf0e99f23afffc104f17b5559e16addeb544ae22cdbe
eb683481511b64cf5611edd76f376fd2ec22e3f2af086a872445591bc5130a0647bb41dd
1122f4b7fc83da91a9e55de57ad74038850bff09bfdac784f6e36ecc87276c6dda53c3de
d9057f823943474c123d35549227d9aba4d4ed10b66cff2afd88f51d2f1267c2fba9ef94
d4dca3f3faf5646e2d3265a10c039dabbe3723a29d8a79ba89b8f75046f06285f63e3844
961c40aa9fdd7f1aa1e60335c7e2135c77946bb736a3d3ee32f99cf03fb4550de3dc39ae
76469356241b30a9d087436aa9af182d2f1c59e104e73bff4155d11b82a45f521ad59574
5e7125a967ba949d08ba1acb2152b05ecfb04a1d00b171db07df60b76ea3c5d1ad34a9ac
c81aae912dd9bd1555e4b0903df722944b25c83f4b39fa317c40ffaf5791986a1b5d66e3
000e5351d8a19efca0702e0526f2b4f7326b4c1c144656080c2d390ef7d00b5db933e862
273e7816ec1bea3f10bee484bfd0a351fff3a114d6c9b2a5013b4e54e5208c6db2f15430
7dd80f397f245c2cc44d5571af8fc99cffcae41ed61e76236a80723ed361a3d84ef36c8d
72872e5b8c67c9e3ec9b8b6950a36299ac298a3b987256d6a15914abe0d00944dfface62
45992aa8f763dc5c17e9560e1066b7b19b93f829ebd762bc8c3c1b098865eaf3b2e84ee6
bba39d641c997ead69e77397e8720c6024b9d12ca184dab0a00773d21b4693e98150aac3
3aff32b0abc82c0e0066875090905fc9bd2f258422beda04bcf051d0562208d3e109760a
27577afb824cbdadf46594b98d98d8230751067d22755c7b4f2d75ad5af6801b620d05cb
d79d1029431aac02b03c14e73921511c8fefb63d0ad212405eb2fa1da1b2bd9b01fe7460
168a3e7dce5f699a23848593218a50ed23aefa3fea86bea353effadd3568a7ae089723bc
40dae9e11854c8c97ae1f083aa2bebc1722b4b41b3bd4b8e5d9ca11072a28517210b444d
9854c8823bf06fab8d3af079a8cecbbd25656eb554ed2784232ebca54164d189d79089d8
6113c3540291a5fbdc2f45b3033a455261454bd9d86720ef9736d53e3ab841b1e062bc42
1787357eab581124aaa7c6d897bc09b993e94f0e721ed1fc6820d20654f397d404a6baec
3cfc98597b4e55c539728d06fe6ed701058d131cf257b5cb4c587099aebb39c6834c71dc
9fae1563a146ca5e4403657030ad2db2fab17a7d9e27adbb0a6895b2cda990b268c100ea
382e240b5127656dc016f42fae6638d6e88ad14290153dfe6ecef4ac0392c2841afcf4ba
04fa4e3a9e6cc94ce0180fa790736699e81a36e983ef6e4be1efa4f1f78054ba5db63577
4b431308358bbdff7ae0104dcaabbca594d8d39070e808c2aa1e9e30e0e5d4078d8f9f67
6e236b284fb78c856dc35a997d1e1105b96cb6ae132b601cf986dadf70ff7fbe23e4316d
664c279a42886cb387a8b3a222c7f8f7a6d54387cb9be038d4b00e6eb5e74f4c0d6fc4a4
13f5d51caf4ee36378a08ecd7ae40738b6f8428a1d819d9c06ea573cd89f01dcd834c26b
f1d67954e9b676dd534ef818a92c628977bca41f164612ac608988fd5d45665d196180cb
dd2ed884d1180c5ce1baf647fc9663d284eb1b1fa4c43c66b90e4b73efd8df73df0b74dc
b14db398ac9ccff52f145080b67a9f5bb1cee78b0816fafd9cb5b9a6c9559dfaa47bc07b
48d6760bef4057d0eb6d540e99377a0090ad25e6c7cdbdadb41777c6a6c3a8d4bb8ef071
56f8a9a8fe08091661c9638e704b5929c274af0a6d5334c732114d26b806e5c1ffaefac7
4eea8e57bb2011f6516f30152b55e85c9f9695bca738853b1f7afb7a5bb71d62b8370307
26576b8f1ef75d889b2c17e227ff88e0a3fe5d9f085599517c5a73a6d8cd880e6249d86b
7713d1f5ff511ca4f47562cf201d44a09f008244874a9aac51a524d1076e26da2962d96b
a8df143049240f3841469eb043f49b5c6b3031401e82f65833972c7f436b53e0a6adcfbc
a14aae124035a30f36402111d4818b9479e11070552a33422a89b91c4df0b5ca208c7cab
5d0a912c51082d58c7e6421eeecc80c40f0d3873a61f27d31d37f36109273326314286aa
65287e76960d36861cfb69ebc9c4b5f33a525f83e500659129251c4a80701c951b006797
6c88a58099f159ee84e1af2680d1a0e659cff66dd61328eb91d3c1ae326366cbf302fe8c
8256457edec8625076b830b42b0f34062d141aa215767c10b18130d3c0c8db401169abea
e019ba129da0b773db9030b4115591f40bbb401a6080dd83e5d8164ccec3902a34ff378e
425ccdaebb87e7460e8241397309d121d9b72381884ebd5852b263dc717f4b69e7f5b92d
0beb9214bc23ca73d149efecbbc4fa9538ba374149667c491ca3bfff6d65939e1d089203
05f053d1c8c993b6f9022e8651cbaa3e3586046f8759247edf359d90a52327de86768c1a
65e0ac30c4493823fdda4d4682527527ead6775f1a1fb2bf3e6dcd0621447b0042167c40
b5902f6c27665aa86c2bf24ee148bb95144f595729439794c241b0c90090c736de920bdc
0eb194c2c4ccb457fbdb2936ab787ec0ac616abf00557360cde5e47d4d2fc8cf34c7d7c3
1ec787fde8ffd0ebb7422552de73f6d73c6151185efa8b0dacaf45899c77ae3c9ed1288e
f4d9e9dd6863db8097f877135c1828ade3abac00d114d5d89f483c1e1dc3b81f908dcd94
3b0674a4a1744b969188586d7890e85c9ac52a1c086abb958475f36ad32a9fa81854d668
84a92d6fea6e0a46a45b93192b33f4686e698b050c90f32550bea6401239387fa4c65e4f
9ff089335959d65acde1c0a7f38233bde193748e1d58d985a837e571917b2af16de22d11
72c8bae3699e7e92e4705bb5c64a65a8459f2f31803ec165176f7a0d229321d6d287ca69
7873c3876e7f8b46384a96932e6b291eda4304a4b691388e588493326b6fae02122298eb
0abf71a39ec4e61ecfe4f7c6b789a83f0cc88f78e7beb583e2f60a1f1eb725bd64e58ccc
80ec6b2fd5c3c715d2cc980ee9f5f358d2b3a895a6e2e5535583dfa1253acfb9807cdbf8
721f495936a79634589253d93ef300f976c29e5169e02819332052538a5221bdf947e043
0b98ee77387b70aebf6133a50342dfa55f2c49a36049344d16f09fc1fb71a23d3569c406
3988e13ee2d885e3c763a9960dfe0bd4fa13f0bd7e9a0b661fbcb2fa30750b002e713c48
042e4ee447bcb35f85a68612c86ce690e5be97f7952487294c1cddd3946478d4f2215ff3
bf3d152cd242125886645991856894cd7f0c237df31af454491f6e8953ddb40135d17691
f6655c8e690f110ac056f1237384e9404440eac13bd9739e1dbee2fb8478a686588ff575
0530635658e73eba036abc6d1dfe59a50dcdfe459fcc64a8edf9c71699a0fc7973e4680e
a47d03ff4e5d3456ad7ed2c178851e159a8ed8c30b9a7eee90597cca12eabadd3bb550d8
2c9182fac2902ab3d824f1314dc05dbf48f057f226b78026a4c17b9ad9b54eb1ee636d25
d26a7bb89a9a3f4d2e00985f1e72d4890a2a6321ffc9f4f9eaf1f4abddaf59a06be3bc5d
6ddb6597f04cc7ee324dfe5e0a62735c9596e456a24f84b1cbc5f8596d62e187837fd679
41110abb5131781a5d55547f7fcae6edaf785d978a4082088fe62b4648b8079261eafed6
ddcda238fb08651243acad435608c9999a77610197ee9dc6c912cbd4eb1397a521cc8e6d
6c46422ef9a6241353669c303cc785c2698c4ce44df02bd00db5acb4e071afbd86993c95
a3f8b810b7d07b58ee28b932e94be7bb27d0b2e4263938d0b179c14d3a916bb7633f783c
b67eb17e543760d5f38eeb083cec720a0f932ad9c82091bb00032a3727026fc16b434891
3c51fd034be85b6cb9266131abdc9aa3d80e4773a65a34d16a3ce4daaf7417e9375df670
6a298033fdaf51b16a383fd33ba2f8ac3b4d4e0fef5b9e1f7283754c054c17368b5cb28a
1a4f9df65ccb417fa763a124b599f87d9cd537b84ac611d0e5dea70d3aa8a7b690e29485
c105e87bd09a1ad48b8d945fe4a37280d55b173e0d79a14ca3ecd2907f113ad6b10dae28
3cd0406b2406b629fc60509d49dd303f4d35d8810939068d4194f3be646115d93d944252
86150808a9f7e9c65d589227f9310bf7479a13b9d84a2ffa7e45a322c127faf7c9d87284
1799efa7c4fd5ac00eb46bcd84649070cf254c0cddf606808662e24b6bb3ef81659bac65
f807bc9b71dd47dec16436f8ad93ce89ddf8d0058c7a5f32dbf5e1e85972730122b2ed7f
935db999ee48a9d3af630d3484f43b59ef6fcf8d36df2384f68192d443f7510ff162a496
b07b06027f6b4a6b1fb55688dc5964e2fe3ca4e1a0441815ec37b5f43082166f68e61421
ddb3337aea968a351510f10fea710ee6830a0f2b5c96e1ad12b0e0564f4ff50d0366f0c6
92eb3af363aa35c4ed89a616f9b97047a556ada84030e76b1345805fb3fd89595673ddcd
6ddeb173d2130a85835d3475af5be3d5658561a00a69ab75ed9a18612baffde679b84d8a
725146987ae1f7dfe4cec272048a63c69f58b5c298193d75bf4585f31529a915ac291ddc
8f30a51eb173c5ef5e9829eb21c92c086bc66e9901c816c8f97bc3abc33409532eb7e83b
7866a237da166724543914fcd48e056264e7c1aa137f938b76e9257f9070d669f1169e9b
7b2d0736957c56c65695c51104243de78f6fbb1134ebf4344cfd849a446e37b751ed8773
7d11913c878a5826f163030e38762ee56aafde291dc8f6e675bd0f9a84c06cb832426622
64fee95af6699fb0d568aa0c4a5e06597227e3e7925c17d1ab2b4241b030d287c7f4afe4
6095463889692f9ab41b02d5368891bd81ad47b8a02a261112d87d0ff66e1a3cc4135e76
ab70a43cffde9ffbd2f9f79a197d0dd3e11d53de8f0f3dc96adf2bdaeddf72b92e7f019f
729b8a0ce1a86aa76eae9c4b6467fb0e45dffc96e2604d4f67053d791a29a8c9a2eaf115
7c6c03bca3ba8f9f18491760d1cd643498fe8ff0055d0c7e19b2d9f808effda63ab42c57
f02fda2f696eb0b7b6c805ac0a777f6374e7545db077d3c5cfc541d9f66b53ee503b58ad
e331c7ea04306f6572cb4973e5387fb6c0e6e24a91fdb061d1e34a8b2ce873c930e54382
52797c38188e49247bc0bf311db67d30297d19da5cdc033a4c66568c9dbd143b01062206
01e0d3b14876e57fb4afa9b2e4f245a4a0ebd9f5aa697db3d189a1f4746ba3eb2fdbb04a
f9b5085e49703cd49d371ec16b5799cf5fddeb1fbb829e2d173a38b5602416dc9de055be
5e8a534ec92c6a6b610a075316a3f5c0c65ec0a7f59ed7657bca2131262474967ee4c7c1
92ad387230938232a310d2eb9ae95ba042fa856759620c9a9de6840f507bff4207c88e5a
6a077aaef8b2dbf895dbcfab36fbab26732b7984b362b308f31d4322ae7b3088d7cec898
0eed2fec5d096858660e70e7a328819d5eb56a3f75e14fa39f2fa67eaf2b70c47449101c
9cc6ac7630bd09252d9082c58ab264cbbadc6acbd77fdd1e648435c4983707b5256c992f
f5946332d37d4bb11d65d27b361dc5363ca2632e5d2e76891487bc8766ca0269e0bdc62b
d9ffe49cc37800fa57e6dcdeb04b2510bd23d5d5d4c3e3eed27cca70a07fd5880f633353
4d77d5d1bf42e790b825b612fe60bade8a750ed15875a8be3f9ca230c84d4d94e7e93d6c
7b8338b527c15966db7f06b85157e948be979e6027b019202b92c59bd08b81a7512736ce
917a5f0aad15e4e1dd0c2adc4e10fd363f10785d939063c0b934dd5e57aa22ca55321fde
fb4223ac85da4e4a5a576d0e1137eaf325f022536598d354fa65ed0bdb32e78c1806147c
09b52a12dca4678c3f3486c73a51465aad1565c5123fcd10ce14efcdca8f3e373bb4b1e7
71987ab4d3a903926b0c220138b23087718f1ad32b9b243023eb060b1b111a63cc1a7fe5
e0d0927ddd47526f9403905835b906fc8591a01c5751074f50823a6fac1c7a08cd84cdf3
c9994e3368cfc58c0e8e2b9cbba64d67f803a7e6c754ead70fc1cee3fb1bc8c7054c91b1
75fa2ef5ef6f04b6668af9587aac212ba9310cf88e3f3cf32dbb3b265ed0e7b98e0152b9
0d4058de2b3fc5b1b4d7bbcd7921b8420e8d5afe206bb38a8b4a3eacbb2f82f2ab42af4f
eb08b06a3cce4060364ba68ed046edb9948494453f7f3072a08c536ce4295437caff69f8
5cf25fbe9d9f9a18c2626709e4e16fa4d80bbf94b1fe69a2c8a36a5baa344cd95d6af3f7
2d0ff73407d621b193ef67680d68cde382f09dbd9cd3758d136f8243a95277622086c442
131f72f0206f370dd8930c9bd9fa0724eec9bdbeba28baf1c6d882096983c05bea1a84bb
c7a674041d5ae6b4aa52b944980a988c973a570c6426a5b3f7909321fe04824168d32f83
1b2f862a85dcafb901f181f45fd887d2d33c3724e72d3aa14d4bf745baec2594673190c4
4f8b8a7da5c9543b7a94e7055b94344d6b3ab5f8777b49cf6fb996984f92554f20fc6e07
7df9208fb87db678cbc239213f699fdc765ef8e5ebc25cba4080049acbe237f7b05cdd3d
d30988ed114b2c7e81c705e1d116985301155e65f81b97ed06b1ac563928c6e0d8b78337
0a99ad2659191b167fbc4c89ecda0b973ae27c01470098ce255cd8d1b2d3a46f9550aede
611ed28de7fef1903dbb88117e4e066c30a56247141ae3dff05c536013407cdbe1fb7f2b
741d43b85405722332e0597f521587c322442f76cd8dc532da306f5ea79c818ffcb3383b
8a0952bad02e2d16c697c62ad1216d13ae43152e3ef5c396c88e7ced551f41e97745ad07
c70b9065a925602f873e067d386099b053e0dcac144a6c9b0c3c155d1e975b3b8e1f3691
7cc273452b1824b5a8d070d3d59dba12110c0e2c6cae1d76c682ba4220fec4a262fd557a
4f7319c45598c5510bd2ab970168b1ad7c902ff44957b4b7fa7ab5967258eb2f992c95ac
88aa998e4371026dca175b893c8579683a16cb76378893a773a125b12abc5c88331f22b2
87d401400d41cba058bc10316f5f2473fc4f200e6c31d9de5e0d0b1949d19a506a846149
60a67390efcb3f0935729497ec0f55f3f1490ad5701090b5c2cab5ebce4ddd52b0492511
2ca6351b419181ec41a2ed5f554dad2da770641349e90bd6db8735926f218a43df5033b4
3462f1bbbe3abf4d7c476dfe3c2555fe37222d1ac813efbf8e51ef5a18917e5ea28bea7c
39e824b8554473a6e17e292d5b20af855ea884f28e8e368abc86a5029b9cf94d02a6f1f8
520fff675cdfcb6e5b80a81ab3bdfab4f3982347087fba541061e078c191c5642c20f0bf
5866e53d99d2dd2dc0e16c8042e20064b3b8bba81eea1ddc75ed4c93b50921df7f4fa97e
a7d87ff5ff56ecb0bbb70010e4fe9a34dbc510cf860c75a55df9c1a33c240d38a8ee527f
07d540c7e9d4bfd45bc2fcd816f499d57b13e4c9be622b680721f78fd312d51008d032c0
2c79ee339220b7c0b4b79f3cc64940623c85e3e709f44aae05df6d25a1d938cbc0bd85b2
b0676b0c0263b2511b10847c0d37a875f69c58e0740e3749cbe75ec65fcb77790c6e9e12
ae9a201f5f9beeb54953c3c32c365866767041c8c77ca88d58e2dcf0852546544cd96db2
9ccd3649bbd59d2d9bb5a1be9f068d5f32cbacbf2ee1c3e2b82c8d0fa8d40f12e0957183
0eaa6493bb8f2cf10782d12e7363718be4efb385b41ece3b7a863a3fe193784a060a78db
b84e3cd24e212c925c9a71e40f3b6814193678c42725bd9fb50f9a1a45cf94f84a0a6f0f
bd8a3cb55ee02b93c574249170a766db34bacdda02a73e7ff6656f2bd66c27ab050e82ca
775a57e87d24ec8d0b3c79e0705250d35c9427c942312f1a5ed5338859690ea00ae4b71f
a0e0b7dc60e4504c3b57ad840185eb88092dd03cfe0e1495de0ab89e47bf623f7570632b
572d47e987cef3034ef5be7b41633073f959d127c39ac06028548c7758c0a45d93596615
f7a1ca4b8d5c3926fc98a0b31f1120334ccdf6f80517555dce8de61b2fac8dafbe7904c8
53ee99596b0051bd5c18ba9caf67e7d677a2a548826da6d2e18874111518c3fb1bada192
cb09152bb66af92eb7050fe1899b68d5b8251c60884042212cde01e119d5fb786e5439c8
ac260f0109532d1892077d1498ed61cc096a0c3451e093dc5d5e3908bc4c4694b2061d11
49f4fd418165780271de93493a1f5d90e254a1bfe36195ccb8680c392a1a961d107130f3
914e036c4949edf1930e1396d6e8671415ff2be917bdb205745c8b53ce9288ed9bd35572
2ea4618a549635b3a6a444384ac11982e273081c5352a738f3bf9c1271ec5e0ac11bd570
4c8a527d912d759d4029373268a67cb184254f91a488bea541420a0e38b48c20235249b8
9c032d8c36fbe9367676d3d75007d43f4a987f833003bef531450a085e7e13fe0b6bc78c
42916bec8f202c01f7df3383391d33a0dd9eb18ca87f8bc81c1ed3a0eb7aeeb250a1916c
9d4e0a80dc79a935576232f283bad6a1851c885a3faf76407304f19333be32d0a164b1fe
d089031f6441dd56fc75c9b9f1f8450ff98e494c64c348f91a9a8641e1c9ea4df5a81b75
169c91936016ba4f2dc71f2f2746e3bc5b54dab393d0db700a3ea232f71e6dfb9047119d
81cdfeac6268a5f9e273af96dae3e5196a336d90dfd8df6637e11e8f61483a04d0af4754
422525846b7c7d1b5a5ddde79340cb037be600327f44dca9bad6fc0b97b7bd70cdc09a54
6b03c4120f08e666f850357973dbfb02e71f0b9afb37a5c950d2786823530311d9448570
4cf601247a9aede35ea62be83761f5fb5a92da1c31e97dc30bd4314d4ffd06e8f5420881
85ce7ed3396d36a2c814ba1b98e091db17fa67a12155a9432e76ef3d09ae306cc3856c02
94f9a26aa13f90dccf7ba9e544e6295bd9680462bb2545555ee77a3969716f762ee06bad
4cf3fc867d9b099f2d47dd491978e78fc38f91f754299e6070650b73fa69f243d35049e4
fb5b696e5e1bd112caa85bd837806b80a2f3daf15d51a6a7c2cf3a6f6d60638caa0d5317
2a117d2ee9086516bad1a10744d37c4f8b08d10ffd1ca6665abb7cf570d8652bd150cd6b
7a6508df82ab01a290834efa25cfd1f839dd00eb882becfe3b129826109199b46d0db8ba
4e582c6da29b0019a7824d6a97da0a6f4222a57924a02a30f649e6bb6e71f260e408206b
640dbefb3065392c4a07fdd4b89a3cdcdecabf0ee2a030028d062f448168746cbec753d2
06179fe621792f4860bf4d612ffc7df6ed5ba93499024b427192858099a2f51bc9dedc72
b42bc6a830de704cbf1d81671da94cc4d5c2ca6ccaee6c875478e02e816ad0d0a99b831a
b1e7bf3bf142491b106701078548f8fac15db13d72effeed47946a82f40f3596509e6188
42e96f2cc9a56df7a2174d890d8b69f08512baa1527d540bc9b73eb37e184fb39933b59b
d45c212b651502b30f7d23089ed3116b1f72aef6c3a519ba31f5e96bd14e31958538f572
ee0351f1647bf446216b3bd99fbb447af642d0deea988717bb57efe30614d18d64b3dea2
507f878091790609e1ca39ab754ccc0c34224b4fd9b017a79f4b69d1fd527cb5706e811c
2016dfdc71da149f44d3ddfc2912663c205c3d01330b1251489ae2192c700cb2a7415275
b74c158bfcbc93430c74faf789d4fc694bb22211d74ecbd528899a1caf3226abb2d2bf8a
6247c8903d5fc7502e0c2a0f34397b465950c78955f32e5694eb51302629f94f3b078a72
405efa3a533a72c758d54e07f788b83206884141e155ad399f74206549d9e4b4f0b65c3c
67de98842ba1f1abdc49b5dfd66e305f60455f63afd738bc98801bb016741922907e9758
81721928784ba22d301a51e001e907a42b3d3dde0410280550177e7898827aef55176d10
1327cff140a4e03b701181c39c36d4e6ec2c255372160941979faee16692597fbcdcbc8f
af759189d41224368ac2927d0fbeba4366268fa89d9a87ed1dec96922c3dabae013d9808
9f3044022b72ad8d03353fa481736e7397a90059ba1485ed8c8323e37f615e75d91a70fb
c5c629d0ccd02c0e2ba46f58e69ffcada46d785a62fda411b5e6070b3f228eff2281cd6f
fff67ac79ad31e6d02c4f4d5f1e23a4387b68c4c7ec8966ab753037b210d4566021c7f22
28bee9ec493f1e8d7c997249b1df0c6ed853cc1c34ca460edeacbe5f5f165a0b674b4f07
e0afe97d90be829dcd984266d9ae51362b273527f4fbe475c96c550b8a182643abd759a0
b2d37ef78c30f6a7f601eab1f7baa0ca234222f1e1b3f9c284627157732423e6ca696db2
ae0c75189e49aafe2c2fcebdd20d8a7990333ab4586a6e97cb0e45a502d754ade26ca627
3c80a2e762b0aa1c6b407a8120e71fd17111f7a7591d450a18cc44ac5039614798edeb8c
239aa2840be370bdb8c3498b931516a2d407045282c21fad8793398e84726d6158d365d2
867eaa63d8eb8c75eafdfa4b09e2492e3640d2041cd6cdef4ee6783ea5fb2b317f5a1fb0
a0b22114fc558856dcd710fbf41a0d5ce3e866ca083541e5eb40a9258be46d24d84f4bcf
3f175afd1669147fcfff77d07bff43a29e428dae54965d5d2d2614ef0afd3cbe997dbabd
2fb710202837f2d4e2d7c08579d0015b89c861ce2379f14177d0b75d8b630da9b1fc2e2b
a2e2d196b3f0b44be95d219bba14aa08d432c6e7161c43ad1fc9f54c469aaf414c7fc8b9
c99c14485804b9630914c8bec3b62c539332dbfe556db404c176a32fe14ddf14d012ac75
421f9cd3f3ce4ab1e1cea302d06b3ae64dea6bbfd0cd7873f4ec45ed2e465e858f0176b0
865242f63eabfc5deb1ba6cae649776a8a00fe3ad37b08077c69cc5cc66b31a0a31458f6
d896c8e47d4b8e2275dd66620ab41ed66dfebba541ff487984f9782f8a62e13b4c365b0f
d87a29f1b9329564635f9510968708f4354d3a302a406bada3f70c3a8b280bd992fe9cbe
cfd50cf04ad7068a55450b05f38df1de347a4a4833c739e3c618e34f147b99770864a4be
f4a5efd6aab1cb110670d08d5593a92613d3d192c18470bd8439719f25eb6abd31768c89
3688fb62f4260757d23b12e32995738593f7d81dfe6a6aa9011e52a6758646ec736b5cf3
786f3fbfe3a9610d5fd912c0e64bc4202b4a525377674dd313c823ba9c6651c95f88f7a1
5fda79882545e8e74b7352c642290a4a1206f45143f5011410f74bf0b301e6b8b645509d
48cac09b4a667b3dff6504fc78bfd3621d7e1ce44c64ec9ffe4b4441ee40cb44945ba938
724a2f2f00f07fccf5ad80296071ceba38ad3dcee8b2008d7786d67e42210d1604cdbe88
7fb61043ab8b15d39675b008a05866064fe75cafde14bf63aabf016d599284da0a3d2d7b
bd4ba712571850e01ed7a2c3bea62ccda38c508f76444788b01e63b69bf9ada89f0d1a1f
bce553451582e65a54d4ab8c76bbc04846cc07477da74c1ba206aa6c9977b46fb33e2a26
2c75d43281c92f33597376447521260875f260b376778c1e8d62dbe8e6963f666233f90c
458dde197ed12d60618c4c5212e8875fc38a9ec50e6acf21264aab864da7d85cc88c7bef
336fddde4e138ed9a8517a5760d36523ac0fa2e8910568f48763c6e19483f593cfae1f36
f5a30abbb5c8f3ce720f25e90c830599b7b70ae2bee28ed32d67359601828e9d2fe89851
0841b235c3cf231a91d62b2248194747bbb6c019c96b0eddc0fbc88d941053e9348bce98
9754c19c8d6eadc06e827f99d305b91a94d5b6dc9267bdab2edae295fc9ee6e7695c0491
99536a1cd0862748cd1b0803ec4ef3b3e92ca8e30b500119e272460ccebc146c9758cee5
12d799eec62c784d6f6c1009b106ed58cafb915aa681320fa79e1e9a7c7b0ef4bd03a0c3
eb3ac66f527c1ecbd3396f69cf39c05297c96825a3b4c614234f67da78eb96a39c2f9059
aad687883cf06ae1129ecfeb574ca198e75a264185a3285e0f51d8e0b883302b2083969e
046064a3c85ea6782ae81b4a3d3e9ea4b1f18099440797448d11a45c23f6e13ef50e547f
8f790b832519da0f2637c7e84d9e671662aa61d3ec6a4805c66ebc9f43139aa404b17b0c
e352eef677c5dbe7a5db7b216e8a458e1fce8b6e1a612381d8323dd83b01e1f6374da6a3
36131da75e5e31f29d4bc1880799013400b87fcdafd70fea99bde726ef2f5cda6eb867c3
2f629ce0baaf29d47aa53edfef78dbd0c413c9aa9347b7ff0314b81b3ba8e589b9173301
802152daadde5749ca56296fa5fc24049c24dd75f647cfc286770f47ba36ea71eb9bfcf8
8eef12563e31e11f3f83a055cddf4661a0fb731e6a49cdc1661f1e8ae15ef6a1159f4226
c069fedb50caeb5f7879a2f0a04644d7fe8ed3613be2cc99324469104b9d3b373f682279
3cdd5565aff5b3040f02641b61d1fa5f52799347eaf75d9ea6472771b2b85d4491eaa2e7
a4b045deb6215f767ddfb1b00d00a7e17ee6593237d71f2a903d953e7290c4088ef06519
ca20932f709904e21db1ee89c23b4c3f080052c5f2b0baa3d1b1dfc6fa8054ee954913a7
1d1891bfd980e7812f38f4e01e4b8d9f0fb8fd6b3487a23f7962cd2bf1581d7449d32d5d
b327e41fbb611f4b1c9a87a2ff80305773c2fb6f454718111075a1c05742a5cfb35025ce
eb112cda220151361eee8f7145f8b69f773fe31cd74a5f189032f73dbc9a57d1ed7fb9d0
1d14b108387cc9ec2c5cde8a04416e87dc8aa69b26406f6af9c24ef1029e87025e89ff1e
b13144cf2034775038ee530668daeddabc902a5de9bc5c518988be9dd83945203710cffb
5e369831d8104409bb69f1424e2551e3568b8fdab90d17db8d58a8215e928275f0fe2878
a24602805f0ce59cfdb8db3cea1ed1f071c153987a40125f3f46ee25fda59f6407aa4ec1
d7a167a34d8fc370fa023fb1d536dd61784f77c0fa6eea9ba28076a415acf0a07f3f33bc
8c8fe0ba7228e878d1a3b9f58c61cf3738a1991ae319e2db82fa1e7437156f38523572a5
31d44cf439a8fe9e531dcd7f8754d3ad155f253a82ea69f39c258814921e764759eff616
79e33e2b03a010c210081a987938dc34025392ec63bc18ab306c3b577498e67a3ec7e7d2
f114eb388335e52f1454e9e1a7e1f342b18e0103852444cff648c820c96bb746a4b67b4b
ff71d7ff1b8db7c889a541b015a0873df5a9b405a61f6a505e4881ba4ecde260f48d762c
2e8d16d1c5923ba39cb88706a90fd617102c568cfbaf93032a17fa1872beee83c86de387
7f3d27c3e6527c352878e91ccc3dbc808c5e303b098251c80963c8283ac32cb1101a8919
ca7ccb4a5239a1fd062993f8096a116d8a9ca0e114fde2a9147470ee40148b5f464a582c
9ebfd7045a87d158faa83350c1d098edd68060c685fe2f17d52abba8c0f139a000d5e970
a57af727e86aa13509c93ed42d04e5a2c9ab5bde2bf1ec3fe8446d821d01b62388345bca
4927bad74937af461fe11bd82d2b1fdfb8cbee55853f6bb292434cf0803ea5d71adc0cbc
efefe59e40712e27a7937c563c1baae224d49a28a0717f2afee6637f682491b278a6b95e
d607249af001004624917e06f0bf3cf63180346afbe03091ee36431c339df076a17f9683
484ea1ef50d255c9d87e0cb8957eaaf2636765c8c06268cba87289adb2acc71f5d31655b
61f82f1da8493a55747f1c359ed5208b335916e77d304f4141942e87ed703a5ec301c9af
d5843bf338e5c5ce907c0e4a6f616a1463bca29c16d88f67e0766aaf3024deaa15588646
17f1d9e7f7effe08e8742af64e02f3d5fc4d59f6b3ccc3fec677ae0c5d28b4b3e4c94801
e5224a0792c7ab80299730f3e5015a82f11c4927344e5fd86b599417d0466021176639f6
99218dab07919581def69bcf37c8e56adcdb30eac470e21192540fec179fc28dc01c496a
1e2c6f23f024380bb89134e466461f3b114cc7dc306f22a5e25964b024a3ea60fdeab3f9
1b6007743991a10cd347875eadc6d919a5c2f37a3943ecdcbdd76f75560ddf43c573458b
48d25085527b1be171c0be6699858a1f627b954206b3bdc0b397828e629e357cb972cf5f
439fd7da7d9a1cb47556fbc30fe13e6991454602d7ac5bbf144fb46216bea14d9eeb4797
76e6a5fc82f91e743204d5af2cef99c5d1d42867ed332bbb730ccee7487c6c277785e750
152aa593856e1afa5f9ff201c7b8c338fca7b30e4b8ea7839c96f8631e9c3dbb1a6360b8
8ba3d9b3fd388df1f84f8ecc7b2edeaa9bd77e15c8e109ffebe750713b13bf97292f1a4f
94fe7162e6064ab522fb97fea179e69d3f94c8a088dd63f26a51c5ee2d3f6dd4cffb50bd
d7a960571dcdffa3392663cba6eb72327a76ad916d9179f55e53e189b6d18e0277fd8224
9dbc9287b89866a4df05f6ad6104a754dbf733105b24ad8c6a21389cfe0fa874395ac82b
afc9bb8222b73519b1e26a05cc4d6d22c916c5c0550b575feae3230b38c4ef8a4d5cff77
3301be83ad0e646710dfa48e4b4d3e724e9fdf73dfc0dc17bb294bb03dadb5b85817e045
cf52c84769e03278f390d3567c2abf80d81196e97a080bb3bc7dc2dac7f35ce8bedca195
7cad449ba5fde90bd27ed33c4b88d61c3896f0d1c64fc0a513e1abe28dc0fe80ed79bc28
b47e5e239e21083a06aed592849503b02f843eb3c7985b057df98e9fa26d620a7516c721
32b109c50e26e7813b12c0605a82b1b7170423a6ba695cfd366e82f6a5b35304ffed7698
06317e10b944c2cef3b108cc2bd4b1e971c22d02f8c806745c5465ebc9d7e84ba5939f0f
fa85ae03a55d82f5bc6731900e2c7df25fe5dbad31b070e534ad97496b3d1e7c36d8dcda
10178d36ddbca792c1fa6d52caf17427a64607bcb47448a06b1ac347c5571f9dc60f1db3
762d4c0e29ff6e3822053bdcf27585c79aa4f5b72e551648c4f932de2eb361069ac835ca
430da68fffcedc209695f21154bddeda6fa9d902c6591f2c4559bcb25d719760cc3e73f1
fcf4858a2e35b5055acd54e7042370a8c3687a6c23fb1c12930e624b72c59cd71093ea22
a98c4315fd868d4413924b7d8e7191aee48bcbb318eeebc7de7095f94a331385cdc6816a
b34abdd7aad8996822a67e86563ef836ce86258f7a51f8dc236166bb235012b3bc9f3c70
6e7c435af58038d6a8bfebcc5fb44d951430e929b8f06894d546d2efaa799425fb3cc277
b619a22328678473d13ee12071d77526e086cca0bc0f48f8704f9d74c1320fe39c21aeeb
987229411aa1cd6be7d53cd68e28f03f4085f170c0e55c858f7a363e1e2f41f0503d86d8
1929a5ba78d77928d2d01daa69af29cc541fbf121058cce87efdd1343b4d5b5834171d62
e1a58d8886f7a6750dc2e1b606063e6941e6c4aec3cdc9b6e0b7d45e840f0dab2cb6b2dd
3e3bf9cc5fbf37eda20f9a7df05525f2cf6dc24e279894b0d95ab89f741af6645db22b18
2c254c18b58ac5fa9850dc4a67fac2a2e80b915c89c18995df330278fa29d7eca62906d7
3f895ff7138869c2875e6ce162a2d25e4fd79acd8664f2f16645b675799343c3f13851f6
0e624a5664fce593ec6a45fcf8ba27a5001572f3094318222f8c4ca99c7de30abc41a4b4
ed9cc2211a43161247517fc856ad8fd3aae175e396e94f1dce50e0b2fa59e6de4fa087c6
b7ff3af0a3318b0e266bc43b5a1d0a4b9474519bbabaf9176f45b812f0559646b8c462a1
343c6d5f48586245707a24a9c6e2edbd8b2a041e19012b4001b0d69e911e1c3d13f02778
f9b56bd38e851bc0d0e822c1f9f3aa594ba0aec5f878cc5825dee1f2b58b4e7a521e5a9b
4428911e4968577602a28b6e95cea8543c7967e54a7e4c2a8f3b68e1cf273daea028c328
09e89882c0af87295947a7eeb0e9566c80bbb49740a4d62429eec8ae2cf144c9cf5df588
47ea0037f276001ed34b298447a6139869bc9a9bf729d26c1cc2efa623799e51caf57ee9
cfbdf4c64d2832cd7cf921aab229e5a3c31eb977d543677b584019a440ae739015e0ec13
e63d1d7fbfa2ca727367c731f222409f7ae740fd150baac4bc54c6a95fa3955bf67370c2
80499eb30592205204341c74bc5f56eaeb8b37f6022d58c50623f00bc858ee7b4ba9d089
bd5722543eaa29ba2a552e881cb08041506cf9461cc1f9063505ce008747cc53f2adeec3
fe6769be121135eb5c15d46226a366df67a72be03cb3e574c5463c737ade99cc22b5d785
3714536362772e6032ba4198966fe7b62cec846e78544836ab1ff526f128c5174c7ec382
86b832aabbba428ba4ffd1cd0845efedfe1d5e5cd7e145db1e0411e22af85f704a87d421
c91f96b6e5343aa5e3dd89ce7c03a1783c39ecbfeee85a9889a49b07033136d2db331b61
a33a800f5afcf4274c3fdd677a3aa82a89e3090ace92fc26108aa6b4c5a5efa2cead9094
331c3c9ff522e91f9239735f207b8f2984ec33a8a6b020389ddac442c9ceef7a650ecc7c
2f516d911543e97fce02becc0ed527d88223b2e6e8e4f8c9201f5a2cee3a3f53731d9aec
51380fb5f1b829afdc89420771d5f398265c0d57d9c033cf4c253764902aca32b41b4b62
31ac09e22672ace960f07238815e0f5469d02d8d6ed8555b0ab0d8d4b7df84952a58ca5f
5ac431f3c6c1503dbec60394bad965ba470de8d12bed09136fc4d97f815eead4ee7e6c2e
306e9aa0be1efba85a1ab44c63f5d4357492c180326045f9203fc01b41133e78daaa8bcd
e2217eff8531e3fa41d5d6fae6093e328f1c9307fa701fbc8d6408760900a18ee7fce5e8
134f0a9c6cf91b161d96096e224a0a144423df8003a96c705d68197aaf9987ad25116734
b7df9aa2f298750e5b6790fceccabc00e71c33b9359c7a4fd02b34e0aa823f3f09e7e369
30c200c8151dba742e7a9d510d7c402c53daf6fcb0a0238b8554772be7e418c9aabe7efb
db888d2075a67baf6a863497d03f15854fcbd6ab6cfb249cbfec8553c285ba9110f66ead
a34799057a8502d469c0ab32c536134614f7f851227044ddc4129877880c0fa3454acfe9
ac1af6b6b0dd20064fe8a78592d5537cdb790509d608a7a973a4fea74cdfc83dcd09eae3
3dd6018a2644eb894c1ebcc347f080d52718804938bd8206aa38f0980649705c5a18f8a2
4ed7781e31f4ea9101dd846a472c4bafd3112c9e14ebd812d5611496780e7fe4eb0104c5
3f3662827ddb8ad0a3eba3d2b3b90cb288bc61ba0418beb3fc11cb90ee150688e3e562ea
97c63a441944f396973edbd2126277d7aa5d9ced37b166e228d0b198476eb398b76fdc1b
69bb99eee2fe10f6243ef01c022cf9aba2234193710694ffc30d6e58305ca62dcb5ee8b9
8dee8d4f80e622e8274fcd87173f42e00972869552f13eff47b5463a3afc7f4485c0631a
0457f9a91ee7e62d5bd04f31a6b4927fc8a3aa0e1187461799090a3888a7b79cb70f4304
ea0bcd41417147a1f8aa05fb4b4669cc7098058171b897c30a5b7a7cefbae4b5dbed86d2
dca5eb645cef897ac316dc3ba384854d74c6fe27ce3fb1f0354b5bf2cb2a31cd4c0d34f5
c9fef21904ba73d018b924def91b645e22adbb033f8efe0f46f0b79b3afab53bc4247900
c214735873f18ae7be4b1f500b343dc3e36cc5263de990560402ebb7abd6e449715f50d5
963b5578961399817e2b74c7d4c344b6512f3fa5cedce7036cebe6edb8f781660f12d194
cb365b5a6be938a9a980271ae280205f968a9c4d488cba821035e8149191ee5915665c2f
8fc6c524e99049f85566456120adba9e78d9d5c645adafed4f4d61efd33b9d6b006b13ab
fe1929e183292a7e5ea51ad167f4f331735fa9becd10ee39b53f297fe213a8d11abf28d1
d282d53144d076647b3d2e04b43e0e20df8f0e0acec8e649fab00e44cfc4a41208b9c2af
f66814053c41ca7986859e2d4e7ad793f5d56b0d939fc2afe002e684fbd51479b1897f91
5da2c9f376fedadc0bbe329515d23e52a6c6b7628ae389a4a22d3a7485c9a5d4d25e3fb6
189de4e6e51a1139872ff4c985d28324887870b5020a3f694edcca24f89f7b79929c11b7
8df5fe3e8591f0f802ca57803b791308a802cb7295735eeb5d9df97deb0fabd1dae899eb
4b1990ce4a548fa16fd49aee9f22d2e558466d20794bed143d28c59f661e300bf09790b3
e3ecb985bdb7630be3391678da894d8c017eae38665bb8d66d8d0774c002665b65c31a28
1ed03034bb97db221ef55bac90fbbd480a70b783f4b87909b9a637ccd059b92d8b14a9f0
0391f6d4c42db450e5259c2c5d5ce6abf5fa368dd8133e74cd28fe730f226d2eb6a9ec01
14d501ea528954d53522d36d1b6ba88b4c09feed426d0df568b7ef26a6d9467648c045fc
86632d68f5931f6ab96af25683a2a923e9e5bee3308161374792929d7591c4235179b655
e266d1210eac282d2256e4823f446269390b770ac8ed4aedeb92d895ae569b4d6f96b4c5
e6dffda57100a934385f662563f789455876365ea1dd8d01ab86b47e8356bfec4f92dafb
99555e345278b9d1c58e28c58c48f0cd10b350bdc0cec881e5be0a08bba27451ddf19081
d1951912ab3eebf6ef04be7c1c234b93705ebe7e49a02cd6fcd8a3be6d5955ada2468251
610909918d6f972f4137fe1020e47ed81462cf0e3fa2a5dc6b6bf652ed725ffe64510980
d46cb4ce78b68d742c7ea11badc0294bb4203af9e5da388eb120b5106eb73c6900fad324
67cdd6b38d65191feaf136d61b6beb51f4e6233eac29acb94170378993437c985196e6b9
31a41b950be3f5e4a67c4e5e5d86faed2c90a0a7f34a739e71bf5fdebe9921f31da2d32e
d3dc6839c713844f7ab6b94ca5d37df39a1b41ad519f8a723d3b4dee11f77e6e16cac124
7bb8722564c1a657c8c590735fcec713ac3050415ca83ffb8774f4ad67b0d8db913ca41a
fb3b6eb7a5b83fbd2ba713136b4c4f64cb1c4d4664e4347fb996d19f6a5bbc7bdad3699d
227bd69cbb81814e246eea27342cb3657eb3abdffcfa66c9f60ded2d12af894b55b48275
d4cd6e188d113536338a612e67b2bf7619af3a8ca1ef692f5285786eb51bea713ec4fb31
f47f80e5a4149a394b26afcf1856d88445802e5dcd9e2862e0cc5b0ff46cf001e977cf6f
8aabca14636710d9dc306098bb6d77223f8814415fcec1366a4ce1d80ee7a68bcfb66916
d19639cfbee0e588d591689b06175e16fdcc02de2e19025a26194d88b4ede7f564fa9c3b
93eeb110ad1e7475151ce256ef35e1e96d15594e136f4ac16b65d09c4e1b4523a6a546d4
e5537fc4d3b063160d6acb8a4f3c9b7375284e2825971591faed6e182d7aee8acfe9e600
974222657f84e72d93afd86487e4df40c4d6f5a137db87c88455957efa5e321ba61acc34
d11f982c33bf93ede0680d60a1f028a7ac471e5005eacf46f9fd631dedc3b19d6e956bea
61cf85e433ef2710a831eeab10a12b02b721865c370e5e2d7b519da61257f3855ac86d15
c3574658a3d9873b215b8ff9fa1d8cb81674fa05c39f2827e8594bc07f4815853974c24e
4be4dba79f595ff7c2eab81efa2fa760ebff083c10b11fd9d58b32934e5138609f21ee0e
84523f1b99854ca6fbbd1692ee5560bd6327d0cd968266dc16cd3775dffd33f9c8321fed
f7fee287782f7c1137796a0308fe75992a9f47d80f1001b67e0766ba09e4d36d9c0224df
ec7f0e18602f91a95395a74d2cdc8fead4fb5bf81b8602b36dd4225bd68e7178c240be83
ed02487e136187b4afe0bffc378706626fba2e04f7f306b85f7bf958ad8b1dc19381b3f4
ed76025442bad62c5865ab09bdb564be1c7487562219046a8e6f5510970e7ea9cceec9b3
8ef5e4f5b9a3310df1220acf8c9cd162127b5808afff2c6cd3c97b913bfdf193b95d6a51
4ba98dfefb0867501b69888e54f7667335f6a211ede881bc47294596414f20d4a23b00fa
960d2b57133db461ddb558fc6989b54c1af629316ff4edd0f2c8659ad5bd2fb0d5a68f71
7779e1550bbbd3d5a410ec91e8b7e793c45d4fd3867b2d59e7bbfb77a9119c24ad1de9f1
81a9939850c0ab1c74a68b583bcafdc97273e810f036c10aa901013c24f6578d7b303ea1
1f4c4e4ed6fe79b88070c5b487724669b0a04a10fb416b58bd932aa36f8da7e2bc54fe85
15d6ade85c446f0c52c67a84508780e2b85a357d014a1da7631d82b6ff6cff73fdd624dc
6490fab27b6e0e0c0991c61c25a3e5ef0dbe7a5359d5f37888e975ec57179b20e9b91cae
61ebf7b4b5315c669abcbb3464ee023070194bc2f2e0208ec5575372c0fce690ccc67aec
932829bac314b5988ae72a0a6e12193ee03494a1143eff32c4efca0fbcff8e11aeeb491f
68e96f58b3d8b782fe92c0e11a6ad41b11ca6d7bcd5e0ea05904757479c544f1c55c24f2
27c4b73b3e3226b747cdb6606b4a187072ef5245112f4d728dcc46a60147d811aab13282
45cc105ae80ff11416c1ffd82ab032f8ad545216e211b8a1d6f59d652f3d7d3b2f280554
ae6e3b250b2920d910c0ca3cdc1f37589b8b86db46e0441594709bc6bd63fb69763e8a3e
0cd619ab9c1b66d62e97076e2c1a45710193925e964bfbb87d559bd05da7e64a92b381c6
3cf9e3ad6d7f08dd1c715a0873852d163133c3258083f356bc9da1a6746233bdf867087f
84819c0efa4f3d8ad3036974ccb106513858fe287d680b6af9c83f07e0ad84a71196f748
21c0fd25a931715619202556208aa63310f1fc1e728d01e6d776eea6ef0790a537534b42
487bfb69e38b72e66c3691db70b1847516f929e41e1e92d59f674d2642df90356ee0a0cc
467b34bb0caa952bda4fb940c9cf5ab74784822ecb12ea80170f107114e31ac4b8e156fb
c16e0cd571a55c4ccc40e0d65279ba3ce55d3b020f8a27825b511f534a0a896468af7a84
bbbfec37be16b4130042850b2d4e6a75995e0a9f211dec0cc0e91a4a3db4444d93693099
c4afb240f37a394544bbb2a6ff18c739a7d185612bfb558b0d122acc58a6c9012543284c
20bb08493fffdf06c2a72970af38c12a4bd17d7b7302f3919183293d8b5366345507cad6
5afc41ee9c98b9b6c7c2d1913ad52f350279b1775ab4feeb64d8275c404357bd44662d94
1a31b882d25217b2a8d95fbd0e3acaf82f8edd7b2730fd3cbbb3047f7468be0518de4e02
d5ca2246e79496880be4da0ae91cf537dfb7ba53b5fe1d2bc7abb75ffed6ffc959c79dd9
ed055eedb4abaf5b1e37d57ad7427f1ac1dc68aaf6623a26842ca904bd6c1c82bdb0f782
c35be2f6c8943efae495c3be618797426e007a30392f7f363ed6e3b3f3495bce3681864c
18000d47bad4d17fbd4f988edab9667c8cffc84211cd68a2c260a6a521cab47ca6eb5ba0
432da263b530fe7e7241a15a584196f403c05c4ce94b5e8f8e03390a5f9fcbf049d7642a
66bf52e0673f387c587bc252b94b606ac867ecc2116c2ec54e7a5e7deefd4529e0f3af4e
c7cc470c324ae65ce8564bf9bf52a967e2601442d18b22ed69ddcf70fdf99ef30b358bce
9f6c7ad6d093eec1f85f22f8dcd0ab0fa3b740d4e900741125fa75e3dc014b11f270ea11
6fc50d4e7d25b3f218e672300877d66bc4da1f21dc64fcb9598ef7e6272eb8b894fbe430
48e056ce6dc93309932cbb6e4a12838907f2fd60d533947b1df8e4ef8fc9faa00e7f2b61
c7729712e15dd881f88ebcff8178cd2a748f23e7e4a2dffbcd6c29eb4031898534f017d0
e4a623bd56d5c4c3c9e7842485bab11b50b899c89912a1c2c0d06152446271b4356bf819
c162446f88ce635eb10e76b1a923dd5ad2899a753dbd1d82c71bbcdc7047694e2123d1cb
44bb39a732c9ce9c49fd4145779c932b35edc8977d780710e830c39cb6c43cb13ea97ead
f796762bfe8b144c00be0f8508d92cb18928e08d053a4bbc9ff0e4c770aab88f8fd7163d
4cbb978cade638790d6986c65dfbbb7072e0837b1a64d528effd8573975a364f338c57b4
8873e3488c755333588a877002b17797666e96b7ae8306d02a2b982517d78ea488d1dc53
d50eefbc82693dfee4775514eeb652cb90b06f1a42d10ffc0bef1f05fcee22df71eb5a1a
76af114167face2ac4afde1e9ec811102bb5640a9f959fc3084c40e51880fdf59101ccbf
c857ee2e64f2932c853c554d9942ee3ce15a626ce9ea4701d9f28460bce4dc72542837f9
5779f1ce6555606cf48ffc98c76a4c771889c3f8f476ab8929d6f2c47e68ef7bb52c7aad
7300ae0ab6cc4924dae3c58ea1b3c39e859961d10c6ca854ee4e5d8d3cc07e6d86b07f63
128321d0936364425cd49b3dbdd1c586c5a73e365c49e8533ebf4aeaf09b1558e11c01de
53d58baf908597c8bb957e55fe049e1c80ac532af6048895ec289baac377decc386efa03
648a60b5ceef9780ee2fefe255f0207a849a2eef70e9035f237d13b17a4a54cf989e8349
4eba2074b571facdee18f57a8b6743bcac5875cc76279dd517d52587db2871185db54ba8
90a745fb91c0c81debf4582886865be8c3f763e7fa9e626344d52bea4fec5f2a616c709d
5a5ad3d0f1b88b20e8adf21517a9e3f070580661f3eeed8ae42f1a247e018c9293db0271
2d167b14d67bb7b7cbd838214b7af0dfb71f4b041af7b58260570700ab8c6c917d3a380b
6ccb2d1d39db5f999c27d9353d3a67a291b48bc2b2c78b2435f8fd00179288e6445317e9
2a83fa1882e01971e8a46f8a72e97a74260eae04b864a1d538edb8d81e95cc09d2c6fa13
cd257b7a39ddb4c8d77ba5fc7a83cfefd1ad3f2a21f16bf36305ebd642095b81da0aeaa6
76c772f351a4c2a3539c9722300cd25ef9a995a148149690ff0013dcc157ba3bef0418b5
20c86200e6419f9dae009e3ab83f98a8cf12f3f9294fdd90bff2c6e1f2d7d45a0ca2fb33
2770577b4bd4d4d2adfce96471a37fc2d508191f6781fff7bd1f61e94de910846d85a54d
5bbf7e35822f581ba6b97c796c22cf18fd7e88878fb70930b6231aa9f5c28e1bf2743694
b96bda614e6e539bc00f031463ccb8fa382d1016a06033d465e3bc2ed78e687efa9b3f30
58ae04453f4e35aa1b349867ffe3d06a50be33c089f7d0b219e7af5e9dad819ac9055898
7a5020a0be831adfaa36a94ec98d96ab52a088d3a805445402d9538102688b7e376f468f
260af0d79c94e41487dc9b2b9dd816793f1446fb4e2fc8154cc4c23fc025a79ecf2b0aa3
b070b93b577f6f6c8a3db5b17cc9837eb09fbe428ebe53cd3a3801f1ae760079d981802d
5d4328d23c3b3f1d2ddb4417b917a71c652c27d31c356464c04f2ce7bbb5f9f17c809d5e
6c38a5799424cf5e553e6d6438f65ee7cde090e0301a6a2c9d4e3a2a27ae25dd1f439ddf
12ae78b02ca7dcfc7460dcffbdfed827909791ab148ee7c3a99254bc9a21171bca190c2f
8f3d7fb6d67b619fcec273647612404585c4fce20a98c2cfe81ccc7f254b1b2d1d7512a4
6da21b47a2f557dc59ec9066e3b948f371a5bcd75b892c98f882569baa48c23ffc80e215
70d161c843712216cb7609eb68af2fa8383110160801ee531d24873286555aea30c72e21
39ead824bb5b6d4477d9002d63d884e9564e5f826e0781fc55310801c5286a7d5f8d0372
e4e8fe9b3c2ed48ea0547b656b5b24487fea6f23d17efa0b5e0b9096a7f87d8c135f19d3
62e54dea246e6627d65dd191deed66f468f08934e0af6f2894085a4dcdc3a5b210d88e24
e66e10b4771e181ee99b1084f92cacd2cc92e6f708790c0e2ff1b4ca8238f1d4b241d15d
c40545478af91bc275b793d628ed2bad15b45811ab2aba598dfbb1564a06802b7e7b05ba
0c6341c7304ba66ee5ad215d1ac66ca1f18fb50d6fc55459b6938debc4458407fb3f8746
d19ca0e9656eb3c63c9a9710413c427ebff09f4f0c85f0f9614248a3a1b1c42ff4eb0b5d
08b6b0f25e82afcb00a42e455ebf1db25e6efa284bcebe309752b33b43d25f68c2f58bb3
08652031fe9b3b9c0b2736093c07e83a9a544f48de158f67aea65e790af0d6997d7dc235
536ca3f03db0e6bc3f5d57909c034f9a160e5a652b87c29c4ba5ea72c7f880b871eff383
edda30255edf0d95417bdd5f831ba520508128824f491c996a4c93164fec03500c6c79bd
eb9927b5a4ba8eb28f114191f0b869ad71303451d963fee7ae4e7a29293af1437564cf24
495d80a124539d84d2822f5c35daadb28e588bc5da8d93c777f79024fafa5291fb5121d4
77c4a274f57247b89e357263341d22fab247f5110b678f1e859c9c9acd65cdc1b9e1a66c
08f4c66a9d772510036b0e52c2d7f909acfb7d8083f03439550f8adc4aa12f4dff80d236
25aa62d9096b80650885ee9aa1d131934953847695698d2dc6c8179c473a0b127833d535
125f29a4a00868d61b6ca502eef753944082657867dc206134aa0d335ba8d4f6e9261993
a01a8eb0e65fa0900e6914899e100adad3f2b46cf972805a2fe6145a060ccd75cf9d8b6a
378397309f7727ab3df4ebc7617e42337614ee04607788107aedbf1e75fd36fe722d5ecd
98e7cabaa969620d8cc45bdfd9993cd8837debb0bd1c424291c66802d0dae3b201488f53
da2dae9f5c011ebf8aad7c764e9850dfc48e9de59954c768e598c627cbd0de04881ce1c7
cb666dc574b85043e2dab7ccc9544dd4bf1e1c6dfb6abb9d8363c59d8ff22bd6e4a97e99
d1c506845bbdc1ffd330e93a58dfe9fe049d4d57bde206706d16779da1c2ec95cb1e6492
69f1d4a227488fb88558730bca39131f9474f3d88dda42c801f42272f23a3c79fe7ac090
d5ac3dbcc1c091db0b2772b06c742b3cb6f0a2b2067c7cae3be62b9993fe69c339ac4059
3088532ba14213d4157fdf825e64e299f9ebd93a7a9f7071251b3cebfd77c14a6ca878b9
40cd0bd85223d2a06e8c40270d9e46ac8302416a40f1a735272df4e0e3a01144177fea39
4618d6bae2599a60aa2b07d700ac5d95c6591d5a3a50e2b6b1707e51920b9b4f46b8d270
44810d31417e78f9ad09d467c55181a42e548185c2c96807226a6e4326786767e22d4453
7375b4c17cd2d24f71841e987e6088a66f19b3104fa0e510815cb6cf6379752da323c394
9900b016529199250a6dc6f15900a13d8de9daec83eef3a000ba09339e2e057689b7f140
7b9008c2df9a2534e3a98b6537a367df8ab7218b39d0a2319d497414170952e5680e3320
357d22adeb8158453f0e5d5d78cb10e565374118379854ee9ea17966574128a77aef65a6
58dc040eb4c2e716552bfe82d359d521337ef8ded3c29976b4da5a5a684f9531082ce1ff
be1d5cca6b6869c8087d3a84a325bcc234c5b7f342cdad5c7917046ee5bc410e4acf06e1
28f6a0b636f6f308c8698a2bbe7023aa613b4c506f4f7b2ecb60f242821ab68b7d3a7781
31f0b763fd24eb4b0c16895b17cef26c7630c59eb4a80ac2bf59c27490fac4fc9fd59a1e
f83f6764de9ddf12ae78a298eb15fa5a1cceed3a822a47b537e596b17853933acf4949d3
07bfb7f94953a25c4bc9e259845f449060577cb1a2e49c598d2b2c2cfeba0ba9b8bb2b45
7ab8b77297f6af323a0ef9898e2a741c8d1cbda6c26be3e220904f5fc674e9ae9ba74c2d
28233e6666ff129c7534f029e19b8eca33e47ac1de9f235d154d4d6e339377b243e778f9
40eb0209d7ee701e6a8a10a21913833f15d0b400db8c4def1abdd1409e7d200f764446ae
d7adaf3c18544cc7df9478ca93e5312724d819fbb8d066a3e0d570eeb92fc38790063942
4633a3a95ae9a5d4e464544b36c410a7310308fef355772fb396ad8d9af8dad331cace91
b570487495760248a6940695f2df2755a46e43a0ab05488b754266bd4aca44797cdcb58c
e28481180f21b771f69031a5ead069f14770b4971f0fbf5e2d39152e34386e1de1ee45e0
bfffed5db35991b13d5dbffd3dc3f0ffb109d3afba256535db0d1399bffefc89b24a1e47
9d9683e5ca1130d866cc024dac71d76bb4559e5b59ead05b119eb22e766517e3c3ff46fb
cb7a79ccb83daaa56dec5a73fa67aaa86b75dc15a91fb3547fb6d948914172e830500793
355543b7f9168758d10bfe6d9ee3e06cf60c4696834ab53f96182d1e933957bfc90a8d1b
aaf950c6280f0bea1c673791c229dbc0823acb366ebfe81a673ca92beca15b0c3a90f4a0
070158e44f8db275dbb0d367e4348bb40a76eb162955d85b422cd58b73ae24e7b8ccd9cb
034e7ee262b60b0c5e6afbfb993f6da0c7c591bf37c950668a30344e1bd76378be650a47
de64887e5b452420d4f534e088601b07537e961eda0dfb620061cdbdb5da9a1c878661d6
c268e616e2a3ef2a1f78fd7c0683eb8bbf9c05bcb1145f804de68015af3c99217fc3a093
a998f9e15d68536efa550355d1e9be6a4b50e9f3632481503a84e31a58e37a0d3e38d12e
7b9f648abea3593a5ef794ba63fba27c85d03fc54dd68bb4fde71a27d0e40c028e6ea1d8
a23cf84aea41371cef519256ea0255858ffbb8f9f4e7c17101b775cdd274ec29056de62a
2c129336533e10e1c0c24f34392e4c7556e8d086e4cb3dcd04415653f99cd7390d268c3e
db2d5de0d5ab2a1931591455e9db602cdf66a625f74fa29443b80269d35fe8406cfeef6b
ce8c50f6b82485eb62af980b44a055e1f4ca90ee391aaae275c6c06e2ead02ff96c83bbe
e311ccf9bad716307adaae15e91d2e2624571c3b42c35963ad383ba01abb189a4e7ce704
a485f6de881644e71286680f4ecb14bd2c67dadf0c03fdbfcbd2ad17c0c6c4e09cdc5016
0ffb379ad305eb7b6e233fb54feb51193c59d722942c91080daeaeefcb5afe8d0a14b248
34ff8d9b09c0f5f6b0a67808ec5a6241cb8deb1d6c61d59ddf84f9524eb8477fbf5c8f62
614e33699a9860f8264daa697356bbc3ad0878cee9a5da12122cfa11feff74a9afa1371a
cd0a207e25de903981ff3abef7ea30822d5ec4b4cf92e2fa4dc7487f66dc16d5188261d4
dd343f12aa4c28d60abb468b6993e4da3482ec3ec1237808d4426e22b8aec439e1e2ef08
e66932527f1eeea3c2d47bb5fc3b2e8df588d24db57dd0b338763c7cad887ccb8e4eeed7
ee1959397bb04da6c5a0246c655baf73ab8081e7bd41c879d4d563605772e910712af3d0
262a770acb634bfcddf0f7fb4534765e3f39e331f7785dbe172708b5554bb501170f1bfe
905f6c84f07678a16aff27d8a53a028a9bc9ff00047ea007e249b0828aa6711e19ec6ab4
c974f286a02b7aa270eb70925ca03f149db8a14918a8a317f6d1a0507f2b0398b3bde4c1
4d1f1b5bc9db5663ead07c09a9bb9e733892583be89d309239b7b7c1c3e1aaccc5db0875
27f7b38b670103cfe910cfaa77f32985f5ece1aae10632652110bb6232751a4033d96fbb
ad785b55527857e45b30078a1d8fe028fb6b232059a6dc3ba02808ef1dbec833c75ccc59
5ace36bfbf3561c0bc5cca3178614160ee3f07a97592744390e124374526fc95857aeb9b
5b82dc5967cc22999ce7107d0e91b2710addbc3be26038b774d3b51dae7ebb7b1d152b3a
6c83769f4a4378510d45848142d240b851387768d62a4154211a3a4c10ffc1812e72adb3
78268e951fa6ee6dd51e3698b587573e5c957443aa27cd5f7760183e68f35a669b46e03f
20cde8b682f299249f6e5110efe8bac98bac8bbf4249642d883aed16d532b013d26c1993
944668d53c263a76f207f97393261234a6dee99004c58a9c768dad1f6b99ae3409a878e5
0e5a6e620aad89fdff3429586e70c9b4a2aad143a86da640d7883df67656535adb1239ee
afc4781a548f7194378a44d54bba121512faf13d41d2f499c6af8904c093eba0dfd2165a
318ae9440329adc10d00c550ffebe017c04a959137d5b8471b298693ae34045120ad179f
380e64c59c0a78999004fd610ab2057d31e4fa784976645944cf265d23245e724e3893ce
593d2bc10451f5db760db0b45425f7828269276c8dc0b505568c6bde61aa085e81af5b62
58b0e5364d74c45ca931224abad4b5573a574feb6fcf179c02c5fe8e4be111bccfbc120b
7f0251beecfb7b6133006bcf5d14613db7c05c0ada336db87071adefb7ac90ca962e86a4
cdc37c1078a4cf4ca6ce04e4ac60bfa171a3f7933da59dbeebca85a2b031bd5b3991db63
4d5ed366a14e6c19c617c562b85f64092bef962f8ab97941cd2ce98c0c1a9d3b20e01f83
1c400aa3ee868ce66ebc86ca12d312a5ab8980f77e8b7480fdee3e77a3e1214a0bd5e916
81630a210ed5fbba1dc2103abb30f3f929abdd5440436d696bb20ad88a200b97a5b179b4
112d8d3af851729dae9fae45e76a8a626a6c2636c1a4e27e03233bc16ed085302b283ac2
669b8de8e367d9dd5e3ff7f93119a3666d1d93a602ab86e310c899804e1c5d0bebefc825
b521fb8b3f9c25471121b384607932cfec3418d7b8702cb09688854e67d825d48f336b09
88fa6d36eb7e104e55dc3e3619605bd0b07d59884eae20037666c3d97856c909ac79876b
d77afec0b961cbdf4467c252e20f5cfb88745ea60604bd45ebeabc19bf88db313f9d6f6e
7f11ed03bd618bc9c456f445fcc4aba3301cbfd2a9197529c813a31823ff4bd1a01135cb
a60f8e925b1e7e40aba879fe6fe9d3fe8117ec99449013a22363b208d956fe975f58b152
4460fb89d598dd7537b584dad6b791c5d74f93689b935dd6d095401e07e608bc945af3e9
0d843c99bc29c767f51f9d17a29b0acd3a78a44d8f35355df92de55b442f8a2c3b9f0f0a
c101c1b63c6c98d74e20c61f1129c45704ca43bbb70975b6e4cabf2bd7542e7f216a6b35
7ab83e11f85f22d8dfe4efef6c31e69de2c559202e1b7e13d9588f6bbf44092583a38537
8d9128be52caa5cfeaed45a65ffbc65d5c6e18c0a1a1457d471d33bbca8f46dfb757e8c1
268fd29757ad58190b1406c998044574425e503dbb40c8531dc7b1ce68c63adcfc300f59
ca4baaaeabb073003513facabbcc8b21c8dc634eb6fa3741b7fcadd7bd8a547e90d47776
dbe4cfc8446f2f91ca142f9bac76afaf644f705befa7b74ff642b272b25a56a653f4fe9f
5a4edda6a7b64eb44ef85585765a08d2234253d6bd1d3f2d96d314accd176aafeb9956c6
2cf00c5ccf3da138208dcd44a9d38b8f99552c4506038e472bfb41276cb69f5165545fce
344a3618caead75a3f0d45fde16c1520f36044e78a1cf0da85565a1bca6c9260a71af76a
2f32252278ffb2e17f68455104ae610b4c59a0e72966fc3a35af5d1178cc5f164b84f410
684e650c9463953ba6151d64edc024da98ff811fe46b062ff5e1c95d4d4812fac79c680a
95faf90aed202f07e62f6483665e5a1403cbc350433dd3aa52f090ac56660385af076d5d
6267d7f7d83bf5ed70833260d1658c7c3292ffc91bb80150d847f59f79b95a3428dd288e
3115cc53cad807de81ee1e5b6d225c9501bd6011f334ac27126acf3c43ef76d62a8544a4
d3889ee021c2790de38c1d265408e2d5b800a729e15f5942990ba80df7220da41f3bcbf4
bf37c25ec8156166f013a423fda713e287bf5a6e60a357bbf88bfeacb3d76e0aac7d45b2
f42904e918e03977b4834d09cf8c3a74f1588231f28fff5cb5544b28b51842fd47ba1182
6944d67fb070d85f13a0bde06085c76fb18b782fc4c50aa289c6fe4278e44cd7ed8a88be
792241c0182265bde90f078cbd5e3d879faeada693878c70242e5b9dad586b44665c0dde
fde014ca1cc8fcf64c7f02c450b44ff1626e156e6c0eafae159ead2d56150ca3c9c2c118
2721b8a6f4b66044d90c63a7a6451ba7acd103340ae16b9581ea0fe77dbe9242fb54f14c
8afa299f08cd8951bc7ef8485cbf11d0ccf674fe5085645be1c7f95a39107d3c449edece
7f2eb62577d630cbc89ceb8e514eee18d8af6d298a9275485acab0f961628eaab484b2bd
fad80d23b7c51f4f682ca08c568d896d1ea28082274284f8d3663e33170fbb3b6c20c060
953461f93580321120b64b4af4d14bf8bd641b70d536a3d12f972f2179fd86156d59c740
34fd9df750a429f54b0655f248e90d64c0a740c592b0e41808800e4f99a364fa3fd46b74
1a62928384558ed7795fefebbaea5b378e22c807eed4aae228e50396dcc4f07eea88d372
53e1b08a7d8628cfd9035da5234a42650722ac83748ae177d3e3a4c2acf6b8a451051d9f
5e7c0ed561b20a757cf195c40f29aeef908cb37ad4998fae597a6a439b1e95573929d38d
99fcdbb7d0921d5a59031b5c9297dc3ae2e5b88b577e9c31467d7f57eaac85dca2dc7572
7f0959e2c47168b5e238161ec7fad56f96cc4f48b3f72c99cf5599d2e94b45eb3ee6a9b1
c639fe8ae519c73c9a70e305c147583a41a544a0a56aa639b6ce582120450b19cfa8ba56
e75522bec6a5da1eaf39fd0ad7809f1c983dd7eaa43089357721a929d03e896693c0cc4e
61805db7c5327de9bb0d45223025ffff634b632e1a924c387090e32dd48a675c2d8de78e
1308763c2be51145337f9e12c403a23baddc5fec3acdcb66518072a7e8ef315bc769c9cd
a5926a8a42ce33de36665aaf58c8495901ecb260b4caea8ec55bda76f6ead1dd4a380513
3babdd8a04193ed87cb1833e6abe2e44731b805cf291bd246abf0ce786b7b015d4842813
a7662fb51e1ef43dea0c71c59fc1c3953f507fe7e3b0f20e50fc3d233e756b669acca61d
7918b4159c40c423c9f4b7e62c940e4b49a9e82d8cc3be71eff620c9d04e78043f73d9e3
4988f294dd17909489fd45d4ea54cc30e00c41883deae77fe2fc591f8ab3ea5ab2a9d369
e3b47db279c7c034f9bcd2f599d0b02398353c8f6b9b470b956bc5e23367686e866bb406
b62b483a4b38d289d5005918558c2d9fdfc96358a774a93d94dcf0e8a048a75f23e94e0f
abe502e944b10fdd48484fe9365e4ad58ba8bf5641ab36b2b216fe8913802bc4819e107e
1beaf0459dfbf2996a4a008c74c0328db677d50c48665a89cf17fb8aec552d1ed599e58a
c8820ce56be8a418182ebc22f76c14a9156788a903944316cfc8d53e315b9dcdb652ce71
ebe0cc293bc223c62fa405e042778ca2c935c68eac7ab0eab60ae2e2683772eb72ead85d
31e0bb56ff2f6062d6eae9d9f315db34820a6c923a603ba27f116c28481ed72765a6a20d
bea1651a4d68c345efec19eceb84ab5afac6632eed95042c2053128da41a4586ee17d871
3959f55246e5d90160ef4d917cb387271b5df527e7391de490d2c65eef4e87f8e83885a4
1e3eba65b7d1ee3f31dfa5b82be6a098272579dfa06e0198f3e6b7387dbc9b0b93a3b8bf
03325470f1e29e3d8bc295a7259d84cec206d6a518297c208952139b6568f597265aa3eb
906ca05d329b72bdd4205dad973bfb515984d4f2d05a571eed9a115a34a952ea9ad43654
b0b4c3d54629d06e5fa0785e9d23505693f05995a3112c46803cc158845c362eaa909b4d
df0d8c6bdf2da03e2ce126ca38ddbb1291d446ca332285e800407b141e6c93579ce92bba
e9f38a5e2f143d66812342cd09985e7acc426f2b4972f00dd167bc40523e0374a8cecb6f
6e78b22942a093b8fefd2c4ad4fc80d9846486ebaf64aa53de290d6fa5e3d37a0301a063
c05bb8865990c424d09127c1d7d573dab79ced15baccdb30ad54ae249418ece787d0d19b
fa3d3809a8cbc482da11ef3e74ba86c5ea722ab9eb625ba6450bd200a94a7faccf6b060f
31202adf03bcde4a8e22736819241da1be46e3c86517b336d7b462f7f71da43728c52600
d045ac319a19fcb72a9fabf360fbacfe8d67bf7f98300a885f82c76943eab31705718439
dabba1452ea12f93d1475724be62a5e93962e9cec41941dcd2f6ce4b7d17dfedbfd21d2d
6ffd0d9aaf33ee7323e15434b25742c3e4874df7936c8bc8c0ce68ff14783dc8ff8d4145
924c98c1d052c1e371e49be872979ebccbb3d79392133b536d426bc94d0998dd37422d78
37fec43e96851489e98f65b07ab41df4a87b1d4161fb3fa95078778783453117335498c5
9f47820d045252f5a1aef30fd1255359e9456240db63fdcccda40085728f080b2d906a20
7269a44b7e1687bdb9c5c45cf9c7735e006d88d3681c4ced67b59c0623bb4fbb45da3531
86086b4806a440caa4c05417f994f009ef998b1c742bed4dab364a19db4a2c5966476ab4
672d6db8bb90b2bac77b2d87ade95fe82f46e6800af321724c7518ff0dd1b67c2892d03b
a872a3053f58d31603a80576c3837dfc10448a4b9c58745bbe43f40ceea27ef481389bd9
472b7cd4c0802e0cf5a9ef076efa26d2c55d269bb525001c60a42e3acd031fa18c9151c8
32e8423776136df067767fa537c6164eb8a00794d1228b456c9fa5e3f511d6abfdea7ae9
b326c8dd49cfcd58a677cf4041b26687814873ed750a85fec0fa47c7fa0ae2632574a733
a2e8f2c16d201cf7cd06cdfdb6840d7ec47bdff6c0cd46886c1a73a6ebcc60b1e0d28ff3
b593df8c742c6d748e7297f00f1035271910354b2ca141ae0ffbfcc26c9e6a8012c0704f
dbeac89b8cb4c0737e49f3c610f245dd26c49469a1b7a0843a78bc38e9b8d387535fdb4c
35b77b54161db8f3a4d16771d8f251c7231809f5f90c1fca8d5f4067b8ef5f0d623ce0f5
717db696c6848a0caf714a85639ebef77c65cfa246923af0a2039698053eb425e1712248
d5f27816a9d9fb3dcbc356e472445c09d99d9fef0f2c17b6437f37060206c6ce943904a8
2e73dc24b230065323b78a054300383c00bcdbf28237a1957834a4f1dc28aa347bb7a4db
a944534698d5ce4c12f045373935f0b48ebb6b30f1c7943898554e68309e1f2ab3cf3865
9a3f850985c6c824d415e69c69623c1815429a99ace4dad17c1387947b348a6f4248bdd8
fb41cd37543f4ac05639f084a2205f5c4558cc8ce84a798ff7a2c30e7dadd9a7ab3a02fc
0a6571b79b26f203f8d8fbae1acfbb7da327dcd6f79ebabebfab1cd7592a91f944a59ab6
8c99a873df32ec4ca19c8ca07f27fc9c4f5f233836a9e184caac6c7a2b00a1fd39ede08d
1e4e6942b0481d4150949b59f946791b2f10c65eb0ca3f53bcacaa1b8d5f0d4a543605c4
df52371e9772cf8f8f73af626121a4ab89525aa10518a0d464e284de428bd4358e5981ea
a6ed1cf0f35cc990754e17ed303dace0841f5f5466ac8b74014b53dc54270bfc8bec0311
eb1589452ef4c450c92ae9252b8887edfdeeeda70c590c57c8f70ebdc24a0c12da1c68c8
6bac275230e9a15bb56d04bbe0269d09602000d05fa83e732eb7fd10af5a05b3f4e9ad65
9092de20fea605f0a3852697969e67adf1edfa86e0ba821f7dd946cb2ec2058ba756974f
d5f005af370f9328db4e517396d432836ab0f31e0ae650a42b39a0aa712c10a75b4fa54b
a6e4819ddb72f97823aa90313e70684f8de0e6881adcf34b1ca493232d33395f3af93704
9fa1dc8cb29d901232e3356482011f9b20a9fd43e9eab88d12478c667d5b1180de42d408
1481e8441bc45cc3d3791a10c091fe2934ee3d8f400f97513d605f8d85e42fc7c60a8aaa
a0e07219634223e80a7ece91adc9ba86b6738ce9514c1465e920faf16b1a6eb9dcab90eb
a02e3420b69072512c5aab9f35bcaccd33d65e896e8cb91bb1e33a5112a4f5da0d1134ba
11f72b0c711bd89cf7f16563aa35d31bb362f74ca1f714419700ef7a3c6f01684bfecfef
b86d5cf0495992310412aee40ca403b1cdf70bbc362660d92c40a4f67bb63e3404747a12
083529963760ef0323d09b70e0e2a47b5ef15b5defb8f4c9a2ce5206b4c73ed9546ea65f
3c7da4fb4b3c568583413a8702b09f7fab303cbccee02c76c3214bc0e80fb1cf0431272e
a70c4fee6ce24a3dcade663f5194791fd01e10b19e1d8ff032ce09905bc97bc6e0429ebb
6a2d0d5f0afab278508ea4b3967d22d9286f87e29abe43bfc5dc14b3c70aa99cbf58e7b9
e31ad51a24fab8f510ea45b23852e1bd1253dc81437bef70153794296077a243b5d7ad80
238554e078155b01de11e1bb130f5d62d23ad4730f2e22570f0e5eb2548fd347ddc4b179
af777aac8820c89fda6f247eb5372bc652195d3414744ccc67d1cdeb899e541430f8cde8
05777a0fad0f5ca6910ffeadfb46bd15945cbe05330e5ecae8edd1dbd2afb04dfa942a0b
a000418450d8a2a103fdfed1674351a81285b0926d500c5b340db25ae9ce496819159c15
3610c41a69eaa30b2a16cd7215e033d8d407dca41d3845acb8f8871e3862ccb057f00e4f
596b9187482a1cf6cabacc244947594d83b2b0f133f35f1e7e7b1d994cc0f895ffb09863
2632813ad87f87bff6df2774a4ad8a6711c07ce0abef219cbcaeb7f6f2208d65f69c873c
ac94da9e2e5a74cf5f108c034c11e831944664872253b494907259a8dc088fecfff98a8d
ce882ae4890b7f2ab7250b2f0d110934227b4f1479117d74d23fae5f6a0469ca54f8d110
c01a20046c192859e3446ff16be80645cf1cc4798a22b1faa6e82a5c2dd7d730d440ae52
62f900b3599f8a37cbc388b2d72290b59404f4cf2a2f8eae7af34452c5f952b30f02df91
4fcf901b9716d3794df495f7dd1ba13fc55f5573bacb9d1b819b3840ab8e639cf143b567
e2af6953b430b2f0aaaab4d9ce4ac04ebe614381d1f93a5a425ee874d9d8bf0ea4ddd160
5fedf8c953c0051007f88c6d3f7ffa685461df9fce63f1d30696aebe3507c2c1e2d092c6
26e6312118cca48fd9884f9f4a500e9ca484047c069e2320f72aab5fa3c825d7a4ad15c2
bb176552a0b590cdb1429b45bd969702530d4e2cf852be0b49650854b6a3bfbeaa83ae2b
a0d16b9b357d12ba78ce3294ccd0ab7f3c2b69aef7e65dd6533f2c7e84d27a7afdcf1cdf
acade642434863c070bf99773e88c39c1f6c7ab1a2de6254371296eb61408851cb4cf390
f9a5b194b9f6a856af2e4fd2159c29cafcf4e12bc275050861e521816da5a60d439ed7a6
5bc3c00e76356c3677ad137fecc87efc01f452651dffa14eed5659534ce4e573de9c4fb5
09ad8a77892627278c1a99f568b151d11fd7fce772b7aad0927973b6b8e01d57f265b3ab
328a07cee2fa27a43d9931c7cb6263a27c95dc85d8d0c9202aae7006eb843a55b80d90fa
cc26a4b1b8c0f88fca60793b66c370872cae4e91ec934b9a472422780fa10a3b568d3cea
e69a41859d72a0e343135c3d6093a8645300f71d4f7079e6be5dadecf467cfb17bb32fcb
bbc555ce6495510fcda329055d8a45de7e4771fa84df0624903f53e4b44a94b13d5744bc
d65c350127bf29aa9b450eb6ed96032d22676dff0ab70e137fa0be81499f3c4d834137ff
6302e535fccdd96454fd8f4fc27b318bc0748042314c789cd15e919acfa0de4154a55aaf
e1ba34364c292d149ec04eefed8bd46438f020f3a354307f1e4cdfe62d29174269e6b183
8075ec625b91ef215a404e621cc6a82f88037c0b40f62364665682e8f29ef985875bd691
9290c2cf2c1145aaa84eacd8232147b657944f34ab526c4fb7b905282a9838aa203849e1
011e1f0ec72893804b56bf58cb31a8b1da95861021d8be840fe80a12c2d9b16e56bbfed0
1f32869e94f29dbc0bcabde1694d2cd00ce6e741572c9eda0c7e9f4b65ba22bc05f6a289
f528f0b0166fd89a3ab5e06790797e4e5f492eda50f58c4b05e9dd5da756d0673afaf182
ab8901ff5cca3a42d79d0d3e2383360766e907c916b0008a5ea22629b3df661a21c9368d
3a164a0a2e6fe0d2333ba1a4da5c40bbb84866ca918fb2224e487c6e07609d730ab84899
ab993fd744741e23d004577a75ca4a8a014ae052d4f77fb26927d880fe7b700a2ebdbf0c
bc794e085037470e190c337ee53250a16ffe1c718bd49c768c81e0a68dc4f4e93ef88368
b6752f13c1e6a1f03072b76ffd5f0fc180446f97d70cbdb77c0413987d2fd7de54eae2a8
edd787b67f57406d9b31ae4d43ce7e8ac8a6eb7097dc1bcb9db6737eee18cd5483067de6
edcb2998b93578929f8f0ad82a9e72307c4b52b987b4fb34536df8789500c54abf9f8dc7
31c07572d71eff4017170c9a7bf2151dd72060d4895ed6c05126038f03af9526685d39e4
31e397719ebf63ed73ade70d440f5e8475229e12bcfa1aee89be6fadad6cc6cd5c17b9bd
10f2aeea9a22f691a66bd1bbed48c6db6b19c844a13680bfddeff193a3f455152b0e24e0
7038d31f828b6450fa9d1ee9e99456c9d52ac39a90fc767cbf9f9921b8bacea5607379a5
8a731f2670bb8668d9a7cfc4799f22a4287fc4f127cb5340b92cde8e0ff908011a9cdb2e
3cd95ff2d0c722b7deaa96900adc1a6185f34b6f44abf855b5eb11724587ae0d578bd6ce
dfdbc09bdb1e3bd2d362e2e31e11221971096ee3879b8f90b6231e66905d923128ce0cda
20880ebb8d8848ae256f6a30c95bcc950e694b7f1ea314714f0e4d73252bbcdaa9baea59
5bc42a56cfcf8cc5f9ff0c3afe1963307cf813b9567f2892a9886ddc294fc9b0a0b27608
49a2ee6533be1ae0011aa07c636c0a4a3bba3dac397f42da11e50be08b8b1930cd1c46be
eb3d870d640afffa10be866b35e6cb09d6a7a2fbc2816ff9e942d361f83aee56c67092fb
0fc8595853d89746a2691901a4fa326d855bca58b123985c581293556a8cf1269487ddf3
5789eba01daeed86d8e4f78c47e79408bf9e9649dc490626b8accf2bdaec7df12f10dab2
460e8510f65afbff6b6bc44fc9fe919fc828ba32ed67777bb7241179e76ef5101d521989
95616de136b77587e012ef01270ee39f6b813e3bd3b8df9de8f00ff5a2a01271b511a56b
51b7c43f298db6a7841a4eeea9d0090c22e93af3e452030554b2dc2bb1e51ae150e9a61d
f09709ea12637a24e58151a4f5682dce10b80c771fc765a093da03cde6de0b53a5d87c0d
3843fe998a6b34620799441ac392eee4672443f44703bdee1160558e983baf1936e597ac
18f9e89933661cea6eabd056b5682435834de60f0ab4480e22e54bfe563db4458bd22761
56edd70760b5886867aa4ada3a198909dbc9d7f93e142754397cd3a7c1858002afa965a2
8ee82a9b5178b31572a6df68927117cbc237cacad08ceb6cb7fe2033c307191316f9096e
a4a2871c8f1ad396305d8ea26ba56fe296c2d6c536d47d78ea5039c3cf8c209807363835
79ddc6a42204df99548efbfb110781a89c67da81e6427d661391c04405a9dca37403afcf
ed635ba81b22e7eb4650c286249394c263ac0d2486f9d0c174fa249b815ec9fd998c0d38
ebf8848de6d7bf9dadd95c53a0115d8f2b168f30c393f280db51f5c4f7bbb81eb45153e5
5392b234ca9d1b15ca4917a4294f4c6a5686c654f94f997ae0f84f21a187636a228784f3
776a845a65f0df72c70040f966c8ddbbe83511b0219c0d948082049c5cd809e707391cfe
f9546ffd759d82f2ea27d49ddc6b0310badcb81ccf42eaad973780b05a65f96582552ba6
a7d74af24a26dbe817035c6daccbcfc0a330c02fd9da62bb8de64e7b367377cdfbf12f6a
c97852d3bdadb8c775ad88a1ae7cc43a0e1a3c92cc766ed6aa55ce77b5e7cf0300c22561
2041e4d8aa5bbb775c41885d00cec08410338ee6b740710997a23689d03d80b1f4425169
b4537fb041646fdf10f21756b3abef8e9facc87d223017fe6b4db1259bcc4c5979feda05
b14f80781e8d57c3b46c9636a158e50ba960136bdad6304423b4ac7e09dd795dea312728
ec07b12ae81b4470b57f91c6719afd5f9013478f2cba516a07d823b46a46b76b9117fba5
8b18d40e60c177b111f5fb4159c4362a9a59511b4e6109f72879c0ed62c0dfb7a512df67
1b63656fefb06b7e18c956f77d76c9db1c3f1fb03cc8db45e92bfa6df55e9aea126b7b06
c86e4c896bb6052344ee57b328671f5aa7b2d0cd76de3de2f0c49f7f418925b4d0ae8007
bedb6460cad18872206ce48a6f3e567ab6a8e79c03ad67969565b5c35478360f68fe3b6e
fe8bec27dd45a3974ff8930d9a243a68b11c85c8fafffe9b3ddace20e194ddba26eed372
384d03ce6602ce35fe7cdf6e6aa9ab95dc8650b8b9d985b495b7fd90d7403dc9bf963d0b
0adee2e8f07fc0ad2d7b6e1cb74b503ab1c838186136ff33773291abb5243f5777ef2b4d
6462c67adfb0f2cd19d43c488f21555070836790b3862a72779e110b5799fcc0f2081e81
f07909611e7d52f55d68162be8244d7474bec6643c88cef348fd5193e190e59a0b644b3b
db89318b1fd4126374e01cf2cf15f3e6442254b12b34a07cba822b9a9238c7f677799e63
6c63d9a652ba6eb9ef964559ad61c3ecfa815cc4d34d376816be90164ce16a114dc53252
c29cd0c5d55cbf30a747017e070ae12a8b87d7e89963e879f67e5e6b061239d1cc7c1ca6
a9c45350417b85626e4ca35056f910997f43549b5a10e625322182dc70bc11c83a5c639e
7d382303e534ad7d86f63f36996de733355639839f0c7613461bb59f0f90b04c877166b4
73a7c8251b58cfb91c03637370e071fbbe3824165ad1fede8161a6b2bbf946ce8d49e387
7dd8a88a35d518a9dd5610fddfcc45270339dce0c2c804119309775b6d5fbd52a908a54d
d625452c36bc19fdd16920abbf01842657a179b8b41dc2019a0c14e32c07a0dd6242dd3e
1704a51e065861ab770ad0d4de5a2f1e94cc5adc5ec593bbfb23f43715cbf64513c0806d
f79cf1b1a17680a1e05072762935086dd90e4bf9be18b115264eecfbee19e71f43f60a0a
9d35e3a671a6016b0d77ccbf9692c969857ae8a5e1e6831c2d0e2f1c2fdab1aaa4387e21
afe834d15fda9dda3818d2575720aabf59db12e010c18bceb7e91478f5d5122adde3e9e4
939c1c6bdd2cb6cffabee8266f827c2884ef130beb91aeabbd5aeaa65e127e307b2db2c2
a5c8abdb66419825d92499bde5e52481e83ebe36959c1bc44ec77137d5c4efa7c0bd4a73
bed8bb517b8763590138b288c4babbecd5cadb9c939ba39ae9f5913914e21c44a36f4e45
d564acf861b5153751ea887370cff51799f5c25c394f7a23f931df2354ec3dee35125be4
2de9946a08ee3c85e472bc059351a0bc7152b8102e57e04b3765c59233fee88e87e6af48
c2e84828ad62bcc3630bd5e492722cc87cb7c98ff3c45986f4e03538b12942bbb4826950
552f588539f5d69471abe07790ed4e1898318df3850e2fef54a9bee76d77f1339a7db015
809fe7f603fc33e69e4b1dce2a2b1c0594c905e78ce1725e348165ad6ccc02cec661aa21
9c389988d3e4292cb2820b03686524a6fbb06a97e0277024e344d7e45730826419281a58
1bcfb659ac90e783d4129d7f0ff9c6fd6c0d4d55cd9e3758d0d53fc74f54912cc262b498
ff4da4036feb5fc57f09930ac6c12b5ba7268ea886d5d9145049772e05f3d399a2c5f73d
8e8c881bb05891341f3795ad530735c70f1fd911312d0367c015b7e8ce55bb8734730130
201d96177b8fd2df4949cadd076e884c8e876336f4874f78385a40943c41571d1d751050
507117379850d2a81ee5667183f457994d005c45be6fd869275fbd61af857988e66ae921
c76e9f41d1a684d5077df6e54ebcb28d8dea73bcb3cbbb5633ee330c40425ee992c83701
5ce222fe6d5fcfbb2ae667a4196791de69eeaffae13cd899837a11606beebff20e82b179
486ad6a6343abf315dea6203393b9fcf473c5c58ef132bbe1d232a148933753549fb5cf0
d3e1215376ecf7b622bf877c922f69fc85c4c1fdb6e55a5510af999fcfcd3d2da51ff725
738f5182586d40c2676c0c03b3eec76efcfa6bd6bd8c278ea6bd8e605f182ff6cba87571
a958eb71017293e5f1774bf8bb6be8a1238c208877205e664b7b1411c45e01cb2b115b45
c2d8460ea34bef06b25338b319f7cc8ad1e9e7726ce30b36529db7de057ba06b59fd350a
ff882e48264ae9e07554397a4110afd39fa4e0746b571bb5c1fb3d66e8d92cdf8ef0949e
ba2ff8245b44204fee1f4a864dc4668728c6263cc361207375564dea07929efcb247b517
dd0e5a4982d7d039bb06ee713a085f0a4d555ad97a00d4968da8da7d5b298e17ee449717
d69fde2f3100eb71d44cc7aa02c1d54846e058b66b5f15dd7fe9ea0efe8a674694ebfd36
8bd68fbfe577c525a623a01738e6b40e890e666fd819cef8b4a43ff8377054e5a547a5c2
a3aa712ca925e9572d12d234815a2e17a9b2b6175b85d36717a8c73e9a4100a63ad04b31
25056f91a75e14ab97bf3e0f4092b4a1a2518a126ff316d6c86d86dad28142252fda4d7d
fa6ff8341cecd41468bfdecb290540115214caf655505f3911e6008d8e07b726636d556b
aa12fd75ed4a5331ebdd28fe289cd48165934bb4e2da6c7af4bde53e1e1abfe74a667bc5
90d96056a973b026765bbfb2f88e3cc1c2a6fa3aee803449ac906221d1792cca0aa0f048
bac78d822b590a89757cee0d98952a7e110c1f392e033c7aa0784451c6c00c1e101eb6cf
cf5e29203d08ddbc804bcf6d7ad5c8c14b44cd2d663fa44afaa4430f1875b4a8ed39a4df
907c8ea03e91ed09870cce32496d284bf87bfdbf4d33c25cacdb33d7a0be9b79e0ea1c32
476add3693e250e38b9a4b7a2313976d4f76873dd04fe532b0cb06ea74befc1f4cda57f8
f445176e5e8b63857c645b16ea48f2fe47d1353f5d885a35d3c6df870a6502e15ea6a082
6fef2e4d41acb5af9d931683f5587bf7cfea5d08d8ed12d5b67575586538c41c71fcec99
499422d113c46a5ec86b44586cd44933f14fe1dd1c1cc93b58f3da5713652c7c56ae0045
ff0a9ea63f3268498ae7219369690a6ba53e4bcd4258155ad458f863b361dd2150e88866
ae9a7f4f374d4afd6aca1101c2268c7b088f4dedf03d0c9e75320cfa774484beb6432c35
d0cf46dd39f62c29ead9904a52619104d7e93bbb6b8afcd4c36d4f0483654b5a690e89c0
7f0bd5e0face4f0232083833280803d61c4245a9074e34b305953f3ead01c87789a19886
506e00054d15a6631b9a2074ff644b28272a6677c38d8181f93562743c9496f4a7f1f045
6a10f9fcae9df029bf7f88fef54df3a94d27bf0ae67d6d7fd8ac819ecc7b864cef018537
defca5b86962e76f273eb015432bcbd2b133879c80f0d72be399053bb6a01f6e0f888b45
df282382470f9e0b2f64fbc80f67be195f616a4c6a559bdffed3269470f3eb972448a158
5dc4bae2f5a4b5497667fc578caee7501e51f78e4a95e280effbcf11de4627b7e00e47d4
4414e87ecba26e5aa7b4bbb65e37d1d8c978e6cc94dc1621db262fde480036fb0975b3f5
bf345046222de3f2ad4d17208bdddba9685e8996d3aed82329e2dfc2d24b80ab9e2ac810
2d5b2aa9975665b7c296b1b0bc16263c9137d3c5d09fdfc553bb35aa2972c4fc82d71412
f5fb2a59f5d05afd851a62903340ef7c30769ed0432283298a418d262158656c16a08dcc
371753384ba923dc028d20a860581cac1f88f82aa44362a13ec865b8c101743d76866002
28303a3d4f0887f4e394a4edbd265461d06030a83a39c7163ceb1699ba861ab3ec94e239
106492882c04d7a5c1da1c96d25f832bec702d78c915512526a2531409ea45255790c0a1
4ffce1c8d883ca96b6e60640357c616cf629396dda7f2bb283274cb4b9e87d1636bd5a4d
89ec0a8a1250a7858eb31dde38b34b307e44a4a525f63d40d24cfc197d088c7f4cbf9dfd
0336670761bfda27c07d06501750ec37064db9939948ba365f9fb9ec5afc6d051e56dd46
ccf4a3f383ba6bc2166a5e98fdd625e6709f24184efa300b7c5bc1ca5abe53035044be27
30ddd0139fa8da779407b8f83faada7f66ff547b625545ccd0752004bd7409e2088b7cb5
986cc454f6f2d176707672e6364400e4dfff4a769782730fbcbd2272ff976c653344aa24
25cfd8643a96c78f6dd73f05da9eb8570f2390080714291951b4b5e49aeb48b1b75440a0
107c8d18b3d89f00788ba70f554dbedae945dac1312771e5822be7298c3f346ead63b1f2
02619c286ff9eeee3ed1136f89ff2786852bb876079e880b97998eda803b8270bc190fda
283d3ccf8e9ff4a7e9c04384732c059335345389ab500abba8657559d264ac454a294bab
3462bce14500f30de0cf435b83bf37de51f9c5a650aa5b2bd924ec485613a0ad5830a49b
2b37b43076e7a8b002ebe112974b4bb9e42db025b72923f69a2fc2fca8af9eb53ac2e8a6
15e51cd8ea9755a4d0eddc3ceb103519bbc76a3ed88ad6aa00ea955f91032878c7aeefc8
576dc060e20994705f0630ed366b57e25169b49f7f3d33d55ac4ce4f810ff41442d112b2
c4dd1004c737ab2a01d7b8ca83c3ebf8b52f5b9d6794ddbbd28295b556a6a647346fad08
9cf1c771012b3be12a865f71c07e20fc2df5587b93a0aaf71c89c3c4b108c38279bff60f
09e8f78738aa9889da851edcec541d802ae366aecbc9842ab409307a83e2e9c93ca19a2e
39d13be568f00c093a280eeacf0ac4786fdcada0dd26e14897dc59f39358b420b9baea94
7a428c8b02ebdf1a2dfafd67d2b66aaa01d943934cdbc518610b64ab6c7e32f8b7f1d776
d6b89b6ee8ea2950abad9db87df710729f6eb7b06491efb2218546a142f683bcbc223f78
87122905baddd90686b559c941ad7b77abaed51eacaf93eacf5a8a8436315d466ebbe153
de42b61e4c0d983706b766930024c205201f93130c4b73e7cfcf91e46b37b0db4681835c
7ef7e843fe4f54313ebde1d07cdbc93b846f0a5701e5b33d3ce8c3ecb5aaa492e8612b10
322e64a05d2a4df5a53ffc8fcc691c69c3545e6cae4c1e76906ead105821d0a95c830989
5b19799d69f8b2f01ab78a0e60bce75cf4a717bf562e722ba62cd8090ca67d2653e87df0
44c79d2caf1ab096d837f860a2823aa9ad9c59d1c686cbd47f788fdd7c2ebb6198306d28
0c23c1a24836997313d9a4b1db70f19684859a01a476d759094d0876b9a789f03a07d427
6edcc5293e641b711f7dd7ddcd129876b0d62aec689a96780e641cc9be5ddfcf5213b631
a3c49e78ab7b7c1a0d5a2501a92978a67a049cf03df7305d4b73d9203ee971111a5b8e13
45e12d1c958a205303f507f0a1ba3a047ced1ad04e952bde72587ac26d43a11a1891aeb0
205258d3ee498b8efd30df0064c3e598662ebd42d1f1daf039e6b23023b54aaf97cf046d
78daf7c326f3b1cff9b9a839b6c28bba355edac9529a8a1d90b2ce43364f41668f413bce
879094e6acb55174b590d600bea7d3f257772b99461cc9e0613e8bb947643bd75bee35f6
d14714c7de0ede4ab18925833a29272f722c9049c8c1ef234af2d72fd5f9a6f6e6f1d648
1e6e1ef3b6cd0ba4a3fad2df3cf6dfcc92a38af24e222bb71f1449822f3b8997e5834ea1
fde36209a7286e63cb3f4d15ae356d71d32f348c3f9b962af1668f650c4a34b0dd2c749e
caab26c34059715b293a0c79cd0a939e64ebdb253432a4352b0aba4b096230db99ce8425
8ba23bb76477916530eb563963326b7de8228883f37fa1d891c58eb546624e175ee20c52
7e46691189a563321b2f41b17c794f296281dc3a76f6e2d19f09782497966e52df5aebb0
5697b44b99736748facaeb5fc445b4d39273afba685ef9789b1f826c7d3331f70a12028c
63d946dfd3d564bd33bde4385d4ebae8791779b503f1ade21f1431cc277c4e84529df075
c61c31ccfc8fb8bba36996ef6cb2fb97952406f758a4f90e27ed0e7480b4712c0e79e72b
7e223d68ec31ca33c99a571dea0c594dfe1d97f2d1c0736bfdb6f7fee2dd03c6bf958587
a7af16d76a382da2cc1894ac125945b01e6aa2ef01490a03b23dd56c94c93f2188f7dc63
27458e8eaad4e477776272769c080ade4bdf2a4f3884756b3ab199c5bfec0c1570e646ee
ca766869ba972c1f3b2af32643b37790839b219f4421f0135917cda9426f8e7bd40dc008
d488b3483cea4f5ff3e4638c91d2364d9e884b6bc79ea7489ae0689413b0c1c5bd64faa1
601841ce418b6230b83f25304ed973f500265943904db5d1de5a5b52292c257066a28d58
bed4373baed47041f58ec50cc29c1c1e584af730fe007d4caa555a1b7f1cd8ae4715b234
ba62ce3de715e2a5c85123274c4a41b27937edaf797a9ae023e777fa65e0424dbdcf42ae
6b9b8cec027af031ac346ec02d9690cf795b8a014d26a099d2097f3f789ea831d9edc6c5
6d6a36c63ea0226d503d14e734782d4b0486a2ab957365af566f92aad0c7c0d10eb0a5e4
f234abdc379352fb6843555c27165891cdd0c9fad71a6226222a950f926f4ffd2841e294
c22dce36a95452902f5eadd1071b9a6115ba55d49b1b3b6c2099de6de11b5f6270c7f7a9
8b808871f8c5e2161769f5ff99d56755805ea6a19a838a5970cf9b9e1f1aac74907662ae
fee14f89dfea7ac9c01d2dc1f0f1d4d75a2830cf5e88a34fcbdda2e99939cb48d040b3b2
553c8c9a6ae840f9a8b211400d8fd44bc2d7b4f0df9d881cd8bd4f9280b9d97a4063ae08
a344f37567faa5395742d2d202a53a5c9da8de9d562f994e8be1b73a7fdca2bdbec0a9ff
b2633621af080463353323aaef551cbc5dd66d0385f4697922ea5d87ef3f0c409255018f
00d3129b5ca778532b67674371aa3de31cd43e850761503f22f85fc3e170ad08c5be6b4d
9f434c44b4fcff3e13ebd4daf1339a46b37c463a4039697c860853b7b6eb7539a30b64e4
707f48c9829fb7cdad7adb5b0c2676f187df4ba21e514c6cb20af6b317b1bb4fdd9284a1
f7a4151848ab26fae58479b0515f80deb6b9850f2745c4d870c1d0fc9a064a0a6e3443ee
8132f096f1e31e224d8ae5fc057bbb22110eab1018a246c653a61430c574069f1c327f8a
4f8be0f3f75e203f0038135dab22c8e9a851d20260bd75283bac346617ab5fdd7febcb5c
3553e07d8cb801aa89d87448c5a33742fa5df5af33d6fbcf31a8ec44555c28bd4d7f73bc
5021c34773a739573030cfb2f615d40fe16e237e5ee043ba4690154758e083a0fe0cf9ad
119334dba966f235133c04a95d77de2949dcdcb37f17027792da48abb57d7e81e801d36a
b6dbcef1da561e6e9595fbe6a225ab388248e984ca958e13a653a92c706f8989d35db0e0
989f6b5bf31a550886ea2cd3ccf35551d8a37389fd6ab7b5724a752c6c3fdb07ffa82e00
cbf36077fdd92d65723f47d7b09cb1c61130d88ce971e0779863679c14b8d67a12781e9b
ce5808d81a209c1d5f88cccd45797b1409aa83fbedbb21bf1b3760ce287ec40cc51a6214
e76f25933680325c0580b0cf6a3c5f683c5a53b2912b2970b4f3bfa0e60bafb543de3ff9
38bc9bb49f19403355b63af31c199562b4a80f1be4240a5cf2edde0ca06060675e80a9dd
b886b75e68f14e132aa2b3149fb53f6cc4ce3d5f6e80b1eabe6bb2ae48058202c84edbfc
2651ee73fd4064354daf2a58c34c5227fe7cc8be8a5341771f66efc7419f56e8f2b02d86
a9f664146122375b0926753b722c90734128112f3bfcf2fc16d0a56a7562d73530d63f7f
7526b74250e79b4f7727db5b170e13c780cc8c45622addafbba63d48a2b4ad90ed91f1c7
d7998152321c9ed812799dfac83826d346483b3683949b50a775b10e4803bda72f4a26cd
747c41be8abc0065464f19c50da7583cf4faaf953b550cda7615ff13dea104134af9eaa8
1c2145f9675dcfb3a5a8e26c98525ced2cf931d53da1864316a751f098caa32ba1be5e16
1cc2b369c0b3dfb6a8e46693ea88f3ea73f41ab972a1a47b12b5af3dd6b510ee47c834b7
4c9867d36a25b9c5a2c11d6780bc7a3afe1ecaa38c907e2bf6280108029311dd9d441ea6
308025d89eded831ca59f860203119b734be38ada7082387b2ea6b13894246fe598198c1
9b8a198ed65f0082cd6767652cc69d67fdc0cb73b8625c1c5cef136cbbd366141fbacccd
59c914d8a29cb3d01031ce8bfa5a1b3c41fbfd8a82b5d2b3bcdaef4e4d94a9bdd2cdaaae
8a2e3a46f1e55e4e061ee87999b7173905dc4ee7c4004c9ab842998210da029c37c73e01
c20026ed70b64d4caa2941263278ba5dbf55e37da4dd071b9c5af31af753af3cf0ebaba6
60f00c6184acc1e5076d69a9298e3b3f8cb84f5080227396a77af80f9be95cbf7d12e6b2
b556925d2923b80624e7999f3cd2964b48b9ac97e3ae4c3077778a510053f6ba27195f2e
a0f60e73a8cd63b50e5ff8c6410cb504cbc828da51820222f9a3b9ad00de702846c22dda
2cffa183410543237b0fa340b26ef4ada171dade02f5bc397291342ad64ad1c757a05d59
8bfb78c23792c578f40ab1bbcd3dcae747d25e89013643071db24f4222b88e989a66f9fb
0fdd4562e15c62caa8cb029ed51aa59fe29b9d704a91e54c420228f7ee77185ca0a66419
4ad1e36c0114f8a8f5a8f6b18b3f46fa4732d6ac986594d525e45934c53e1de444164332
d9812060a93544982a7c1cee46350bf5668b30f489afb2fa60c109f89e1b6464c4fa7efd
20dbc6d5033906531933d694138116d078eba8a8dd12b9f40b6b1e7b05beab5beebb25c7
86a1a4c642bcb0b06eff2884bd67dd5a95cbdac93858d7fb272e0f5726bc0de33def53a2
9588fbf656722c29ba9dcc97c75e0af90bf78b773a80a91385c817e80bd152c5df3cec04
53d59a52c2f981bc44ad9cc28436eaabcc6dae607ddb9f9d009e48a149b8d63ae2f4d717
293373887409fd6e3db6ef611de6316e6b1176936f6e6aa8b367559b13db882f3abd1da0
8cdbd062e0407b2c5f2c7c5c9389e97476af16becf3083b3ad4bd9645871ede5c9012563
beb944a59c5932d7af8bf180c0ee9364c87f840c4179d2ba8bb02b1b864b7feca52e3043
09b07ef96573427b6758ffef0377896a1c28cd858e8be0896092220cdda162b506d4e506
11a392c1d0e893eb6168fc59e895ca5d2b1026cb3dd375b47108bb91786cf0db1dccc530
c29fce1d75bb3373d2aca61888097ff7b7118d820d94bfc4abde160bf569f88a2d163478
a7b3afab697312ce8b57c06164f2eaf9371174012fc1c9e490e85e95a1d7c0a646a920ed
35a948b16ae505b6f53ef055ecfc4b0f48d531a133505063bb9390c2ead6eff1143543c9
606c60c6b83b347e971e531512b269b642e3986c727e76d245652f2d1c7d1db4bbed6ae7
22f2292e0c59b5db279bee00be977aabadaac6b0da5d8d88dc42a45d0064c2d53685d46d
735d2726ae889c54040d4fe4ccad08746067fef528a293ee4f83b0da20fa797dfcc91685
3c01356dd62965ce8d76057ad21260d428e9ccc12a838bc8e3d918e70d4c6cf303db6abf
dae2289db237913db7994a5dbd577fa3d9479d8368eb0f4a6b1de7839365d12d72439430
df7582e2a7b739cd8dcd00c4e5d641826fc763796376f0f219b052e9267da44e304d28ff
99af9cb1a19ccd6ecb86006e60b05a87c8601ce806434f2a6c0bd3d56a6c7865b26d93df
ce46b6b7aab6f014aa7456ba3cd9db2d14dd4e8e98caba818cd6a969d1dd4da23ecaafe2
8702950ad7ed8b623369c646393502ba965d52bd6c0bb3744b618992e5804981526d2c06
5d7d77be0909abc60565a77e4c0e1d678fcdc5f40e2d640653fe794e7a3ddee3d58800c5
f8ecd844cc4aeb1354ff375e2d97ecbf3e1e24c300120edb136fb3f3b97385d075df0d93
ba61f307d4bd36b54dc48cecee1df29db6c3b92272e8fe962d137fbcdde6051ee9260c94
2ff223498a48e42608622477fda67b32048712e9962a8c4e5e89484b54053baa480627ab
657ba2380c725489abe6f5c099cc61349ecee8cd72743e31939f26372c40cd2f7bf0489e
b6118f4dada53aaab3820bb617cb5dc0dc9d0bc05ead3587db439010ef1c9786c61a4cd0
4275f75d39242dcc72babc1558a53c4a4b89a08113420bbdf4c3b9e2fb206525e532b568
2ff687c35173f26f4c75bc25cfc0361c84522c610442a85a4b4be0e696633d505dd76f5e
c92e7406c60d4d824fe85b1eb7dfff0813a9cca43b39810e14094a49b9935661f1149149
32d770a1cd13c703818fb73f247c265583c3cd485825b383fcf01b787bce7f172e4a943a
87200d13362cb3a4456d31b3e1ff1a77f998a5243f4a858da26554c3f191fa7300bede91
0ccd276bdd0cea5e29e0e681d97c248ea999f793bdef7ef7cde3b6757d443d60a4207d39
31c2719c92bbb18a19c33757089c7662ee7edee229392919937ef8df56a9a027372bb380
3537d32e430e0242ede226137319dbd84b3e66d7b6ae587221fb96702cfb9d585ade9ef9
d18a9af33bc71b89467c672e46ddfff2844110111e316a3c78b73f8c169899c0e955fe07
fb0862bea75f37b992cabc61cd5221c2be738c81fe0f10e5b06c6ccc97bf875d4b966c5f
05170c529a75c097ee37baa8e2e2dd483a72941552ad79cd5a22005ad2fdfe072bd42f76
cdd0b1cb0b96fbad264ff79287836f44f3478ad7f47c3f3d5da94bb01578ac301e03cc8d
8577145e0443d1d1f73cc66fc9338790361cc40dd024e80c5dcb5979a6e214992c339c09
bf0f24182e653695fe4ad4659f87511f590ac1129c33f6884d6ccd3c6960fd8c1c8c12a6
749a005f9692111b28d8fa493c915abec55ee75f06257cb925cf597661c9e5ae026dea8c
809313abd50a6d69fd55f1bec07c7138edc59e89d54b27d48498cd8c59f3e41037147960
e30a818bd553e4c14bc5105a9099d736478a5ef9b2def9b7d3a8f35c52ec8d0b84584809
7dcac805baeb5d71fc23e7355bd89f2067b0cefec15d53f331a10193975b8885a0d13e87
12ffb23946049bf372daf95ffc0e97d5a596a05299a224f07721ef11dd5cbf288b5d6af0
dcb05229c1c2a1251d8a8e1b70a40c4e7eb3222d7a84a2f4b7e5bf1e496f7897a77dee2c
6b5e172201adc11255aa893e25a7ace9b60c892b06cd280eaf3e2b16964cba2a17bfd918
5bf9b027c7ad50b98bb85b1189bf610cbd5d3814b0db7470756183c60f1d73443ed63420
7a10a023d5e6bf6eb9a26669f00b12d623e2ed479f0c48252f6cc2f1b5ec7a6aee030bda
925f8eb847643e0980b6e587a155dd8001b3298104d3eb47d0226aac1c55ef96ea0e51f1
ab56dad966941abca6aca760675bff58158b3e5612ec897c604042d35e3b0c8c23dd90fb
978eb823ac986bb3be59ce770ae3e516085f22b08f6decdb1567d6b2a430812c8e6ab555
ccc731da3e9f2b8923989e80e562a77d94cb7e0504b31b0a922b76c8f06a9f1ceff8e1df
e767e1585bcf196062fd4c0fa5ec9a2bbe31cece265250ddac38c4fa7814596e7045a903
3ec31148bbf332166d726d5b0b21e0fa3611fd2b6ecdcebb2425a9fdd4d9557ab6f2333c
9992fb27457b561b6890995dd6f265994de46c6dc864cadb477cfaab4b812e37875f572e
53fbd9b4326ccb870675759e020c046bcff6a96d71e3962b104de99fbedafa3b381388a0
305b0225673e841eb45b1e54e225b2cca85779907cb194b270cadd42a677e37a7ddc9403
1d88ece8178de829ebc1d59c6f18c00410b5de00f9c8c947c4047c5133e48fed1e349986
ff19e7bf94e9e77f45acbacaa61a011e4d61883d742f6aaba3e34789c48216611c294946
6a2d6f8cd84bdc0526c888d8d5d190a5d31aac670723fff39367337d82f45abc08bd03e5
d998ec7958744b384c99a8b80036bf8363d826fc65bc9028def43c49a8ef4b1e4c71b6cc
3b40af2ed7f77c9026764eaeecf2722e8bf10bfcdadc68d865a22efeb34b0bdd0d09bb1c
42c84a2a3de085bb17b151673f782d35e9adb3dc038162aa8e29a13b61a138dfe27c346e
dfd6f1ab7297b25b1111d121430d202986a6d45c73f749dc95bd8ce0b5bd6bbd8241235a
35319139b6a91d43e6359cab1abc26f08e8a517bae7418c7205bfc881093cebc70292622
a27bd0c7bef4dc8149d16d39d74aa5f74da27af8d8c9a674892bb25391f7b89b4ac4582f
fb23657a3803472554617967f71cfd507af5e23864e41089cf959d00d32fc792f0261e95
efaa4d5fa653c10b6ea796129e60cf524c9df0899881f46fcdbe6750ad809f508cfae075
14c8bfd7c5108309e7d8c14bad7c56fc93828e15e42265cbbd914aae4c5175ecde6722be
c82ba1bb0f9ef6aeff7d4d399c13100c2cdbf17c4b9e5fcef419fd0c8753ab00fb969b1f
d4e43bf6bea0bd64654f0997744a0e23dd36290dfd24da0874e778002759b483b546b935
0661420d49c03183246ab93a223b9599ccadfd8c70e00c97fb4e7b42cf19c661c5a84fa4
7d4cccd05684e7715e7e22bfd63efb16b86c48bd232853bda04816257daf5a242f403ec4
5d95c8a27da7eed0da6e2904630bc1d96646e2902ef22274fc1383a60bdac73bb581deca
8e6cfd14b6cd4282027dce246d909a75a99d0b91be537a7574bcc6ca32f3359ec65d6910
36d4f722fd6de4be95bfb9f854af900bd68abe600e55d9e67c0a543b7f9344e90984eb7d
ededc75f30889d713c485079dc453c3af0972f1431cffb2d3c3243d5514a79673959303a
5d11a4dbbe10c14c336667ec937b6678262c5e987be355b499ddc98fc9e0be3a13786527
361181306a7720ec62e47c9cce84c5929d3afcaecbde2d92b904ea798d333ef603d919b4
25beb64a9beb5573a5024eba48479aecc9be338e6e76e334b1a3f3fc50f7020d66200907
766c8a765f57d1ef961db6c19b450a10bca8ad5f77138018acafee508504fc795442ec6f
e39d140c241604ef9e483ef1a5cc6c37397940bb512baee60d60383768323bdcb20d9bfa
f094e4eb96a8aae2f53d9c864e9a83b872924c8bb20939ef9d60cd122b7e9ce84d407703
68eb4c4f49f1c8fbf9c1c959e6f8aa283e38d870d2946dab010a9bbc97b7f43ea2baf473
1b438ddd98242b6bdb364c15ae4e769d9f15425e3b2619e44a61d36bf41dc107ff68bec9
84045bc4b5bea5cc678aab36e58f6bc227b19200f07d394580a7cb5e37c314e988826583
c74d7d2e49b8dcf27ea8864c86bed610e2ce76b0b3702c69de92f3f674fe2f2ee79e856f
6a97b01244334f87bc35a2a4a011612dd7bad440257ec837c0854ef284d1ea5f1ca5653b
babe2a74ee1ab2aa8c9fb90b7b356ba385b0a315ddef1d0f57b65ada5756f606fdfb88a3
bb642ea6d9f29b9beb5b4d9828e039f2ee7dfb91eb4685a0b63a7d5a2c841126af15ca81
08fce1fe21a895bd99028ccc4cfeadc1c2ba4810b9578061d51417c14511832dafb47d54
918a986fba95b93439536c80f00de3cf305d0a42e8f419bb53d1c9bcd9a4e568b1792b2d
8d9fd826aa82de77676a43cf466c27b491964378dc3e5773843ddf09dce9bc5c66a85c2f
38bc143d44d3047fc2cf6f245efe8d49522339363154ebf2b796c48489e9b3b95ee4fbfd
0307859cdc0ab4c46ce99eec0c24c3236eec6edad69fa2453221f74085a613e403e538df
3458614e0ec0b687415040d887d7f63d69a53976875e0ae2d8118e97c2e712b9afc25276
dc1cb9af49a910d9e9ca8a7b535bdfdbc2afce5c043dd63d50b2ab8b6170b9831d6a33b2
86997e7f36141836b136f1b822bb58d22ed19e8927a059f7ed9177712c0b080b9eb3c06a
578f6d6fc20c6764a03196eed88ac4c154638c151e2cbea84330277b464416491042fb6f
ea722e85773fa8a037190abd2254aed7155ca56bd7990809fa31c5be42ef768da8b69553
ff1cfe9a63e2bc9eed2f3bf4b5eae77849fa2702d20ee6e229a2b0e52cd29a5e73fc474c
037ed4bbbffe589c7db98bd90167b88a25e2aedfd1f43fdf2d2af4548f660103e309468c
296782627aa74ac48e058142b54bd764eab3d8719224e23ddde7df20c253d47d1e08ba74
2ad5ae37db033739802aee23ed064a1ea3a760f0b267f9807b69294fb8580e03314c3a76
c8c3b5b01fe32e5b3b0a14c74cf1adbc2004912e5e3366f8f3218004348ded3987f110d3
7f30868b2254512f8713da92ba2ef864a6db42d29ce13fec9182611efaa0621a666ffd69
0bbc01fbd9c526ee189dbdfd391ef44761564efc6b8cafe4a7c900c5c4d63e3e3a68d7fd
0af36ae178fcc5ec81b6e9e1695bff2d3d92ba11bc6e27188ea4b8a97ffedbf6c23f2079
6c0400c59681aec4d6d7ec993a13a2f84eaa6f9e0a5bc8e6f03cdb4ee9443e0057822bbd
0c86cb2479d23eb4c1da3e7b5e945ddb404a125fae6b92787f3b52ec6be9529093c79fa9
9a7a593dbc99c119ddb01afe9a45c2f40cc6e0a19bb2b3425541bd1508a49780e787fd9f
af66f8305791fcf0b0900c2ac6040fb50c99ef06f0176ad3350d9f8a9eb6190b400dcb21
482db959a7ae890252dc818ab0d7fc45fc43dbdc444cd92db25c8aa9e83dd05978045dc4
0f732d6e43f06befa283acb35bf96f7970656dbed7ffdfe0c5a23b6316240cddac9f4118
36d01200be129cbb907e620aadc9263fe9e5a721b35b861e1b803bb4b0917aa75d2310b9
66967645ea756287d2b24c855061faae910a1bee85a8b403b67895ea9df1346a37f9ea01
31b3742ea1e05ba02b06ea60676f400b31c9ec6cfe0e1313191f0be1d16ff9fd2f9cf629
bc11869becd710b21c646ed8cce1c740c6ac62d324867207bd8726073c6f29cffd38ca9a
d878cec9a43eec86ae6874fd261ae4c6aa7a82634bafcc954943ea628b2ed28f892a7250
e9c89a0fb1d5be0b236459561000d76aeab2da9064a2fb0f24aa056f68ce417d96c695a0
6730963978227fec6945a56815456eb58bdbed63de6bbb329888c806c28951b63cf9ac11
d7ed7f44e0c1a3529c27859497e330e8f5e69fde925cd9e1448f849b5813e27efa92fb1a
71bdb22a1d34476e0b8c03ba01e62956eb06621cdcfb69d442321531aa0cdfca40570651
b4b4a6687ad1f8bad45811424fe58a47de4ad7fb8106bbf1c551ec50eb39ba79b3176fef
69376abec7fdec8cd527d2c5b67067f149f6714ffc676aa7b983764521b478fa97d828b2
b13df29e14354ada4a4b52499c43207748e4b493644092f4a02da18e9e8d1ff908395e9e
41e3fc6e03deedc0a0f980d7134125fd8243af444fad30bef85a0da0aea0c1934428d1d1
4585639e9781b3de5e9c09ded34ad3ed9d68a4cfed889ad48dcddbbf4950dcd83a04199c
f26c0602be7146eeb39b3998ba930f14aa4a8fbb6862e7740bdc5b3e8f1abd5859fc8e73
e33efab27588528f4ded7d9f5abf958625a5272964e3675a1dc55929420d64cd818e1b51
0f2a87e1fb9bb527dcdd12fa99437f82f3da0fa048eaac5e2e5514903bf6bd914d60ce13
e5ead42133b8b50834e4eb025cd500c72371376fe3142e8886e3d31212758a92e1ab13c9
f3d20608f21be24c9ca5095742d7cc9f4472b1238053811a982426eef1d31fbc47d95d6d
86a96e8c1edb69c2760668ee8ef10bdfb1645160ab3f1b1a867e64b89c04f03872faf61e
2fa54e38a6aed87950c55261bc6da58fb1c900047a7fede15438b786867aa3c32a5101eb
23392c92086a9dea2f5336d432d7b4548f86a73a6ba51ae9e03b09841b1a6f03b5ef42cc
7a18dd9654904391d617f6bb37058c90a3673fd8d1a442942f0b745062e9d3cf634cabd8
c9ad11ad996144e656892386185609cf90b60cdb0758623d38d606c7113f2bbb71fbbdac
80e20a393ed126e3403efffbc5dce6102912d8674684c306e4d1598be13349d71672394e
caa64ef540bbf74e140e30310e2a85345cc4683e04905de4bf3b43ea996625cac6576128
f6819f6a2f7c5df389e7ff067dd82c80257148ba0a544961a85830e6e1ba2f00dfbeae43
68a0739a2ef91566a543c09ca761969eb17cafc436f68d113e04f3231cf196d4ce3e35bd
e064bdb5c340a0c3adb0eb4bff41877263eb5707277e9638e949ad523f2d11710acd72f7
3b1ddc0235f69562840134e1db80bf75f999843e3fc13495b5d1661c3a2a18cff3514cb7
1ada2e9d9b25d20ecd8d2c2d8d10ef3a243ef2d96637ed6623a8af8f481891e7346c4806
737bf705170c95d7b705071e0bd92a6a933dde9aa4fb236557a67b11c5d5c638976f43fd
7201b0349fe698a76acb7e1546f3c189f733878507b2c8a2bf010e6ce0f35574ae2d47da
e15edfa5821f900ffd7ebb6dd547a5c9f89c0f4247d9f6e743cdd5f0d9729b5f92d5de5d
1aebdce4b276bb96ad5a6fdbcb4f1fac9b8f7dbbfd9f31cd2fea031b7cb577906b9ac4f9
9977a4173db3e35e5de610ed9df4743f62bd2e3c1d6cb9972b196008de5713bbf51c0212
eda7cee8e8717bc981040ac5748eb0d25c7e57340e06c160dacfcf314b4f752b08167a33
60f817dd50e10a31a6d72dc74e4c9aaf67102cd9f7b26ec4ec19cdb1fc150c57034cf31d
12dc2444abe5b00a436d0c9db07812f9e2e8e3e840104c0023f52130107982da2bebaa20
454edfb8dff0bba48ee1154701dd97a2e1ab21e0d97bafda3423817cd2517920b05e0993
90c724fe68e85c5eae8da475daa49786d2452c51b5767574fd2261ebda1e92e9eedfbf7d
7d70ec95338e6b916d33afeea7672815587e4bcf01bc8f448126f5e7014a8cd89ad49bef
37e5507d51e8f90cc5e4dd5f6ea147bf3713eed8197068695528cddd7db6becee837459b
48d521449ab1cd5d32f48a4f1b5f2196b6868d920c4515192753597268aefadec3dbe21b
cc1e18af80192ef63d2c8f4e55119102a4e2bb89c9cfb3ad77be88edf0598ea33bedbcff
90e128c1fc3d9d878792226ce26ebaf4d1530b47209e1758ce19351408245e96026bf6ec
1c993e5f8672f9b097aec93edb348d49990c2062dcc42472f112376fe7cbbfb799f450a7
a8895c70981e4e1a4178032e91a927470731ba1f5d2a1c0ee3a35e4d896933010088ae41
0c8d6ea07147b55202657a1b7fd9c8fd156d184a7dc68c51f7dc17dff6ae3701b21dc9ec
c8d9b78b0421997fb962adde6bb9c3c33c83688eea6bc379e7f62c6e23c949d06bdcf58a
96cc71b4801d75e0189ee306f6b2ebb77ae92b0e97ce399f9c7008fc853b19af9b01887c
2df0606d3dab61398d79033be0d2062a249e85d44cfea792348e5fdf5fe4a8b327491a12
c49d6d8ba5533f86810aea478d2db3498e09091e0dc3f73b9461464e55c38a2902b2af29
9331c35d88442fa5eea38df5abca18ffcc15b3ab128ca3169c6b7399d0113bde5d982d54
619f3f97859d0da65011f73a9c6c8aff54c518af0f60233b0c05e03715797988378c052e
57035148d0e8056ac63321fb23f2452cfd3d687fc9ab28ab616abdf01b09b100aaf5d024
0ebfc79829842f2fe368c4605012cc2e9ed59381ecd075a448a85db8eb6fb1165bea729d
8e2292680d6a82a99b447070481d8f8d7ee9e5feee531cbaa741cbcba7d41f032ab3b153
efe0c32c3137312af1e08f77c91eff62d512dbcafd04500183d6bf090414cb15183349e9
9aa1e1f19592529ca1a4b96b5b4bb527e3978daaa5ebdf3a5dc493bd997397fcb0f39c2a
8df606fc5be0a2e29b30aa00cbd0b89d766aa1ba3b7b8dc90fbf05e018f9579fa75657d1
9cbd88d4ba47a067c7aa3b67baf328f2a178dd0bf7302da745a6b4cbbd7d6a1ae159bd6e
9b477d47394c9ba2a27dddbfe8a29559bf1814436a2e4024438dbfc9dd4ea1e373977625
c86ab123dcc9a40460c854fc7821337daa1b639c596aaeb698e7a6ce66541448e7ee6d7b
6489c7667e7b06a89df4d82d17210f57aa7a2a2ef1ee421692430f8ffbf0da60c1c17079
a21e1a71d9521a4bbd41b2c01c3330b886040f27010ad64e71722bd3b2f4a73cb0d35b33
d1e73d3c5a5cbe74dfb85fe9284a3a78ce3d6b2195caa2c9d3b764d757fc57fb3a87ddb8
ae95475f9009003af6ae2a522af8f139a5cf9fbca6226d80f3ba77a6b32158dd43b17792
8b6ad7b96a488474c123e15691c249019bfa3de80e5ad509657c19ced0560b8178d9b5eb
be93122c774d8144ef6863778583e56fa3093ad6249ea39a16db69d5841aa85beb945f69
426686de521409f762eebeca93d0630792a3376c6a6470f606bded05efab55039edf3826
79f4ad255d134a33d3c2c014fa725917e87de5a6da91193d7657f380d661acc1a858142f
90216d5ef94816894ea1a070db53ed5d7a9d1ebc95091dd4a6e7fbf12aef1e27de09b717
58f3f4fa3a87707e832b28c852ff47e3191aeddae4feeba5fb8111de557850eda110d7e8
78fff8d41f610ee019e0b49a2d7f01700642a74d6c781c4ebd38ccc7575508cd399fa160
07a4379a8c53b3ed636c2a73b611be4dc666a2b519c1407cc4c9a1030c748a1625b6a0ec
1ff7553154f3bfbb63e101d7287a427ef74e5a766499c917e62298f0575b2e4057426b73
6d5a07371ef84c7785d3d3750497397b5f0838992b22a24f7e3805d18b79ff467f2302a2
43b4b2caf3ccd6279c9140158f3ee46ec447f19c11c4956fd51f754c8ab8d4377c9d8a04
1fb74e3d0ad2d84b4a693129048695de5d1ab8de04e2406297f18bc000efa43c0fd7b42e
7130e1e36137889e74163e3078483d27f7adc4b9581be260f6658675c6c0a6956b062ee7
22c38623122509265c9425e784b03c30ad29a8c936d3c93fa733ef63b668f7f5175f958d
b1a4b339843c67f3d2e8e5f8eefe452a27372dfa0e12fc7ac6684fce0ac70e2262a69b8e
350de5a0d2081ec86f61ee438406b6cc8158464410b67fb8a0900f62f2aad562d00a8dfb
22542b8d63be6394bfb7d0608f07b02836a0b42e963210ed4073d53aeb365512ed601db4
9a82c40ae148a1d3e6158cc084145f4ec8f8957bdc52f9c20a9f78f8b9879171315566c3
0c8cc3052d20f86cbfb74b08a624ee863906df660bd6a69161bc69052fa8385e80f3d6fe
df7309f533f4c5583775029e605d4fc4eef31a712dceef775ebeeaf1b2b387e9bb585ae7
35af5eb1b8eaa8b9e8e7ba3f8e2b44113db7a3b9740a12df723c9b0970eb95319708705d
e2eb3ea772567431c14f57f86b912bba271f437644e5b22f484b191ad00612759739abfc
75e18277b75ce5c2729d66aff0b8c1ff0d0520cb12ec15d6982d8b24c66fa2ad1c566e81
76cea9a481bec283e297bcefbaa107c094830a047fb3d27c8ff163613a1281d36b99a681
036316b1992e009632b4578b7d07a2fd3837bf996755f232c78de6fc48f773151f30ec05
98a33c18412ea8c0252263662fc78560fe316ad95515c72179ee0e65002bdf1e6fc8003c
70d52dccf42af7fc59f26c53a0ba3d5f596b47760133c6b49259448742e45f0cfce1cf8e
3a155c9c455512208d756d6f2e3e3ee37859fc00158ca5166ab7a3131f4d2602048b2e70
134374d91fad45fdf4ec6cd8e8cd2b2cd49b2ce6fc8f9c382331869310f04f73b9b75cf2
3096e6df4aab773fba8d651c1dea7a39483db529420f54e0a059e7b94f2af72babbd2709
ab697aad6290571fd5dc17737acc4dab8364f770b5deeff64d68448a8c953ab951bc151d
1eb94b7cf08109a31dff255d83da78c23f5c7ae74f8b96e9321887ea7ff783cbc4208a64
b1583f2ab022621999ac6c09c1e987976e9396a32d05f41b2b179ef754280549bfae6e0f
16f97bba7ec7b7579ab86b5699d5bb5aeb893342a3c6160b4dfc4e3cd05cbd77b618a50b
42b583c4cdaecc435716cb7af71d94d493e98797ae23b36ab1a938e8886a2a9ed33c0e17
cbf25cbcd554aea6f23d430cf2619575d893d999c1969dfc23aca5e8e63698e485fedd88
71977d2fd72b7f8ab76354e8c1826d3325dac31d382bb79cdd9ffad53c32d88c9c119445
ab3689e330505c23f3253c5eb17cfbb3319ee036852f707234a8e9ca2fe3e76c5cb698e7
05dd27c12bce975b0bdbeec87805efb6ba530c4fae6c42ee2c403cf03aa724a7f0adc7fd
0fa2251b91342a43d3310253a6401ebf7067a8039f220d3a50565b757e3f33fe68c149ce
45acc7bd5134109039b7511ae1cb629d536c84dead1c24963049ee84f40e8ef865a13981
abc48ca5bd5d9f392fdaaf5a9ceb05e827c1966746bd89b0d2dccf6d04612c947c04f8f4
bd751204203fdcbf888e845958c4daa11c12cd10d027f796f763d548653b45f88d81e353
d4edcb12f9de8ed6c602a27cc8b02470d05cac628a0e82c6f24b742f18ea3713f969bc5c
941ca45f75cc2103294aa69add13336f007d76666e358c3b6645c6c125f3f7c77cd3a83f
050dc3c00f9cd248d72c5a6f2b3f271a2926ac6fd6f6caa88430ea8d6f3f9f78884779e8
2a4a53a21514ecef92383821a54208ca6a3dc3b81e7bae4fd3101b705c0445d15b438d77
19a60d160dc048075f4963e903d18034f999b71af2d6a0ed0b953e2e422947bad1b8a23f
ee24ef9677f56a333dd7d3b23579a8a262353b12d81057aba9879998e221c64b96a48e04
4be472f4e46dba22ddf1894a57784349982d4d8054d6559df02631f4b354b63e8cd97d4f
ea0c5898b864f17d818a0c3e13f1b3a6c524a0db2ab0b613387265161d1d7aafe5513f7a
8a9795e385dd5dd8b10f09b425cdc3ddcfc408ef2f19d030b1c5f3891e09ae0865058e82
a88c959b4645406db0f04296cffd1b5098cd10468fd23d836b032c820dc58b468c987b34
b598835f3c5f9ec3b67c7cd847f42eb9394b49f1185f36395b4e1865f110b40a4b3db0d0
6b0ad8c7d6609c904bf3c54d383011597625a50929a6981f3ff0a6a2fcd269525263633d
0301d6c4b87e81d78d6637665bfa43feb3032c7da5bf0fc252b30128740fdce2d963512b
02218795c30616b74a6624296c0afff71073cec5f3ed1cf5c63afbc88b9161c8ec30e1cf
51e0835355da745f421e030ebc54d0f84d580e55b8e119f26ce5623cdcef973bb058ff11
24312500b6e7943ab95fb7d133e6d20c4a35469073da0783e699a1152dfbb8bbaa5754ea
f58c1c85df776827ef3f273f338e4bd5a46dc9e454726f1fc89a64afb72d359952cda4db
8bbc5399ea1e5bf2b031d49110eae0cfab39872ac0bdd07a042163334e3e8e465f5e5db4
c7d64fb1b113fbf8c43e6e7f56547b7ee10d53ccd7aabeb36afb68e05792fe18a4599346
4dc84aa63619f886c8fa298569dcb19f130ee2e918ae7b6da57b813cae33a3f8570de8af
59617e5fa209bc256894c3b91b4207717032b190a3af23148828c9a321cf5f2ac4091497
656f29e720bd04a81a1e1deb7401ffc0957c9506562f3414237f38c6e8b2253465f09f08
fe009cc605573b6796689687fb511f0a610fbcd48f8f4c45f0415027f05df1e822c0d137
1f5667d5bf179e5c65c713060e1eb234f3539d86596af38c557a05894b3ae411e1090265
4b54c0102785ba3e98d8bb3b47f7ce1a98be66eb0b66df6d1f673e8db3134acf76224cbc
8450ca5c831928a7bbbf5d87ed0e140a1638b05907bbf04fb21896b25b87d9b515d679c3
1e6caf7225ba0bafbce9c978ee038c71066650c37359726769e2ebea77cec838a8097d33
f27b2aa3751cb77682feaa5c1836064f6faa2fbd861ecf88b7ca8c454d9d13c94f180006
25df1fc2c9aeddc88f65fbbe772be4b8019140e944039bd1502402395410b96ae509053c
6a6c58da62188bae56f762c44c515995c912f6ea714eaf3b57773856cc843e50b33450cf
40fbbb722860ea7531a106d3c9b22e5242a2dde914e5de229150d773095db42f6f5123a9
6e1416a0690fe3076b9683ae31c6c15f2c7b3f3f0a30337d79c9a661d8bc63304fefdc15
79b1fec7ea8ea05b49125f279b9a652500dfc3d2c6f3393650d94260ac772c0eb60ec5bd
2b6f9d965d1af797aff0cd898e8cc1af35f22137538ab5293f47908fce95b4400df3923e
7bb40689acbd4f3b35307dd9a6022368f02f6daa8bcd83a55cc4a35dc117559345d11b16
e268ebf7911069d22716f4e0b3680783120d152a62154168893332d1986993c38624a500
ad8cbffb8d1a0407f8c149e93e63beea7252d774efefad00951d798eba604376e0850beb
87a5f5c4dace4570c3a89f6b947cc11162e706389c810fd57bcde1843c4f2808177a1187
8a196b11fadc96e28f68c7a920e73bb80d5646a0f417ba74d5c23d77f7bd396b83fed681
c180d110fffc14f6f93acbfe17a88cfd0dc6872e195b9bb743daba7a0e9ab3ff09de519a
60cb4754843eb44106ce40bc58a361ad8ce36425966609c6dae69820aa52adede27d2b99
6375fe28e60621d8173bfe1a0f97117a13cf7767dac73bb195154373ab14ce9ac9061a04
ead6f51b19734419b56bd44fc200c79892c8a71bf02188cc28d2fb6417086ad8e8f68ac8
fe7ca7da38bbda7b25e6dd68d7a85f7d3e63b7cd61e7c2221c603b837ab303f9b181a8c4
eb3a0a89bca2bb1e14292c4236e63a49df2f0839938e48943917363bd4ea489795f81b64
3bda4f8a473f2f940f949c18a1301b20030bc68279632cfb2f80fd6752f0dcf2209cc2a2
573ec449d83bbf428d125e099e09b89466c523c67964ea2e645f91ddd9f97733b6953be5
dae45047d3998ead3ccef7000325e6574ca6f7837c0bf1962c5b42cee36d2ea91a35bf7a
e10fd3e94bf0372d72a56db7d021353eed2e819ae60807ff029fd4829b980ad63707be68
ea1e7c14b5b7b1fbd912e3d907aa58427466d4ea48dcd74d089215f754a05506f657a69d
6697bd8d64de0371712f39845ebec9b95f1399ce3b7f10e507e8824ed9451a42b2ac02cc
faa545ab499ff85f320608b2ff3e81418d9c50e0812306943a8ebfcfce888b7bbc25bad2
ae2714a274d5002252ffc58717984bb839aea025dfcaf6b166d82df55b0e8f58f38429ec
e818f5074a94a42c9dd354f99a8aec591dd17da0b455edaf70278e8e1efb53ef3acab24d
2a786f27a5d641d445b2a0471287b74c6c6b4fec82ee20e4a912b1d1338b0c07b651604b
977f38df516b3e89d6805b3947349c79862ed39de91c4d9f2be9092f63b3df408c54f096
ec8350dc522acc06d1957a6a6ae22fa821fd8ef7294112a6dbb0074c593f9081aa58cf72
8abc87b89b2335df247096bd9f6ad8e2da75cf46f12472179db1074ca0df0f25ab60f226
094e0e38a1fcd2d6c992b3952dae99283e12172a692867653e11808fcf97aac9750cca42
695600b76cb8f8ea09bd5e040d76fddef9cd9ac1fb1b563b459f188b663159f0d9c18747
362d8cd14b83f29f324a4a25730c1a5d7b1fee62356895bab5372c2ffbc3b371a69af78f
2fea4ac7c3eac650919fefbf0dd2186f6e56a2aa1af52eb7c606c88936b80e37384c4a90
53e4e1881e10ec8c50de058b72c0f113d14f3fc9cbf5a684c94ad4b3e7c5e15031b08618
8b1dcd152992144d42badd983e6af4c1b264d49e886d86240dfce13414cc6309be68cf32
d87e6b14832a8a051e1a402c1731dfda2c7eaf2775e66281f84e5e90fb1b4744c198e182
866d67790c8cc97dbda484698a5586080fb2369275fae5db954103773c8282a247425daa
ead246611d37f8bf58c1c3f3463d0e1acdf802ff9f4ecdc0ec0055a7100be0d095baf150
60aaaf438955eac278a86aabd5467f214146253edad3213e3ad33696d6f5b5caafa4bb6e
60c13ff2a64f6983d9d0e6a0516f22773956628e1707a18622ac03f35e115e129a8eeb87
2a6ccfd6094e528626946c998284b3038155f98b026dbc042ca54b510228bbe12244221e
e6264dc4a671b86bafb90bff7e3d63cb3f65da6b0463df304a278b1a5cbc50515c13f4f2
1619fbb14fc0415b26395bd967c16d9ee733304baa604db88c478fb6491b802596f5d23e
0656a02c0691d926656e28a97cb39b031496256ac8d77002710486ed478647ef60cda41e
10407f01fdc5e93d97d9a10b14799d61216baa9d846ce16b27784575a5e5bbd493ca5a39
88f45f751c564528972b39089f01f40b6571728aececcdeb40e69662bcd6f78b7270d140
2dadb76b53591d565f971261e94eb87574c1999035099971b77dbdaf0fb1fa1617929e21
b92cbaec0489e1c4a65b5f503e727e944e1131b6e519609746473b60097b72890af39111
559bfa1306a7713c834a54e14cea091fe8c563fdc648b48ee0f7afe5ada57a72e7a3d98f
62dc9d729de2c118413dd09ca6c5aae7bb7d7a92a8f55341b9c4d2ce90a0ba9ad2eaf35d
75899ab0f14430ca2be636b316bd908b2a125cf6d9110e8f100fe97cd097b0c3f7fe5560
3cec90e48503e56b65d06a8f27bd23be077025272eddf0e543898f4331f5e24d58887418
0dbae593586b2d59d2c5e0790e0cfa9cdf1902daf25122c8f66ec3832d3eabf857318f58
705d5a37a637e6a7429085c1483c9892f34ecaf285fb7255f0c62f4b4f2edaa892e9f65c
2439bd8d2088a50453e6cc021b7126ae7fadbdeaf2695a777a992069c7a8f8d32d36ab52
d469d1a08f07a100da2a34ca9ccaa7cee2cdfc911dbadd9951af109d71e99d182e939440
2419d56c17e3eff3d1a591f18dea6071c5561f4a7d591115a7a6afc7db9542662d3b7712
06d79c35e717c4d7219d2c454cac4ecec3dee1fd78a15eeb489d8247c83fcc93f1a28126
3fc24b1570ce0c650c1819eda3f13e275c40efe3a174a2adfe8a9e4e66feaec095ee0a33
33ee014d9bbef55714da116874b1766f67d699bf170058996ab8ab52ff8389bc580abdd4
d6ea8908944b0510db0e67f0f1e9e7ddbf4adc9a10a12489a211130bcc114b7f2c8e2784
ef64a98b38ac675c26243f13a51a8c95ffd61cc68db51b9eae4986e9f0729c61999c3bce
ddcd5e196b540f83ef018ae0790bcbfc79f75ed21151c7309bab40b4a5e8b7fac56ccd98
ac24d9880a5f8760373d58e1d3838fbdd6d8dc526879f41745d5697341e68ef2ac873bf6
99f7467b97f58cfadbd505a418532a790d58c58ddb1ee0548aa39019f6ff0f275e2e89d4
49bca700d86642c174c2ebb3e4504ff10024a7049058a946148815f7a7e101d16440865f
13f666fb45842a4fadec59fa6976d4a81e495a738ca36f46bd0280edc63ebe2ba722f914
731ff73b25852c18d8c4623a81705a16f56c08a03c698ce62ad53b513d8a2cfc9acfdea8
7b9140790388837c08fdc1fcfe4dac933d03ee1f2dd4285adce1ad5735984e186f4710c1
6bfa0c7c96c4a7b3cdacc3bd20931add0f980dfe27dae3e8ae4d4776720c1f274317b626
5039c8a568b7d71dd4ff15587bf4aadfa159d9af354dea7a24d8eb46122fb9fb9a77b293
4dd72af81dd4187f506d5dd03b81a97a1630607b7b16bd1f5dc056a9798e09e2df7174e6
ff2eaabe4e55cd1732bb87c079e3f8fd8140243f7061b92f668bd9931b6028e57c97f06e
bff17e7631178834519695db10f17fb6e224dd60a72c8ee71696f61cb8925e316cca8c21
3640753e5b290f785414f49097ae403a5ac97a92594822848b584cc6a7ab201e0f46daa5
1af8691a1af46e4c122e09dde3ede4870dd046272d83b1779576b22971bcf500904c3d70
5a37def2bfe22a577b9cb074ea130daabf9f75d0a581d57d46e5c9d30d4838277d54cc14
a3e7282e3b1ebd687b76fdcdd68a8c701b5e1584a417f0b6598aedfecd25733bce8cca5c
c3cb0c9c010e3ab67426726cb89ca01bc1d84b46d000f15b3939747271c0416292135ac5
eb25b8ffa9de679018c0a601d935bfcd5a3913061856b6df241335c226fdea3498f96662
174a87e565ec173401444e0ab852d5d81fa6a748a51fc2b8bf6260a4443cc5039a199373
f2990ea87dab8b036587d151214a4a384f0fc7b487e09761644b73b15b844a04b9b9c101
883dc57de07c74f58f77f5a8b8b4485806ec1911eeb0878db330677d62e18b0529af36c3
009961ca138fa3b037c256101e1e62d0ebdd5e33d6dc4b97955f2ba61abf166534dd4e3c
82d88fb4722b400d52f16901e51ec961b3b6261e7bfae16867e58befa7d33bd074658b1d
5caad30ef7260969244f220ad2cf5e43e41e6c669b13c3feff6c4d27a5cae5bc3c5cb460
45ebe6c7ac0ed25593c6bf51cf22e1138370634e04bc9c88285cb5be48acf5dab697c3f5
b7e7c0f16a208162fe09e04aa20e6f36c1a77265a97fec5cedcb61ba6c8485f86d61ee17
c694effe407be99f6f0bdbd54ad23c250fa226a97b46afff10e9d945a47692e9696b56d8
ce926cc2f270c5f4aee4e42515260acdce6f1eb18f7fa09d5e2a67ca872ceea6f3d9e6b5
2655b2979a15ca1dce8054d2549aa7d1ade12df2bfb06c99d5e201a487d2461c132c18dc
9529bc9c55e1f054eb9773bba24c6af6d9f1041ae1826644d161cf42fd3ab3ac246d6c83
bd7ac6fd779d0604b078dc2333459ad752d92979289e4282b5d9bb167813e5c2c1651ec1
c9283a04ccc02d739d05d88a424ae0ade6926df79aafd8f4ee050fa4d79437f0ddc9b49b
84cf42415add22c000dc8ecd0a1d8ed1d9839513dfb51b4e0cb16a889d73930e45a8968e
90935dac81b65b5c6b4ac60b653cdc8db400fb7268838c13c9669fb7c24153a587c0e9d2
a0a9b1a4e7c1fe14247ff8a9e2741e3826e2a1f22922b9432d32c8281c69efec84885c55
87332fcc6bea08568615c52f529fb51b51244b919e14fc7cc73dbe101f924b85ca4c95cb
2049e882294ad717296d2de6cc695fa622f800cc088aa199ed13180fc08c24b8b834a2b6
d3c384fc6f7e54f0e611d08c6a04b7fb0b2b137f49f8c524981d11c045d1ac311a07f6b2
0aaa695e636480056841a4990deca558a6a079b074a9adcc2ee364310cc8f3ec5d6b34b7
92b81be19c5ae2037751227719043c35653126005d27ad2f8db5085001756f0071c7452e
0bcdaeba94f5928278bb1861c2804bfcb76927bbfc78bb4ffacbe963051e1865c9a1bf5d
a3b72dfea2be90ee203f6bbfb6ed5f24d2ddc092cbcd0b46cbbe8e62d1e093240100119e
9addc1b8e2e9d726a921be235faf0f9e9e03f7c9381e5cce52ac2759fe78010b1920e2c1
1a0e6fc776b9ae74c7f37034378f36ec03a83f88f3703637b01cb15b2f2756ff18527bca
f869fbd48374a8ce6c5f52da3a89b6486c78f92549eafd865e80b0ed47092c97b2112d7b
e28107be3fd7cdebd1f8128a6c849bca62af46d2e8094fa248d008934c9050c15f5b1116
4e760d12c3ea50b831e83eda33a01290fec64f206e9037f1205dadfbcd0e2780a7180281
ee98654b21ce6829786bda7ccb1bd389f03a053dedcae73ced8c931484ef2e54959750e4
959383d8d29cc41042c58c29ca27a978436d9b5eee6bbd8c6488335156c92a01a854144e
2f1ccf1f2b18483c5fe3aa299c2724315da9c8da5ec4fa656c3863c4b6944d026415f659
7d7b677933ee1e1ece02bf581024b4b2b6b3132bb0700a51914d1880e463071a311bd3c6
fd31139de435c0f3d85de8f532b86c75c8981b7caf04ff85c02e13d9e1b7623da62967fb
fb8982e3a00245e92bddcd2dea912fcc58dc98e853d8a761f33c4c5103ba76cb46b7eda1
a44a7202d25d41d78eb0f77bcea5d2d5e0251121fed37d301f8d2c1b51fa3bf5ec033ef7
49e9fe8906aa6491546e62d168ff84374e6c4f39858571d51e4bd7a12b6c0d4f26dfbb3e
2274583cb1141c9b952f3eff1c61114352e17a0955140aefc9229bb4b5dce00f70ea2172
f76cef014ed4b7b3d5346f5ce979e08e818a07debdb471c534c5d9a954171b46ca16544f
8b8da70fda03d0c9c183072d08955662e8ebd1f6e4dd7dbf3b1ca5ab7ee32cad864afd26
099b2948ea210ca7930b99f2a10754a804f498c4ca9185f4a0cebf576f709d6ec9d05487
c36375af8607d664f1766a12cfed79b34081ebcb13a3ab6fd3ab21101b5183e937f075e5
2364a93da6f5ea10d03c758c1307ce2c1e0f213a88b280c9df2f7a4ee79d60723c1f8a14
43c530aec699cd2e35011aa4f29b717d36e218af67de8191cd21e76b94e57943b0ee2352
41ebb1f6bb20b9c551f6c23b36e302dc54c07f15f6decf728122e12926f48c9e77fac29a
b9bbc8a9874bfbaa78899b54cf1d21d243aa9ecb7a0b55c5aaadbf0419848d6ebce220d9
fcfe4f3a446b3b5d47a4d90801977bd211e8f1019ae4c8691324f57cf1aff6a5483e0a01
2ba13b79f2502e29d0ad754d391cd748b95243802a439fdc8f686beaa8c897106210ccfa
e7487f8756d6c21a166a13cb5ea428418384fef16b034b3a93b719ea5da6fae321ff6daa
4a73a32eac8ed33cc22c99d499d6b4c147f67c1d77dc1f4b9676b0cfa2b73da9db39249c
fe4675a9aa63c4a7f442feb4c236d9877c2ec3746c36b90edd3342d4949bcdd16c543177
7b6c93bf9223aa1fec610d990a304740196f68e8b098ed9fed60df9e9b33bd1e0786a316
1536994f015be89d06a22db735835cd5bd60c8ff83d6d8d516cbf6b53f360cd92d04770f
cc364c5842ba06614ef8bab12bfea5ccad3346fc395dff87d882b82fcd583f64346566a0
16db2b1c2cc09887091fca82ea69c3952a7f63206084ee4e8cf5f10dcc058446abe80a7b
bbccd1a73ce3c936a7424b571094d81f8a40ec1621f5a777839afad697f12c50669cfb6f
a4992833d95b16f39b858b57e4a5cb18139aa6b7b2a9d5054673d0c4f7328db28ec0be89
86cce27ad9331cf172f4122335438bd5b63995ec5c5d18e2fdc4fd49f08e0896bb6b81e3
8a94d764cd171c0221233cbad52f99285b96917895aff2d8876da58d1da1a8279f4c06e5
fad41ca71524a043a917347f66810814198107cb008d6182a76f05eca7196ba072af5f53
0f9df737e862d8cc9eb1bb722bb2690f70e2d04c1bc47279cf41f12bbf6423c688c25765
930d7223627e833ee96690426aff706bcd45cf5c8e00176da396142488ac89bc086e6270
068043422de5936676c60134253dc01aacb681d8a96f334884e1b1945f7d2f8cb80f0368
d1c5744bd980a8e4772a4a139a881929743eb291492323615be6ab3576e659b1db26d90c
5fbd373c5cb652dd7581acd8babb5447183df3b1862b212a7f0fcd54ba4ee34307bcdd5e
3ed9faf9e28809f30a54be34e39b437df5f60240bdb212a33c3364a666d951f037cde805
eb5418bcc7465d993acb092b71bede4433e1c9594e71d1edb6a599524893e733079f19b5
e194aa69d21077dc18c9c5fc5ae177f1fb5f50c4ec8522b8c14291fb2ca6891cbf02628e
983f3706be006299540caa6cd6f1acf87735aa95e4691d6a6326e13cd83e9069e5e8a355
8cf86c009db0e80b302b0aa4edb4c12ffcc9b5b4c3d1f0d90130e95fe1ba6865ccf52434
fa1d538299d8985f8c7257f282312a1d6d309229cc23eba1ab97b6cd87aea1928ca7c265
07c43519915aed55caeb2fcc769f8ac6fa2db4c0c4ec84af37ed36a2f5d92c70b7ca8c9a
71014bbe67d5df3bfdb8de9049c656c536c84551a459dc56eb6a0d1a586eabfc800ec3d3
a23bd7425afa44ce7a9111053fb8b04d7687c5396c407da6b8f47d323d96b19bfb383fac
060b897874b6d48d5a0f33cd5ca6016ca158887ddaea5779eda4076ee8f8c098d9d8e7df
c2b859b0ad56e00aa9ddd7f6acb95b7e37fb0768e012c964e9a6494bacb01790a299f07d
c965fac123009c19701462bfa3259869569c49a78b4ecaaa9283529725ad8d5dca201bf6
6cc240ffa075eb737df466ef8e7f73e92e9c440642c85647ee3984ba1dccc8c89bd50475
eb6141200d80448186531f352dc08f681de02437ec38741c9bb31f7951196c3074c7e449
fb624a5773c961fa90178aa7a317dbdd5859e8ee50a38f5ba1e2a0dba6da8c75a5ae1e1f
247ec8d163f2aa673e323bd4f28dace3c74a021b108c16fe6762715ddb4937af7dd8f66a
af3b1ee496ee4a9ff93ab08f6f8c4f5ee9ffedeaa20335e43e1921d58454710899e794e2
58d3145f3bcf97f6bd00c94d0f489b74571379b2ee8234a2aae771eaf63166a8ec441357
db8fdf8a51580f62c9971a49055a9ca4da55bd63890afe8c072d2301fc154cadd347a6c3
d6ad4ba7b0b6cc9ee7ffd8cf3781d183fba61b723c96a29d50122845581938ad6f9ffcd6
655c6bb85713f026e4d3eae0cdbafd792d45cdab552c7f0a7581803e9616888898f32aad
96244be6713bbfd66be3b51ce7a457abd9aca2408bd773ed9240f852d20fc29b534e2d73
c15a8e90c5f0e30313af917d3501a764d779b4405fb4dbdcc08fb74ef342e787d15d74a1
c3a8cf5508b7211b3db81ed73ec30f0278845c0dc905c04111975cefa587a00950878978
16649e5077c659a9a731329ae710e0fc67de07055e27f4319a54502a529bfba0729758b5
8f32854a0d2b77db2220d5c4344fd001987a8823e7f3685dc51a9cc86340adbb23020c6e
b42532b60b8a0a4c62044bc0afde040ec1a285990e420e77588c4f850f841e8572694516
a45dc6a648f96a0d2b991ef4a7842fb231a2f1713d4705c6b05fbfbdabc063c5b60f1f6c
692863e365545cf62efa2863561f167193959dfbc2073e310eed11ebb5f1a6f14a65c1bd
270a23cb917ee5749c1532a596f08dffce5cfcfbb03b364e2566381c25cfe49d3caa12f1
cbde84ff096cb1ceba8adb36e79857fdf496efc5abc1b1dfa9f915ce5aa35edf777abf44
8e6d543a18154f399b203c47ee5879d7eb92c205526d920ec8c9828a545addcc821c0517
291ab5ae6eae1cb84c5c34bc41f61b5b6c282ce3f8168f434aa3033a31b813e18ee3ea70
87dfd7c85012bf5bbbdead21726aaee2ea42aba71c3de14b426b4b5eb502dfaf4c840e83
bc9f47ec85306dc18a43756f0f24fe4a7dcf4682e8aaddd9d97b0159745093b4d256b03e
5de6c079c8ad84c178fa0e4a17c1e8c712727189472515d07248f339d2f530f22e1a924f
0bc3e61a0db06d073764d08dbc2d7226451dc1f3e88e13a5bad65403c749b54f25cced7c
35ebff50c6d9e3dd7696243c244715fa5349459775d602a1ed9c3f9048ec93a36bb0bdcb
84468717085ff3cdd5c4dadecd2aee0a21d4c393033381d93cf50c23df62d1dd7df45290
e677c44333c8a4689877b48eba3955ce7a8f6c19149f5d869e3700b8af364d8fb48d07c3
12fc6092d46167c977754b19b4a68897651a2b8f766a44de721ba84717a61fc82acd1ea1
e509dee10d360c732b3fdfe7e3c07b6fc2bbe34e6afd0eafdb4cbaeb294e572bbc0596a1
fc4d0626a707af46109d3536406a04419e8f59b3da9e2f3f06fe45014631c504107e736b
7775161d0d5d2f7e2202e64db0ec6aedbba3ea0ffb1cd76f6d0fd1db3ce4b1a03ab786fb
3bc7a016beaf5db821a5696d931ae65d4af8cb105338bf43f102750c2b85e4dea530f5a7
8c26c4c01cfa690dfe49a9b4f5872e403f6c1bb6ab5ffe6aa014b0077181940779cc707f
d7a526eab6b96434900dff840e04a2a3961410b4785ed7cd405add0844aa4b2b6321ac18
8e4de5879f8b04205cc60f4df261b9c3ed6469525cc8d0b4cf0d14ccc9677a66cb6e11b8
efaaf18b87f129e7d782c9034edf7d765f9f99028d36215245b360e0116ad9b793b21170
13fd1d605ba7a04528a3c2f3f0bb9126787df1b3f31593b131d00ce074bc59afbe13856f
438a7711fd2b8b1d8dc69f93297df7eed292df92d15b8ae20497a0bbd5b56d03662aaa87
5b876252beb6f6c9aa49f5eb34a4f3dc36fc40b04e600701ee05f2f621d75bd924b3625d
2d9b2ebba554851bbfdb4c4d6bdf0c92975060fc0ce03c9a81b31bd88cae37f210657434
6bd20070821f38ef0de2b58d9a67c4ab5503484199fff8241c1584a3986b8a8b556e619a
040d607beab99c1353123b7f8b0d41b00edfccca9899974c2653728f3313e1752a7f7c05
c2c3f49cec893f90d9ba1245b24a7e7451d39c3d0de17510421e5723ddebb3e7af154cb5
643bc946134100b693e6cd4a65bd465d735beaa95b2643a90b06e328ba718cec36cafc87
9ff98bce3b9f114e3d073801a69bceb7cc2d9eabc358bfc6c6dd099fbee2fb8f6321187a
7e5b9d07cc89e268cd90b6ba62af7c70be56fb00195d05999be4d9467d1943411634a0f5
fd90c05ce376f18a0cec9c3e10bdaf98a19fba6aa4404ba144840db40d73298f62bfab4c
8872133658a0debaadbd0e9ae1d45bd018db2afe3b1b3c566f23a4b8357c576fe6d4d99d
36a3ded27ab4a004f15506fb9a19b572f7244395a41256ab4e8b5b0051db53d0ee230f09
9542dfd64e86c0ac8918557bac7062f3712878ce4aacec68894d11fbfd38ded9e7e68d3f
e1176e3a234526ee3ce09fc8a52d0e1b692017a59a6205cc7abea58c86aea1e6d22a4d38
db0c72dad878e95fd331c80bb2b0a67c4775c73d0867a0450278767526209270fc9e70df
88a7fbaeb68842b1a6e0d353a326c373a4afe55c9f613b686dab3096415ee3792933c56f
d1c945025083c2233012534b9f18a14b88650f8b70a31d9c953fc18517ebb9d4b30fd2ce
78400d06c88f10ac1c0745d9f226d310b15677bde35eadcb35134df67957ac93fde8ab01
5252172dc5d5390884e53e299937e4049740c9330ef1999415c3cb9a3d93e9f815fae550
74b3e402d6b400d3ef6ccc89a5419629799f9d2aa1f0126d44c5cc4d8bbfc53fafcc4779
ab0e260cc2d80353100b7f04824f0397f297a3787b9dab5b1d73be857146bc53f379f6e0
1029f570589dbba5dc7ac822a69ba8fede721bb711d4a7f934280315f46bb8a0617314bb
682ec8679e3bd7fbb048f62a21292090892d905841c685d48b620016a6d224bf8a91b5c9
4d5c912ef1c6760f5d3179dadd95c2ecc257b8499f67f95d3c6236c52fb4ca73fabdec23
f3abd22410c60bd066300fe19124baa490ea841f03f8fb29d2ad9644b98d0e2ebeefdba8
0b20f149b4ded24030edd8b2dfd37ede2b5c75dfd5c7f95c1dd5a7b3292495b0ab786fb9
8b23de3f579f2fc2afb0e3332f0a0bcc6d40e4ce786aa6eaefedf661c7106d5d7a11e21f
b73c220c9d3a12f40e981bbde3410868a066301b8623152c4a0e5c06a78d24a12875f7cf
c1912dfed737445554db2a6d53cb2c2a087e016830d1f6886cd4048ce27b6f659296e252
6e68ddfeb0b2579b9b33b5b37216ae3931537799e54bad696dd65a7a0b7aded394007fa9
b4090063e4a0c657c2b4023abd856c34a280162038bb29eaabb0e465cf6c37482ec3223f
b88ffa7194739cc4e474fe1fa241ffac3599a0a957572538c1376250edbcfa12fdcefd1e
e2ca321701b97c543d368c67c4487032011a86ce361732c9b890a499ca575dbf73b65b5a
032d4b63b6dd58327f3e6e425ff0df17e347ae48f4b17230ca3abc872c45e4031c828896
f35991e827535e04bc66558fdfaefba590e3f5353fdeecf9dcfabe1d42f56194cbb7cf06
446d1473027cfb442f23b2d7f32c7fe017336d2594978f3bb5f54a26150043f9b7c8b164
178335236be4334596758c478168254ee635f15d09c7fb5da679bc411e6bcb47a73556c9
16c6574af96f4a1a64646c7bace99b0eebf55dba8fa150b2b909b0fdc0962af6b392a1dd
a0e47b03b1a3f6ed9562794090306e17df1c35ed6a1e2d020462f7f28674049d1b89d999
b4aad623e6a8b5a4084df4358df50c14015025b49d8eaa3da70c4218fd9130ec96a7f146
c856632d8afe947115968860867992a924b485dab40b8648f19dc880b3501af53f0d525a
10d55bad3202211a9f42af7dac397c5ac4651e57387f7faf3d9cd66e46ac8bd4ff137815
f2b96be18edefd8c466dda9c18cebc52329007bfb45e1c3180d324f3e0fc14548c8cc2ab
31ff68aaf26ab599b8a718f285c53976cae9fd0261013c7ac8ac7227124f5aad0eea8049
a185d03d43a1f4bc46dc86459c0a28250eba33b14c00eae44b88c9eeda9afedd356985dd
e1d6afe7d0c0315c349c265b96cefbfc4110032b91d240725d861a93c1865d25e046411c
3515fb9469458e41403cff065ea9b240d446f1d3357b7bb41f7b9de2afbadd5e750c1576
98b8a2ad020ce74708f76ab2e8621b1182f9038a699ea34cebe916d0095049277ac1b8a0
23c9bc9ba5e122d8a4db603370ec113824e3cc8eb1cbee790a185dd567f4bd99f9534aec
f3c20dd786f99cfc263ce30727a1cfdf8635e86c91af7b8dd02aa1a6cfff6545b824a89a
5321d5316750f6602a0acdf119b90f72afe55a95f5e0b1ec8837b15b1f7d4fe8512a70fb
8d5d7d875b520ef449d4926231fd0c9ee6fb8f925ae12503c0989d61e131a2320a2a5e48
d7eeae5a44e0deedcaf7602e081639aa1df40de54983e4f564b460420772fcb14c12ca53
28719523494110d752e8abb5e27786f3b7c6fa030f9f7de650d10b871cec241aa9eb277e
fae033deb501234d2b7114d0b8cb8336205e4c37f5bfbcf4270137de6a44897ff2ab7006
865c1d88ca88b026db596315e56ec3065fd7ddaf0e1d370eb016210aa6621d0a4fb53402
6cf32b075d013ac864b85a0f8470f5a5a3de13258979a8bdde636a8e7fd7a3abd38cd023
16005e092cdf13bcc34718761d0a1ea51182eb1ee90f062e65dd63b900c2c641816c2d56
c34cc0a97e357cded93c5e1b2533f97dc0094b23ece298b8940ddec1f87166cb5f89aa28
b8caf8d98e6c1f6672cacf3abd5912c105b7cc8bb9b96ebf8c12fc1fa48bf5dbd2890161
234d1f6bcc8ef944a51fdca36075a2d3207711783290917a0fabff478cd4121b9aa9ed46
76e606bad43a9d1a4b6b86b689cf1d591635d2921c3161a5afd8e4609e8dc3e2ddceaf04
e073b442c569dc19a8fa0d9a2a0d6f7580d0dba8b0e4c278fd3afccb8aa9a9df68034521
654c45625425738d66c83ab514056e9b03ec45fba1f75f3af974c9ee38420cae22a275f5
d1b1af5fff412b5e38729408944841d8c4536bf2ec7532f3784dc541e159cfd8decb4f25
410e294ce6725db3a56fae4a8cf7fbe2e618a97bbf81bfc790e5639cd859ea19111d116f
e7f17f355952697070002d2185c50b477a44d1f7c21edd028e398ba1b781d71ccb944c1a
c4f56f936491bc132872625ab84aac6c34a24061ea2580f700a311339f34de859aa137a2
c6a5b010f42d6a8c29abb602f7572963b1f38c3a1ebff52bb80504a88b483d29f0fd334f
e4306b2911e391841dd550f03786c55c244b2492af2a6ac6bcef97b4901a13bddf52ed9a
999c3b940432cbcc70ffaf316e81b2c1b55058edc8394091e8f0b73f17fcfa75aba64389
bacc1d31b4696979ee619019221a1c40a68bf63bd38ea011d29b52c396b278273542ac40
fc4e6a624844182f6d49ffd18d594231c3f3c887ee7666785020cacf103d43077c66d049
cf26c1065f593fe34464dd0f56b0eb9ae5d153e5c53868d2e7559246c6509316d118d39f
a16d4b3b569166dae8305e3c27fc7e4cf418fd3a4f61d693e3404d133c2a3902a493bb26
6ab1e152f8e80eb22b94c1ea852bedbd4307337801281e85e6d0c6a1dd86e2e9a6bfb723
0cd6deba68545ceb4a5f6b316a115cdf6eb6d130f76744be6a9989f75b3b7871ae1923a1
606853f28354227a2eae7b89e018a3a59a485e268e79a94f695092169da3ad1d197ca168
fead37c3ecdee339c521a8e055b6448d77adce3292f7f8873865ba06fcc770dc2757c14f
b9247ab94f5ecccff5682f19f2d00777aa09e65800b38932aac0d65276b9fefb5f7cf8d4
40afa16aaa3166ec274d73833ecdb74e39f094831829cf9b92ddeeb17cd171128db3c8ae
62dff6ad344bf4882b0a9f06557fea6b91fa4ab096c7d3d58220c7bdc418a8f2eb0731ed
45754d013c21d0a5fec2a4155b72ffdf988e2a505e2a79e345947e2c868eb7e5583f8541
86102403e37f59f5d4f575649a9259bd6f161beb247d7d87a37e83e225c1cbe0f8395492
42fc639c36e0a274d174bc400535b657d8d93c04445230a58a900ed25dfb24fd85a0078d
17ab1a61b9b94186337f9700a7abc56d1717fbd94e90ec79f7e230f7ac84086e95be1849
5db58794178ec7a10136b69bb8c6419c28c089ff5492df6a7859f7a5b1eae33f8990a003
888c9149f6f79a99605feeb8064e1d80db4ee4a15624bcd4c3b64ecba7ae1d53e7eddfca
93fde29c0795b205df996e1c0925e72b2e1054525e585dd03a653d4e172afc03482c85ae
faf4a128088ff78fa5d4ec0d8d7256a059a1318c3618dc4e1cb0011833b6420f9c153dfa
662cce6c87f3e1883761d5c4eee447efd64ad4e3e2554bb33d3a1972f6afd87bc11e3ec2
2484d39eb23a24bf9dcc21b4864bb9adae1398213df88f9cb22e0b6c1a15fb8bdac386cc
3eda522390d303f1f3d7f154438f2372e445455aeea0ff456f93d8b192548c3fa57eab99
997b8c76b80ac2d4b2e9770819b093dff36eb029126739d5f49e51d80edfa3991d4ceb97
9e235642f3a2cad4eccf1d4fab279183ede8f633bfe73f5e18bee2a54487a87b6503eea0
399fdd249c68e467e0a44331267b447a75e20fc86f691a81ce224750a5230836c418eeb5
7e42b05280b38e8ee0bfa5b505909a97c0cc85b0436cd17224d133dd7e65148b3ba8afd8
1a1fb12a0dedc101251ef02205437214edda11c54ab9b35af045a2e7ca5cd9593052125c
78aafe1db7f14da24feade6d74e27eff90aa81f3f6f6c5be25dc28fc6adbd0c8e406cf1e
321501148635817dc96f54589ee8efc534f4cab0a4be16ee6f50cc71cf28f392a8eb883f
799aece7fd48c51f237e92278fa7a9254744abcd783ebc60a724d70b4d3dbffb8b7d7b2a
ab06617924bba14d98f84f4138172617f42c5f565ad3cc43b40e22cf0c2c5ecf0f8b233c
c6db20c1ce1dc4ef4a3834a8774c2e52f4a6c9f2fd5f235db5d804268f6a4cce822c7ca7
37fe0c0bf7f0317715dfc54f1562ea1afb649040c30bdca0704e70ab71de3c743a71b9cf
d8a004c86c525d68b95663853161a2043bcc56d4fcbf671e76529cbd5d1b86682b5d2425
881d326dae689aefeff83bdd0e193ba48611cc3f2ddfdace22e960b51e32a2184c6ea246
21291ba51dcc8823fd1eabf137f2df04167e245ace80935c10139bce1f23f4eb5c206a37
72d21dfd37599e89cd0785837ab60de749ce0dea1411111bad60b124e9b20f97e3a7e102
21b25d628f6963089e231b09cded11e6ddc8de5c9c78901cd79c64141945c9e834026139
389acf44cfbf82221591f15d6ebf8dc3aff53f748e896792399287839ed998585c8d9b7e
e0e0b9679a61a8d53880063ad23cbbbd0c8cb8e6c5feffbba4111a57ec7ee7060db7dd2f
90bd0b673118972c7b1ec515a7507a6424426d9c2adfb9daf843aad7670d444453fd5c1a
9d88138e3aa2f7949fc716bfce40266cb9a54c6348371976a52fe6253a897900a87a9ed8
27cd8d959e6db35a98ad2e7c8a199b19f1453a3b6680d4bcc75bb2db3fd80cff6644ed89
4bb4a9d87a00f82bfba3657cfdf78a2d96fe275c17ab4303375fd6244c4256ec0a5aed35
70a56d1d769259aab54aae7138d023d9cb15727637f0415a73bc4a96a7ea78bc8d39265e
4caebd976c0837b9066a076e3997e97378f5430acb2b1da6e5831648cbdb69da291829a6
7eea64d71719174223b386971a9c93e360b5d2862428047ffc8b53d2c80453342acb63f4
5de5dba9503de334032561f6cec5fc906116f6a99fe9185c35dffbf63ead40b18b6c3203
1b14f194aed59974851f437eb54a18f600427c20c78cd707cc730be6505f87320b18f985
651be38e8068619f8a6e3fc3830f7002b23743f794d8203f2d186fc5a8acc2537051fcaa
2a2b1f4e03f5da4c736ec593090f717fba04422cd0da9aa347a60407ca5c32e1832fdaff
c3d5a67de2fd0cac78656c8b34ae6e02ec18cd57094a67bd1e34da8c29769b168902c7e4
0614f10b55dd7a9f8f7e8ec370235e84d498f431897a0fc83bdc90ea197fb9117acbfe90
ba92e4778ede624f4ae8adbe3bcc7ca140f61bafb7c2bc1d7562838d6f0e2120dbeac7dd
9a25f80d02d1e18fdebe5086c4ca0664ffb5349b44df3d576ab206b9c22f102032367a3e
4205005af4a270a3d764530eaf91d38b30c888971294b579a9002be6f89aad14bf54cfd5
c4d8a1bebef016a85e3ecfc652175e194344f658afb6f5dfd15ceda476ec6e10a795b48c
f1d533971a84b1501fb44145558b08caf45e008025714d2a490e7a8ca5f3b7c25c88f8e7
a0008169d2a59825c59b682b1cf9ec2dad11d54a8aaeb57f2058616ad3a59025bb022770
6e1defe71d11b12d43aff10ef33d7aeeb553e8d522a1b99cb69c0020c6ec073c62f7c1e2
207de5d042908429feca07bff926d046f28155f29e9beecb94f1022fb53d0f781b0a2360
ae000f6431fc1869024572a4868a65816b895d90144c0bac22e5c576e26fe4ce691957e8
8dacc1012b0fba1ea89c5e6d10844e3164310ec57d7161c613c60ad8dab2febab96da4b4
fac8095f279895882e496dfcec95202b3492403053abac561604a755429d44840c0dad9a
7fd3fd752fb6cda4329556f99d0664faf56cc63285e18551861f5d8c377829148f7a0911
623f9fab3fc55f427b7c87dd496c880606e8109ff57efecf2fb9ab64f177afa40ad23579
7183cd15e641744357de46031df4b1ddec6dcd1f3060cb404e29e7a81d0161c7114829da
0667e2cd0c7d6a8ae3adecec31344561b2d18dee11a90945b49dc3e43b2ff7aea1b0215b
92566e96531ae1bf164234ecfcae680fd0f1d7fa7d8ab28d75a997b6f0e6f7a5e94c0401
7fae5f1266337103e28ef10bb27bcaeed85f8bbd3e54f18b349b1e0a3eba6df96429e9bd
aa377a42f452b8b77efb128ce9c5b9a9959d7ddeb75fde488984328b3a4f4906e9be7634
6c311d84e5621caed86235e80677541ae1c2d1d6ce403eb09a5a7f6b0ddf685a33be066c
10fc5d4c6c2ee3fa5e77bf3ab6351fc76abaacfd79cc7d392059c7047e7adc1ed56607ee
154258b2a9a46b27f5b9c3887d640e74a9a5bab0dc537257513983809f62f9881881280c
71fe127965bb88db6c6387c40b9988bb00f65258f18e8aa6a4372553b44a5f21f3b0608e
5d40df59342439a1d891fda2b95a19338258366337b002add74a2596eb51a3551a87fbd1
41c5167523589f6cafc4b28ed1067c9c302a33780aaa0e096e33fa6cd183948da47ac6aa
8de31e9b095371716b79a6561de68a0060558d4c996b15d528c65070ef8177008584b120
986ee78ad681105d9950b0cbcefe410f9166b044cfd046cce0770b3fef5a0cd51a142ad2
d76c9b1b426505f62120d64a62fe17846f06ce3733f40039f665e24b181ec65f9a64c463
00488083c9b44b940abdf0245a735ca45e10ec1095004bcf208b4fb0c60592fcbf3fa6ea
51c7c614ea3f440b011fa21e2046f7e033ceb716958d3fe0af778419c376ed5708289530
a4a1b1103ddd2ae01893065b9444d1b5abf3cfd7ad30256b08ca5824faf93a13a3f98542
d29692f9a5cd4a5f840cb49ba700c87317f3ed4c1f7478d11d63eda4908d34210ad6b358
4353ab0270d93c963c5ecd4e7ea4c8a3931f5ed9632e80158f5ce7d2fda3f672c917a421
61d85d5604caba99ae677ba5b07db48e8f31a9e3fe8b125df4f683de060cb4148f2a1ec8
9cd00c923c0ffadd1c04141f1fcd1cd255f1014b8bb60ca37149122c7fb6dac6d3ab99a5
8824b3d8917bd7bc820569e409bcc57b203d5288c04819f1c0baa10c8af667c2133afaee
bf54befd5b5eb081d6c3cda0edfc799faf3c1de526ff60b34d3202f2019d9be30475756b
330bbb1b236531d0c2a0ce1552308035ba7e051562b580a67fc1985f9b8d438e8538b914
96a95e754920eab6b806e5dd74c371a06fa5026cf672152d5903e71068b23e3025caf4a6
8028d3a77a1bc658f39d5a1cefaae5a311d4b7a7968890c3f06c7fa5daa0730ab44a7abc
6941b6167f0a0b64727c8bafbebf4e13852f78d55d088220e1b029acb1e5f8b3db481658
305378799d097b0fc5eb2be7a94995550633a2054c18a1efbfa26dafc1a8f2c52cfdbef8
2a37d9ebdec3336788fd55885f2d3488a8a89cdea348b14ae6dcdb1ce645db0dad1ecf98
99d51e46097c3d4e61cb47a5d2f031eb42044b0e267c71b2ad0abfac5fd58d19f3d49e0c
16dd690fa8d13e505828fb375956122de3737edd05371132fa45da5c5f821d66c0965e48
53494e2409f1c05649fe1567f29117c08901e09fcdb7ba094543047c03e1524f8d0176ff
9a319446174c3296469d25b0c80a4040990f1d8a67813db53cde5b2bcab451e89f5d2085
907826b5e693f8dd54f7180f33db91cbba340dfee20730e69fff4fa54c685ee2a6e87194
482ae826cd5c67600724227f7b8c18c6ebe89919b934c1456b149facc6358ead6b690ad8
d89ec0e7290e2ed74553775402319a05ff9a5db1f64a7bb47817717743b4b68939276ad2
ecb550aad22865de1b29ff9a9b6b6d12997d148e9d6169a768753cd90ea6c150f7b83346
3acc73f6f2467331a15f71a882e266c2ba18b30682a7560f869502884a575305da1185e8
052b3d24a403fe9243370de09ee103d63ff180d48d18aa37f183a7df43d6a05393d830d1
60792dd114ded1ecb96c1fe0f769a7fc183e7667028bf266d926d2a092827164103cbcdd
85ac4560aed4523a3e43d1defc6c44e6841d125afcd74765ef161b08d13cedabb130da2c
146cb13d0a24dd706308b6633efb14ee95411f1046c7e40c584337e3baf8a8a78ce49954
dd2f88ce9587225dba19ae24449550d60563fc66e959e1b1abbce2a9851b2e879e83a0bb
405c5f9f46a067cdcd1e6146265a6a9c65c34f7a72c9efac3277fbc8f2aacceff83909e4
f0d1cfe3ff9e4fce6f4bdd7a6b8ae51d3f93e47aa8a45b3f94f8f73c613c33a39714ea2e
ef9652a562be14daf2a719bc546d44db4f2976789b90a3812644e385068f8991729e4938
a6dc62e3d14bebdff5ba07bf0c948fb1539828707ca84f9094059714c9fba9852821aaa0
b29c18eab441b487cf53b4807c5abe0771008f9b8b0b5070ee63257d970d410a9fc87337
6f27915571d99bc01b0ce74a7432c062d6ffed0c9f47438fbb1b2043b3efb1df98b30d5f
4e539c9f87940db04352006960108a27303db20c9e5815869ac81f9bb53be4a25b8f3894
10495ff72d1afc8e5ebb6a64ff2bf851a96214f93c592675f4577e006edaa38cc3137594
fba901d0cfefec2e076f766df3d096abee268fcd932c849f2345bf620c05c36e18579ccd
24907ea71266767b859dfcc73503119ab4618f2a518a57eda357bf47f698498995d922d1
1ccc1036292609773512da796da13fe7636ba1ac8b2d0f991927023d326a0e3c7e982751
3ff59b9e8618e133d2806e3ca9acc9b3fe41c5f6aa37b481880e99163eb3cd30c2d1d972
2f32d432718afd0ab81cbc1271b65d124df94db2efce73860cd184e3ccaa4dea82a55cc0
bf4a7ef505335479cde2b4763bc33f13c64e80b178f6e4f47635008ea77e0865b6c30a0f
6b8958a3c0803bb7452544f240c41b86b0e6d6a75133877ebede7244d4575ab5d70a3c79
9503027bcb089b582f75e4cbb3ca8f7902e3efe525d8daf57fcc7c63a85f85addcd2dd27
08477a49c904ddbf9784b7b8fa08ab3f5a3f063e64be3f030a5b3006b7dbb2403e32feb1
faa0cc37280dac25b0d59fc0f50d77fe6e8f467a886b860bec159667b9b4e8a96e3b0971
7e5c5ce973a77572980bda7bcedd8bb4aae47111b8f0b1729d6b2a023baf9ba75c3731bd
29301ad7ced6ba82c25fc051650d82e8e16cc6cbe27ba1913c76a8d06f17323a6e5920ff
81c944e1bc52129e1be5fcd7312f3f202f694dac6881ca0be5aebfc282ce7ee74fcfc6ca
56fff17c4666ead5d562c6ac46c2adcc6c671ad9ec4eb55ce01bae5767b17d9c79d7056e
601694ad87969a4e76ab8624f06b7a4e1570b2ceec1436d9288b64ef979f34ae34e5c73e
f2ef1d7f2fcb1fd15dd43fd1eaf9b8bbaa7e5f007f9c89562529f5540fb9313e0e7d7f43
d8f820d9d49ba8df156091385fc5e733baf65a5e5fe75fbad0fc911fd5ed62eeda2eaaa2
75f3f410f7a8d5a068c97c1643ce607f9415c8751585ee6132a6535b563c92e18fff2359
83bb4dd16cb73d1831482d5286a8414ca76021bbef582c2fb9cd0311751b9e3539da9e3a
a17e15ed4eeba9aba3f1d4caffa1237bd88b62f94b9443ad6e3198f4d4753781e649b6c4
72b8d523b2fe2ae0727548ed0e78ea4dd5268b5f375959da5461aeb2f33853d9310b9fbc
8dd236208853c10d031520a64e408988317196dec2ead0a8a6d2061c54d37f29b6f931f0
99a40f2ce6ff055053e47775db3ceedaf8f4c91f0ade537e19a6156ca252349dc259f735
a74968fb0579f972bed9018be263f03b6d8c9518dabbc8a539504aee461d20749d85d09c
e463288daefacad6ba4bbbc5380a334a27f28f3c862228e680c16bf05fd9683afd1bbec2
6ea22cb396f8b8df085bad132375b7ba7d7d1953f81947467eb905d8be9697c2ff33a5f2
7d37078a7b8102321c41cf98798567786fa5c588bff33f1e8cc8c0c81cf41af790d424e9
033e452aa79d80835758ed21ce9ab75d39a5afd7e19cc174041ae81d6f3b8a6a16dde969
0abf1c13b1174530760ad6683eb6af11c1c2d3bf9b3b295812c6dae6a3030bef2e43fc5e
d60ac7614ff5150a406749c7feb5593f14044d212ca0112d2519fca15e631113736c565d
ca23838a0abc9bf5ab53cb7e199bec96a14cda360b88c81ce3a41afa18cd14fac6f94ad9
c8128c30c6b04c39a60c3edbda71eb663ba9ea850193f5ddb6c1b8b62ec89dd7ab388bb7
f8f700f887e2a0356717cb1d3de4ee199ec8d732a9122eadd954e5a1d51585c63dd2f4b3
ca91c77353b87785cca5ed4daaafd84a39720e85f78427e14626e5e3a260ad3d264bc96b
8a2338d616e1a2414f4e2c6c4c3789121e548fbcaa874c15de045fcffd44db080d8ac440
d3bc0574fab2f4023df7125611e755ed05b5163cbbf25921d1b863940069b64a7c6cc7ee
d79a76f48771f6838ece947ce441e3f01409fb022fcb32ff6c32e0187d4fce0a0d535d55
b9c41b2310b50d988097cbc0fb9d6213986f84b98a3a9830dd0878aef2ba7b7b97ab6760
519bcc18f3c4563781cace8509a2776107be289f49d955b6c6405b2f560d350c652e8745
05b5d3973324043e73b21a19f204dc01d853d28f16e59227cf0ec293fcaeda13ce241f68
5cc39bde61b6057beecb00e5e2d1b096ec610f57775f0a19abd0d28a23108d81ed01dd3e
d473a5666e93e681cede78f3fc02548f59b3a8b5c46042072ba23f7273713b2b36444fb2
5b4ff49570f259d157f39f50edd8a3928cdf7a26dd028d8212ecb78527179c3894585717
a6355d2c5be12f85246f6a4cf69254c218ef706010334d33ad89a67a47061b9ad9b5eb73
bb7e13da90d29ecb8b290094c50733cb7968a42041fa37c9bd28f13221fdc489d1a06262
5dfafcee8f6637cba7aa36bdf40dd638d07395b9eda6c7c4f558bcd211aa08d8ce69de9f
ad43e1c10f8f1937100cf1dcddd67a96ff96c05263bc1a222409750018a591bf230c7b01
59e03f3224be64712820e05c2dd0611c2c0c721901fdedfad92bb21b929826b8fb73eca4
dac17c7a24a26178637a6bbafe3a6fe2ff24b7abccf62b6e3853278a587c0ee8c587d2e6
1090ea7f0539069acf64caca494c9aae15cba0d7aa8ea7edb18c924fb53d85c17cd5cbae
3f54e4e65e05ec4577ceeb97bf481f9369edc1f39e2be8e43e23fa6ca87f499252ed1b56
5c129f7694082883a4311e0143f70f080c954c24c8a594d039a17ac0078103abf5c399d0
8401332b892902b89cd2f0b1acdd78423df4538eaa519879b680b6872ab9c9f42ea5e040
be3cd43881b3cec64bc6f86e4f7d1499d715a2a7daec93e2a6ca62b99a378f0f6ddd0f98
801e0c579269750cd0941121f66122187b9a566183a6dbb6dbf2ac4d94270074baab1eee
3721ef60096a8530691faa4d4ef85d24ac35bd63d352a285cb9702aaebbd84b7bd185d51
db6a28f3c710eba8a148ef67beab07358eeac2d2f217c7f53085ea58d7be16dca5b32396
a8ce3e6c21c561d6a6d05936509cf0f5dd7ea67caf2dd5eaf2894ca9c13d2c2ec91b284e
148a2d95a00e96cf5c010696f9de7220115d057bf6eaf2aa15f3e77c55e0f9b69e798f5d
e00cfdc6d5e7692c17cafffec46a550a3e59ce813e8ed821ef4d151c83c2eff9ee576e03
d7bac8d51a92fe998ca2af5535e4c3a0af2fd9497f5f3c814516a4d0937ef8f661a010dc
6e38fe0c95c7f0bec58aa65f6aae76a9babe046a750d76bda66a557d11d1d3d1ec29d90f
10eabc66b988d198b83443e2766341faa03b6fb4764da2daf24a5d844ec4f1c81a965d06
1241570b63bdc2d9d073bd3452df9025f82b4da5a19645e99061d16d21bd8213c9da2c13
d8dca5f5015074b5491eb5f562bfcc7315adc885f56120c4b671b4e8db12fb6217f1bf38
7a713f1f51ef8a38f723b7275012b533322b3cd7c7df3ae7b80510daa4d3aa89bd2ea442
eb449a314d2ed375ee7b3f1b6076aff00b74e309a539891c5fcb2716705159c1ccaa4546
2a52f1e6261f9938690c2ef3041a6de8164337b4adb93aa1b91d3b87c6e2287f5e6c98e2
fe52345439612b9b1f526c1297a02b43415370b2c1ed22300328040785cd83032ea2d31c
b9d2ebc742853f2757c54e24da2b316b5d90a38662b4d2a82e9699b83f5f1286797cf5a8
91c9ea54cea06764b260af84c7fd7c58b3c5fa9bca37a84c43f5fab781940169f71c7a7c
d12b2bacff65b5dab945ce58a930728ce65ebed1255b44063ff108213a7ca7253d6da1c2
d2e6c1cfd0eca8993e91092915719a6291f91587780357370a917ce943936d8946faf75e
657ab9b4e199902b04d84783bb7046641f081982098d9b079dc3179f5ea82e582ec3dfdb
7d1c3bc26ec7ad542e5ab17aeda705cf215ae8385a6cc6721505a79d4516c4da6b1c883d
4f54a5744393f29c7eb007a1b2f871ed0b7c53250b3f1bb4a5e2c59f3d4c02f833206f06
01ac7673be0b481bde70231dea891f6db47bf82b763ddc348ea806f11b325d5c6db29214
6897113ff2ef7f71edce73d10c3af69ae9dba773bc54d711b5e226f4977a1b21a9411c61
11f7f929c84a0dbffe94a83bb6f332727a72a784da97252a541f980752dff9d315f422df
f947135d1f9db789233b9cd82c8f4d5736d8f940bce8d296f6c27502e22d4a5d715dc821
82a0475f71bcfe93df22a214c3e96ffa959400fc0c570bf127968a6cf8c72b2f95d3d720
7fcdc9b572b63604254e101e7be3866a5cac52e199748d710bb5718600c6dbd0f4934f6e
59586428f16083471a2dfbfc8615891da5fd164359cc23df3da7e9045b03ddf480dbe25a
0cfbf5966369a7528f43e21245c6900727548788f11b0dbf78e9cb7787a74d53d6f95ab2
040063a310f05fa1d02919349ab8494443c6f03a8c05b83636685447d38df2ced82f17d4
10dfbfb4f96c31327e6bbec8870bbb9fed220ec83349fd8898289afef690326df967fc17
1e3c522d1a0f3848fe34def5d2b3c15a272befe063e57706cb6882ef4ad839ee44991010
24bd1329c52b0213fe527a1f6454cda03033d04e6cd897649f763513c1173a90d1e3af3d
d7dea22c11a786b52839319e612b3d8e141cb11d2f0af56abab0f38d05f3833811eeb6b3
2636bb08aa8a8f6d62cce17710292d1e7891fd58c84ec6e2af0d6d06460dee9ea910a093
3357334e059e6af55a75f059b2310b08a86ca26bd6397e2b662e72c6e0e485c03c136240
a7c4f7b58c8fce5736b80088d8b4888761b443631a165088bb4b703e059beb64fd17b8dc
ce19facd131e2a10aa0ee4ebaa297226c19c686e023d69818a49a7dc14eeddee3746ce6b
d872331487a6a07a4292e4d4c7518d792ee38d1cc36ace307a5ee10e3c55262156dd3d7f
4133634c552a9f5aa1a63d07a0443a434715992401b68cc6d9db5da849a7acdb790503e4
2b95592915151590dc4a5a94c477afe2a603152eec109b9aba8a7f444d4f60037d39fa69
37543b375c3f6313a82fea43d14eed7749841d673d2542814683763c2cd28413d1def61b
1d181fbe8a3cde699339fd42f2f61f2c80daa8b00b50cdc150c9425ee3c8162e33f8b6fc
9857258024cc52b19b291e017e2f0150b814e7bd2663f7bc4ebbfa52296f9a9e6c129aeb
800e28abeb40e05536cdb916db37c6fb42eabf8e5eb128a0adba6166cd68e5d034590cb6
941e3f89c90b8862aedd6bdba5c4dca40f604e39c05240859cbaac468bc24c8771577138
4a815ae1a23b83e132812bb565eccad87edff8f3ceb141770d31ef60956d747dbcbf3056
0ec304143d3558d13e5278c8ae8deb6a563d62ea620c0ca4940b76834688419696ededf7
3d36a1dd64d6130d46201938f0262e4ac6439816594ba4de2d9e1d7dc161f8f19f7a8acf
d841b1dc2161cb39ef99ae1c77b29036e889c25c3ea55fe15f94f240c471d37580263d12
69f85004aba994f7d3781a01c606e21dbcc8d6098c1ddb4e73942a4e7ab8a057943b3641
6ace7cf86df7509a0dd52398b832b0746f192e197b4679e74df8d24371c497de31955d33
64e3ac5fa9fda00559efa4adabfbcb36d2b5d64c08a1d5ebf4dbd0bf0b50c7e7fab1777b
20ebcc5c52c0065792557a76a667567eeca3517589549f75678385b26c7db30f07f5b8ae
28c9d46359cf8b841761fb3b260548c0006119e28d6232918ee8a55a57829c90df707856
091f49b0c89fd06886e076774b7f54b5cbb1023932edbf80c71e9bc42098f4a8a5174510
8357b5c7e6fd52815f8a52e9ead5f4cd387e78547566a4a338720046483f3073d843e917
069c2e5a7a9c5ef6a30d74d9cfa1088d60cfbf70106d6f2787f08f0a83b67811ba154d45
8d15982bc12a0b82ba1fba0d5542c946fae9404146550dd109268e61589ee1998805ddcd
0b6a66cd6e75c509ff06ef5d52445d47c3a3d7a4d5eb8ca111379aa66ebed5e22c0c64d8
6049d1c8c3dff213ffc5671d45cc27e3ee21be404f00c49cbef70b799c91c0e748443c44
36623918a2b0c89c57ba0f6b1b8d2247337d4f9a8329bf4f68926ddafa9b73386b2eb753
cfaba73f731f695554c058f4f8c20af9ebc1d3e7577ad26c6594d4b8b7b0c9af45808dfb
d8a48a55fc39e517d98ebfbb02f78d23558696d359d78ae06340e9055e3ffe358c1b1180
7bfb5dd99774ef001ddf076125d3a83d0cbdb33b9bf3fe0c0a64b735c47deb09b0389edb
164da129217eacb747b66461e54c6cbb5388c174a949a0793d6c9050124dd393739fd5b7
51a4f7ece2c9f06e59cec6f642c24fc686e0029a5d8c88d99fadacda37aaaf3c29cb4f87
608cf552ccb3568c120e236067d111f6df270cb4907d5a270b599f10ef24d1c0b65e9b0d
e197cc6254cf53aa1ba7cc1541e0ba853d992b0ead3097441728044dab8ab24acb861a8f
8cba5e6a6de183d206c729f0e8d6f7606a6eb8f30207012f9582bbbaac2b6fcaa629520d
0123d567d12eec647b73fccfc9d47371c3e1be9d1e14e542c8d5b78224fe67d6b360e8eb
21ec15a3c7558f3e7716a370f081d42be8b32949eef4e1f21f66b6164c48aea800710df6
747c7c797a11e967e025710f7767e79c555e50d2e639a0a91fc6756db98b896e57106927
45d3b52ceb5c00cc7c74b3f958b8c6f8bf6dca58cb8ee8d82203b0b94c18c6497d67b976
1309d64cd1732824c7ea967222119094c191b0f6da5fc87468424a06da37980d344d7e84
2d4ef6db80c641524f84f43010ead499b5e0a64505c851761d044fce0108e7b112dff5f5
7f42962ed4d3d81c0f4187d933477a1ae39123a65952f2df68c4e8a9e5020b8d6e7c90fa
5b2bc2315d0b2f555f85cb9f9004de685582c60bd7350a31e19b069c96f19fdd1ea5aaa4
e84418324734a0cddcdcb1f88e6a8932caa8945c03b28b20c0c2d834af8e44591563774e
d2148693229e0771e6b009f74fdc92338e7b60afe97c0a8e9a5bd2e362700b3664a8406c
95cfe82c624e073a67fd7b0336bfec9d48b4dcdf53da6eba243ebecd4f7f7a51ee784e8e
f59ff2c1b77911ca881b7461f3db6206cc3b76979fd97cfc501ae88b006547482b8f10a3
e21b5c51ebca342dcaf261cd3a2f39bc422e2c191bb167fa4c1d8243a5e0a487c9a0dadf
3505dd6e4c632153cd51d985900446f176f7a6a2009e04259940803e525380bcdb3e3de1
bbc5c80fcb9d5dba765a8877227e025ad99e4b6b9606db4928c74361afd1e6b13ccff106
87265741dd4f18bf9ccca77a1b3d3a89aa986ad9e65e7cff342bb51f271f0c0a83f41aad
a09204b78db39752703029ee98292cbbc3ac46f86cbc66105e3dbf946c920a6195b6232f
4ccb8183977c31b07157ec3613faa88ba3795af609d1bd51f8b7811ebe020f05d4b0b89a
d353d81bebab386c4cede80ea846c670bae82077dde237de8c628419e8431cbc781bb565
1f9d50c0c1e430a0969b4f06bec64ecad905d3efbcf5f92c810cc2ae762aef016b3b9a1a
697386020cfb5c1b224353a9d3331e2b37ad2061f59c1ee074ee8c2dce542197cbcea289
f7babb6fc808a1b1e873454bf78c34be9a1eae62de61fadc49d77e3b7d18ab87872a5656
9edf1eb8b099f9620335d2bd610c0fd3926945a8bfa0f540d7af060275b9b8e6c1780c8d
65b6b1118c2e1a86c502fefd2b361ec39f6ad0ab38ffe2f92b24f3548e22125df2f97daa
c4b7272cfd50f0382fd3a6c751a18f44f53da4519101d1faa59329ceea48af12c271d236
a814f9987c4419e8bfa36d19fb847b3429fdce3d4866066fbf17e3209e5a52419dc0aaba
1ae092204a67e9d1222f3892f7614ae62d8448bd923347cee02e698d4e10ff07f9d10049
9876027b3c7451b9ebb9abf54417d5d53c199c0555bac38e88db2d0e1e445848b2e33c88
fbac47d3e11dfc6e98430577a8173d4673fd7d6a7d13a4dc22b0d65eda209fca68d6b508
01e6740a1baa9224ca9d502386b3154c29635cbb1ec97d1d6168725a6d2717921f9c8540
4eea26b8bcc7313085e0ad75d2daaa62c2386e624c4404dee7431353f22a06fc6a965328
518e5281163ff7e26e91123a21847c9f8e876d42f7abd1c46f40f9c4d079476c7c2eb898
ca5849fb2f74fb37ea0846b1cecbb167fc7ab9b47fb7cca0ea9bfd3c53558898a13d4d77
f4b95753d5c70fde81bfe1db721c911d3095e4a853881a90deb9ac469b4fcdac307f4a55
2aac9d1e5d8cb20e24e30ad2599f6c5b75505c053fa9983fedc84a7c45a408bcb933a755
b58fff5e9148e6ee8eb9593bb3cba68cc6702cb9e460e136d4792f0de5f51215818cb025
1e11e98e131b14777a1f24f62cb40912ddf6cfdc88ee55634027a6d1d05a0d04dca30b78
37472804ec0e4e66c390c14b38bb3d6d47455be47b020a1ec4ffd66e5cb0b61882d5afd5
571dfdd2c91e356f698e62c6e9c1eaffe3dca8da6e33dda8d30e7ebc24693ffd9f446fa9
6e05e613f2b20ae1a17dbc45fe7ea4928119b592427864c1ac170a8d303282d193ea18bb
a91339d40cccaf180bc12add8b7a8e30ad8a8ba7ab27fb84321e47a714a9f1bced5a42e9
9f56938ed355397282af9561b8d3866945590bf2dea9f15c5026173dd3f4560510720a64
c96feb43df32e0dd3f44b07d60c4b346e2ac9de83b8b5b74aef5e5012772a2cee63e6d01
6bf998423af78693f7e8bef4fe3a66be52a0702c64e56d2e8fd859ad203782c4d9ef775a
93dce43f9ca2be3ef45401a80aa66ee19e25d57842ded491f8c754fe4a2299854effadfa
c3e896349c24417a3b6c9f5493830a8b89de0c4e76f4dbf220f390828f30ee0940a7b59c
42d1460482d6334b91d13eb6fed5d52ae6590054586a21a30415c25e5e534da0953e56d2
92200b7fa63a6c75cff764511813f0eebd0d42c4f1a3bdbd3a5c5eb6a794052fc92df459
f8be0ccb973c5eabb80ad04a7a58adcfb5f6ad93b86c49e33fa455c4f87eef381042ccdd
b1546f17ebc83c67e65cf4684c6504764da81dabd53249aa23687146895c9e7e938e0a6f
021dcbb393335294d4d399775041637d42d506564d9aebe870267ebcc250c86e53b1a892
b97993a8630d0816428d9b43ac28037d36cbc5d17ee3ef12c75496b709327e7fe6c825b5
ab59442dec30d512807e6cbc96814982b19a3f03dfaae8035192c1fcf6d211679f5efd45
cd9471c5069b9c10674f584b3015c48bffa619f5652a76a1be0f153c7870e7e20c0d8e82
4720ac8fbf8bb2e501f6ab4f5741b3b467e2ee32b6cfea52a029e466868bd141dd563f2e
1d6da38952f087fbaffbe2c13b774a2d2e105cfc6d3a2e9f739a34f8d8dd729628c69623
af39357b66b8587c3a079d53c623b41f9ed89b8a550bc916dc2fb61966858758ec4b7b86
d7473c7c2dbed2768b0bca9d8aabd9ea01a7563d6c61115ed08ab9b8fccfcfd2e237c92a
508b00a27884b5a00c6c0657ec3d19fa93d5d6390cc919ba54120d932bcf2ad5540409fa
bc8c30a113f418a6eb3ab7b80ae377ecf9964c4b9f2ab6c97cf7ad56da15d283ece0927c
9edf95264e071ac4cc961c8148e4d97b387487e17cf7d384eaab713805ecd7ce3194ed3d
874dfcc38f1a0e1bb44ecb1891b3daa5a99d7c818ddfed82cf76018b74a9a8a2ffe5c83a
9af837860cfe29182bbbe8f0ca8103c4788174cfdac6c5f981aaccb67653056a7d0c4244
8201238c1a6f96812d2d4ab41c487b4a2b6a1bd8a3e5c784f34b504ae9c6b64151c8cddb
472f9e7ad93ec179d04d6b27c40b5ddf6fc1cd281b61763dba2a27cd1c365a82334fe9e6
00de281b12a57913cde60728ffe582e0b2814320ee45813b578f3af204c1cec3c36a034c
0ac2b3f6ba95ae727ea5d5f18a955f5dba37f60b68c3c5781a13a13bd095735ba094c6e5
5228e5a8edc5d1d5e48d546c0a21e94fe33886035ba98ba72e96743d262e82774d515cba
c8c66a5a2d596d605dec2ce590b66bfa479e93f26d2d900257a5d8d0d3e898c99a78c11e
38455dd597552954b08558bf0915f8a54cc353401361b40dabe59699c5f57e31624e1aaa
696a89d8c716639b300e6b52391319550821d7700dba6cfd8b01f8a04e8af740f84651ba
2d6fcade2e0e302a68288a3d9955cbd18cd3ced2be9af07bf9388e44f4c10ede96820a39
5180bafdd565ca564bfa5e9e7229511b12c56076d8c8976536a7cdea577469049574c52d
e179852042dc772450358ad6a5b73e0a532f1b8d3b87b1827fbfc12858e461205b5e5566
fc012ae5f3723d274286454d38bf6e2bb64e34bfc6e2eea8ba8c3e1c4a135076b3628a78
3954c2badd0537cf0c2803c80a7256f21f84cdd840fecc7a402ae785026827e545f13d27
358ff81510f469ca967b188082f95834522851b89b74b5f0898ca3afe07872f4bf094b2b
547df18e73caf230a39abc2bdca4d14ab531c511b076649635daaffa6f2dd006d9870e0d
cb69555f887f4708add941bad70e55ef2754d504f561dac31e5a7cf4f94242297b83572a
4a83ce8730b5fcb3966f424e48c2dcac434dc8af128e35b8082ba9e0444e8302ff6c8f74
fd5177e5ce8cf21a7bf1d5a434f90e6787682ed759b3afbc98b33b66157953e9183dab5f
51ccafdcac496388f58142b3cdc5a278ef045fd58fa2925b7a2f446dc5d8ff98e5976431
53f443f97e82b473b4ce714ee72c41278bbc0f91e902c748f1a1fc6d1cbcd1984b3c181e
0e4fe1955d0ea2a351c6ef16df70c606546c24e64ae9f1eed60df419779db68046843b9b
a23db59f5be9404047f9d4cb57da1efaed861dfaf44be207c5567e94434f2a39bd49221b
98ce98d7d21590a2a0b6e1b70fa5a0d3b6f77e844d8a520f0ad2608e569cf91bbd3d49f0
41b3dea06a9561f3e7d11e7850867b79718007b38452864d07c598679eb9b4fd18038744
e08aac5bd9603ecef6c0d82eb281120e1342bfd7d71a6407fa933af8c06d4473ec75d7b0
3f6c9e3d7e348ed3eefa58e6105a9d8f9fe4479ccfd978d8d52ba74b55dd9829b1b5957e
c9695dd4892fbe385340eaa823dd1396d40d0daccca40606d32f21f3bd980a5d0491f62d
01b641e495be11a30c4eee39c4dc105c2ff6f153520692bdd16d042d57ce8240240a0f62
2b81aa1a939ee73c19e95d96eb3da1bc4b7a8697a2b234118cb3fc036c5dff23cd45f83c
44ee952577324a9fe04048a8e31a74688a477634ce0da6397ff1ccd0b91d874d915b2107
2c1e88a7d491e38b2bdb926ec8fde11c1b285c1757b6502c9a487ad66ff2bf2ac5af2d9d
804ec8048da409a0339d2bfbe37f530d68a23690cf29d55881871b9b9b5dcd0470a22a4e
57d179023a02eee3a9ca5ce69735d7f5873e6286784a8040dec4024bfa5b45e4c1d8fbd0
125d4a634ca03f92055416ee3dca727e73f9c7216ee2e4b31453368718836b40ca33e952
70eaa1cc71163a57e294ef4fc98fc593cdd83ca48f5e9fcf481a1a4b0d97442432643965
cb459159bb6fac67745924f313e79a559f20bd279e6857e7ca2a284bd3c12ee9ce116e03
80c185e42edacb33d94ceb359a610e49a67a1fe646d536596ef1e0791ee7cb8b4e25f70a
926646d71d16d6657f58fb2e3aeb4798208b7340735bb3bc5a960dc8710765325265bdd1
5e6aedf43d3861ecc93ee89eb3fd8027d7871a79ad74abe764ad6debb56fe23f4d0713d3
8d0f729c300b25a1a187f188ed5f690b37087c8d3beb5b828df3b2357afe1fca50b21015
45c9eaf3a8c6d83f318a642cd3a17de809780b13366fe61abe2bc63b5b0b0c853a49e009
d46e2ee6b51ef431fde24b5aaddee8e1b95f0d932032cec4aca164558fe4307f98c3bd7b
9e9cb5e8356b64a6e575ea14fd341884f8bd2048d6ecbe09c44e9051e4bb40b2383053d8
5d2193b31d3ce7768213ae4dc67fee2690de4504b485dcb52532b6c9d0b152bf10d13f14
60f49b88832ff54d4ead26ee36a28378d5a4bdb3053467fda91f198e47b12af582f6730a
a8d1a101666689151d04b0ae8acaed7e388ab41d5f7481b1501ef7ac84cf454bf1825784
0bded91f7bb956fbf4e2106174e06406111ac0b280c08c14be60343527f971e50d8f6cd9
9696bbc590bed246cd99fd9bfa37721be19a8477e3ff6186683b707eaeaa35c12b58d087
f293718211e7b554de9ccb3983454a947fa0dd34cbffaf8c5e7c136ecbf9cc24ee7f0f26
5c216570242d76aa945e64d6e796fa5f64e4137a3b8580db251e608afe397f9039817916
93293614852188b3753f2ed9cbb9598798ba49aa210e1abc2549b85c98a9ed8d8015f9cf
0d9b1ae8945446e4ed0f883ceeb66f8c993e79843989293f63efbbb92a58df5c924d6f5e
4747f338b141a986e7b786e0c5adc486e70b4a50ad007ef24b4a5b73e592a93ef169c570
b8adac02b08a2cc6ceb64adff3adfdd248175e8ab271b18133aa829cbbf015aec26b673a
e85a1b1b4e3afb730efb8dff6e181978539d0ecd30d9e78c5045bbbea625eb414d1c4a20
39cfc4da4c70775bb1180264980af75ce072d0e13c7a73c88d8a86a567b183b88e73ce19
c01e5eace21141a10b591fa6204c9d7ceae1a039c60faec842a5a5793035c6148d8bed34
6e1f652ca942092611387599048042c4546d3a069424fc396838d62527d0eae0e1698e02
676af5c0a0e0ace6488da0e73b0fb81f11f19166c2aa3390837629d33b324883fe6f840f
972759e8abf4e6c0a7dd7392be1d2d219ab0efa2c79bdbfec9d3c1defc112f0fcc87b44d
697db1f6a2d792d97e18595958f68931db2d89cd54a392ff4cd3f36568ba81851289137e
79943ddbf171705067bb1f1f8f0e7f49d5062b35942647ae8fcb7e830951e8d22ef7cbac
743befff813d1904f06db8e3dafa8872cd4caa77ff2fcb8c5ecf758968225d1f4a95b756
ae3ec6c109cbae690bbfee5f8f0f3347cc4d3e9af0aa122765b11db01cf79f9776222d76
f278a46edec8b347c125d5eb48d54341ac0f55cbe891f2e491294097b2c9e26c91d5b0e7
5e2099ada87fb0e6c9fd57e73f28ad848d7312f59f976d770312d3f498d754af0d5b8126
540bf7d9c2389ccd249a78e7a67c9efb3118fac5817147064b99fc600342fce6a99c87f9
11686f5eac4bd38e393910d9fb85f12c1702f2ddce40224d1c78cb9537bf0684fe023970
b8a4ecd04343b4ea447e58d1c531a1ea01262c13b00e1b0dd9a7d586d36aafdd6771412d
708e7ba543cf158afef1add698d48299e0c8a454d3910556ca5c87c2db12a5db701e15cb
28a8847656d55816682c5371d4542026eeeffb6d4f081db2fb5b484360d5c9e9c02c4dcd
98f80d9eed0815d68d1e3d4c6ceabda11af7ec605dfb6fda31d6cda589f8f0872d5bf626
8c830399982de6679e7c229d1659f4eaa4ad864f986a2e1c31f2c95cf2153d765eba6145
5775a14c035bbbd2cafa9faf8f3aa486403103c8e3fa2347948bcb539f3f14196352bf3b
9ed14ea38a562e6168ae683ac8b187eea5195357b403d050bb6ff99e3d7399cade2e3cc4
36b847d1df021fa3714786a83216398a4e4343d28d37f45e4782688b73ab4e6339410e86
487ee0559c30d577daecce947c1d51d3fa7b23b27bfb8d990c7ce43a29e858fc9805aa2d
513a2be729b8d996ddfe5ad1dcd1021575b0215cb548d3f4678ab01bd88af23fd3227563
c7d186368343e7e049fe8bc1b206e7d17874ad940201f0c030bdf82935f3cbb79815761a
53d569c260d75cad1ff28e537e15a9d13593a6c4b68f09adc4835ab204c40968bde3d14e
f01f3006fd87ed4917c80704d90fc84b15ad7fd9320863fc12adc9888c790d8408e5a923
229a7d4b061510bb839312d754bc0168fd9e4018882ae682f3069e6ac08d287541a52580
9643a0a5796f906c732590d64f70e8691ab0446a1ac2893a41a54d73260e3aa1a285f7e9
8c8a339f57ff9e94affa5998ff2d002a710324ed1e66370f05e2ee576799b30793c4b8d3
2017f5f3bf353f66344081979efb861ad4e9b499ea43b5e96946266a3fe858289b15479e
59db97fb659eaff362607f799460a8f1068144a25838e07dc20909a4578af8f9eadca60b
4bddefd06eabffa964b672c65525be345a46a5017c8009fce7284e1b217a965049db3f8c
e2b2924516a24f0c65ba4fd0fcdb134ad210ead56f18983fa4197d1e3d74689d3a5fdb9f
14023c151eba34e4f56c4e6f1502006de72f0cc5d52a9491b68f8a221eda5232af61b099
373aaa70978a30036e22e9f8b789f8324e7fa5daf66d3403da52cbaba899b17f2d19c0c2
5199b63f0230107ded25dfdb374c908e43a660b4c7dc9be4768738350a7eb1ee42e61479
7d0cc50500f1a4a1c58b5ae5641a366914755dcaf6342db6d83dba03f2ac6fcc78af8f31
ab84aafaf9b74264d8807d1ad9c2f8d4f851633e361afba75eac5c88d5a04da9720571fe
d031421142ef67bbed6660cff7cbb49172cf452afb6d4b30ca673329278c38edbbb77a7c
75eca437c1f269c773fa35512d8200f2d96f61aa472fdf693c6e0307350edfdc37811853
8728373bbd0a8359f207742d00baf00f081ac7c79209f94fd144a2c3538e3b12f4b190c5
8ebeaa5dd792612f0716c6508ad9b01e0bd0b0eb671c13c45c11cca265a2d35d207220fa
4dde1b326630b9007762d5a4978730584af2509564becdd006f5902c5f0d467e3745dabf
5093176ba204b294615c13883cbd72f6d4f98043ff4aedbb41b9a9b85d41663ef0e499d9
116aa026be3a34c53946bf533e05b038f21d2356d14cc5fd1279d22acb5f6b45751a299e
c0234ebc6b2e84b7d74bb04315becdf700ca679bcdb240abc87260f1bd0f999d72ac9d10
120a3f6013428ebffcb5b6cbc1f687e1801c41096b083ed899985cf1377d67375e7a06c9
20431b4fdc742a2bdf6b99de11c079b5e713ad1f389e2c572c75692b11a2a8e846b94ea2
e50d6e1c452cd51c12ce5b935c3ed8fc7519f54bcc5512a72f167370d42e543e1d8dd444
713316f123009a4715490b4f71e8ae36cd3b07ce585b049d8056e952fd877d69b7fe0db2
995e10cdb07f9db93ba08d26bbdd220d3078ce4cb525ee01f495cdde6ff0758e847f1f35
1ba46bf1c01ecae79ea28f2971e0b2dfa5a382ef264b35ab5f65edac05e32bac1e4841f9
1b3795cb5b809d0c077fab1f633ab1068a64df98049584615fe62c75eee7069a4d7f2f74
24b8437014538a90c702d97d4c473d4b893fdc800c454589a6a5c22e14e8c168d1e362ce
55be8fe8cc11cd0e03faa1bf18964c847d020a7b38f4edad38de76a7ae94eac8789f7976
d626b668c54b28c26c14b77e248a52f84bdc4911936aa923b4a16992a65b5b854f744ed7
54ef1a109c7086e75319c71c7739bc76d03562f81edfa4fa59108acb6a5f1e6c3610c8f9
79af3df7375580b2b0a9aa3f044bab6a9d84f02e4b70f8ec1c79bfc8377a487da6b19c4f
d7fcd10fae2d2035b2e75343adf6f6f744dfe7a7d11c5c447ad9ba90b02d0fb33c5775d0
671d06ea921e35dcf501d2c96dbd058d9039fcf00ddcb485d1beaeb2733440210d720987
0d983ef90d0e401e064391156f4197aa3d9d6f42f9719448281a71fc72882a43430840e9
1fba92447db17c35df8862eec56b9c4937aa516dac25732e7f2aa8b6a6d9d762aa512939
b9cb10e3c3f81c9c9c5e31d24c1f896408002517e08ff53ed40958d73469943180b3bfce
37351ab241b41472349b9c696415d2074adff562ba42364443b74ad7e44702f732280517
de2f1dd9a1861f463de4531680f25176d0088c27b329bc5f1ae474d62a4160a4694a3831
2f6b627bab437408ba89fb73a230bcb6f60d908eb3cec7777cda2289c5820d438a1b7576
0cb8ed88b1a4539512bc74da0cc327b2ea584e9b9fd4a914abe8a33923fe5093cef3d3c4
d7907724675b02e60e23dff972439cd2bb97ec83d63e7549a3230997104afbf42cf415dc
e086813869fbc51e8b30bbf62726e5ada9afa943677463bd24d6fa769902fb332b34e0a0
d4ab35fff45928cb97e2cda7fed974e462ea07fd7ec0bf4c7f220d47e020c12540271a98
ffcaec74d41a86b86d2bcebb2d0c6203f5d6d29364348d0e3388a923d7dc3c40f4ca7748
cf8d617fe90e61797406c75b78fa91cfc610ba652ed2829a040b4b93600b0f5924470050
0802920bbd116cebd7920ca95de5b8f6db663f77e14b9763d6d24306105b58da481bc04b
66aef3925525de50d43fd606d08608492e5f1b5c0df50bb158133b3957b2b66491267633
f4b096577af558adb77f62035a3ba60b139d2aa9a855328d54d7e6e44ded00d2631402ed
d302bb0cae191a60471bcc1c548e10640c67b33688ff28ec82240f895969e0a8af7612dc
5305576baf63c73a877a1bd0aeb3acf1baf8075725f1e1a5ea666efa38d9b84f7daf8fbb
9762ab259a4ce7f56124addcfdc70d186a84dc317879eaec200e16ba22355048c936f8d3
1b32f0809c943b8bd98a32a5c9cd939b474f084263be799b2d69fc9d1674fc3f02f021a5
f00963cf1b355d72e671e87c19ac5f740adcca68ec336576fa60ae7ba19bef821810fbbc
9ce369034fa7ea8830221697882824c464aaf4d1e77672316d26b3bedb970c15f390fe25
4188c5fcdd22f8e3c7dbedef301ee6f9cd2e3558d93c742b7690a4b2749a870f09f69147
e9e8d7e3170624da5a54e6a46e65e4eaedfa8cd5d85fb5144f7b529043b0ed2c52b5be41
b2350fae08dda8f37d5f615bcd128b439c71f7c2fa5c59d756e7d9b80a6cee2e7eac6112
4cf4844e7798ea6fde733b408563f158e10499d836ced4c50072a444d3e1ad70c00a0c6e
88e90a24e5ab4c5b98bf21f743ba299ec1fcb48c4f51dd3eb647790f4abc5d0ef6eb1870
55691b11a77c591f37e863d10c575727a88330aef22795eff23ca0cfab5c31e340991da9
04ab127512f53288d1fc3f58bb44b2bba26f4307c868d135eae11931b232c2f89199e0df
07f1fb27ad4719f4a51f3897a7ad3bfde9a4ff784005392bb366129b4724a6914b398b7d
72d47a31f0daa06f15ef22452e9bf183896b24a728f8f42ee41da166af7576333fedd44c
b8eb14377b402a44d84e7e19fdc7b814d9ff572561ca4fd88cdfd325bd094e68e35cf01e
33e37cf62404a8b42d06f8083d69be3093b4941430730aedad00368c89e21f869781d918
14f50e61978b5953a2fa9404ae2d846685666d6941c528f35aa66bfa7bef6723a9cc7f62
1cc3fc1c2e281d5a5b047b64f59700d467a1f1bcc58904bfc3da6dd68fec0af4c8ac573c
9933bdd52856b7e7cf05da8af6913f6b5b0663cacd2fd4678a701594cfd650e27728f883
cd3bd59351464862279e14228d49d31d77a0660d50f3d08a9545cb82e71aa9af708516d6
737ced941bd1f3ae3ef5665a9e847708e316326fbbdfe9c66e1099b3bd54b2c78f221a83
97f17bf533772009ba196dacb27db808fdabd0c8badd9154a5b5def50705293d1e4dec8f
3fe7141f2e2cbb921241df3038673f93b91c7a6d3381218de9f7a38b0aed52ecdd590658
8878ab91fbc3515ce53bcba744ea02c217e6641767041216c247363c9c3c2c87d64b2f18
efa9f3e4a96a2f67641dac55742590d7b36d37b9f41b53afa54b837cc608f124be6b5a9e
074389f860b281c52f34654a387d7458f5e1c30d81eddfcdc343bfbaf9b7debb3d334f7b
2309be90282d3ec4c0180ab83aa11f6836bf7d150266d68c5537ab0f20657ebfe9eae87d
4a4890c8683652aa577dac4276c8fe233e7898333ab67802b13f24151d77bbd52d7d42c8
0a96bc7cb1f732bde434053a0b0baf49c099fffb4ce753340078a536f17176a2ec4682e5
3d87cf368c05fbfa975b583ce9b455d5eb06153ee14bb975ddacbf838658e864d26074a5
50795d26af253a9925100d86cf4e48ae9504033782c850c88efe2897c31dd2c82b37521c
19d64a7a9316649ef42c8b75d29ad4639d525d7eceab86d884f69c1867e0fd0935790c37
dd775c2a858e63d262b0314dc8974a74c4b0b0327895531bf07712ca123964244bc24bea
40e01e870494c48d44a711b19c6b4e2c88d914216562d8f717b1dbea8030331906ad63a6
73257cf8b4c2be6e3a84b9a70a0558795c46fe17821130693ea91a2a428cacc5779120d2
86407f1cfc816320243f822a1780da674f35e72e24dd7280b5b57a2dbe9899eeac576ca6
4b2302e10907043659b47d907b22df0653a6519e6c3415700d30d4a64152bd1a7f89fad2
d5ddf6c485339735bd10b7096c30c96abcc96fc96d22a41e73f6872b1b56a481f9766976
215afbaf93d4d7f91a8af77bb94b63988b9db09d6ca71f92926813b644ad5aeacf556c34
1c765a584f2e8acd0e89db8ed6f23bb1079e61253c8a40e7ec13ad0c782ab572fd3ca34e
c2bae90861bd7298d0c2f93b92358d0fe09e05097ef9f0fed8714b5e62480feb50ca5e85
0917b0274dc2ebeb57107b2477af41f7ef621553bcb7cca483b1c686ac712c34982e1c64
5a899e7596c4bb0a963d8862b9f155a3495c8984ebf6ada6d545ea908b1ee34207f39997
1a3a02e9d5f3e48c533b5d5c288eec3c5054ec1817420332e2a12e9d89134bca8ff8cf84
a40a70507113de385ec5796a01022e2434132a9bb3bc630a3eebdfd9a136e6fd81735cec
27bdd8ae7a97b198119e6188a7775786b6174ec27f85132157e8aaf572eab62ccd9745f7
1fea0faa911e9ce9431f8881fff37472aa87bfe74a334fdb0849538081ffed96c222183b
5567914686b5018149523ed3d05b1220c59bd6a22fbc8d9caffa4bf08c0f28830b91ff9c
7cb10d037d581d4671c00b860195bdc56b2ea98d9b10fd92196d0c0f7a9295a8881c99bf
09dbc7a7a94910588d266dc79e8a8b3c60a1fe47ce9e7a99eeb16e919cb6ca1b1e6602e2
fb9af48eea129d53863e2b4fec1e12d779216681f7128fc8580aab87377336a43bc18542
633f0d44cd1b7b878762ed509a1849a68d763315aff9916e4028b2f35179586b9d12f911
b048e0aae170ffbeae184684532cb17579afdf59ae71ab68734bd7bedcafd69806ea6e22
64d524df7e834584e55f7c28f62cf7f4ac802dab848c85c8876494ef5e942e62d667798b
a0a9eac359c39084a9c72484fa984db9d4bcc6f53394e14f1a13dc0d9a1b5ccad2904f57
6126d576d75d0a5914309ba01bc90b6be66cb1915a2f64c6e0f3493e5fb8c5b43ef44094
6e1a984f9caac745b332e6e1565207e74e8a5666f5c388a67ff4710a3658938cdcb1920e
2e3a6ab4135e6b0b7d058c12e35d4cd16d48e32e7911135724fd6b2a36f2d2ed1823778a
57406cb302b54ad19ee803771e2a94825e46bb798c47aa485e05ec4a582aac75a2b7ba53
3c2358cf7e5ca5b241d3aaf3262663b1002a64131c47cebf135dd073e62d368dc786fd73
8b5c020af44fe76fd0b5d35d6a2b685299e0faa44054edc33936fbe51fbd9ed41195972e
6317db67e989c602a31bafc16504dbb4ebf1c6afb539f59b5ea14ba03a9e5a3884598b0b
6d58babc4cf91e126d7245c5802696b6816fd7e22532fd542ea0489115d3541cbd2ae75a
4410db5fbea6c88f9425735694e3c7250937969aefc3030af2bf3351a3592b5373d0c737
4a83c83adc321eccbc7f60d403b56e93a880dafa3da626ab680cd3e7915e82c654a07eab
1fc4b7ad9e43a6d298dc2da01fdf4bf988c338fae463b2a46956414fd797c5f0adb8a611
d4021ebe7f7d628d2dd195e81bf855a61eab78ef022b3d470d0e76186dcd6a4bc3261beb
d8a2212b35d058f60f80b6f3de72ac07e17f2af08d1b663ca950e29e7d51037eebaf1e68
f975c4160a23e94a2ba0ba31403e254ab5196dce4eca8bc0a929cb1e21a166a9f10636aa
748373c340f39e9975e4e868744294f2b94ab86a25adfb3b617f567f660f09dba2afdc4e
3356fbd8e4097e1033f1a226ecdcdd11595784eb6af5b2d6970ad1017cd1378c6b5cccdd
262f85c7e55f983c8eafa58ff44e56b16e0c1c20b9e2358e3a5fae2c45bc227b2a4a924c
581ef113034fa20910f592b3528a1890de477e0915002d4888935f94a9e01199b78b0850
8551dbaaba2eba569ce999394a6aadba2766f9b8b8a2fb7c69a3f88a1a82e439c896ef3d
2dab359bcf005ccddb8e7684bc2460fcc487e262fe8929d16d5ceef1aed3a0d2a6c79d79
1fdffac092897b670d0a36651bb8ecb214e8a2a07ef7766d2244245f408e7a3c239a7f5a
85425e84119e25fccf2ffe9ce52aee34c2a499cdcd38b9a0d91fa453f64a492f30482072
493f0a9f2a06db5bf23c281ca2738a14ddcba24a113cc73d9432b3a38a7471aed31e46f4
1bba88bd58b9244e06da279f0a324e61ddba5fb39fdc07a0b719872e48077b4d0fffde4b
590bc9e5db4e70786971e6e69f000e3c5ab65eb972bffcac084295c27c2f14ae9c9fbbfe
7d8d542424e2837d30d52b75fcd2841c1cd2a3cb2f6341d52b7e504cf72b8eb81cf1b037
51ad73f8354e2461afa058391e7b5991220aa1aa11a8b11b67f8eaf88ca9860bcd76c5e5
b1b7a28f7cac628f10a3f0afad005ee546d68d7a3ddf339658b787ece240647ef230d894
2e5fd3f88b7952a7e27eb1404159d882820e902a5412110e0b4574c193db0fb298e638c4
37f9507c4751570b7b5eabdaaaccb6fab31560f63a48897a6595fa926d34ee18796ada42
f999ff6ad983d8a379fdeee128eb0b12c264d8780510298b8f52ab71f853030e160ceeaa
1b476bf27915ea3c6816dcb08fa9d6f64db104d4ecc2cfbb47e9ada954b68b5158c7bdfe
4de8f9b52d5f16253ff5a10d96877cb223f1476e3ec5276dc2796eee0062ad5f532917a2
eda85d2f39c69780818be9b807a6e1d6b585946cc0e0389c63963753ab3b8f7801b2abc5
7fce577c59aeb7b1e518f809b092a611760ec2a7e86a470aae050ae9c765ca01ab25eeb5
3d22b7e630c11e3c7712c8be215e9f03a3cd98d5e7953837d629b0d913baf938a534995b
a8a380a406be8cd171e8ec862470969d8a2885f6b5a64ae58cf11c458f9831b4b4c1aabd
1b9cc3650e91d16239ebeeb1d739ed19a45837cb5cb2ca5fe809968d51cfe4cfaf29dd5d
39994119b15530bf796f701cfb52cf951bbe6c0a4e1e8a0bd42e37c85831719914d0e95e
45dc1ea22d52715abd83c5513ec2025c9bdf6c44181f2b7e0719a246be209c544de43e38
2258004e854ecd0977fb8e2a7a216d6d57e816ce5d874fa9bfcf2577ebc06625f09490d0
1bd0753e0aea7cd3259747c4290b7f91b1881c94bf934963bc9e8354bdaa75de72d9e96b
6bba6e6a850bc2c06265ae69888917cf53a2290e4a40a3b36629378a7e3b809d7dd37e10
07745c3aa59b99359f0036a27749ce57f395c8af70c6e71c8cbd0c7a023fafac9f6e9d55
18a83ce803bfbcb0827481fbc812abb302dcd084725e6b405175d630f2010bc38d036b85
44b65223d156a467e7f3273e7b5e1fed285be597a9a6c5a2e03b02ebe74d588be910f405
fdbc8feb46a58521803a128788b5e8326cdabd743d63945a193a4845e993bf26e80dd0f6
25e0bd13978bc5ec8705820a9638b290bc1fde5a512b250810d2e9fbac29aac67883256c
ff6b8cdae48917dd4c43fea4681ec4032c5dc75a5306476f05c9625eb07493153617d950
5f7dca6f7efc83d570cc1478bc3090641b734446c3310e038aa4af4594f43f90e78e01f6
293e9d5762279e5c810b17474e0bc2a8338a05f2c09a92e250b2a05e520398d0e2038a96
6d954ea705166be429133c2df9c2a89e105ee1458cd979d74b29e022b6d6ad6c1f6e649c
62ace99994b79d71545e22f7b7862305fb04ae752aa9160896f2d62c3a6d9311fce2892b
1553c5ca71ef4dd46d9a2d453b0b52ab443749dc4afbd31884b15b2a2a2007933ac8ca7a
3d401a5feb96a959dd2169b7a50e797a1aaae2c75e1153fe510f75f8fb2d40fef4b28c3c
25274a64d8761bd2635b647539aacbb7dd6310b793ee25b3f8c025fe350e0a5539e202ca
62d9fdda91d0ab9f83e3c74340f196102a008cf8eed7d3c90d2c48410f622dde71f6e783
38ae5c9069e8edb545a67443e3871c53227fc6ae2bdca1ebcc7eeb6202dd7d37dd4e5bcd
a92210250db6ed0e9ce0f382eba97deebf6481e345c7c650fe00b0acd49800be82a34b80
73aa9c1a39a2c4cf7aa92db0fd419a1fc22b57a37d44953d4b8b27d7be1cc53b573b1594
2ef2040125821bbaaa8199656a8ed09cecffa94bbfa9f21fc1feeee024c3c1358d1d3cfa
c0db9df67bb99d81634c3d487478b28f8fd3a283641ce4ce0a298900174b17fd8dabb6cf
292c4a8d2a5b1c09be1fdf637755f9f3f8f220b08be0c1ece87f5b07833c13303fe2cb6d
0d2ff9de9526d765a5dff79a36e2edfdac3a11c73296a4e0189281504d77dd6188fb37ac
4b15f84c7d531f0883f0ce567a16abba9952d0547d70f4751ade1267e85b7689cc4b1467
e4440faff9cbd5b3556ce461f2c59fe3d86a802073e2971db3f05dd322c30363581b0448
7aeb9dd592190cb059ae0d0ac81c4bf3bc910d970b75044c9a24dcce466dd3ac61a1965c
7c7c3338b51a132ef9c4e014d4c09dc49de8811cf4e915a1801d917e86dd6f24b1e178d1
5dfcb28d72bb3e75a8381a7963c5b83fb6bdde9d0336d1ca51680607c142437b11c33579
139dd5e4424f2efb99c070610adb414ad8a0bd43c63bc80a91c6d6fda46e77ba0817000f
5f090d5978eed43a5c0dd25746bd7ccd95b4e47da741f2241dff47e5444d6dc7b6bc82c4
cfe58c4848e1173fa56a511099bf0e56856ec6a46e9811bd82c2462c281e82d6c0c2c5f3
257483ff491b159d957e897189ab6322f62b052f50c1911f7618b72ec9ca14e6d1aba82f
31360de25bb05a37d9cf5ce6e72ad04ded5db7ad63e29e1e40f75bee807cb99b4907c996
2abb692c8fba5ac9f313ee7f6ee39776dfe6f3649989fae471479f81e6278886c4fe6622
5f6ee579dde912e50a6a493d27e1a573aa1021ee378be994ff0e6b9e32aacb62f3bdd062
ff1a6b45f6fdc72ec1a2d1dae30eebe772e677cf00f4f151d8fd97c3e30fb802c2719a8e
85cb72fcc73b1c21d25aee9b24576822e136ad835b4d3f33b87097fc649b591a37eb6835
e2c4b7943b414607da5098ce36a06a60ae565bd353fcc4e4e0c20f6fa69461bde35c37a2
7576649d2a4927a88eb8ca64023d754840121354baf40fd92096fa2775e896e7f756dd51
61953008d400f59597dca791c05a5af19fceb1955a0be8d19e4b7a4b389b4a63304898f3
abff978bb77a1d320c364264da3c574f0b4d4aa2abd1b5b13bed4d128288280efadb92e5
fccd9d60b602c69d903d0fd560569abff69c6e81f3f7782a3dd124694f1a4105d5f1ad75
e699b4e4a748a539809a9a8e997d79bca103feb9d907ac19f226b1f35e9877153f2043c9
13b46972e6872215c90022100400823aafa76d912ba3f59ddfafe7f8bf738c4a48a4a339
3a425d04dc8b2073c1396fc05ee1ad0334da59a0b67622d7c75f669d25646c64f5f84fab
73f152100e6c082e0cbeba4600b087aec1085b016497bcc7772ce6b04bb78ff320436dc4
19617ca8824c1e441fe6ecbc4faae359dd78cc80bdae621133c4f2e3907dbf7ce804629d
d48ab94358da8d3109d8f11bad0f031a750277ae860df153c10892e0b6c819bb400f36b7
96aac36be91fe1d54ba8fc2a71a5a9e882e41ace21f0a27cdadd6e43f512cc7b474c23a0
7fcabd58d456c343c20cc23f44bc99c94e33333e4e9cd19e44eaeec1eb8e44f14836a47c
bc317856128cf600f718cec1311aeeea903eb3cf11ad40a5a577205a20acd60fa1ea4878
6b0fb0aa92aadc5f22f659c0dbd6366eac097d1a71bb88dcc6f31cd41ebe71f4515bc032
871679a46b8afec6b93e74fed4628ea4728f4b70a997df718a27e9728ed74acc5536265c
d7f2e9b2b6a8b3dc4370cced869a462bb2e87dd6a7cba4a6bc7f3b0495ebedad368de329
ea2f0bef50d2c81eba73ceed730fe6ae4632e14b77ca1e36d022bdee50b8358b41942d36
239b5780cee722d4b91e421598a822973a9ae5f49952fbc6d0523221990acc085b050f9c
c5c85316e9dc25fd2e15c0da4d9bcd5d9b4f39d0e639e3c197f07eb0a77a19af7b1b42aa
2fae0fd0a147be9a071b710eacbe927a46f7ec54ab2f27facc78dc7425a4872803050d19
98cd06d630c30e473718f58d289809c11e07156e6c19ee21944177e61bce6d2437214916
7b68c635b28ebe386ac69ac9a2e6e6b6e90b65f9bc23e2ee463ab0643f0d6b2692b2ad43
6b02249e8e5f8d351b57251c55fc270c62e83eb4430c90aef50e23cf182b1184e030d707
9ed4fbeb19777a58008efec0ae0662df97fe5d00cd64d9323c25b423c8f1ed23bcb6235d
4693e4d78d81f46ee03cff875f73274b9b998d29283d357a9fc4c1908e818acf069d99a6
e31b4753b08f7267c8d6b92b46ecfc7dcd6bece3a600a4a22d551458f69c38dfa423fd87
55b23da896a9d9ac4422cadf8a4dc68a8993f931cf0a075f860aa37343b85e21adad6e84
156d8d1a8bb51de1ee9a4710e23417d7a0c0103685840e8772a2dec52ee3af87887d559c
6426591c751589c1c43d4e25b99d63ef140441b38759ef6d52666d73423ee1d2d5c242ff
5f037063bee92197d75ae692ee73d90257d8ade99b9ca4c791b212537aac1e69583b75c3
568f7899255df7d62f0ba11f5e129a0507c2d039bf3b4aa9ffa057625f9eac94bf7cf9ca
3d95ea42e44c96e0954b0b1b16c86f5862717fcabfe59e621f313b129dc15610869239bf
6a9a42b7136e10bc0aa51b1f1e318ab1d18034241025ffef6bb24b09cc99cfb2169af766
f5da87860eaee1a3ae2379e01719d90a89b694b16914c2e77f91abab2101347ad5b04078
78ea56f2bec8ebc78200cb3c971cbfbe069d82591fa48e819b7a72ac40048b26de9c1f47
00391b57135db5b694645b6c051b27f7c607c1dced9a05023d99f865b5ed4a10f61ceff9
61ea9066bbd9afb8f01fe9dd22d7bf5d1e7304459c6e4077b2fce1cf91b2d6c4683f3f9b
e08f17c3c7d22499958eda8db17bfcbd133f20cff8170b7e3a6df82d212774f3340db6b7
0e0df978499c0759f1d7faecd7f387676370a27ee60d619a8e7a257c59e3a07d8726338d
e89c7bed38f740e5ef581ff2a52fd464f789dea52022908d9a52a9e340f6226cf687589a
30907494c457e41a4a762c44eed356346939ed74dc0e3b9f3448a0690d68a847317bbb06
4995ddc6eb6d43b281f6c5d0ff55885c9d5844baf30cadad294fb63d16a050a388857dc8
bfa1560bea8abd088d93af6b476f9d4a420ba0a821e9e13620c9ae44aec7041cbfff0d1c
a4bcddf4cb7ec816b98314cf36b8a38f055eb95aa2809c20ed6f516bd40308714727f4d9
0a2a21fed0a3eb83608de897362ce9866f583a150f3aca018eb386f90a0ed7f671e0bbca
2bba91bc81dfcb8929dd2bb9c4eec71d9c6cfbc2a4eca34b8d02b2199cc456c2110d6f32
136f51ae0a0ea7f686f70617cf3da0770bce5b4a6d371e583df9974000b64bbb86f5d5f4
daa4110fbc65ab24f7081879211f2601655541fe1c5f55f7e56c9b77a9e75092fe845e37
9f4a4f3da864953bd376bd76e4d58d56f11b3ee5cd4bf347b8f30116b156dc74fc6bf9fa
d26af54c28d1b526c615f59f7f1d8b785c22b2e329ca2da92459a8b48b25974e4bd454c4
b5a28f1e6a08d5f8d0c666211a9f2d543113df105741ce5366e3c14fb77d38a4b2bb085c
21a87cda314ac67858b60fbe0e0be36d61919768a59c87469050836d0d2c72e11020f4c8
fa15e76188289465e9ff60c93224b72b61292d74ac60fc5e2db9e88e5fae84c1868bdaff
2edf977eae20d0f1f43cad8dab6929da342d3707747cab26091e4f6f97fb3bb7550de268
122b45eaa0d1ad757e4f178a0acb6b574f434048814199eb7d95d5e739b599dd00f2a13f
508034342af9581ebfbf9c1deff31d0bec7a10ec9ed65a9a9f43fd3ac18a019c98ac4883
797b41b2557307f8ab1350e752c7396c1ad9c725011589883c70068c89d2410edb083364
8b5e57a60e66da963535d25460e9e82e8adaa0a53fa8e6d30994778ebb9db78936491f74
63c939ef3115c62d5c80d55a168beca71b381521570a01670a5718bd116767cdb2dcbccd
f1893df78756e82abd9cc99dc063e19ce5057436827ae4d3c84d5c759cca214716ca9578
9eb1e4ba70d755ee1e7752dadc981c78db2779b678940581aa718d51a4f2f29343a0f7bd
c3eb9e1978678011687c766d2ba3d44bc11c5dc26467888070464400109399583e709e21
54cf1f87068f00863253e26d4aaf808bbb49f50798f7c3515127a3b71a02afa34bf8f1c6
97976c4df2edd416c0104e59fbe440152f732f80d9a0a4e481cb0eea7442f4ffc3625070
fe54c374d57d633e0e143701500a2533971003fdc13292ef7e296eec60f0edefdb02631f
333dd814a34cf9fbe0b776dd82b9f2bfc013c8800b37d54c7a6124648667771f9137a278
e7633fba5f9a7fef6d243a0851e7a0f06ee24832586d5a8a3a78d86508de891c7a9cd308
26b2ddd04f1680c21d0d7a3a78bca13786be3cec9b3fa059a9294b19740176874dcf28fa
aabe4f48699916715cb6a8d5ccb683ce0d71f386fa5809512bc2457a19628e989ebd8d48
30aedce15a7602a2974230ef6e6e28492f906d41f69ca66edb3368b68283f155bb14cd59
3d6020ce60bae0ba5a4352ad85cb266fbe5fd3fa4dc4301168bc13e88757fadbdc4410ba
3114e991f277847f03a1be7d3ea99f1a572717929309405da28a9ecda11844675434bc57
861326057b525927b9081cf73e9e582037400513c0e59988a5a1c66424b18fbeaa51e93d
a253efd0734efc16167b70f24756ce7eb01ce8f457f33773126d464c5f5ab28df0592d57
cabd8558d310970b6455370f9592832b53b74defac499207486a0806dd0f309ab9ea9dd9
1fdd9d4895bbd713ad4ec0114106cee98f888e7c003f7198732b45dfa320ea79968b7bc3
935bfd8d889085b92bd99525ca2a431f2d00b818bd8a3071c3ccb065e9186fb0d5fb75d8
c9cdddb3b5ab7180f49d3add7ba87d87b0f03b341f3d9e9055dad1e21abc2ddb8fb7686d
f73a5f60aa4ef3d7cd8abda735af656133aa16432ef431e9e75ec0c10b2f7b528738a210
ee00c2a9ab370c8413bd18ee3f0a9634ce5d6559d7bd7690d6a6e8d0a4af270c1b7dce2b
8f246f07e2d8f64d3e61c3db143f8203747bf2af9c10c15109b040d92cf09883c1d8030d
0594adaf25ee6e8c9b860795116e0012f64b5146b3cc0161113ac95016570c3072a8a3fa
d1616d32aa5bcec54ad8693b7231b8c1f320f5568f52ba93a5722a75f91ab56fa4d8bbd1
47681d7a4c5c4494304d2be9d53059dce3f8b67874ffe014481f9f532caeda80d3ca2fc5
9d1e0c2b691c88ae8e641cf9e29813745cdf2b737a3cbfa625da8b63290cbf5b3fe637a1
1763ec07bb01a7e10b10a5cee3bed778b2dacc1ff2022fd40d0845298f5fffdc3031bf97
fd00c691db8c78415c7bd081fd0f5ca6f178fe6dffa7bf5c6b6285500cc56e72bfbf6b75
9d497c5bc6949322e75dc945c9b9cb1500eb80b3d71bdadb38f55b67a336443dc4d3d554
a40b052dc87dc4f4bee60e928a321e7b9e419224261fc1815d8a5e64e66c6ca4e4fbea77
e49eee18d904948a5f02e1f91da567e7c2ee6133685102eb45c16cca4b309049c1915891
20bf88f253e866de52f31c55f30d4a7ef484487ca30aed300c7fc35741464541fac6034f
3883443ec2793f0462426ce27366ed9551ff613d18131165fc993aff9bdf91473ec05feb
6e35a2c2d467983917775823a647f5eabf40b85e9f5906968d4e24ad2e6df10f419dba14
55d6ee7bdfcdc8821a185c3ad15254422538d2c3ddd4f4d630fc8eaf8a709df755cf619a
e60fff1a2c2e20a3ac23ea40e45a185e0a0b39029108462d3a4c98983f02202756afc67e
ae7807866c3ac3ce650f91c142f17f3e9408b3bcb4b76dc23201538b2d096a36e571ab10
33381790b032b580e7d645c969ad13d2386ecf889d599f15dfce2a35d49432405b1a4111
97aa187bad40833b963f29c5a00067e88f5e0f9bd0504e2fe5e27b31a45fa5837bcfac16
6243e8507bf0f18e6ad8279dd5f04d6e3ca30ec66be5085c6a28fb4427bfd0cf032b42fc
f446fa9fe276b32ca615c969036ecdb0c185e50149329777e756502d57ce5bb969235bdf
f095113724e8678c47b01ea615a97d471e6fd28a2957f05f388072de165605d93fdcc357
f0f7d45e75109c90c4176d68adedf207f20d87ef9214ee48ccd7b2b6bc271670d2f95f15
f0976f0d37fef46cda74ce5c11580fd0630aca694a5b9ef17fcfafb0fc1de8acc434cd0a
d09ebcc6e3e503806cd99d224e92b2babbf3c8028e4cf6de61e6c790ee21fa3e7f972ffb
b1a46fb503e4bdeea1c966abc53fb9c0650b2ceb898d44fe536169671520daa6f28dc271
d4893c702f2f940f4e8edb241ba95210a068c14bed2ff2b218566570ee40e5f33d7501ea
54dae934267aba109a7dc28e6ac047f93b135a2a1a7cac4156af15df379cf0cceadd8313
87a4361267f32dc7ee51fe93223fce9b1258c8f9f645b53bb2c4be65fa556458273aae5f
42bf32d2f60b124fdfe8b5946dcf5b95c675141e71ca58d9505503a87b82be81e05bea8f
deba9817a4bf9c085393395b2af7f9d192623fa8a8615e9dcb9c2367b253082c9168da23
d07c6ba36c85c24e5637961e8663dae0b936344eaad67390f06d9cd7a538ee44027ef79f
80a23a607de7f1e75f4f7ff0c26e81e21c8f3dabfa6fd7754179a81b983dba9a0dde72b9
c077987cf9bceffc5cbaa2c3ab945c143ea5a9f6adb1b6f86289f3bab65782264ac05fc0
bbd768ff703da551ca10d9acca23f8cfb2e5ae87bc3a1417ab43694134123c8cfadf06e9
a130d241b73432fcf0b2bbb19684f46313842738ee445687553338d5f7de000ab09d81b2
7a5343fc35b44f22874e1f22969cd09fc3434b3fbd549bed986add738d5281dc5fb32b04
511bb5b5564fbff9fe68d6fa95dd65a31483d55620e5f608333e8cc28928bfbf4292546a
a1de9764a41156a1c6fda6adcdb68e00a53ad5584d2fe751c45831e87a55941be07839e8
3e45a675af9b792725c35363a65eafd007a34fe759ac90da68bb15545f1aef5d1ce52f80
10222d55cc18d9d49c8789011994a774396485622627d120b1cfd6431fa4211ee97b909d
dccd5cb1e5c6fc6da3bcb3b2eb873be4be88c8d19bf4dff1a98b4d4d8857a883016f1d71
0b51798b56fafcab6bbf4c85f71fec4338d6d4966b1a0476579e67954cd0d93e44441fff
ce9541bc76e1aaf03b2d0e09939bda72d1bd31f360711b9df140b59426424969a1a48588
8f61dd559840d07d9045fed9018e0f646d9767e8c2a89c92868151b59e3dbe32301eb57c
d9a73917cf4f6c995e44ae19c1a870e6c7870f30c50da691db7062159a39dee41acd1180
bdc5d60d58076acdaa7c974c5ff849b96b7add0ecfa364b988b664b3e7f740b7a08f54db
08ad093b2863a1dc74a28be82ef9e6f544f217b933a46a3f71ca1af401d02fd9b56ad9dd
98a99b1cc183042777581e02643718f731604c67e9ff71b9a9e8cef4b255267557e6fc59
35368384cfa3076f0648cfe32b87d8fec84f43e332b957259803c8309f40067c889ee82c
d62eaae1d543023619f44e023614fda710fee58029da9bad13b096e8b670e3b704729ed2
823b4b7c349c362fbd5784acd9fa351e068b49ceb675d862cd521a82d55fdc82b576a9db
b427b4b6e0a55069db5f7c4903adde305b4432d126949fbd5821267dd1752df69e918df0
44e73f8f92fd372e974e290763275718573d1b434a8751377dfe1a6d3c149064469f625f
e197e421492b1c0e3b21221787cbaeda0bebc35bd1aca4b34096cd74bd674fe947d2fb38
c254d9289f48612fe4e2e98bb2c0a2723935fc1afb05579b20083ba6e63a8a9cc3563a3c
bfa39c5126d843709461f48ebd46e9752059ef97b1202bd8fdede5d2d52703ed347e2931
27e34353527200167cfe8a07458ef9848e25a13e53e974a1cb5a0385d630f5d60cad7057
29e4be38ef0a7ccddb197ed12d60618c4c166486fc6c9e3f36f5421b7dc9c7757310f7f7
fe56d1dc6be05194d2559e106c2d8a5a6c1a9e5d53e7c60f14c5cea50b3c4b00d4848c3c
aaaf286c30b6c1f890db3f991fd1ba58b3fcbe01f469199d6ac45cf87213d88fa1c16458
acdb44302479ce539404cb4f3cfc90d10089d8ae28ec466231508e5376020a2b20db567b
5dae08ed36a3dd60a7c59c236ce7058b3e414de9f4d44094dc17188d81e8a4552e9626f1
0ccbd340fecd24165251c0a855e1d21be52ac7be02f0c1b646be4fa7782d53dfb03b5a2e
65c93189fb6d6ba05ff9e9272aabf18bc7d457297762bc30ca3a0ab11908e750e860ebcd
166b969f0533b174c7ab778562e6e83b87bbf8b39b52b2adbaef04321eb667775f748a48
688485b42630c92c4330e988cb130937aa3d34fb6075fae20619bb1e255f1175e73a7412
3d96d986f8570e671d7e7c88fd4ffca2764cc41036e625f49be77ec854861a7c26500f92
4eb12ef04e735e3858f0e6d9a351d7002ffb2473a05f7804c31269be7603fde2c63c0b75
f5c98a2efc902f2a90b5e35224dfaa4ad21ff7d6281a2495a6c209f29bd79d0a31eb0a38
89274fabcb07ed817bee7a3804584d0771e313b5a50975ed0d78b48088dce6a3da8ac078
a64f8e9b1c5af53d69014d34a893b06be8b3ea0e4a34d1c2d864a74cb9a9e1e738c0d058
b2108d64312ba39494db5977216454b40ff7b2e201bbdccb8dcd2453d18c9dc465dc905b
91db6258a0b6f4ce7e098fd1c84840b9eba7e73817f9f586f8e6374f29fcbf5d5f09de52
137d11d90a93f9f867e2fdd6c586f5c0cd08d0267c5d55747fa5baa3987060a104f7f015
51a60ef4fe9d2db336660bc2bd3ca50300d69ead60711f6ab0c2cb2a045735653c3a5712
43a06d1ff5738ceab6960124df1d91abd238c0236fef40037c89dbf18a3ef7b9d2585505
83af7b88b22532856bc9ec208724a87599de0a65b78db9b0af9866f78f9a9c92e87229d7
7bab1d293f27b33d3fb240af2609411f43dc1e2b0fc51cd0f0aff6c8c0df339d67f5dfe9
0b1a86aef0fec6240887c80ef4de7d5484cdf94513a8380b98837a1ae2683dfc7369e34c
d08cab4e56553a1706e6f4e698e491966dbc5b270d9491787188249a3aa1b816986fb851
079c1ab4e9105322ae5e64c1b6202b50b69fbc335bafc08b090ed87693adeea3b889ccce
1c455fc020524da0dcd0c51af918a205ff8b426b3339dd1a92fea48eb873be997fe2b441
7ff0ec2ddbd750aed8a3c01d653d5c6c7de9f4e980aa97275f5661ce2773f0961d627f94
7ccc111f9e042e51a744df079a7db1309c6a6eb411e317822741bd2c7d817954bd39bfc7
a133203e83098908ad80ed9849993ac51a3c5e0ddd2c3cd7f5ea4902c74ccfd507bf9543
d917c907ddd83fd08ff69f87ed2248974ddf048fdf975cb8d4a5b6082d444f9acefadae9
10758fcf90ed2d433967cdaf3bd038da9946d2c4088c94703190b2b22c95ed8d601f11ba
6f5245ddeabe6bd55c7310aa6dbd6481629556ded7fcbd3187f08a26e7d27cc93fb3dee7
95d87f878bcfad0114c79e16857232c5933588b8cb750e2e47b3722e23993c296a28f0df
b0022567928777f4e5327d04ef4e41a3b9d15f972d5fd2e96c6b16c2a3a3a174e40453f4
9d3c807a66dbd5339d8d08d6335ff29fb12755351028bedd5ca9ef4b84cf673736acbe47
287bd4fbeff6c89d1c9e202959ac6a1cebecfec6a4930da714559802a3f4454dc5742248
a7521895182a1bedecd90518dcc0adb57070de2f6dd963e227d7a73bb4e80d33197922e3
d115f795ad4ea9cf15314cfc1ad5879d11975e5603c9787e70888ccb35b8c221c7656157
283042f8218bb06eaa1924396868cfe87fa274d53814417d34d5322da438609970f6b244
3b93c179b36d061890fef098dc0f4c4d92f29e3823a93a83cbd3f7f87c3c428d6cb98f78
79b21fed3a1f12fb18392604c285a1e86ce0f09d65dfc3aba7bb282cc0057ccff8547dc6
7458b186c3848c9ea2be66a89fae674474ba2eea793fc30fe6b9f36f1f35960cf52be228
9af46d78c2c6ffb1f7f941210c5f15f94c7f4ecff22c606704f2af2a95e00a39b9f7ffb6
c9507e39f570bc790d192a2ed5bc66a53fb0421e12c1a0ca798f45bbbbd6d57736e96506
8ea57871204dee485b0e671d6580ea7c99efd1a923065084834913fa4cd6a327cce65102
b57cca82ebfeeedc007d52c919853beac91c35035cd3d5ae6a612a43e8c637f91c33ef73
cc80c81d6539403df092f8123587a1416fb7d2469c74bc5ee9a8f2aa63b9a33cfda106b2
e12ae29a6330aea8876d0fd3a7d9840375dced22f11d4d55280894141d12eb98749354e4
7eb6170e132d8e109b1dc19297afa13c74b154be303c80fbe17d2cb79bc4a340c76a56af
3efde10200a1b0d3cf6bf1f846f4b8fc4887b59c531e380506bdfd466fcd4fc697c577b2
a162beecf4996cd38d5b61fee2c4725c6cb53ffd49e999468a71f8ca7496165a3c79982c
cc06ca10ec3ef2814f3e4327927e70d48a3e1feac7538fed4cf891cbfb3dcf0e8d7560c4
b1b3ed5440a8d52ae14312e49208133aa6c2fb64a73f8391e2378669d00790a858e01660
a48cd104b5dd5c52dc20a5e41f45e8c7da2f063552d2e90621e720bbea904787f1428be1
a999de762da53122d5849352fbf691f08b28fb9371c9321c5eaa8e1c5a521ddf48d87131
a190491d5387cdcec58bf67fe6ca19d18dc7563cf78cc33685d5ab8c93134606cbeae5de
4fc0ac66e35004f82bd2539f8fb0c43fcabca97269c54dd51a6d549c80e057102428545f
585c9e403b0a150ac279607d2d27a6a95087bc4936d62f48a3a732faa1ade92bf1cbc1d7
5c8816498838e8f3a27685b40e540981641ba928912c502b4e07671eddd27644f4a46ff0
054fd1d1d7c52815eac7926127932c60eac7ed5f436105eced68abb4133741e76a0ce9ff
461fdd36eac3bf472bc59c377d4ac63e9e07f48475609a84b4ad5cdec48e10b0da5403f9
1e6923aa79b56ba9943603eb97143b6e519a029325ef64c16902a7c0cb79d5a31d1f9102
d3655a9b89732c2f6364c4d5daa20a515e13247f15cb09fb2779b32401f8158f492cf4df
f811c840f9f60b65f53f395489f307df48f00c4a6781087b2c5ef0a9fecbd022b5b57e0b
2d9a0b736d2c1e2ea496c531c3131a4e49c7be8c00b5e0cc38e193064a17d2e13190ea45
af7c148ba197d5500a3c0ae89ffcf7545af9068fd85df850c6ff9fed00a88111ffc8932a
691a944d2b70eda408c4879bfbeefccaaecb26ee92a9747b3cd4db3f5fb840231c644599
1a71cc1d35cd56e246c6b75575478b68b72f200af4509d1d3bba03c69ab123ad07f175de
e8eda3c9281e17ae3d38171415e5e16a852bbac9c48c7b4126fb010866edc56177f54fb4
c0c3b9f780cc8d62123a1a187e6e8996cacb5876f400eaad64b937be54c7cc5c85faab09
a9a790b816f30ff5358470142ee1f3d2247c4898d40c40c27939c567c4836e9dbf9dbe09
313603982032e825d2d5900b49a6a4177e71d2ac3920518554edd01a905ccc996ef10aa6
d4d95b9d06c75c904e57a5d0b0bbe50a97498e7afb37b658c57068e09986e830f976ddb8
2dbe4beca2cea715edf91eafb96ec6532fb095b8435b007083f12660c286f5d0f3f51a6d
ae8a62c233b9eee6f69252dd75648bbbcbffbd9fdc102bf551862eff6d5ad152b61f3814
e8559a1c0e9643948632a396cf0beff486711e531e03e33aa9214d1add71b21f8af6bd4f
c6b4fa1cb124b1ce3d0513681fe5d447562371c25a76eb6f880e30fbe7cbbd6241752e26
ba0796f8c3846010876ba1cdd36ff4dab339680678e42c964d85ff5d06470e4dc1a07e41
c344c8f3cd6b087c41a9437ef797c9b36f79404e7019cc41507e2c73355ec4075dbe6182
4cc59064d9d3e45509e48e6f3037ef3ce5fb32a3d144775d5a6dfd6c17f2bd993c24284d
4a31a507d5610b55dc36ea1ffd5e3c343b1963c2634d51cb9b4bf7fcd1d3ea28cf0471f7
0b85d387eca970d9148605f3dc5d9b8fbbe21dc8eecee0eb939cc33c1edcf8c714a2cd6d
a5dbb285e34675f5a5ce32834457968e6cbc4fb346edb64808dd7dd285013b7271ad592b
fb19bffb333d47b3f2dcc458187f477edee11641b434f4251b14e28d2b9df7a8ca597bb0
4ec81906a111912bad2f671daee967de61ec656153859183b4552bca27c029f44b3f8a7a
3154147935524c483aa64616005279e4ccca4fa3063efc4b0f8a2ff31849bb1fe7423159
40cb17726e38c67415742412a31b493455ad54086addc7d6c5b7ac656f16ec7903324ae3
cdaad538f2a3f524d1ca93ac7051dc793c702785241050b2542550c27a8a635043355e02
70913c5dc267bb29ff39060a107c051fc4384c3bf92bb64b2ee8946791e338b5c67d612a
2c99e1be9840a31a2189e579115f07954cc33d1fcc3bc5b7d112afd111522ca0d2925fbd
fa92d69587ec05e3151dd773d86b8ad69c6e296eb827e37faa88f9b70f1d39f2e8502972
ad1c02d010993ff4ab801ce88509188b0560355f6842ed385261adb55ae42162adde4ccb
5d5fe3512231b330384cdce6a23fb72f08e24a88a44f4434c1c225d8cc27faed3e75c5d6
c8b170b7ddd68cd8e58e9298bb710c4a21b6812c32e8a8500555d21449cd90d0a2d6bf34
9ad07b60d5846db92e4eabd361c1e61ccb11cf37e7d6982e02f29390fadc06539c24bf79
ba1868b0105a848485f5ed4515d59063d394754f9dc404e0b70696f5aa575b45bb292da6
234cbc95d341df28e8693e1ac1f457263836e826a7d4fe0fa5236b25a95ae5565c1b002a
ad95a76611356cfdb811138b36a2cf79eb0677719a9d6798526e7cb575c3c3ad34748a9f
f1427c57b84622e793fb09c1396897dcd2c02b642c28a5ef7699d739d6221daf54938f6c
b7456d3d91bc1276cc914326794247fe7769d0e878dd5cf457d5a6d46adf22f0a8eeb34f
d3bd38566ce08a3080ef25d96796eaca272969b3d18a59b076d272c8a3eb76663feb7d48
f39f7eaaa17e6d26db3bc2635578f8183f58030547447671c485055a5fb71afa20114172
f3d9f69e1e2aa867ab94b87334ad58dd1f492902e1263c3aa33a000255f37ee965ad2215
87f7f2cd1656089a832d5b7a43153393c0dce0c2a15ddb2785c9d04b18e28a6a1d136598
ecc35049a54793787de962ddf0cf0d84e2e0841cd0b29ee1f6a5a15f542030581bf61bfb
506ec3a93aeb54ba17c42128dc87cacdb88d7254b3813fe2e6ba81b152db83a46b2becf9
ed1aefc6281d1c8ff6d67080e2b972c0c0a5124b94d8ea6a4b22a1b95e3df236eae81190
bc914b2ac13870206feaf8be2795d8758d79391f8261d3f86e8122e761fcc1d2e60a098c
060d250a9d7da6d66397e0c83863e76a34fc9fd88d7d459242a10e5fc0319b2c6aaf34d8
b332d95bffebdeafd2f712e9b8e42daf2e6cedec6adf70b9544037f9b65081607c5d5c14
b345759bf99ac920e0bcbe603ac587e94fb424ad61ae719fc5a9993d3d8bd8a628a9b588
eaa0253e8b1f898b86b846c67b07d4ec9175719eafe12f7e919d517bf57ff36bad4f6498
b34777ed2857a64b462b01405adb83a800a6aa0d25ac3d932e221d365ce5adfce6f74d43
fd9b4388ec5b36fb936acdfa7994603684e4f9883f35dbd91a6a7faf716286d332b460d5
ac49057be92906b4ac9ea9e498d8a82e7b079f007330f2659c5ed6f203e1d0d5755105bb
6c2223fd4bf647ba6023ab155bc8af10ca230fe4f3d11a66697d88e42d3a49779aa59270
37c350861b2f334711d085fe6e1dbce9df0911cdebc5e2f2380a91500913bb294c7475fb
3011031cd4aefddd593b506098af6d98a8c6d92660361b39d382a99b3f2512f91bafdc2e
7a31ed7541a38d032c9f7eae0b9cea4de26802f05173351272475cef65084af873e07cad
b3f46420ee00fb81dcc3c97079886a3ebb308379193f9ddd249183ec576ee9879f77bd7d
b60ed0af8056b7c34319d564828c9655fee6192488f91e2a26021b3ff7d2f9a6935707ab
5a5013b7128538655d3688371f8d617766362f52ee42ac10ef11109e41f074a505810654
f7824a0b2f22203a0430e8065b69bf0766f3252aa8720f8e12c6121b5566cf008509978a
9a04e69195228bd724dc9b6736b2723164fa1a7279eb1dfdabc59315f84578e82207dd23
7059f855b7ea4dba998dc195532f2c27354a8f7e6ae59e80f857776c2b7722ebe8a021dd
56c2895434534dbd9da68612e74bcae382f82e6a4d260adfc014bccf2e2dbda5655ae2a0
c42ef3644815c2da7ca9d5702a91571d9dd242d7492f0a57bb2121522e345246f3c0029e
d5528e6a00a856fa5cc04f06b33572d7a922ee6dfaf943498489bedb17118054d00910fe
17bb4a31ddb838c4d2a8ff6e355eb393e6aa5af4134c1e7a1b7bd11a0e35c842881b4401
a83e96b8761ee2845b5c6b2056621ee4d4ddf1ec06a9fbb18904eb1608d2026884918a39
12398198863e8db1617067c4054322968f7f2873076e0206265ca31ffb5ac35162658436
5f5a31ed892402985c595a6571812d5e70f6d0923d5bfea5eb38bb7c715929f7fe63a8c8
32d6fb8f7e24a5b2d8c59f1af527e28411d1b6282acad43b58e0fd67d4b0b93ff6d43a5e
73ee4faf3e598ebcc27af0c210de924dc99147f9235c36830b92a0204dae80905a885612
8e9c598736d3360e075268bdcf6bb676acd8e03b0884e2c79ec4dd4eb3beafece9994851
4d80b4d058b9fcf662558e52eebf19fcefc460a47f29ac42ad0e1afe9653fd651ecd6799
e9c111e79d774e833580187326bbd60553625b5a4b1249b1edc8e98e0f67c2bd95b0f4ea
87cd627350d5f62ba92ead31d86bbe4bd62909ce5fb9ebd7f55f818432d4b1e3d4cbcb15
d2eed54727c7ad1902fcbbbba0f96ef4985ac50087409b6b2a64f02417ba7c872d42d99a
382fd90910c155ad94fd74a3d46ff80c072edf22fcc15230fd751ac70e59f6b553af4ff8
fbbb93ae55b95eb5d07aef0f84519900af862f15544a3940662d7408d46a39523abbadfe
99e78b8b949109cc3ac63addbf4d5195dc2da51868a9916ec8fe78ce18381c22813982ff
d5bf929daab05b9853518bef83d07ee31cf430fa9b4141fab191f0ebdad254f087f8e5d7
061e061a1325ef3dee6cad425c67d77632ed2bb6e12488b2f01011c208f0d66372007b65
b19f22288b01cffd2c3943447930f49e630c6469b0493f1cacd18f73da74b80b8bafd7bd
2a8cfa6a21c2629ec81c2b904abbaead3db7f604ebda639169283392851b568ce31036e0
1d04cabde46b8455027a2edd86fa661e304adff27de77f7a92ba018c0890f0e0f4354f18
0da3a3adf48b5d2498da505e80651aa4793b1034f62f4c0841d9d7a4431563abba452dd4
2c0f854e3f8618c49d51ff6e399b9b4f74ae6b674d672416c3921a37cc2917f7c8eb08cf
da869b72ed80585f1af4fe04c7b2d0c1e0a07719b909ee5911993a9486275187d8a0a76c
5d5e3b74275fc667971aa55de70bbcea2f1035df2aae12787fe9e74c1203c38b3c847dcc
965ce3a064380dab68ad84f50e90f3f54fe1114560b65908de9e9c34da21d372b069e029
f3d6418b46cd062ab04332329043c1e3b16d1f31f37aa1ed4f9de108220d129e3cf5497d
971f194dba91d2294ff0c9d64125d91c4105c69088828063c288fb6082a95d187d260746
3851a615a2118e1947f80087c60d1b0712072223c6dd38f662fff91895e71c7af8ff2b47
be4565bb8dee4ec256a43d7440e0acf5812cd10b4ec2d7a87722b61b378817849ade2a4b
1d4eca91eac37714046cdae69193aaacccc69f16990854ace90a830122e2f699fa65aa06
d7a438aa3d0cb6a88e6542d7d2c9fafe7fd976c9573d827eac5059807366ac5779241aaf
51df1265a94ee97c36f0ff9b1aba037968a9ac7ce8cc810ba7a1c32dc70f3ac7159628e9
217e23ef5ca209a549159402424959d8bc96780f465aa6f3bc449f721fcbf3b3d90bb60c
6605520983cc560e5d5bfdbce02084066fe2fe82b083c9c037fb38bcafdd170958d1a3ab
709b7ceb8d06f6eeea8393d65f0d287fe1e3f01574deea328fa43e969f6dbb51ba003782
02d5d52fcda8f0233cb3802cc7dc3940d2e561311385bd6c298a1a9869c8b10e85dddd87
b108cd1a1c3117cb0843b39e3b0caa5fc6c9b1b47fb21f4db1a90f1674b9de5590a32a6d
7a2d8be5d962fc510c63181d8e92bbb1556d23339e2c970720e573c3233112b59f4a9aba
b7af6206635f221fbc98571d9d5765337e899c44273da8c3fe23f6986500161bf8674e60
7dd343a8fb88b198f63c8420915ce539d3608ac1afe222571e4d20da259422645cb46a92
0865a5f3eec3e33a097004e102794a6c07215545ba7461968609f18a34d8a5eb8dd24b63
f52e37e446cd88928b633babc1486e5d4ff857efbcf4480b47d154e108c400078d44f088
662d9a7ea24e3a5f185b3c46b8b3581d004b3aa058b99924b51e26c038ab69ca109b5a7d
327cff6bd5364cc3c110e94ebbea239f6a6ab2d5560ebe7b2be8de5662bdaba5ead4f70a
8f374add43588bccf2e2c7d11645e31511b32d3e0b7494e4bf4d2775a77366b176873bd0
ccde430b3737fb304e094c474c0e2102b1661c2c8abf55d2c082c1be622e457563dc4cc3
96234fb714bb2e1f20c73f1109907104f6bb8c9bdfa9859183e529f058b56d0683685f93
21de45176de50ce5accd41b20de9445b2296c38e1e0f6b4f8f3e3b49c30325d738e5d7ab
6dec2b7b1322fec1d226be8ca4c698d52aeeaece75e2b9b4066358eae954a019a80d921d
57d2dd28cadc8a33a190e94b2eec99bd2f466f07859afaa1267d0fe96ed462df37e7c7c0
fb33ceb0a361152f6ecbb7a90157e3d5e316c9c80f31b54583ae49c8b8033393d0678810
4fe079620555a8434ff84554ae8de7e51b16d9de7b305bc4416de19949d640da9ab069f3
da996ab7ef3694ae55ed450a89b738618ebde810bf8b221df1ed036fb478b1f6b2a8a8a3
8be61fc25a3f5411c3ea87ecc8d41b6e5879038b8a55cf017e766c1e3efc0f9037d30d99
e91b2fc42c0bc4cc52a743727f1164b474d43c519c35d562ea0a19fc68269d56491475c6
96b6f6615ac8a76f3821a6e3388a1d56d91531367f0040cb88731e524f37b146f004f75d
6d9a062260fa8630c13457aa74167be43585353070319e3b591c3297a53c4c20d7b969b6
112fc174b670400057747853b47de47dd4c4bc05fe53300fb1fde09788e3472c6dd5296c
c04c1972d3dcbc2c68fa1cece67d5af642a5a0bfe034b93d18a23445b5347b7999c1e27e
67dd309f8bef51af404bdcb7b658ab55bc691353a18358a9fb9f4f6451c91377dbda6796
6757656a8536b0bf710fa0c86137d91f1e38500dafbbf19e84943c5ea906e994ababab7f
0277b4da8e7c2336464b80924fcb5afe824b3bd340b926f664e4523494610e0717663979
81f916b8870706a57564738b5f284f8de556ed592360e843cccffc1f7c3d88b594a655cb
f5e0557ed518dedb617f863457f004c8f60a2a8a55a72852b5a3b44afdc57aa28f55de7d
028cecba91ca8665b84a1dfc02651c116acfbc3734e52417466aa3de8f00efc2b54a15b6
4affa3bdd11436d81986c14b0a0b67a95bcfb50c538cc0418e951b90be6c8930e2a4999f
608069ffde950e230e45786cf2f14aead24955ad5ec79daf8c26b82c8afa07670991301a
ec26e799e9ea5a3e33ac52a6ba1997b1868f46af50bb935eb4511344731c1871839fe9a2
804ec7610537d79c9948e2193d694d6c9b05f5b51eceb9ed8713c8871281672621619728
3737c3d0bdd74de5a7508c5bd5db7a0f14ed0624f7203db5cf4f9490e7215afc025ded48
2e24a281bafa6c21f601d2bec7c040bc45d210cbcdc87e8dd880fe4afc45e9b45ed2b5d9
9a8650acbb8a0eacf4ed466a95d2ad44c12862da0749fc1cd59354b140f0233bbf014a3c
b722c6ee5ca1ad543cc4961a65dfbdaf3caaecba95e030536ba4ddaee1298e5f3e748512
067b66ab1847097c33fac169682acc0c91428b9bf024aa9974c280bcc78620be37044143
b18f39c39650c1f253a8500660ae803dbd09e35d60919f586c34c1fb4b558b4368141425
15c72bff65f3044f7512f1c44de392645fcb758e4f698e31de57eb1af23ffe10f4b8df0c
03b851bf8fbbdf7852cbddfbd077a029f2fd495c41b6f440782b8c25fe90c15a75a7050c
4a805a9be28a4ae46e1c1aedbcb17b2f29ed0c896fc747257599f50539a6134df0c0b4c1
1462056936754048b3ff5975dd6e5ddb1f17513efb98119e6e2ee6d1c1d7ce70a74e6709
270a90a7ccc3d20520a0b69b3e996b8b1fee0badcfc8faaa8a2c4004fde84a479e7a5e8c
c30891428c9b39ba9e22a28e2e9ea7c8bae870492ad8fd9af9534173b03130a44c81a8bf
1602e15698fe777f53579d7485f4d2b5ba36c73965029156a2e0a2c3978303d405468c19
81c702961f646864853e6b86637338908e46e80ab3b3c3e9d48b26fab1c05a0a90c501cc
24d9bd851d2df047f7046ac46df81ff42e59db3dda4681cb3053b4912c277659c11830a1
6c01f883c396f19154b1d2f1ac161af0d220ae21022cfc51c39a1b6f03aaaa610d6e8e4e
fc9cb78dca534dd8392e08b76ac5f2db3426a15a3facde670de0e0c29607fe3391c12818
d7120cc5e18d3f7e9b1d925f5acc65e96ebce908ef2db66f7b3b991b87b34c31510bd29a
e3a46f2b60df51fa600c8b6280dc4fd0180f44723ba08f1b56eae00b7b0a13d5ef91348b
0c60cbc7601172108c2ffdd3f59bc4ddf8b508036743574a14ec2ed27fa213a84b491430
6ac33b344a971b85caee32371c4dd6d5738bc20d79a835b0d403a02b20b02a3eef337182
d355dfe7816d25fb7a317a1a1ab5bbd34a292d93ba63b8f60291486225f2a7b01acf8447
155c33bcd7f3725cff561ad51a5aa05555b6d2f9be707a60c5d53dee652306936597ccc6
1013ab4432a55dd67e7aa21d4f929dae126dbb53ff854e652efafac0419d9c3fe6672d6d
5c2a218cc897778978a6c05538ea35c4cbc12b005d7176a1eb246a7f2a47c9ba9f03b4fe
366bb308303adced3fe21128af6f7fe5b5598fe99321d4724215d157d913cb279ef076cf
1eb9b1c357da824cb9ba2b507af4e0eb8abbde16885e08f79108126a79949553f72ce18c
c9311d9cb3beeb6acb3f59256bd24c4f0ad91dc44fdd91f95df40d6be5790f4f0e7a0fc0
c7fd00796d799e12290360458341020b28741e8f82247002d91f3155f7e776568a38174c
e1e4876a5cee532aea13226f48bd7709746df852606ce213904dd79ed0e6296c66cb32c5
7ee5b8ea316f9c4274215a6a2539048a6fbe9dc308983e01c3f74a22c9b6c959654ae212
6c63287b83d6ade2db4d558d29ff173ef953307c75e3841b715e3b25b5aa627cb2d92b0d
7a6cb052da4ddf85406252a0ae2c5385c898c8ff51c5c76fbabad6b1c183d3987e00a738
74041e86b5572b9a221bdde1fac39e4a2678c6a3065d43f1badb6d25489e1e45097742fd
92f96b928082160fb9602ab3667349c59652a813a6343d74f799ce8d26d900cb61913b34
315a7fd116fc29fab995253ca2da341b89dd66ce601faa3310c76ba38521d0302b58a5be
83a751b89024f27b9a384fee87e204259b0362bcbf1b52450673f967ec1cbc70e4c6fb5a
bdda92ff9e5f025b28ad7cb308a70bbb6deff9ba1e16fca12ca3af2d21e7fe3205826c0c
8b1e8f7cfc95705000778a1311659db409b1dc1275570b12067913b8462619233197c4c5
39cf86134f67f585b08a7b4e826b01684a620688ad061dcecf7069d651584ebd47f75c7e
b396e3c094946cb073f2085bcb725c3c8e60b3e2d67eebc27b446586bea16c50dd0fbe0e
06c606b5ec95c5569c43e073d3cc5460a73211f3868c307cc3f36bd3405e31ad3bf97dcf
0d7a121dcb2b164988bbbefa0ffcd7ddf3fb05271971be7397ce4d1cc720b632aab21513
31f6c3d9ff0398c3283d82340901ac302ac3306a260a9156a27bd5cee87f99868eb06273
98e354a8bfa5dcd12e7316bb9e44604bf3e21442ef30550412e1c5199caa07b044851fd7
d7f1d56f333d929903602c9bfa3cac8cd1ee383a76a4b7ef9525fcff34b588ec8f22ee07
302f4ee688e80be4a00a7faf46118d7c1d8b0312602c8fb47ce841019225495ff26ef5de
c19e1318799e8bfe36652d729421db35aaa033754ca5a6b7b907ea2e64e8333e3aec3f16
49b79410acf28f32113da2ed11cc06a16e55f41948855fa25051a3f2e93a9a2f8c5677c8
e3c07c285f987258d57792d1dab83f01112537024008d3175dd3ae4c19d0d11f138069e9
842b5372e09ad73fc657995af7037063431256e42a32e97782053f4b1a254e531aef3c41
e751a8d345284626959924767ac5c132651cf279205cd3a3fb00b3ce3a026ff7feda96c7
40872f9c7a10eab19a869912917f878703d608ea647aced6518e4f55d953b9c86b44f3b4
3a615f1548b0bd539948c45cfe1c1871e0d2106cea9ffb93572d2e0fafae0aa61cc4ddfd
e74d823d5e41655a020e67644589d7018f07b354865ef33c53284ad80d5f81c64d120fff
c94b5c474f9b02632b00da015864973adee92338336028cb408bc778f5defb8147ac00da
7b5dc5dfc8d8aa05141f80e5ad848de917553d8e163e41cf168fa1312ecbd9598acfa979
bd22d264c577036f53402fc5f9d32838eb7e84472e756a67f3e0b9b36e3ea894af3aee19
31c16aa951ee7de9748505142f553ca6167a30e77801256e1fa197d3a48ea57347814869
245419a62674b473097684ee084063fb7156b765492e8b7b00bf421331e5402ab18be3e6
e744c9e29bf04b90f7ef051f7a181979aea023046ccad3042d6ac3456a1b385e58a0ee23
f3f67fc8eb35b988e3ce64dcac1003706158e8a1d3b937277dd5d3e3c98c3ed96d117e00
3d4b5d7f12313409e1d4730ad58abcaa790b38504a9d832a6a4d2de03714dfabd8eabe00
4d5a0670c9136cc406cc9c497a0a2eb3711c6d73f73e2f1801b83038668fb878e231521b
a568cc06cc37fb1a95eacb884a0cb43535ac6f3f402da2ef350a5d95acc204120816c7ca
a5446a292f1dd0d04b56c7222304bd17ebf397b48606ecfdc814e4829c41fa2bb94ee702
47cbd845f613d82794a7957dee47c5f0949f5f8dfe2e64a075e7ffbffd2a0d9050bdd4f6
68fe2c1532922f263a30ed4c596d5dac4fedf3b330f558eb5a1c398649fe8db7b51e831e
ea3d97670bb7cc60616c80fee6532741132cd71e9dec27abc8e07b2fe7577f144a81d53c
549f99e52a7725e49898d3ba354fe9030b68b026464883b45177a114c642355418d86328
2c07f62f8dcdf1d57bfa50dfd92fb3ae43c47da3a4dfd788e0fe6c29e1ff23620836a029
5ee92855d2b18ecca87533631d029121d28b4afb00c5d5eafd8cebcb9a201d2f9b3640e3
78ed0c52011affb89677859173084f1f9408c063d4d3208d66870230b27d2b0183f5b75b
a95b35a46ea3558d4c2fd8f2bd1dbd463543c2d1b48daf3c702724fc02ab760b62949f28
4c6240d798452d9ad920f2e99c82e7bb1cd10aa4d383f0d1b2892a3fde2d060a80281813
4fd3e4bdc0e1230dc77c81c2cac8ccee6606d47893317c5c99d0fa5be8dbd1f269d2e6bd
09ff612b8897ab5169b168d5c1c679e89149e1c15cdc28a5cb642bc418ab43a355a2a007
6124476d954121ae6a24bf200202846b878464220b7c5388478fdd93d976d930cdcca6cd
6948e02e392d666911d67f12c6158652d0f3c59ec604dedb81ff74f89de10921e5d8b13d
7e13a98181405c15b19fbd9697c3d74cfd2732b2dfd9a36f6faac09c5a223bc6d51f7301
f0a50f05ec17579c7b6aad7c24c400097d74a83cd4a52ea4e4a06dc01c7bc1720307cce8
cefd3275400d299d78d9072e212945c213fa5dcc76ce8b04d8471dadffed54d97e78f5b8
5e212384b0c096a98d106d4dd3aad842d54f36e3f23a1958c13bbc8acf4395feed451e66
50821de6ef86cea6f3a81bfb70d8f3db6f453483ec8c1077291dd155d47fda1dad71e8bf
e641327380d4111a946bb76dedfb76bc723da54b48849374a7bb4cea2c491ac86f0d5662
635d55078c4e24d3f20ed2d2f033305dee0b4ead6ed2e86241ab444657ebe0e0f6fc5745
317cc579070654116c714134690d4054aff9846e45bf696e77e7cc4f4ca0533a4ac8c97c
84deded8b64af3a2f9324143c03f6f53b1ae8a401e44208588639f0206ce722a23aab21a
84cdcac31b22adadc8d637d7dc18b8e7fee7afdaf0d05c8df1181f90c422866c613b2061
03bf0d3e08ed1acbf23dd72a4030cf8f6f466e1d259752c9222331387eb590e087fec032
cec3dd49e254ff58ef2b46dff2a904ea6c53c75c9d6fa0ca2c356fe7f5010eb5d6fa508b
c6878232a8fee2775eb73a46b6640b766462c730ebd0d777bb7f19b72b1bfdfd236f44bf
07ac6aab5d71c1fb0b0b66470f0f8982bdd905788c75aecf6da7433e4bcf57cb95fdd1fe
470f56c5ef7647fdc4f752d80a53779b5e1ddeb8e545891d14d381d103be17a12df1d42d
093712e49bcd2f7b7509211f32f4e19065562d2de8cdbd1c2c2e8d05da54edf21cbd0153
b7b27d60c6b4ec328ff688603ed6c1a7448915b27cbb982a1781092950fe1690a2781cae
2eb1c4bbf210c0d3cfa9ebe505f460b5893a60217434ba7023e7a84cdf2b21ddb91859c3
494c65073bf6f14cb48f553fb0c1b33f0fdb883c7fa75b442d6231e9762d2fe7c5ca75d0
3fb0cf39164b6591fcbd39caf290520714235458277eeedc7c550726f692ba0bed9caf90
1bcaa5234cfdad031dfc94df600024d70e0441662b64309e57e2ce6d50d13667d0556c2a
41f0c28e363eaa45c0c7d7acdce2b6c330490de4447bfafa123e6e19315d8c1d6c6e44a0
1db6ca247f0407f81dc6a8af217f70fc2657ad1eb510fe2b46be881ba047443db20f99d3
38e73db1741ab70b1c0e3253894b1295f924a90e253856c9a39e236531053cfe93cb0ba0
8710266111d4fe892a01793849138819df15434a8ff566bbf7a05de2fad89a696661f20d
28b10cf261cff6d885fcde0c6312fb954917bf5236929585b5212c556e310b480ef72404
208e8b8df009a2476fd760892fe4b4cb48fa73a84c6f462e7cc8e3be79decb52fc16eede
af9389bab97f7fe3bbfcf9280e242075a473ff634eef816914f2017c7d0ca6bd8aeed710
630760449aecfc03bc4dff5c1c73ce1e25101988f8cd2db85f444c33fe0b15d88346ce66
c6891b9189d28a5d38645df573ce8ce7710e7e1fafbbf274b8dfa1bf13ec4fb95a414756
52b419538a50a016aa816d2639a3e374ee3a4eff158dfcc24d82f679cf1bab7c956fe9ec
33dcb73717a264099fe8de950dfa780be229b19d25ab9bd5180bc2713fc7695dabbc129f
40e5b7dbf60fe1ababc1d9fbe68bf481fcf31f0fc84b72d22eba21c9edad5330112d0b7b
cb5aafcf2d61e874dd6c35ccd495ffd8428ed5f4e01688054d94c01d33abca6fc319add0
91a73cdf7dcffefe68ac240f43be5db51a55c43f50e42bb4e43ec8185e67233574f03c20
a2c48dfe0388ff3c5a7a2eda933f5f070e0471576edc0a6ad1af67ee4cdb5ff64e5f5619
d49397aad04a0b06aa73269d2d7a490c20ca8e3b34d9b9ae0a0d8ca305faaf1f986ff1fa
3020230f020b9b84b9bff2c4c0917b14c7fe663c57f85b2a69dcc8c931ac2682f9f3d9ba
b253e97dae04f068f7028b96b04a1e0e99b2ce319906848eeec4f2d834137e766fbb93bc
2563eefed9454c8095d62221c704b6852f62fefddd1da38ce8ae74f34cb9f4abed0c454e
77f55c9a1b4100c5a418b44e7ed4986059eceffd1c27ade7f6c4460a1d301b303b168fc5
66d4bc532981c64b07b770b4ccd3260bf66d2faf38c47a9391ac07b4660026c8108045ea
f7e2390242394a4a9a8b50c98ace5c2d5a2baa7067035cc66161551fa60c49946e93fb29
bdbc9c5e6887b7d9d04f3f2446fec4d7a6904c026f7fd027a8897498f7b0eed836a38a06
145d61a3d769e11f1f10227a3326fec4d6652df2d779e3108669e885e7258abe7eceeca5
c373c5952ffbda86183a39506b95106b5b1568850675d4c54350501f5729ce24567b7b4b
6f458c05d0602aa4c8578b516bf2122c9404716e075acaa827e07e341b184e096e7ec166
dd47475bb0682c11e19f913ab74a621b362bd8271449530a421fa65cb916df8e82d8eaf3
1f65e725ac9e7ac227d5d3335c95837f154a7795f7a19d3e9d2e46b9affda1f3521340ff
94abfe2a4bf6a2bd0b358af331da88e9f0cf901eacfa6b20d6c6cd491e47e16868620762
7b08f447aa20922b85f50de725ad16633f806b5f2fc0b36639061669cabc0191f3fc5b3e
9622658682698fcf088d8ed2907cd12a02918867a6b73208e7046a2b902100c2ca320459
fdad8d5db470db06242642a3b4987039b9193e53e18d6f576a33b7b339fe4b18e27d8312
386d61a4485a80d3bd6cab2b8960d4b5b26cc0185cfc4bbd5f17ecd10c27dbd3fa0d0367
d6ed292e0f996fc1abf5afdff6ed93ad046064ec6b3276fb61cf773d1cc3c3980739c0e6
976110a7dcb16e8f59b3588c5447adbe7ac1152edd316715ef8ee16a489e480a83057b49
f57fa5294e111f7e43f70c746f118a729ae6fc75c342b30d9eaba644d39f24b124fdb68c
966b4e3420aed0bc4295d9c945af8e7fe4ccc55301a09532640ccbcc86441a3d66bf21b4
a0197321afc7b7386a220ae1b4a74ccfb75d47e262108c5a6bab2e29882594fedc88f60a
8ad1cd03462c4cb7ee79cf81dfb1ec3a01c078494f811bfc053bb301b36d9c64dfef8231
e8612f98e82c31c3b7b6030ff7caa3560ef306e45ee3d3b1d1afaaa724190d9b9a7ae236
2a5355aa9327db22227b456356a7a79590d0537ea5ccb4565744ab463922e8e3576d2378
ea33519cf229550836e8289df30003c7df239bc81d1c621cde5791f28064827a7c6915da
d0e5d483b3084fd47bb419448349994f2868838de7bcf2e0c762dcdda47692da9a6fe3af
6c6260aba904d86546ecc9f52dd76db6183f5051012bc8fb31e5a6703cad1f124364d3a5
d041134159bafbe78d9eaed0ea388985b40c123d7e4adad921352a97488a0011cf7b2155
3f82077917fb492cb57362d65b30bf2d4228763c0e7b5eadd561792895e8ef3456bc6aad
39a8be61ed398c5c1fc83995f1debbd990e372279de066a0ae8b0b0c76f80a3870832415
8569f10aab9bc0d59de250a26665a2976861a75d1e31d8eb3d01266d5a25333f000b3a14
05030a309d42d8ef11036d98a2fab1988e0889f291e13118fff798121c357523479f266a
e3024320db3289191a4394eba3bac6e42a3651f1493c46144ee48ccb80e2de1343521e27
8fbb4dc50c0a74dc5cf2d9e041534e29bcdf1d415e15a8153cbccb858520067dd70c87d0
e8e9b9c73b70b3d42fd34fcda339c5a4a9a953c56b95a222260e06cd2cc690811437c668
4968f767c25c31e718543a9b3dfd59d342e6ff92f6fb8cbc8a509f2cf7228362ae15f5d8
46f213debe0f13d1189b83795ec52e80a61763879663914f9dec1ee97aaacb0d67ef3217
69d1b5b24b0578f0429d1ad4d8e3178a73caaea13ef7ee934e8bc42f605e3a3f91099c71
ef036c6ce254e834d84f9baf33e2679a729e127190b6339f7e3a0e6aaff72a65fd09c151
df5124c79102de3f18d783e14a1fad64c483479f151cc53e1756b46e93dd513f72ee2711
80ba139c8cddea4c51f94cfc25ba81d342b26b1ebe55fd081761012929d4ed4f7b512022
3263e0e7fca3cb121374261751c414520f2d1d809221fb127689d0aa1cb13ece31dda3b3
bdc3a16741ea49948b5c107b7c2232dd0c8466b6914002498fe2c04013483ef84143b90f
92cc552ca4a047f98f93ece14fac9f4c585e3418a478628cda5d9416ec67a42e63b4d1f2
5099633c147c3d064fbd3512fb9a9fb6ef07fa63367a329ef73e0905f3dc8fe465753100
574151e56256094da777676ec078d9da3ea40fa858d88d410db955183050352e81adb8f0
757945c6c6800d6348dce251d6f7b38a1351461081c96cf187693e19e6eeacedbed42f0a
7ba486bf814c2dd88d48e8a730b941474767836a11ef2f0050e083fbb6de152e629cbc5d
a2bb91a2ec1f2ad39475a79c5edcd5bf3eb853cfa497591d4aa96849b9ac1ecc5eafc9ab
7e0baa6e919d206afa7254dd0186fb7e98dbd5ade1803553c7a3e50c253e315de4f7c5a3
a103ede00597c36082fdcd38a544b5d14347e95a774d941ef20896da12fd3fdedc12a190
cdb713d461476d7019db7464e4d76824dd63074aa0f5b2786748b7da39e451421c227cd6
29a7487a5eeee3972b9a360946d5990464677ec7300ac30e01439bd3aa24c42e0f28024b
e211da83e99a3871743cb280676d1c5c7789072bdb94ecf721453b373dfefe8bc86f5179
5a0704cf74acaa53025f6abd27343fb08020303445aaaf5259bac15a53e0e89b50ad0928
c96d007b688e4aafc355d3c91c7dc5b2d285696e7f785741c5542722e361227754e756d3
051a296be98ac7144281cb2b9ae8389e2a13d2e3596fc0e276116b0880bfe6729d7fa036
88a23da0847eecdee7582fab0214268d423f3dab5655205bff1d77e3ae865340637a0c15
78ef9daabfd1a1f2c7e178eeb581d5f500c6303a492eb44c1b50633f32ef186dbb352c0d
6115de0a87483e32a251a9c80fb8a0272c0f02fa3cbf02b85381be4b2313bc6d857b00c6
47828ca03468f30b25dffb757fb80d00f12d6a1968c3b9fd1b4617e15bfae404b409f315
fa13514981d2175d00eb30fbb387eba5790ccb23e68a735737620f56d10a17f24a1d1dcb
6fb0b642e3ab918bd8b5897aec082a8535fabde560a621846d98fcfec8e31b2e452d33f6
2b066389d31c2b0688c88048e1772787f5fe79877c11eb26798fb7895fdb642d4332cf94
e0ced5cdbc1ca8ae48fd7be9b8d2d92dace096106b0e7894149d3a0043c806fa14372e0f
7c307814d0731a51a781815a2b4fe0b387861ae5f0906234ef8310018fcae27856d67a0b
73a4e487f019e606a0d6701502152f8f018213d918de6cd8d4010e21d5718c507a2abaed
0d0ba5f68861700676b148846cee4868d0b41052d3ca8365918cada71be320905bd08dbd
fb681eab0c33d179da499d4a6f665d360954d63b146b5dfdfa6ee11492f409ecd175af60
ce894722c48fce68fd58ea725bdf589c999ca22b121e8725f3d7c9e89abf98662d35b08e
7808ad71f50e26487790dcf75353bf3dc9f3becf625907dfac7c6560502369a4fc6b2406
0116851cd9158499462ca6f809006791b4211f8af454daa2c2d0540a67106d19b619772b
ba96c52f1387ce8532fc8d1293fd8d76343889a33d877d537fbf3a1a59567c704e2f19f1
269579e4ded25c1e515f8a105c3aecc92b99b6723b53cf67a56bc53152ddfa23ada916e8
1b944320a2b49d6ed49a9424685906987ca3773d0c8ceadb804d084c913c96c26a58df91
a45cad30f523e959d21a374cc3d28254deb75155f0ab4b9922ad4b6f55587bd6cc397c85
694e0e5fbef7f02491332fbbf505e477fda12c8effd3d776bf9e8bc261597367b139fd0a
60b6e128d850315cf9e20b1e4b0811eae70e243353fc1e2a7b68abaff5297c6248b0b802
f902c1f5879a2afdfa4ab358773a3bb98cf024c64eb32ce6fd27ff8f0baec08a9fea76ef
08df7d334d9a81c59b087217d9dce492ad8df818800f4ba5e9400d6f10c29296a93e492e
f086f949117b21878fc253e04fe20f3a3c59b48a5bba2d8403209a884159362a1073d895
8e24573e854b0f4301e31f508e0587edc67f981e552772bdf1520c745b622772b6535e39
6f4739f1481fc17e039e5c44a15b242e3a9cbbafeddba03658062dfcdf96e3b3463a741b
cf12dd701fd268bbd055994362cae9fd78b5bc10a3d2fb1b213c72a5791ea4261e09c4ae
208bb97083272d0478e02ecf881cc34f4cd7386dc5c4fd082b48daa4ee1c03e5acf968da
04d51799a22102bbf97e6bcc6ee3e888ecde087aff0bdbde5bf29cdceecb9475fd4039f7
e346e49fa6247c1b8b69bd2340401f6a3ee05bfb8074215f0021cff01eaa2064c3b99aac
612faa7e58be696da14e3a2a542f37419750b737bfa5c7c68887757f708724c5018000c2
9fb71db61562ddd7b604d4ca4b5f05cf87ba138e857c6c556d9137193b1a6beb3bb936df
714346b6423751f98d1935c565de5b12e827fc8b894b99faaff5b569fd2f9ae1ed7676fa
8631bc1bdd6aaabcee1f8b47ac1ddacd365b5b40016d18aedba9c223aee0a5e61d16bd49
b7dc1cdd3dc1af037df60ea177fdd2dde624a9b8a018bf568b8e46f79774202510a23ff0
3678704dbff66a689c9c4a7a43f146327e637fb183f12f76faa31943957a86083c99281f
6d32dfb70eb23f68e98743d4df713852c18b62215224bf40245bc994c6153745a65e1928
deb0ffd16bb65203e345c80e8e7eb5a2f25cd05a5171ded949e24dcc9c646c9a99d84dee
946c864ec436b7dc54450b677c92043dd6de6e8484cc4e11ec4cf73e2a8ac8094eb9d054
230247daf8c8e2e15ba42be76ece14aa9f6bdc870820e6a9846dedd3396c6dec512575de
9c0dece919c83659d34d0c6512aaa5e2aef71340ad060778735601ed02ee5e04204d174a
7b6c6b64e91fc003f6b9d55f4a8dd818cd4a7035d5b6ffe2ecd467189129327951cc658a
88c714f13930049ecdc32c802db657ae97261686331e6a292d352f358281695e914a6d0b
174c39c37dd4591d8fe701aae0e7540003ddbfb9473693fef08cf3bb16a34a6c9f499cb3
a87669844f94ab9420057f92545369a22797147d89f89bc8a26b691b3d260a2946da2c2d
eded0f971925340b81e9400e3ed1d8f460f1cbcc892ebae49786c9531f342ae1230a9955
84395c89826d1fa0d242ef965f52c35bc4b5614036142d9b44bb443094bf7b1879186f70
36d1adbba80ac19bd91516bc647c9fd70c0ac17135a1651e3d639baf0d6b20d3fe6f9e69
84ba8aada0155cc974b82a818ead16b24bef32eb5abdc1ada0ddea499740afef9bac4bad
7860ee3525b4d95471c2ab33f2ae8c966562b86ac5cc032d398a092e2797fbe298983f26
edcda84a46b341ab63234465ba65caf3e219a75270cea40f795bac97f5b1bd3164e8cc85
5564fff15a4340732b68aa5c641213cc97e0315673ef469c424e3730e65ad6f2bc42890e
65ea2a88970018108c037a87a218eb3f5c2be20085cec2f7ea1c1efed129131f6bf4a0c7
bbd208940542f34a36ee6113f4c0bdb259974f8a47cb1fff5ec3a76728f7468bb6391ea5
803e29c7596e431ec4675bf21f97b963c730e045c2712048b731f9feb9e4b255d8d96c1f
5a92386032401bcfe5c94b619d03e0d9f7c10ee670145388ac5ef82c567534f518303e6c
98a4f623e7dceea5abfc09c243b368295c21486afd6ba733449005b32af28680be6ec343
66bfeb8fe6078af1764dc8bebc9dad3ed814fbf774a39de8e33c7c22e1f2d917e4ba766a
67c6acf20df5ac5ea25c5aeeff0619e96de0b648f40dc49a871bbd9a329da0b19b70d872
bb67489c3a425a841c2dac3c4f90ecffc2af02a54683845c158070ecd3bedd15c6b41bb2
42f6deb17221253c635c2c097858a347133a99404925bb63d1350643f5bad43e392ce29c
ea6482eddcf446c7ed7a7148d76075ac52fddf5208b0e40f557641dbf14100c518a96b71
578cbda8dc3b8bbb6c887ba320d363ee9ebc86dfd5f3f6082996b2020a6e2ec1a6679cff
65e6841b9331849918d185e0ed15f00ae20561f9460a8b7d53e134ed3a6cd2d522525769
5889f4fcd66562a50cd4cff1754e3132174f625b62635344dd42062e8b2978a6ad9f2ca0
92f5e881365b00553b159aea98d7c7317a271ad5b46019ecaf76439fcd9d1d7e38232711
c74a4b3eab74d3707572757746f74aeb1d5285a5e0a2a64c433d65242edbc74f1a13b175
33e6fd364a187ad36afc043540d1a51b0464d9e86d7d7d49394a3a2d56517e7dafdf1061
eac86877448eb8dcb5929c9a51b34ac09b14cc00589647c7e8546ec398b0de3d383565fd
cf2d768719346a942ea5ecd575c589bdf4c2b92484c5d28c99abbf6f485412844afcfc3d
ef50009501d577ac86910b73351ca74d7e7b9f41883117db8bde6c47432e3c77df5fd58e
d8fe17d02e3052520dbefe5b466bc2a17d8364c3595fec628f04e612e47f9e13e5dbb7a7
62c4ef5af0862b8dd7190e79b221d719b5f0e5f0be9524ab5a91768e7f5c16b0eaff7e42
7d7b3cad6c3857d092945bdd83fcda5a8dbc6eb77b4d4fdd00a050752db1e1515285ad34
8466288147bc871186dc167d1b5763b43f0cc76f5a00f74fa3430858c7fd8981b52257ae
d2e7fe21e0a9353afb1a604f34c47bbd2fad2910b2740c3e05194d266edb4665802623a2
67e4cc435e34931f6ceddaf1319ac142b8ffa2eb48ec877cc647ef978d7de83274521ddd
71d1b6eb57e4a6121f7d52494bdb376dfd0cea94b79cf40dd12a73b34f545ddfddd922f2
3b135e2a2d79a8907bb7afef32cef71af968504276b793185622b7afb601f1127a8021f9
27d163f03e25892247a9acae7a5437c48b077e10d7c4660e2660bbc57f4a838c43363e5f
6d5537a736626f4e78c637eacccda526154d169ae08c2b1176ec205362b4d868e2f7306d
c57eb0d800499c8512992acbab1e3a910df861dcc1caf53079f16beeb4a09335b4130ebb
e8b3739e82f1cb31edc1338a4d4640bfd8f13ddd5afc9e8a563931cde734c32715ec8a9e
01cca0112f524926ad389286c4ca4cc35d0edbf06be51ef9abe0985d87c8295c3f0cdd55
d16bbaf643a7a3468d900693d8baea54938a1fc1ca093a93efe09014a75be9f0b73cef7d
b886ce7bb86e2bd7b0ac00d9ff70b4c6b9b08ad9dd54c4c05ef4da7d6d835c6976546b2c
aed99c991c4c47a4aec605ef14dc6fa5a0a021024301e0b39e6a1e135fe99b0121115187
0da86833d657d4669b50542148ca1bca009e6ba3dfd8b994e9f76cc89953e55a8853d5ff
4ab6f9b07edd800b287a95230979e800f1d2518249825d25a111e81768b1f4b962c9cc0f
3fc29412c3af813bf89592efe15bda7ea410e82b37c38fa64dd300869c14fff6493e65d8
74b31354b842ee04d509b69b66c33590b9d3bd72c62b0136cc93cbf1232fc4c6199c9dc9
5b9ad11f2e553eb07254a467ce02186097b04154d17784e62069f89ee154b9979874b4cb
fa9a26106a10eac60f737b902a5f9146f52ba88213eea01157edfe477cd56c98420819a7
cdaa465a45780559cb6738a1da86d6a817b5a20be9d61d79069b3613b1c181495a95833e
55be5d2f19e79fdfee9b138a0be88dfde209f578a95bb467c69f93e09a7881f01c08ed8d
283ba60a35bcb22b3a3134ffb6f18590b4b254cb9b6a29ec2c17b574b24e8a599dec3b7a
8d9fc388a9713fe65e3aa254c0c2b291b1fe7abcb788a2a29de2cd88da8529382da3884d
39033466cd98fe69279bf3a5a05a4606511cff950260654ec7df6eae992d54349934ab75
8d5d9b182ce1908f5ddd51924036fef0e2e9aba0d8cee8c85b1bd5406874ad2b600c4935
2713cb00e7ae11eadb914e6f2615aa80dcaca3f2056e05d0c1d87f37a9c6fc2049c6e6cf
b2f89381ac85df129e96363a610e08c662c234e3bcc48731baa20da9af93a751e5b71447
1496bb1eb45f01122df7abdf8a4719e72ca1ef8dfeb3430a3c91d63f07ed79f4cfbbe903
947ffc219b036f70b9e6cef5f0ad48f0301794acf33952e805a1ff2fe85a86b69144d5ce
d9b9fddb2d6c075c202a6f7e07eb1e78d15935d8eceda04130fde5ddfec948879eee1efc
3925c24420c938394a938824cbcf9a86e39256a39e675530727d278873597d16b2ac6ca9
8eb42be76607c4507935210390012c5f5db7ac974e710c139b6f084138b2342546ce65c3
bcf24d36c73f6667bf620af3033e69cbd19fc0fc217bd6b01756818f230028e66ffbd3d4
1ace35919a7aeaff743a38f1cbb221ca338ef3640fbb228140c7882c84012637062db4ad
64660a6c6c6e4963636c33f4acc8f2792acabd4d2c4c4bdcbdd4ff96488ee373161f5bc1
4d06b390ac94e03c99c0982af1b75ad31b94305028992a18a142177222fda6a9db494593
f3822def8fe0f07db629ee5f260be0eb6c142ab76e403e8e27a1fddd075c994df3e7a15c
4763ae2f9c286381c46a95333cb3a6c0d2e370f07841c6e2cf5b8b00f734310657c5cfd4
59a817eb718e9b0bf5f6e93f8a6d65a3fb8a79e9516de3183d58b805a4cbfde41c974419
1b592d9572fe50a77120c03af7b7cfcad6c3bc026bbeed8e7187d06effba62c2c61e46c5
cfa859787747e0005ef0ce10133cd83c9298163d52c2b384e07db18632808f754b7e276e
fa70a1ec6a17657bc731f300744456ae42e86798557c9bb2c0b0cb3bfdf467044885e453
a505546f173045d0a7b6265c72bb8bcb282b415c87ead926e93e9f0c7163f720d7b2b6b3
8471b66af683b056723f4fcd610935eab80a77da6938bb502e89f5f01757702d775897bf
553e8ba1e3ba3ce06d22d4d80c05c2b21977e2631247731941e2fddb04cbce22e2a16725
6337d4e124b9a22b7adf78d30cf5a1c2cad5c8acffc7c83335d7cd70b84135645863e89b
36d6a733c32857631d98e333010804c30db297105ebf6d377b9887b21b6539d4185ee883
f957b85b153594092ff7a89829a0e43d447269937b5d66549b356a9a8829a2933a1263fb
24142e3b37a35ef76072904d81895874a4345ac3c19545b8c1c98f5a5a7fefb3d14f531f
63d748820aa15ca27ea06ab725f8d03ccc80e3130fae9f3a23dba452f9b264f127a0ee48
e6f3a072efbbf85879e578fc64690d1af314ec9e04db06bea5397f49631d5d18479adf9b
ba160146f10005d31513366c901325c7ff07f0b64cd6f8fe7ca5e4995badb00c5b9e039b
2682242a581cd819bba016c6e879ccbfe9b37f97c820b222066513168d0432c69e659b39
87e22837de5d5632b599d199a0fb12e8d9a264e9d8ef2e5fb37e1d39cbff0edc03cf8378
ab987eb35cd21e4a041bc149485af204fa8a466bcbc79a1082781bbe53539c8a6ec91369
4632dbbff826a76262b19b2212fa55b0b0bbdc016b726189b720455708c142c2e0b62cb8
5b5f09cff93308e6675e6391a2f1ce35e99f87ed5bc416462b07277c519b92527c4c78ed
769278b428f063820e900600d3c232ed7852cf07f671a3b5a07278112318883c69a1056f
bbdbdf6ad482e8395178e9c000def5edc548603a64a7dc828f269865993ea6c3c49cd58f
c37614047bf414acab519142046d019bdcfcb168b03dcf804ffa7a3f83d4c99c207cdb4a
e3637cbf7d6df129a5477cc2f42999c288520e530d35ef9e12498f45cf0e037a70435132
c46f34d86efac4b403f1fecafc738c8c1076db04c6c22c2eae18fcb1b3d3f5a41e2448c1
82beece445b3bd5b1bd59a4d65845083604ac9d9ee0858bd5a59b117704a36f12ebc168a
cdd199f459828c21190d55041b574a8848c6bbf1439236ba35e6beeb3641a7574d6b806d
4bf3cf78a923c43fe88f4ba829e8ee00c34189832c0dc7000ac999e781e31dd0be434baa
32762e2e06da2a89d58362dadefa1689d2ffc4ede240561be0b57ce7ca8c25361dbda09e
b77a8de243299ee2974ab41489aedd8b65313389c8caa3f4a91a45fd0d1ee356a1fa7e6f
12218c041f65dcd26b94b03638e778cc867d5dcfbb81cf76b9aa5ca02303ec7b1ab60170
c129a2be49d94e3114ff509fbc4557ea9dcb548871465e1f0fed2314664796713e6fc083
45d54b73042b26cd78d109b14f98d9da5e1acbca212bc63b2c100210951a04e0f5a456ea
5c149201880d36a370e62f337c6b0385a6a231d16a81f7991b38e3e6fcbfae8e65951fce
e2a6cf581fd3f524b7985be18b48592873589add1dbda38927f4ffe889f0d6aefb82d54f
29f00ef991b2d033f96f18114892baae0725236943b432a13cb60ca6c716b544dc661e3f
dd2565c7ab3a646090789ec4716efbd52e5ca0feae5ad75bfafc8e5c4e7f899d2a13519b
8113a90a79acd5673c3eb0146957d34bd83cf1a7f3fd820aec230c651b70d645583d0014
e7ed67469e3b15ac1f13254f5daa884e8a7615596d07f48b631d5ae049eb16d67c44e4d7
2d2356e6d967987ca5da5e5a3e2c7892a0be207ad6bed7931a43cc503740dd32083e15c4
9a1277180d6005e0194b66b2dba4bca6ba6cdc1123038abb74ec8c3c7f0a8b2c81ff8445
4bb1459dd1a3b3145a986a71cbe2c0b8244e419085aba9b1dc4121bd6e27c9a5c0fee478
d6e8f060ff4aac0cb5a9b35bf67a33c63ba5a320bcb040a4eb8ec69ce71dace9578cdf75
2fe3465af621c048c088b72e0e75f16cc4f76049f9e02d110aefe5f06b73c27b44e97f00
2fb62c55375e18fca47cbc85228c16134a90f29a87d4ec3118a3b6f40420e1dbc3eb7b3d
62cf21c2fca1568b77708573250d58ad8c978c88a139dea56f7f876e73aad7eaf934599f
e06532c9737831873f4c98a33bed5cdc28943f6a72d8af11eab1f0d09e34868a951b7cf0
b19efe52ef5560a9a3584fe7318ebfbc920664d946ab640174c00b9b6b6991c99ebc968a
54834940fe3e0a3db03eebd2eb3210cb11036ca113ae454e0913c70e5fe08353278bcb08
f6219daa3c9473e707d88d6fa4ffd0066efd774428cbadf00664a6c3a90f1c1e00d8cb4d
efb84293f0de889c56de3f5d677a97c16258199bccf78024c3c1865d2ad6a721b2d7ffaa
0c2510db3f3edc6e718eee240d0831ac3b38d5bfd4f6850c423ba854957369d5ebe81eec
46b1fa25a6354760bda214e2e76dbebb10a98be66dea4181f437d461e77651db04f6446a
dbe3ccdb007f9cbd64f96e70c47fa753c16bbf44168ea4f6e4ce8f5bc6c38c0b6ec20d3f
c23481f4db2b8d078e8f71b1f5c8d3ada93f87a90ce6562ca735a246146a0a8038a9c297
b859496ab0eea0edffd9569303fe39bfd05c02b9a5fdbdfe774085637d8b9dea2fe4b40e
75e828dcac25e8cdc9a67c7bcf8c3b7c7db7697b5eb17bf35134c247f3d9c725825f0efa
18cae489c813300ee0fb7bcfead1484906c831d17c2a8440a64c06440145ecdf24099a7d
ce010b11e93970db8e625b1e81f0512d463e17769eaf75103b643ae0eeace3c3ea1d8f9b
57534140e231dbbaf93139384d28e9d1f57021b5a71fbe7ba16a5125eefd9f62c7eab26d
bea62aa4880237fa395a48bc161dd121743848811fae92b0c23fb477f38384077e962584
23090d99cab47510b9e8b606c566da1debbade9a5e60a7012e484b2cf02a532d81a44d37
7c2c1b43e19d9f396918a76f4158f09c560962f1a291e7da44f7d61e00ecf3c2660f284f
c3de6d94e617a2e3bb71f7548250756a248c612bec765e34f47e36fa930b19c838ce71ac
00a5675eea2da5ab3a9ef23194dcd02a1fc9f1c70b8d8fed85bc70f43859ec214c87635b
aedb81b16423a7d0b2cf81cafeba4d8c8cfe1259eac05fe64d70fb4cf6d78569ed179e9b
91c3464951ef6f1ca34f564d7040edd93501bc8286d9af3b74cbd66e7daebcb03372a9dd
bdd8335b16e2e2818e033ac6f0945ad6bf302bfdc8c34e687b857e35a86b8ecdc3402e6e
52bdaa6e8cedca7fb4a3856470a4e3e258f41a8eae2f3b2ccc96a172db78d0f2e88cc90a
018add094479469208f5c216cccf9806caaaa23c90b1b1abdda7965b44c1262acd02b1e5
7e0e7d5fd04993e3f9d1e9e0c24b0813c9fa269afe7e632b14c0230bca167d825235040e
64f64de6181f6a9b9ed16db274d3e25d59b958013ad567950953de2035c014996a3deb94
4ed6607a7fe46e82699a959c06b6a458793d38ca9e1120025ea51ecf8e5ce693680ec113
e8728733864dda34cf8b3522db7b530d7eec0e180c832fc7bd1efee4490890335d3651a7
f8db06bc60182368918280904461cb2ffa85859963bfa7439be85036a2dc4e9d0a071d2b
929ea697b455c01f84a21af3ca9ff9047a93e27cae5945c42c8ac31daac7328d11f35330
2cdb417b57c4ab0baf79530243ac1a1f034f350c59ac5fd88788451df2de5d2607314d81
9fa1c9a1b3b5733089451767ebe5ceec37cbaa5833087171b81521051a2b505b9e9d76b7
5e9691980e296a113dd0cf47a97c2a7c6b6f5ebcd71ecd12da790574e31e8262c44c3263
66bdf49fcdbd9537189489af0747a97712882f1939587427d8b827b4ba919252baac6e24
353cbe1ebaea7f42c87bb6ad26e09762d0eca12472ddda7229c50eb472f63011f1d0faad
9d7f3a34bdb41d7a54e4031bd7e7f00d5864957d614b9b13f7644b575eb769c990d3444e
29da4d40165b1569ce4c98981cd6a50b93ca72f0485edf47acad951bb24928472514cc6d
33b77f51968b67dfb2c1e6f2de9abf166f63beb96deb2ebc2a8a24c154dcf1f2381cc5f9
304c48eef67b9349351749584f365071fde8a6ea6d5a0db1a99f3eaa241cd9de11d4491d
04f9fff967f725b3eeb9695aec1188bfaa13fc3753ded0606882e3b6fb79b614edc1f120
35cdc4e2626acfb33deddfb0fac60af130366a134c8ca35172b2651a269cd000010e8583
17283d9a45d13b8366f6e2db1afa235c00d3a41fc68db86d2d00d9a5cf63cc87a9214ec3
de4d3da4122684522d99adf25873a4ec0f7a3568f736644812779ce9a3742d46b83f7c82
be448c98148538c85946c9703888bb5550c6762e98ef7914b120e7df7cbb6c32857d1842
2062a9c1fad9c41a41780ad5790cd17ce69b7f718a5f5c28e04a207bac444e4766a5cb70
78e9e113e0d504a980faa88c9a0c0dfb0518eaf3b8d3cec674cfd01a06aff2da0832b73a
89e707b3619b5c84bef9c9e198061f60aad21de98e63c9346d299661a49f08b3fd27f109
c3c25544ae8c1e185212be0d5db022625653158eee33f9da0dbd7257ddd477b9fde5e7b5
48b3059a2473167a5df24621adc355450378bdcda1ef6f098a9e04c3436a8bc2f2ea5f81
d796d5b31c6dc6051316e441377707ff1ac7d435ae8c36339a75f746024d1eca2acf6d1a
9ae1f74a4cda40e4375606889322cadc03e641d07d60dfe33f83287a5b419b20534c11b3
bc86addef885d5e9a559c25f14eee41eadb0678ecef2850741952de1ae6231e0255936e9
2b8fbde9493cefc613b1d735d046178afdb1b5d84dde39ba7c96a3cd79d6e39575159066
a10ac63c9e29f5dc4fd9c2976547065829ceaafbaf58ecdda878e3f6bb10cb1cc26f3162
a0f958e6cc4f0f11717f988c2903031130a0e862bd4c9a4f96a507a79a4161382a0a69e2
7e020bf216c0b9c75dcaca2e6477114d5a3b730a20ac5fb3c50eacb890037d5f26e7b9d2
2d7938b6205a7c354613cc38f1b4cb63456a7973dba4c16068e0163b1e8e6ce9a8ffa4ab
418e49da067fbc9173ce9916f692c6fe7ccd6352a16613fc92de08c0b2c5f9f3ab5dabcf
03acaa10c84e2e6d7cdc821fae7099403ed8f9e18aefa97d3734953efc2b7bae667e9090
c2dfd44001ee46bb0df8d32a962cdccb6f82caf624ab00f506b1157f99885fee7914b474
479d220a15e8c57c828d516f90c1ff755a05806009b2739382f71aa3aa008ed9a3975ff3
6673baa19de429e11a549fd1f3370a8710e43dcb7c90ce1b71e02706fde0b50c9f713bf8
abd0870fa500ff9230da6b3690a4cc847aa9ccdb3c39728a6225ff3bed17e2fb3c1cc3e9
5568cd4aab249831a461295ae4cd5ee318eb67a88d21f239bcfca5eef83f7cffdd4b099e
43f03ab271db77c738d4ec339b3293e3897294a342f46c4e892126d44aebab5f785b7340
433f054a3081c0a449a874d2a4de7b81aa31e3bb9deb3cbdb4f4a2a348fe6205f7b25fe3
475a8179a95f78965a160a2df9ebb26bf0d16fcbea51c1257e25705452428970cc27ee09
c82af435007860caaf9c8d1b660017a2dd97e2e7940b60e4d70f99cad62f3effd6865c05
27d0732e4a9d01e60561d2389fc429ace4dc8ff5abe5d64784df5c04596950f7fa99c662
6fa44ce3c6bd62e7c82600408fd452bc311581a40f1389f1a4a82fff80cca6450a9c2711
a4845887af3b99302892be6c92fa4715f324e69a554bb57af9fca708a216565432748f10
7f2188630e0db6ec6e7b31967d93d3eef4f86095090da8036b1dd22812e93d487828e2d4
e6e43a99cec877ff589ade7c1211f903402680b7ea17b438338d5974145952b44dbc67c6
66bbe6a1eb93167dbcbadbb0680548f672fb655e3ff65cde71cc5d7a556e89f229c9d5bf
37b36b441e836928eaa51d4b5036247e1f0cd98a54f6040f3764a6bfe61b7966ac7f1919
2f96763c1efd8c4c9519d210b76c235c92b63221da2320c19753b894423b0a9bc2d43d06
a89f1f27c9e9038676ddd8c59c456e93c4091d10d4dbbec65f565999cfd4aaac066fd871
8c6e21d824c48e523fbb9746b72df00c335f7e9d258df4a0658ba051653a223721061013
e5b228cba5f3143213ea204c9b7e7d6bd0914cb2da128456633d30488ef4fb3d8bd72091
7437111d846e133a8cd35eeca304a71a4cbd41028c174d6a8566dfaf9e35c08b6b5f9ad0
631a296012728a2abf3e73787b0a76a46a440c54d42880334aabbad5112c6830e38183fb
248d98d2c65a3efa856d73b3954d056da4856a435491fe5182045850c15c208c5b96b29d
64a7a0e86a1d9a0689c0aa587fed34ed4c174b2d85f3a30f6ede694e0cd1403b7ddbb585
dfdb10f4183538e1826c51938efa1aea82916d1c6197aa14a70689eeeded7fe3d4a04d7f
40a049acbac43e1c9467dbe194932d7f080082828f4e06de8589b9c208e5f8cd6eb02a48
f636aff02956011ab0efe37071808dd84c3a80a14fdfe64d0facbd9a043cea9eca5f5dd6
38512df85e00e3fb15e46918b51909b9f76f2a864fa5e9f64bce91e1c483d6fa4e5dcc56
86325875a563185dbd01a84b7ef99935e5b8bd5cde471d2f70ed9b406d3a893bf8a9752d
bef24f522cde102c41d0506bca074ba7bb56b1dd49caba0468f07f433c46a0cccaf12501
59f28f3b847ad885d7f54dbedca6df9ad330e2f7fbd43aede02e53e8d8120c38f43b356c
fad4749c6663bfce92fd579d8d1ae7d510b21778a318c02656a518b907877d795ecbfd44
5b222799af2133cc30102e8364f78559f006ef780fa699ed0eaf6acbef866f6e626d8d21
bb9937f6a1127bec785458c35cfe0b59edd0b241e6ee07ff69461307b0504686c014152d
96ffc027e5701ba8ae6a4ce4678060eb938f79ded1fa73dda61d780c0012e77b28d0d644
2281eedf70bce6784891e86b358fa752701c04b6fe4b958163bbf24ccb06666c9a2c4328
5790b7f9a47958ddd42e0140fe4e6a6f13262fccd2c1bc482e3f6502c710b2f49c86a69e
d991074782aa7927364610c08b6466eaf56bcdbcaa68a6c8fc2da68bb3d8a2bcc8f909cd
3e2e0ae4e0f11be5a198e071a8758ee5b79751ab920f15c5c1be78e14cf1943c1ed62fa7
1f3733b07ceca88975420384ff532c3885e1247da4c872717b9701d42653d7dce3d9454d
164287520a648e1d7c314bdc322bf128d63e412caa171c20a18c24123829a1a9b4fbffaf
6a31add6c81e6077c427edeaefaba6f25757f04d2aad4c6f7613537b338039316bd87060
7ba55a5c8512d886602e1c525c7e3f5bf1c64ef0466b82e6d94ef83fac7bbbeb083f0f20
a92de779ebc920c9cc2a627289ed36cd7ceec55cde558fc4abe35fb29db5df3add35687a
fb85d7a877491a2e068912add240fe1b5fc99ae16b724a916a936c3cfb3dfa37ed96cbd6
00ea9992a48e98c1fe0182e4f48c0ecba5989eec809805dca00df4be1a9d7f8f7c7d5b3b
056547844c39ebc8773031ccf991aa6fd8fc06fea4dd6cd6f0c7131cb8622d91f774016b
ee0629bcc815e09de9ff0c0275b43c824846b86d7df63fd6fb353797b18f94c13a986493
73b1d189912bc1f21469d3563f276e5510dc7d1efd424f59b81fe737585fe84472f1806d
73285b8feae707ea3317a74907e28beecde7c8df12ba205647fa8c93463c6ff72600a3c1
cb2d5dc0549ba9b141e7e9ff8b3448492409a6a7e5dcda354683372f352271836947a4f6
904d19e1a98c5e36ae5abd5407797545f8825539807e90fc0a737fbdeda265a60d677338
6fe46648123b709ad99d73b5fb499f79a6dda8914cd6d4484247440f587c171dd9332a12
0d2e1531e6417905ab6633d1adddede7e324e4c5de726f85f61cf77ef66b3aef5ad75221
628df09654e03a75e7a94a8d5911d486133319b8489db440663cf52886401ffc8dee56c0
9703ca548759669f9ac66c3de231e24dafed16df7a1c48be1ce74ac183ca794a3008f955
6dcc2ce7adb347796d276490787703d647c66b1c29691878e737c556fcb6380be75e98ba
9f4122478df76929540c6f27bb8c2a184b468194c7ad6fe451c955f7a28c352d03571bfe
cfb581c84a0e5e9bb229f752119d40414f5c653a616d81712e310706d6965cd768be7d7a
da00b0f97b1f3594a71aa7ba23485a27f6a8b3fdde60f76384ca927f262caaa0b41cd8b5
9659cc32d68167fc5c73580ad4ba3fd4dc70c45b3b45d4a865543c0b3b0bd290dc5472d0
5349cd26811bc4276e5b7718e80e5b149dd9697e746bfbfcfab498531f1bd8dd330ac3ff
a6b54b66148156b46d30d8ff449449f402c4a0c1aa99f6784690152e6768edd6358368e2
27ae56dbb2264348b84e80c86444cf10735a059f1fc9cc974544031b68378ff7c366c5c0
ae097925d20e7c29e5165249d2719daee2106949622bc2d2a23eff6df5a90553ab2fcda1
00fe0d8b469d90731cf4c8eb3b22d6922240f77fe65e4bfb3c4de28ba4d6b8e0349355b1
7548db8b20e3a7e08e1ffda782ee5fc83608c2b869950d324e0ad75fa2e9508fe1aa2e4e
bbba392ee08343649636d38c14e0e64d61adf0df9586d1422fc3e92953539193d5a2479f
1343781b35f8481b367a98dde10520cee022155234b3c14535c7f985ba7e834792df3573
f5c4746306415c190bb7f368141bad0c412d2354b418b847a85b9d6797e104a9b78f8053
2c116c46b0ba78ff986bf1e61de093b5d42bd8776935b69b8b86d04c6dea976b650e0404
28b67aff060e32b721e181bc73764cfa5bf7c03d6556730e0f16726906b4177020aa41c3
222a9f7bf184676bc308809b4ef8b55a86b7da81d3e9eaab9c5441e4e6245b927576e7c6
437b1cb44950a09d1a4eedb0cc9723a540d809250782ec1fd0ca91ebcc3bcfa772097b2e
c47e85af6f5b970ec14dff61c832e29d8d8eb712e5aa0ebf6aaf7851271320e456e0ad42
e6857ff2ca58fc5e42ad4f33ce041b75e3512cf4129174ae1dd9f4aa453cc8b032401abd
cfa86144a34d57e514ba2ffba255658e4bdad32ec944a73c5a0848af53577b3f5680bb74
e64539270f45596c00222940c3f6343f258f8490fb1de11bd0de003f8a9737c4804ae595
cc185a61ba80d618acc5464d164cc1f1b8d32d509207ef72dbfa5e7b2dfd869fe8b5897f
75e59c30317b31005cb80bd9d1e68ee13ea7cd670c9163f34db7e40543e374f61ba09752
a59c90e1fef5fd61e7063b97d874c0f028ef029793c40d44a180240531d49eaca1d8eb18
a6cef9572fd15621d1f2b3f879d53d5bd217d791bb5b77b8edf3ad9e52ebcea7f9e0e675
d2f9077e085c6d0d058a2b839a5562b93c374aae752933586a6902e4547a9f456e09c3b3
063d0899d8fad12cccd3969a9399f1a5587de90114a9fa8bacccb7e917fffdc33a41a893
ad34e87551135b96de7b7e23baa61fbb9c6536e7f0859c99656bf59249802ef1c420b670
aec2d122c3e8b57fa8ca6d5cddfb4b1f7b99d9c0e94da83760418ddfd70ac1a3f2e4c3d6
cfa4a0b0cfba0d7abbe1850331fadb1c90c000d0f4e5e7a633469fed456315b01cf0349a
72abd4e5ae438c28090fc160754d94251dccc3c345637bc867ed529ca367edd523985ecb
eed5ce070049acdec7b89ab5af3d82a686b703a90293e1dcc76afbf816e66a290853da38
136e9b24ff32d70c40553d659d8960b582af2a26b22f1ba58803173cb71cbd09c319a4ce
1b84bc6007746e5f5d67b13a458b82fd2f86312c35528a9273f0170579ac7f7ca03a5a5c
d942ef3f224912837828dd93f35fe4e180d8e30c2090035db4ba94c21dc571b1e5cf2aa9
e5009744c53d0b9ddb8a001d8058fce0339e290e42bb45a3c0c7500e24b79a449803590c
497bca2cb62f247261bebe5fda82efedff9470adb36d3d392f0a4db6ac632d1c7e43e6df
c41c0d0db97a23a61030e04e8144241522e61f0672121934fbbbbce6f6f2a6880f69a0b0
d69abc1f33f20c577cbcc5102df334fd5d08626db91b2eb9653e261c1947628f62dbe41c
7021287075e8a003596b82b3108ef6938de4b8ea3c49f3e223d59f40da6ad46a0d4cb2a9
91d97b7ff5794fdbc26a891cb5298ffb92d68d4a59721cbc531c96132ea58a57483c49d9
6c7967676659daf64c45243744ab5e72e289a5c6656023b7c0635586de770ed32f8fb769
39568f3700eec5e105bc5232a53e3f1af32da4069c22f37669655effe4e9523ff17edca2
6e8da81ec45de05f19be79f36801569d457fcdf4b9219995c119285c980d2f9812ec4e8c
f30f22c7749a088d03a3312de683b387b8a803192fc802852329d986deea2b24fc7464d6
3b3948a5e93d60aaf49b27d7c2454a617a4cd231004c2ff5f5461b41fa06b71e65b36904
f93e27d719945730b0ff72d4078a55463de55dc18dfbc5212802ae7e1f58338325a32c89
f748ac1c2850c861dc16a5f61efd15e7b8452f900b0b62a78de3be53e5a00ce526a6382a
778519c7c90f6eb8011051f4baed71354e1c4a7275bec483b0fbd8c531c5f982e93dda8f
0aa577379dda7287e4c49a6257cd99b454932509d378910bc73046c0cc8962e6b570a0b6
3f188855ff7e778615704e7cbf5da97b8707889c15735fc29cf0ebdd6ab4b60814ee12a3
e27dac82c4b1ceb1a9afa9f80148109324b56dfc41e0d0eeb287ed8e5bf2139a11fff0af
291e381e2aed8ec2746f363c30352edd438150a57691bec7df847a66724ae8d48124fdc3
79087241835f91c93d226cfd042f5c209e1dab2a8c33576761eac503a1a94d09ea6a5d58
c96c2b051a23743389b18e86a4e576b43ec4b9536966cf79ad837ea4f6c6d864b6e15ed7
fa5de26cf8be4955574a5edacb696dc386058d312dd8e16430a07ba2775559819bc3f6e2
382ebfedb288eecf8a2ee64e2bcbda3bdb6566c639c593fc3997439f02adeee44d090a9e
bbde03808ca75353e92583cba8f194f00052d37d7fbc3281408723b4edffaf7a8a8ec5f4
fc76d8cf8d3e1c40daa635cbc63a8481eb2a4e03b858eabf30493f7101c8bb6eae91ab49
f55e3b643c7a21ecc26920dd8029c253b3c6373c344ea61f9565510ce6c917c28bacf6df
83e8b5df302e0ce3d4c0cbe72cb1ec395b584c0cf4e722d70b8b15b4dbe8c30cbc9f425d
698d8040cd7f7aef2c986bce7292512a61bc18ff0dec95d5468de804e9a8d201cd37b5d5
b2dde241455b08c63670d1b04f48b13fb7973241bf31388563feea153678db4ffc517963
9f544a1d4c84f6ff821bfd8933bce6b4c1e2345c3f747f2f1a92512ff9d245f0d5a714af
9c359639ad7c99352f4883d3b2fd21ef716442f9130628671d57b8308a4722c1bb6cccd9
017c24bbf058e7e698516aa3b2237cc306ab23ffd8c74a27811d241cec5e7748e890b4ec
efdf65ab08f49f927ba0cad286c0a0b5f8da543d95eb26d03881c117e63ef0027644be6e
85e117b6cfa11b9081cd55d6d26883d277a070012f835d623a4bf174b8f548b7fb42d7f2
c53329eb6cbd3f14a0f5d0394d2a34b73d1d0582ce52bb95fa2293e704eb396f799273ff
e87e3e9c39fc463e14d0a2ff19d038a58fe32931747d4039de0d09c906ee395dce0af43d
976c6d87726815a2b4623458d758b143d2fda0fb6b53401956fc81d5c3379ce2fcf8c557
c1c8a8dfdd1fdab1cb0acdaaccad8a5d487b80620365cbcf74c2ea669fb2ca562d1b971e
4c3aa2b54ce4c941ad429a013b5afcc71d2c0a5a4181042c446b16d5dba18675c1848067
88e36393f67c1da973f9007a119d02b4fb2c5bccd2ac4a22503f76ca71911eac7be3ab3f
bffdcdd19b39ce4f8ac21b15ad6f2f023fa6d7e805ac66acf07fc2d497c3b95a0761860a
6ba00066bc19385b4a7b3930b9f7c19ba0b944e6640b8bc3102ade404ce0ec2316933d25
6fb77858b9278141e4eb28943cb581c894fd575c8bda429027ce10cd2f0e6bf2bf336259
cd95d5113c3c24f308564b69a58c2e6ffeaac6d9beef2f6da7623dfd34f95bf53f34be1f
e6f56160b3056a3934e9606ee0321bc2938ace46507dfe4f49bb4440d629aee44d0cd0fe
bb1c789101a24995067855b625ddea35763d397edaeb7c850b4854b4ceb681a5a4e0de89
00559e2fd2eb90c6903042c305360cdce40126271a9c7f206451ff819be42c79edca114c
b4df735db30810f79c4e7183fb4acd6877155f920ce13b3aff51d139a447071d96fb10b2
e04f1270a1e5e6467afbc4e68faf0a92527e757214681c537e9ae6ff8a40100f4bfec6be
839d6b5e08a43d9f764c8b6ac5762dfacdff01931a56197b74866223d876875696839750
e5a2a6f357e49c5613d9eb88146ca6f36e5d52f0c7c32c1ba9702da1276412e404ffa55d
91b104863bfeb270165d721b16148873357f66600dc1d8152ed1b6dfdfb8db08317f66c0
b4a3682812b2fbdf69b4a61d45fc6e45d9f339c7043b220831a7f250615474ad1243d843
980bdd4078685553b8a250e7623a5c75797d5cdd72faa61ff35acc530477412161c1eab3
c62cf9f9432e9508eab307eea54121cef1a28f9115dacb448f486399ff5505a959c37ba5
37db2339b48da217b9951c20e0dc5b2908191de270f4d75f61b55c4a590392383546fb78
4be8b53cf171d78973420a132cda53aa99b75627281b2c528808724200ae2e33132fbc06
b13f23a224c670261fded28acce5681a7b13e09a49567347bf0a3e94b3ec3fc6d75556dd
2a6c9479f07546b6351285f1013f02af537deede1a073f9d99d0b362ee65c14e23a8517a
a8f68cdcba48f6f0fec52e60eb814f303918e7fdc7cd44f07638bf7fb5dc10b898cf1551
b86564a07ac544d4d2aa5e6b7a2f02a22c828175e564ae42b1790bbbb223a77db1ab7db9
d88c329315ed89762af17b25939d02f9b36d0e29d3603647e6ecf2c4dc4c6f67feef1f53
a6a823e6b28c8480a985e222980965f8857f60217185b564437c53f4d1fc1a3b6ec4a5ab
167325c796c1e4f3febb7df43181534a2783861ec61a1652cc96c28ebdec51f782660188
31f869a826755d550dfe14dfcaadda536df047d6ef337ea7ad0863ad7b68eac19c2d1b99
0a758b3e35f4e335f59599e400aa418a1e814b9fca6bca2fbfa583742583d6b1f7985e17
dba5ebbd9cb9a1fcf6b017ab0e062f24af0517c8b6ca71af91a16b0160d98766bfbc9012
e6510f06a3c2b90dcae3890ca5122abd8cdabdb0b63ee5b0741cff403bb98c9e28b5c577
df3b8e817a29234fb75becf0691c1b36c465c3c0a92dbf556b500dafc01570a60b986c55
4f281195b4acfe83247030660d8b090433c5a67481866af3a24c7b10d6a11477bfcabd7a
545f822e8e1c9033676ffab7a104429e090fe86f6505a14fc0453d4889eed389c45948a1
026518459d330405a38ba3ae82de1b40d560abd95d4fde09c55e80df5a958bd75455de2c
d79c53fd62f622955163cded8423e7745196465c056443381c7d5dafd454b213d4473dc3
38c78f7afa4172e503749bae0bd0d86962a8b9de0a112e0565e030278e344922688f318f
00655c952a002e2d1597eb0c656cfbb1116c849abbfb4ece8db66e3597c67fe035df44f0
cef2c3ac437122c7629b38cc72e4f7ff57ae995ea763fa2bb2335b4ddb6f98b004864bc6
b38fa49467948c7a15e6031531c449343d525d751d81f954d40fb5e858700030dd862c52
ab304788f64638addf42f9fe0a5607b734f7a77d786546c94abcdde86c304b3284a15ea8
48125254c50dbaa849ae881038571b8eecec7ab0489d122f7c7f4a3f7f3d78c398fccad3
2d33f519d2ed01043d9398ae775a9ac89c57380ad7b2742771ae6daab6dc4beb4bf94778
90258cc95dd149e47c1fe3d16f01e1dfe963aadb29b647fb55feb58233628afd39dd61e1
29c2a498ea5430c017ee89ae3f183244520f9515cc4ad2f40f892deff618e3e7eb710e69
11977d0dbc14fefdf6f67c5b10ea30d60f833f0e939f39153bc3831a92c98e1b22ed7f45
71bae5540ea36fb5e7ee24ff80ff99e4e1e35b03053100cdff0bc372563826dbc304e946
5c565ca39c7b7979a636cbdec2e28db67f085fb9ede8b64c818a57e0a9c3695cfb8cbd15
b01994c72c8019c14f57ecf3f143d0380d4a08defcb04bbc8989c9cd9f582d526b4cc586
a768a4272590e63c824891ec7a9901ee540d9f1076f6036bc7e2c805999bb578645d3c7b
fdebe267e3964b00664292eacb45d399ed2b252e5963f734f18b5c3201af4793bfb39139
0392629b44a05d688508d31737b664d5423d2f3843e10ecbd3ef06320602e8b6163d4c3e
91912786a215d8bbf03f2a52d6e9a4b4a0f9b5349c54277813f0a64ecf809dfb787b0cbf
978e6ba97815765874b8bfdec2750f5eed01d2c5445f046daee1293451863fbaeeb25dfb
abf06ad46955861223d328307ded65036a5603691aef4531e7e32e5c3ce1f3386395fa7e
da5f8935805d3ff745550875917bc083b624a48f46a82af92e522b39b216850a11fd58e1
a8b42e2f67a8178c7d6ae6a2d876ada1706aeed2969b1e1540b63292ca6debef38f276cf
10563e8fc047380a5cb8c21c3d7880336a87038851da8eae7dd8c0b67da33c6fbcd33377
deec7953384c5ba4f4e436381c72eda13bd04be8a2231f2e9d88245ac8f293ea9e678c38
98edb98d6f7b38351084c650ae9d38454cd12ccf4185bc21be1fd6cd2a2cb3408620804c
e6c7a8cc35ef3408848d3b776d9c948c9787e9fc39e27d946f039e8c2de1b682e7d0f241
36778a49e922685c3d4eb5a58130006b167e12cafc72015e676e49e0748a075eeeab8896
bd97b4a2868c9697ee977279430bc42c9d34f8ad606b5f9ab175f828b0bd88853144d2ca
0f192cd8333a152fc8eda5ad362cf3138eb0d50aa39d81f1a4fef3f3151820c09b22a1d7
da6b9eb7a9b0ed82e6f6e94c28e6fb63144838692b82d9db10ee3248e482b1cacfc2dfa1
527d5efd9ee7ce6c958e7f42fd128f6d704b972f0c6007dfbfd21e106eb3a5f1edd5592a
6e28c1947666ef0ef1314836982bc692cead762926d10253d65999ac3a7d9ebf471e39c7
b2d736bf55e75751e22963a073f8c128977c80a04298097262fa9c3f0c186a84c4bdf489
b68b776d80a9fc6c4bb2492f10a72dda6d86ea7704f2ff3a8b68e85d972db12d4796517f
fd1fd2ff8f1a9aff3898b54999ceb9d7417d3293bbc80eb57f51a27670f27f8c9bb4d3a2
5f8f6598246e437751f5710fb246c166cf78d8897d142e239256daab7955c6a0dc268af6
70819aff45359b869afd538854230c014af004de702d8dd7fc6e9e44b3efb6cba5a43b88
5bd85f3fd99097127e6332f1a421cb063d7547bb9b9afef752388864106b599a6ec1a3e1
1fe22706ea91899266e3461050deff0aeb43db2a2743065b8b80f32d0fd412211af21542
edd26f32b821f0508f10797a5858b66727394bd0492d0bcd5f5d7507d716dd4fbfe95c78
217a9baaa1b1ebd65a630b3c10a24d2ad26aeb36b352e4aabb72ff067ca16cc834e4f50c
49eb4c53b6db35cddd0e6ac46a596f9a16243b4fa11c7870269f82d2fbceebeb0e491fc3
a089fa38890fc6d3c1333ee35cc91150edcfcfbf98d6976d4baf7fc0ea514bf8303a2ee7
2e8d77507bf346bcca7b1d922990a89b8e0c6607935f365bc7142a64855532fd36295124
a3411aea77872c526e8ee81532cab5801fd48ffa6b596ba77a477a368dab726f99472925
3a987b19829062142609dc2c7a145c686cc4a8e6e3e9872b79629b7b0aa5cd1ec5a5aab5
efcdf43f9044aefedd6ca483461a5743af06b3ce7539d262a33969bdb235343038f050a0
ba3c04e3fbf1566ba1da4289ad9e65dea740a291921c1096c1c6fba5329320c8f583a7a3
3f4ad107cb7dd66480a021a26002f3731abd102cc823f50830c575656161d51327c39080
d78374f34474173819ba8fbc7a69c974cb25ca63df2f9140cf3eecad122be79a81a3d12d
1389f366c13e54699fc2da79af8584a3e7500bdc64efaa55a1f8e67caaa0dc5034e9274e
0daa615432eaf7f36c37558ba1d6006772b2bd17520d32ea895148f11945801f1457e343
28b65bdd1f92c400f6543a09b50d786938f9c344bbaaf145ff42695011dfaac0efe7e230
0675aa93d780be854c409221ca66323f913eeae8d175507f0c24625f364ec4abe213789f
47548447af4e9f46fdf37192a0b6b6781b143916817187727746dd4be773be8d38ff1cd7
5575d92cbe8eb3dc2bcfcae0906df8790d4b9cce4049bf9932164db48082b4ae52beff64
a299f38dcca09082693c710a641cbc1ae342c2431cb592b9af9b185c1b6f95773a298984
8850f41cd44156071f68ced3500b55af364d2f3566de20348926316fdf9c96e6300d9e64
6734f39433af76e8e3b5647d4bc718ef6a519dac033725aa788ec1b340d60c4149818376
dfec40cce461a31fb86042f0a024de93971d09b0190710225468717c6c9f32d83e6e8808
07e3438a3ca45bbd248ec16ec473aaed5aa1c7c4f8509a37bed35d5a47136b3a3d4a573f
244db24ac361de159e5db0994f05f4516ec4dc2ee7341ac3d9d3ccca70b832052f5adf89
112bccbf3e1ccbd010f0fae2b0475987bab9a5b06f3a8dccc2861311b35ec500570e6bbb
e7cec4089eb942c950a3731bbd29443869d38561beecccca7a69ba621d267cec99190249
6dd742ed226d8aa1bee75206fbddf9db947341fc8887288b75eb0e34ecefbb701799f5bc
ba899a6d16d375ac8ea3eeadad1f365e9de337478388386bf14e10715cb60aef992959eb
3dd552b73df8f5c8b090486157a3be0819e7e9e8dea284af8375213964fed4f77ac13596
5ec10afb9df66e566808d61ed0ca2062719eed99f3463782e53881049930abc3cbb24e6a
b3059878c8fafc6224765266d252f767973addc0a06dffa207798f51698f3a6df625ab3c
a0999309937ce22cf759d99fedcc9f39258c2c2a61155747808bb0e08b544ba301ec5b9f
095e2df68e603bea6be0b1aaade4a2d9b91f429720d435aa7e87e9432bc7dd20c33f25aa
cf7ecfd85950ab7bd735f661fe10b241e66ee2fcb183db135eb4c3ed65d53e60cda725be
8caca0b673637741aee2e0e864e8e65b160e87ff062428a13e248f901a0b61263a6785fb
9d0c654f6f97124dbdcfd53e2d56b5f03abc5ea4afa473f98faf917350b5696986f9221c
0527b85952398322c7f5d4270cefd17e52f5b39159826b6217caf2d2959601335d222b6c
b58bc257194c80a65131399786751870d90353ea4a649204d7c3496f9c9761f6af00b47c
2d55dc854ea9b50c89eebb556eeda6f0cd383db3901ce95554bac4411a1839dd4428ed8e
56619008f0af4d3b6d4f0829935917260b3d34a5a49e7fb4d0f67910f3f554abc7f4ce0d
277bab682f60ab51fa9c942e862bea9d04b2c0d28180e9ee89c616ce327f77da40860daa
e7ba594ca30d1ede4c887cfc19ac3a15cca3be47e823b67fe1a6d2fbe388c27a1c4df23c
a60c560cff13f4b28e8af4aa3e82058d237f0a4ea2ac7d0873ae47b9ac04d1241d707835
cb26f6e3c622743db45468abc7d938bef5266c1a1f3e0b90d4aa549d9e424eb0b4cb8220
fd6ec90a30bcbff9c7527c36e7c5c27765b8f8fb2716a1e5e2304af491dabfa94bc6e678
75b513254664c8f383bbc6d1752f1b0afb6fe7f54cac805c0d27a1f940133732738cb28b
5369deee6f84d3329423860682d1adf0678e49366c4b0341b0edddbe827261e647428461
553a9bc1a39cb819f0831f9708bc09cd63f6c6271b12cfa1a835a3ad593445b1b3fd1ceb
19fd3460c7e6bad05caf42e13211153ff4fa480ee4834f0f6760f6c078bf6d36f0551776
7bb3913f3e3fc1ed5cf6051233f2405638e99a9f49c1e90849f94ddbf70629285e885837
04d7ad30da8cd180af88378bc653d1cba1cf41b89e2fc3fe44d078494ceabfec2b0176d0
8ad2bf125c41ec43849fe502b01d4b0e2845aeb29943ef271236f74f81f12802f3849805
920c3e5559ede7aee8c8d348957467b7bf6f05a2098568e780daa9d45127110ac5708475
569485e461ea6cc6eafaf20a59872368955966bd922deaecc8dd86fbaafde7a7eee2ef01
9352a7cdde88ffdb7f0200dadb3287b68d4ae5dd6c85fef16761b1e8d6af7da08d05d3c3
c1520a706145a8c6dfe976bfaed0e11ec52bdd2e26c1557d62d4f0355ffee78a2c20a397
6a8a0796c09a14ebfc6be8dd93df3cff9893081043848b773a684ed94c04ee52bc9a567e
973c75a318cfefec1ce67d69e1f823a602028595c272d82cbc305ca795a6a673302e68dd
b9f0cbd90b9a5f0595b5ef62d8eb4244ba8fc20f6cd7f0b7388fc78a13d2fa816e72b2e4
f8d9ab1d44305724d9d5f992a90919e61df7e9fffdc8330e48f55bdef7a922e6147a4c01
d510d7be4196ddfb44fd5eaedaaec191376b963bd00e52641d8ceb6d3cbafa9f2f2e92a0
9cdd57135cdcedbf097d1a7fb80ffc9bce740dc05f598c6b2cecfbb90b72476418bcdc7a
091516aee6688f8760b8aa315de6ecca5cf492b61f3584bc202dba732663bc3073ad1a53
3b93a170abd15b211634cf4a06d203b4dcf784e2bc2ca8553433a477c08c54cdc6acaeaf
dd55c6dcd4771d4afacb3212ecab3c96e2a323fbc7e1a8210897dff9cfb9315dbd411d06
55e399b38be2b21800ed6cb5f28e3aec82e472dbe892768a5b96a23517d0053ae6ee1db6
75ca2ae4a3da7cff85bd593f3b1224857738d5e184ab634316bbc3e3b16e694f4cc4561c
9475a8a82e8bfa3888d6618118fefbdf80a6dc91e8ee620d624156d2b1317532736d3168
abe0aa1bead2867de7a270e89ac2a0f8b1dcee6dcd91bfef666dc75339aa9e7ff5e54ff1
22f53930e427b2412163696cae09b0441707b3523c2b73a550dc87237b9df5626d88483a
68664e491657f84a43fda6a0b777bc22831ff7a64353f914e66e18788ae4b152991b12d7
69782f63c13d9a98122eb6a77375145a7048e3eae6db364e9014b1d3fa5fcd882c77846a
0e4294c302ff46f7d969a933fc5abc6be6a39e66d511c658649abecf2af7515a5df79a67
9b75a2a646b2f03598b5d7c3bfeced96cccc7b68beea9e3cf47008e8f08d69d509d32e99
f50afea5293db82936af451d174916f244c0034790bcbab373e25246e583c0c7d0a5f736
e1a2af64750420920fa8aa5e842f58ea8cee7749625591d784fa5b9a6a6284eb666a5110
c5783b1b0370759882d921c4fe8c5b467f6d05c85b1863b1557ef254b88ce8b2b7c2a301
7f17c7c9789599f8def3e56830896a491620ec8bbecc22febaf71773ad935837e5012456
17a111a6fb06b460c7e5c98c2ece3bab9c73a5dcbb21348292c52430b3ef323fdd22cff2
f9dd6901ba51af5efefcd7a948bcb13d73ca3676917e17fba4ae11ac98e4ffad1f9e21e8
96ff11145d7a2349c87386946afbf921bc8011b56b0bf2352013353bbc8e021840b71667
ea3b7c53c491efee151b249272831a57fe91c869dea5daed04a3fd3b9e254ef961254ac8
57968fe7f05e0fa5f278d58494b2669e845d04bfbc4fdebaada35453b3d84fb8e565983a
08904e88735082193d60b87ce391a437f3c029ef13e636f17165891c5381d462dfec744e
630a066e374dce507dc6f08b13b2199bffd853e2717b1830f55e73cdd4655a09d2918d28
5d98fa1a892fca03e6517c46f1ee8f7a98b62708bd481d915bb25acb55f5116666b4764f
aee2fd0a7f4844c711962704088690e9b102bf8dd416177a71f202020eee5b2c439f4cff
0302f23207713366c819f357aa88e28bba6540a0529c4ed206c4fda7de47bf69019d779d
db9a01e6f73a61a00db44cf22a8797a43140ce457a5845c32ffbdf28d4e9bb789683ee6f
8bc665f31291577fa9ef1c3457a209f86835e835651598d031df0800a335abbc1f96f1db
2a5ee76d4d2ca21b63666c594509ad9d68b92e0a119fb4da4b98b008519979dca0723937
e0fc2b5b549501851ab0db9e4817bad51a4344497a5ce2524705d5e38c26d94605e37193
dc20964e976d85dce159cb6b3b2d5378c2f687ef95eae5556f7e2258658dbf0625350662
618f7aec021cd83c64f74bf03712aa1efda4483d1f6a56541189236f06760faa55b47ec1
3f26040b00c55abb0e30367a5ff877c3afcfa3a0a2fe7bedaca5637e9424bb06e079b071
2b6a2d1b7cd8fdf4ebc4f16b49431895751c06511641e8e814e812945cb163414555369a
b02fe8a9524a06087d68beaceab5448a73e35b0f21b7db0c562159b180704e6875918c2d
db04c0de8d862ee5393eba657af46536961a3a8034e5eb563858dee768ee94233739bffd
e6d7760a22652d40e162e75544c265a29b98114bb90665a8942c0737c0e140671d84e71f
f0810e11b652ca3833342cf3cf6f0543ec3683552c8cbec56b8eeda9475de392fd2a1288
249aad4f94b82fd533cecb58b541628b20c4710c565fb6bf55e18fb1e0ac6849b49ad435
ae4ed93d078b5a3bfbd8bfa617b09af9f84737e89fefa317fbb18d412bcae922c0c2729f
c912cadae3343d63f66dedf11f1c04f10a60dbe141efe5cb1723373249f57544eda820ae
f11cd7ee1203fd40f79c0fb0cef41dabaa3115f78ec56a1e80f1095fb840a27263b850d1
de0111513d87d14a4446e5b3f64e88af12871eec2d5d4c1b3f3798504998bf97d3f72472
ba0c293983ec003c05830f43c1a21a37652193a953058bb86d9da296e9127ba9ccf0030a
e0e481f83d6a405ef6d6d50373a84c1bd709181031ec3183c358ef2e7673dbfc85fa180b
94a209d51ebd9aa0e7c9e27fbf634f92f764d7a1b2a9d0db2f8282f37ee7def05cf1f90c
6241c7acaf301f21d5ed376d907a240bb4e80d0bc9ed89153fe0184410ec795a61b7abad
8e2d2ef59df2249f791bb60e15bc0b2d88dc13196b5543283aca4185a1e439001d663524
0b0d0f6feed34133be00a5bcfcc03ea4636a0da31db03621f584b8c2b0070aa4a316decb
bdc2f68f18e5f5bd07cf9155607dd64d2c9aee2f0f4c6dd1638a019a5d3de92d28f5ba8f
bb95f78afd2b9846de12b13c3dcb7885d693ce66ac14f43770ba87808e54a71cce052d29
731eb3a25202bd04b19114c4badfb346840d721932f143b1a57a5f4f03bdd7422d51c6af
801c7dc3dfe8b1729ad46b0d07d88b65f469156094e148eed5e6df08960e9a933aa0af46
6f94126e1fc430850d33109aff5341b998ba0fb83b9c03a501f0ba18ca62d15e122ccadb
9dcd356d42880ff1192d9a5cd67c2c4c17f4d6cb064ec2b70b5f8bc7627b42c13eafe374
ab8566e716c0ebb6017053bd1c4d5f46b426a2019b53114831c9cc0e933cdfaef5adaf2b
ce217454905c07ecae1b716749b5bd3167c7fa68193d0c247f5ae6b35a2440e779cee552
42f69f0ee8d48141a5f3f4636ff83e89deea07afa688d7190a8a4028674f0c9ba5fc28f0
313bad0d32394c2ef81969ac775b91f104abba67a2db19dca8a5135080fa0c58c6d8a7ff
43dd6a140a66fd3103a807a2ec4c31114f6b8728a55932129e314f613bfda4b8951f91b7
4a097202466610392e3687361d58fba43bb76c8e4156931e87e811a71f4e22132df9c41c
a3b9ffbf9a8d87bbb99f3e68908a1fbeb24fd4c861e4896fb1c1b501e4d7637cdaede39c
42475f829388edcfbb573982f9c29015fce8312e9443924f54215aa4c1bff66ab737ab65
e34d78b90f6cfbd53870b38e70e39990b805a1314ec8c351e76a049416f9366a5eeaecdd
bf78d3a06cc9031fc1ef7cc6a973ad6bbc35d3f2d597215284e06853fa913fe0599e8a10
f5979c8f1b929fcbaf4c988e2fabf03c1aec013637e98fa87134f94b4720faf83bf846c9
457eb64b19473f7a3d7f51a556b08205ffcd9da8b0dd043e70e943d40e3aee39e648067a
3ed425a26418b44646fe749e6cb25d9e95cb6d9d65467031c7d8317527c599b940c2f72d
784d7954fbc34621780138ec5ef76bc60e3ad3913d3f8ad2ad77640ed8a8b63fb998de7c
cea86989ce172d11a1cbdcaeaca71691ae55668ca58000aa8d793b06a194295664d66bfe
2c325df922dc0ba98bc594e176ede7016461469dd53e8bff7e3519c10bbd32a1727b8ab8
0e2cc2bbf862f80528a4384f3fea39d9ac051fba4099097f9207acf880ea17b421fc7443
8e141c80d8ac391a57c0342d8447f749539861127a6f241b85fd0dc7b82ae9e3faf61282
7f197171936f98cefbeb63c0a602d92ce5a51fb8b0f3afbb6710c6b5d5a629e1e2c3834c
392c531777e4d4ddf96b2e973ecf5f6544ba7a76e64ce646301c0c1ef9fbea41faeb095b
fad027a78d7a6c2a6deb395bf1e6c843d5b16d92715e375a3efba7654e8b277e07b65613
cf92bf781fa3ce00e2dba9f8b175979aab3c425d14f6b8188944934d2dfa5fb3f81b61ff
7fb9fc1b618c0a4f4782d33954199c1f8127c0271f3a4794815a34b0aadcd70a9917f0e6
e1170c875f71641b5a138dbf3056619899eee7529c9ad24966f974bd2348164e484ccebe
250024e25072fe55e34c536f620f8a4184348b6aef38eaf7676a04a2c7d06656061767bd
f7f1724a25503c627494fdb09fde16a5b55d13c4f2711fb8cf95b09626e38b8a6d1218b7
53364c3ab4ba9ccd33b2a7f132d63f8a1149b54d0c7080eb6ba6827717207921dc7ee284
d691c62a2f647bc4d04b9928cee964a22352cf150aef6b9d668f0c4ce683cd1eecc87c52
464e4867cb4faef70bfd25c81c34e6f559d65c9b76550f570727b5eb51752ec67e5f516e
ce021c50bc8c712b809df0e8a88c49b67e9d98ff4528b9f961256490eaf8de24307a58d8
b70dc6d7da2c153456a2078417cf2e430d755446bda2a891e49e33a962996f51b2443ccd
c2a85ee166d0498b1fdfcbfffef9128626fae0178090a2bd88f892c47f9c9ab784a1502c
4b39c6ec2a034257a66ac1e0268ceb38eaf754a74446fc0c22ec331ca06f87181f8dcba6
656c90996000ddb159e0e8c567c814f86c2cdf45e411aa9c2fa64fff3cacad9baaf6ad64
7400e72a4031d2f3de5ca24a33c798ad3455bfda307de32cb9f2a09424cd894374546684
56e42998787e773d206e1ccb574af4f5d086a398263b0347e4694cdc18573e589c32d59f
ab94f5160f9501055d08ca7b79011862dbb3e8188afe23c410b9cfe899b45e5fe2d982c9
29d9a62d0f6feb885804a2d159f3a9b94d237ada6217dc6ad7c1d403773a261df628d85e
fbe8520f0c0884ef47f31b28da16af7cc61c003160b472dcba5993bf8cfdb4a1c4fdacbe
c6bcd90a98c324de62bcf4e7ffca2b629075be9ccb719e1d707f6771ad216d3aa3657304
1f772a6d70a59d8e67e37f17ab4e81e0ed8301e5a9a4ba8822b3403dbcb83f150ef0242c
04438b200cca971c91e727d7618d3769afa2377f729362d516fa26cec58e6c4aa43187dc
948f27e05834e0b2a7c5e7d9a83f3a50883bbce48e8616cc2ddf16a19acdae4c3fc7b2da
8ce287b41819ecf5dcd2c43db527f17f3076541e21f0cca113c886e72712430a34bcc405
ae109e57f217f1f27f78eb939ac3bd1e48cefc690c5cad2744be47753863ca0501b3b962
48b587bd5997f069015815aa55d2479cd3b66782de2fb1e906be8bbafe77166e81bf8755
77765f269678aadb50a4958030e98d4ea2d520c286d474ddb494ec308c74116f50773043
ce7868eebd7e0337a73fcb4f87c37c9887de6b2eb5cea0a6de6dce1406e00cbe23f712cf
bd24c8007d93fd3142a51b239b95cffcec510ae97e4c3d18b33c370fb1343372d65a77f5
5ac7a3399a614c963d0060f6434467a603fd18b1562bf31d4937660d0cef0ee8543261c6
7c135b7764c16ab1c5ecd467f37cedc70aea290ac65893e60a92f7edd221fd15437f3519
f76df678babaaf472b8a920f2522f1f041974671363bce91040e574e1f0f16ae32a4af03
1b7e8ac3a4819dbecdb967fd25ecb530de0bf9a2563453507028a9d2365076dbcd9fde51
4cd1f948c8410594f0e1628133a33a072a92732358441c2fc1f02c60c955bcbc9b396b10
0b4dccbdc1555cf7efe796e2d46b3ebba85c4ff8fb4c0665a678b9c6462b8b304b0a3003
a688dfda98c462fbaf2bef504bd4f1286db7022a11927105cc763df4faa2d06c812bc2c4
092b01d00d1ddcb037a0c0d145c92a09374c9ea69b36a5b3a1e2396e7a895cf3fa0958e1
fa6890fca32aa77c83bc47091a438c6e652001f4fa71d7815a54fd396e5f814da71c2b8c
39aff0985f5f931661fa6b09e79c734c3fe92b8e84d42bdae1ae4bb940c4c46c1b8da690
a7b45a4a98d89b22312b38b8f834bb070dbab0f41f36f34da96ebe5490f630755398762b
e10eb53b1c71d20a78cd1c5d6288f565526a1cc084c19ed36ba47910e38f8b9e98aae232
8888e3dc796e6c7f2905901042a40eebfb77bd674c386491f88828c6a2bd4a3643a55a8e
b7d7a5e79c5095b7066f265eea78868439fcbd0287653e6d3a1f6ade983c6254b74599d0
a1756e79ad0a155eb0d59818d2a6e32ff561870956aa14ac4b8b03d036a3c0251e47764b
9e6f5671e4c00268102c24887b24bf3e67576f09253d52ab61a46ea08d035f7a50a2ef20
c21f894a3739f4b13eb0ecd7d6b6e16cbcb04f496d1601c75cb8b37eaadfaa0ee918b599
10b00136b012882a8f3f3859b13404d12e2cd47e2358f78379a3b089c8c585a6b8fad52b
93cc1fe049650a14e780848b36b2b8ada72ed1e1a04c09dcbbb54f5f090f792eb66673ec
c3bba5ce16cf3ed579282087e3abf29e2dd2ef330eb5f2d04eaf99a34625f0c44ed457b0
4babe1f7bdc15f34eefcf57a4bf2b6638e96c2b19e8b0fb0184c7ccfdf48677eb6a0c2d7
ac7b548636d912df5d91649a4b850e4a659c34a71c996b7247684afd21a97a98c9a79313
e9f13f47d0936b96be04a34e8495e099dd42ddd77d5548486b73fb6cc308cf82773b5009
7aa5f4d944dbca95f9b01c1fa2bcbd3391737da0162335e66ad479ff5b2c1a324a9a39e0
fe204faed36ded01d7722d407fb85f17f6e292907e08baccdfee326c94a5ce23bbffaf16
168d3a0c55308d42b94d9c8a647455f9d5f7d542ab62270fd62225a53bbfcc6fd18af97b
29486473b312250be3f23682ca8e2e79d5b44ce3593ddc253875acb681d294dbd9212df6
a7f1af237d1f34b03c2394241cdcc2597143dd2038607647e28ca8f007b318f3785fe8ba
0642d8163ba5b078bed1c08542a2e79b373af3011943f17bab2dbe6363d5fbe7d0c51049
a33eb1c417212ff5781c7de31c963731bacefffe6601c4c8781d3cb2918b5e10e64d6ce2
89bd23b35686dd9fcbbaf093a72004072fc0356033c1bc5c83d6170ab213e51b96031249
8939de98b0d72ace7be08a187b3beb2c12c7d178ac9831edb90770d34e74a2e960a7fc45
ba9e64529c32fd4c2039d84e07ad8c6241fd4c663e036732e7f08a408f0c22e4f5e34242
3207c55a52030b3d3c3adde51844e9fda93121609a383490c8e4806e2c63e8663c245d90
94267c52b5aab7716d07a64edbeee0ed508eb5cbde9925262898bbacb065a8ce260c38af
893d419f1f9d245188a84dd9fd776a1945cedcb78467f886472541abb57d50cd487915ef
c51a43011b359246e4e90caac2f59420311271323f72e8cdda3c55e3616ab84ec1399b36
d7d17ac5bd534c4ba337c62a999da582f83c1a3ae35a3f52c13844c420c9d46f15ba79d3
4f890d80ca17163695128d4c3acd9f9c213db0e84284bb6c13b15af3327d3788851a6bf5
93a1434b6a9f54c0cdac51f22f90bdbaf324c9c3ec3c8e330b8471961d04bdcf4cc6daa1
48371ce83ef9399c74e10b394be35277e56cf94d8f4f6525cbf0214c22166ba15b9cf4e9
d2bb8d81183cb524489cca975731bb48bd08e3b106b77d9602a2f30ff20bb152d44606c9
a15d6193d358b9861fac2f1714b510f4765a82ef9dd5ec17d0b300eaf82326562f597db1
59042b99e43a5d5ae57e5d168d3c0ca5e34e9a8dc69a54cae31adbdf4c21dae1995a0045
f0b6aef4478bd3961a9b0f6a0603ba1a7558dc81042eedb7e7e492fa0492fd99061fa7f5
0170e27998bfadc79d20266f41ad6469d5dbb393386a77ecbd098b3d3b54cb197c72c00e
5bc584c2fd7f867047d0c6647bbbd39a6e365a9a9362915a260e2bd1470ddbce746fd1e3
c929f762cc52d2a88d8c3cd653fe5ecdf4a57fe5d077d5b789c512a2356adf5a7b07258a
cbe0e6098a6c3b129cacd6def3a7735712629b3d0a0cc0f4db04184b05839faee4d7924c
68684e973956b8c3e06957ef96dc8bcdb79f24650f46c1f960567db319ade7a182d237f3
3bcccfbad25d081392c1cf357807e971dcb944225dfad928c98bb5e0aa8f9f1070074ef0
2029f881b30b8e18e9d8007fbf1cd5a08b2a4ac6032889a68c93c61c4ec801ae47e8c51d
b7d1a32123ab6a7adbe69f62456634de60d1d2f2e5d8291ad6a1352beda2dbf374b671dc
de1fcb10dc978b1d60b83d11945f9ad3d82e8c673cf7578f08ccf674026da1561618d945
23e5458fcbc6f16950d36d959ae8c75a91077aaf3d5ace8e41591600612c8c3216ea682f
9b848c748cbe27b2eee22ecbab62edab6069167c9d6ed95fbad6b51e4ed21bad0200f69b
0fb302dd0186723ba9b404ecbd3a9b610451a648e84ea69c7892c5e90085cb82b5d26a2e
48a118ef723c909115df5f641d6453796d5cdbb726c76327e22c6c74fc07062e2462279f
4abd1cbfffcac62ff00591c32eb09e0dddebdc8823aa05b197f69ab4c0edaf327de1e6bc
e9b8e2709f26f46897bc391f6b6d6a60eebdb06bbd1c33696310f4721efcf4036d5631b6
7b5677bec904416e55770e816e4f5a8bec43314100f86ae90f03c9ea1a344c7bd053a1f4
a6060e23c8cc719bb81fa63e54d1752bd637e41ef06f5e248ceb1cd11d2acba95d1eab18
910ec2f055076f69d81fda447da87f0b31007b7aee676b8e61c9d04df295d0bbe30d0f62
435a3fa835c0f85d14347c3ced01edcfd70dc0620720c2255376d2b42f0205a2a1d40f18
46d9775eb180f84942a79b20609c4ab365afc7743d11b050c8220e5429de9a1e01180523
e3ab670697c8e5fff54892502ec186b4a27c64c30aa9f3f551cb5ce1b985eb4e83b52e67
b5f2e28c4031647ad8b8de63dbeddf58ebb817c9bc31cefbb4d8e8b7401ca10620bf61ef
11a417885e86a805ebf909983ed3e19012709b2c9648d1c0d40d9c8b87f7c4893415c954
06dc59c93af224b950f72471347efa26aef10c4fca5c7a0b331f2f69d8b8b500d3e90480
c8ef8c5b293bff191d3f0f335226119d26a1de860d44904837cec5809a89b3053b80c5b0
129402da0c28b1d9bc44c4dc4c3460362b4b821881e06481db06074f12f99b18af785bc9
cc5f689c773c42bdb86897aa860358d5556cb8dbc3acf7235ca83f292b252fa82ae083fc
77cd7b10c1dcf053fdaab0a8b49e474de942d9b1cb5305b4ece80292218e54e104666b96
59dba7e77c41cca5959665d5d1e7790f013e23e4990db6df38c826d2de752b32006acaff
612376c520ead72cac371f5eb2514ff0cd9688f88a400c071a7fc888e83e3e5e24a7787a
b54c6e079d6a899c3f1a8dad8e969c9bbf4d73dbac7bc33135a4fe56eb72e90265892587
4d6a8a6efa900f3d87df70bf76a4f96d3cfcaf9b43a7dc368338b4338528e6f6136190a6
509845abfa1172100b837250a4353f4155f880b0be2e0fe66bd18c183aaf84346ae7616f
4636cb70f242bc038711189472253eaf68fa05aa50bfc0de9295a8451fe14d256cd03b7c
a6233368abc32a89365f52087360de4f1f80b0cc7399a59eb918346d67546ff8726ae393
7a6f95fec09d746d1168660249cc60d6774c4db73b9c7c8ce2d0828cd188e7d1b6381ad7
3a56b22a0d85191b4cd4591356445f0f875fdf97ab2f3608aaebf8b8530c101e07ec1e26
040d732add7bdd8537bf43ab7ecf0774f7f6141c5de0f1c3d919041cffb12c70ce892ba3
e72615f7068593cd6504eae5fa2fd0b712a63a78536afe2eee568dd97ebeff4c17670afe
89a747bfa8d81c43695bd29f1754601f4ed5432f938e607027f7c1cf678d869eea1139a1
d4de4b2d6aa1208ededdfdca8915e8ed858778fa656c8b40fdbd5b616405dc580871184f
acc8925840119013c5da398acb4ba5d5c2da91c71aa0ab8af41b178821151dd6cc15cb15
8cb0329213714f3c93e362c14e52c628d307016fdef97df77e5126bc1122585fac82d3ab
15a425e55b01a0eed87e3ec4f5fca32710f9d22da9d9ac0575fbda408627be08886d9874
15a90a870a57909ca6ef89ad85e42f030c9de8c2ce8aa2b247e9e160e1c41ce2bbb8a1a9
f9e2f7bebb5e382bfb9d2780c06ca96621defbc451265cac1ff34fd36734dda32abcb972
28bb875fb22ec29937ed42499370a3a221e83ccc1aabc96bfececb098e73b5f6a6ec7d7e
b246b19e22e99baa9573eb49dd561eaab24ed2d844167ed12e4520f59e7cf1c95d4a9c26
06e05d09b706c3ff4704327efe198c5a4c29891e492465cbdc5b62a2167ac01dbd206ad4
89215d8b45b81ed3bf8f11cd7ecad4459e0b3fa834a70c667ff1450f62efa9d0b83a4ccf
b78322e81369aee8a2476fc84421c9cee607680426bc28387b1553761566ec90b1b1b296
3a62f5256f29356b551f9a565364ef5e4a07059889ae53c2e58f86ffbe2d3276076df632
73cc817263c17fcb69dd2f6e108794501d3cf23fb7ec467a5147e92e683c0695a69ec9c2
85b70dcbe92de2670bf5e0cdcf02f50272ba30fb9cde92b8033bcd5dfe4c8074dfb6a990
2def06b3b2590c7b153ac7786af3400a6fec662a0950dbac90610431ec9b73fb6b00af5c
83a8d1db06cfc790941a3356cae9d3b302269b8d9e9130c5170f30ece682a3118eac6315
7864e29fa29870bbd6f2a7a692a03f2da2a7578a56426ab9758c58f0c601e5b4816ef472
b9c03822c47886799875f71419f3eb6cdc332fb2b5ae190e8f90d927cd77c12fb73c5a3a
c5c2852a1f4a636437123293f4f5ba0dc1d5637a24418d74fb23c710170fc834b75fe7f0
e05759a8c537bdd21ca0644d67c6b50f9933d9326e15d9007e248d96fdb4819634317e44
2a646040ffc773b9e7ec7c11eada596577a03dd8285880dd93b892487ef84c79fa5a93f2
916dc4e8a88f7b72affde1645a6062ce0add80c186d4503e8952e0134252bd1a1ef3cc63
ef578dcc406a21a1ec8b6e0f2bfa0b9ff54c1b3d7f5aae5a1cc265d681f5578dec6aeb09
e84c61cc201af5029ff019c82dcd0fca32d93f28a7392ec7cb5c2e6c9960e7068c649a67
ad6ad9ad6bc3afbce253cc7108c38b6409b8bc0929450471b78f0583a5232bec975566f1
f215122bf94eeceed1954957e23fa8c103a91b6ba1a5c5db936f34d4518c59686792f70e
dc560ae733ebeda9bbf2de80dd8dfabbf3312406982f4ab07f6845c56e51bfe4fd513d15
4041dc8c51508066c49333aa0f9bfd2f1481f4ddd48630c6ca3b4d870a59a4521943b6fc
584b5de20cbf44f41847ef981be7ea6991b573a41df6450aac07a5a9c3152e4b66327be3
1ef6f6a905b29c1f1145326b88d97667c2268362e1441b431317caf4084d91787b2708f9
687b8a83867578022245e32607bd59142990ab070090d7b4e7879d512d34eef64295ef9e
7b7aea48fe4680b48a43a71c38b4af96fa09a14e3a20da7cb29c82f5752f4117e3ee24ea
6fd73e6757bef2c6f8bdffb33fad703995c8f8be2b32edbb38c9a26a0fd724a524cd9720
a208808014da79c02e10eb6df6da8faa1950dd4f79cd38d8df0848aeab387f115ee9599a
fbea98ccfaec60b651b43a2e0d466384e03e05e8e19552ef85ca428f73492077fdcc16c7
966bad4a1e929359a7dc6bdeffbcb97f1678552521d52272d4611c17617227b7c1c4a0bc
f38cc490513fa1b37888c76a2c00ce963150a33a518dee40023db5912b8b8a6d98a44c47
32351619e17c49fab662e2666fefcb94b78dea38e7671117f1b83c9805a60fbab295e9a1
89caca7094c34b29de1bd9e4bf68ea0993c5d8b65b9b2b34cce771cd198974fd5d25c3c6
3194c189394986ad34bac20717be258c6cd63af50bd4dc02819a40cc71e3773b5633ac3c
765e64d129a06e7b6bc686bace08c5630e3c1f3c3f157af036b37f96c91119f74d174006
0c138f28bcdeb3bd369c028e506d6aef1ee6004a7c69d447bb305fb0a3e827add1111159
4575c0133fb6929d853a9515454d5ae3ebe66f496f064019824d80c16e1bcb2f125b11cd
fbc062a50f2c3c29ad544f795177654bf4b1f9db7029ce66fa552c02a246f6c41b97c668
cc8b431a8c17012a78e221b8a20fadd77ab322eafa74a80561c717387d37d4309aa32df5
aaf2ae2cb39931975a45c19e6d55a7d5f382f3cac6442a65d856acb4739d28c57d37648c
ce2642642689e4f82943985e824dc27bb2b6af1e5e4be8ee43212249c44a828a13ebf7a2
e72b85ca7b56ccae7cfc50f005223038fd5afaf0edbe0c3e2e07e99904d21e5076d16d7d
92dc1f773ce1b0a25c3f4030dbdfa3d7fedd45116e479b4e45423d76c8e45a3e00a7bc80
f8ee2c7737f825d7c2a6248aa3e09eca17eab3427f14436dafb6c4357254fa6ea9aaf63e
df7f302e558513099880454161f6ae65571a0f2f1838699c45bc6d0ad1ed963b5944dcbe
72e36acfe7cd1a95f80a6a043055fbb1a9b521d45f44e52328adca0b71bc4f39f7b4598a
4613f6ae46da61f90adf73e694c233ff83790f9a46d8da4cbaf9e76bae62b198eaa59785
d7d6eff169925dcc01b9c9f08e57e854eb39c55ae77d4477686d239398f3b5d7958a4e88
2ff3f45b0b28f22efeb61aac22e430f4b67f1e69710187b641ce059cb1fcd729e163e645
f5b8815479001d611125cff5db48d1a58848cc75fde272e416cc48dee7f3ba7c464005f7
40b9558c437f2cebc07f04f28c8edd55ac17edb10f5d026948f54624afb4fdf813cd32c1
3d2d9553068cb972c23a308fa00105120bca847fb8ffc0590188a567292f2f3ccfa69772
76d8f096ede1551de6b451e0c89bed2fde95d923dd9422434466b5c1e4c9fdc9c91b8f09
ebc8a12c2469fc68e8d83365289fd31bb9ac1580663e60453f67f27f9b7bdb1a7ad76a06
e8b9ad08ad6eb735e1f0148b703197e77ef0182c2091b7aff5c6588506ad05762fcf52e1
ef1b5876d95da146060d0a96e3afa68c6ff510094a64e68719b607712603e2bd71a4ea79
e731dbf43d44e6565e78b2de33171c31a1cea2886b643d82d8e7103610f561fe2383ad5a
fe98c866067568d24c892091200c81cf38c6ffdac267917b100aa8e26230eecc6282c0fa
072f5a50e45b8602deb324f8e37bc7f128f7b7840086d3d0dfa385a326edd28ec72d838b
109526cef07f04fcee1effb9117fdb937d92797602012b36db8d4a3b6d538aaa3d01b5f3
80f4418dd754815e9f396cfd523b2e5be625430fbca12a1f3c64de86410732d9700e8dc1
42ff369407fd7e19b40fb43ff4a8b73d9b0fcf298dc5faf4372b85b0b6d0c28104237c64
9e090fd58b9b1490b3bbe0d8291dbb92bd97ef16e347889dd3b939f5333e2d6a1fb6333c
f0cfffd928c7b5a7cafacd319c346ce0c62cfccc73d722383456246f8f87bf30d9b6172b
9bfe046937232e463a99a4bd84732b4ef0d8328620bbd180ab461e778a7b496c371639e4
a612c1b4646857e219f9ca45c2d1ff026199f7d0538beaa064851177844e9b0e178f431e
a7f9c3e8669f17f7cb9e6db4e969b4013d1272961cd1a93a39ad14d803e92fda74788f76
0a7dc9cbf693a6d67f8620880cd9cc9fea755b380e1180b2f5cdfea627d08e54a7470c94
706b03a94828cb1006e54ce2fce9f14988a442544e3cdf5b78cc22435cb4e418ced41c50
c92b623cbc16aaa743789cb875c1f3c65405a8a5902724a9025fa4c25f0dde2fa4dc2a15
4235fe9abd6e71f4cb9c5e762b729f73705c1c91220d80dae3fbbc895c50ea23faab5516
cd02e8d289281740072ca86de343be7fc312ecc53d7c6c94f08211e3bdfda5a8bc52ddbf
e11311cab1d5236fb0f4fb52341d35043009b0dd7c6532f55f35aeb86a0ad86c0934a956
269cffd190e63d93c7ce9cee9ee9a6d6ccc31b7771c1814fdf2e15f82b1336fa94baa49e
54dd8116e69ba99f9e1940b32051bc62c2d8d2ec939c91c2983670d5a4e0b09fe81fd814
2b7080aafa66ed1fbf25ebe3b95137182fcd7d24d070eb334d6559bec39d86e5f11a8962
5cce2ef524fcf5942f52d038d1725ea023d61371f88aea7996a7a823d02388cdac8ca6d0
e7f2d116b0329407f2703379a8de5bdab3888f63aeb64765a329d6a589206f5ec38c7f24
c14f69e522a668797d81e718c5273ba2e4d5ff3c0989f48b86565985d80134f32bd4fac3
a43b53576a0857213317430cde775f55c3b42624d9b85fc866b25989f8bda283098957b0
5c1a90a7d2a5ad77272b5745315e3f67c13d6a09343e78623def7adf81ec36ebb319533c
58369386329b14b85c283e2d75baa2b75b12890e7054b70bf4d7c03202fe434ce980f3f3
cc900a0b415d7dffc3d554593bb914b790b9d8701573035987850a4914bc411877e60071
c7b1037e10aa73b2becc0c612c5ef85689f440cb5d8fcf8154301a30575d38a9642726e2
869e596978d8c6cb76072334686f365d031adde6b6ce856197589870b04a5643a6c69e49
cb3540b31bab57250d9c85f85a9a7cbc8c9410ef622cc2b3c53955705c07b5fb5a5a986f
94c4f52c47e95541201dd996b7cf672ed5c8eeae3c4c259011efa14a5f0d960fa9003252
c8f1212348121a22236c594d36467176b76641df6526adc3f9493e532b0c8db7e8a86342
8812bc2013ccffaaecfa91e46682d1721f24885d151d7ff051378f1b04b5fc5ace864daf
53ee3173ac433adf3fdd58a356f5f089eed78a2570ff1dd4fc2419bdbaa8f7985eaf2078
1dcd49e02cfeeac54b134b0c383be0c892400e633f67fc5c19e465ca781b64b2eaca37b0
5f69f25b6f62d2318e8f8e1b29eb2b20e34be1768828e03e52925c5d6cfd8490bbaef066
e1552100e3860f128e65eeceda3e73cff39e4c57f24a221959715679c27687f6a3f3853c
a83d261d9780d182d7c0d9e944d599bd6bb2ab933158b29d8e5ccb2b250fe9de16393dac
385b9c551100a39877817273fe642b0d6458fff6c292aecb8144285f68a8bb4fec61a3c4
286cbc508ae692c1e3c99a3e9276ead7de2cdd390dfe37b4070f7cc4acc5d23a9b672c33
6d19d8650fbba301176157c05de9a81db18e91fa7d5c79c3cab571396721d7bb276cc821
5c95f5b1f917abf61ba08b49b2e15bc132b1934c3976d3e22d5d226c8b9ea372db6422bf
06bc7bd73e1b2d653db389ecb793c826b159790264467e04e83a923e6ef54eb95a38e21a
7a865da53ba854c1d529a1973c1b97fc57882f578394b733b2e8605c2e4eb9377d3be1de
1d5a2f1070cc20ce805eeab51d2b2cae200c48903d5db282f0b20caca7df9b9bf653f127
9f0b53c928c37a08598acaa2f462fe4f8a3821121672602db952d55d947c3a18dbb2a5f9
91f84dd88bb21be03124c498bd1bf3f06541308ab371f41301048d4ee33e1048f049364c
90ff7e5098ed5d0f8d5e1d04d188be44a41255c5576fbc94ddbcf6e4230f7151f3cb88e6
02863a6c80c064b213b258149c3f38f8c0b445e1dbb19818aafe27d6fd30f516d846d175
39376a26d9434ec4ae65b1338793db7ca20fac7e74346f226f840664d037f196eeb16dee
a0dd8a33b046e62000c79780d19403fde89eefb86eba9a1b3f01ae0d36327d58c4bd8ade
4be1420e94b71430ac440ce635f1b4707b9179f651ec5d251d22c09751d9d93acfce2065
65060edd890170e2fcf6229c908f9012ab3e24bcf1af05ee5f8f6e03fbce503124d28eeb
e0fe28cde89b35806ffa0e7c23ef653c4bb82e82f9328b2ea629f8209b07c105978650ee
e6065d933cead1e5a03c85e903257196545b898464cd345336bf7f39715e486cd9b31707
ed6cf06c59be0f7263e41e5423957b780d6099630c337caa05c127578a3e4acbc8520f99
e7744cf9c12e1da15dd3e039a285c6ed78e8d742e6715643f5c8e88bee350c87c39a7ba3
5234d8abfdd6d58f64a63b7f31ec8dc58537f9ea0a73ab56438e4a1e91148d317b70c7e5
6e6a7025c4a22a08cc6f56cc8c00143df362b29ce76f598638bedebe84495d78eb0a672b
40974d1dfa027c507150e68366723141ab49dc07e7a1d04495d92e0519c4c34f9846b1c4
6b747577b37b80d0f8015f9be2ea3e5a63d5e850e7009fd5fd431d9908d014169912e7fc
162d3964224da6b726b5162eb8463f62f65f5d133baced63947c93bb9bcd5684d2e1080d
5d1cfc07de06c0ee17e763a0527282e8f66d28fd1bd249212f3fef791ea93a79e48d5a2f
a97d9d973f55dfaf6a1e7944100d5446e6dc971fdcb3dfca972907c4c9768dcc316c3412
db5333a7dbfa0549603329ae48964ba07dbbb0ee122ef6c0d3f051c9ee39acbc5a275b7f
968c578361cabd5498316abd6c8bcbb8689ced6611b79ac03124d323fec45ee858e6511e
73874fb1a50465733fb77a8b7bd27681d00369da75cf11b604c9e0fdff3ee53cd596a599
cc18a13850e08a3d23eade6ed6c38cc066c688e8c57d9a64ce5d36bd94251b6bc6596b90
1f0b8ce27a29479569d4c3003dca0f76e8538cab1f09e8aa2c60cbe8e14d7e89562c41c3
fccb051ed2f3077349200a412dbbaa678060e5fcbf849378f832c5d2a69250c6268c0d65
87dfb9f04880ed383fb2778c89ce0914df6cb7cfdcd0bcab53ca26e6bf761257dca47c99
a1a579ae4f845c96eaef06e1722429705914d155ffe0ef515f8fdde265f1e6508690e5aa
7c1c8ac08ad03dc6f9b76f4a17c2994dc201d60e09259b1e90b9a65facc11191721ed7f5
33480176602c379fbbc0407f36cb3375c3a506c7fe615c7b52ed46e7d6d46165b34077c1
757c93f770631824eaaa1938b2430a2d58cc819528d2ba677bdd8a3cbc2c3b185b340215
29ea3b77c1c0d96103c31d3158ae62257b257f96d39b7339bd425b76add1a43dd3f876dc
ec21d3cd72b626e1131f766a346986ace6316fd6693f68aa34f02cda815911a588be60de
3652f4656273459ce1d69984e95b61ee1e42f8f29ea18a6b86a6feff363402377ba601d5
989b0643fa45ac13f9e0fd47594db92d23214ec9a1db75e783eec6c2f83ad5c52fb2137b
b2fe0ee1ca2f176a47aa917975ae674818a894ee37a8a02ddffec69d05d1db42e7d466ad
96835d9144595f72070a4f733fe74d71bdcd396e82d41a39958fcaa8c35634cbb0c86d3e
3b42ad413188ff434fd5518cf43dab4a71331c0970d6492d2543ae72b70b675dcea5ca10
dbf222e96b064ab47d549724e33bbbc844c7dad47f5cb5ccffa722d85b06fdec64255fa7
f36adac1fd65b60a6a6fdff1004906d66ea2e7f3b956b03c0803097bc5494ccfb335736e
bde1b89b309effa327b7686012d09b5dc89fe4cf271470c6596cdb0146a2f88fe80d2560
46e403639705a515c2859f6d1cb97b1eca12e732378858e22a0629307e449fbad2c3dd6f
c36e6de5099ce024da8a7dd8ebf609e6986338f99646b72e78c4b4dadc262ca5fbf94100
09c3fb48ba5ff9e61b6334c3f225ebb6abde283a95f9c3a61b7ff4ce71df42ebf56c85a1
64cfe4f38d093716d4d62703b27f5f1f37bf08fa0d3970df961409bd788043fc60e6346f
99a2a1eb6f7d33ae61089b863c38b284453a3c88f61ee231cd412fc6a4d58379c8d25c7f
657f46fae0d8074d12e43a346057f1d3cc8f8db553fc7a4d0d43c4d9fcf2875b2f4e69e1
42ad4dc38755f572cbeb1e36d98b7db67177537b050d4b69545a78c02814ac773157954f
2015b6975b6afffb5b960540e626cae589174f2c95f3e6e755cb9cf6652af578b9c69da3
f97bdd1a90f95ac392e831dd18318bcae3771795f7b8fa6afdf067ae64675e5e99702ad2
8f887671ac3481e5b570044468bd23337561587219d059e1802dbb723681fa4981acd0c0
e274443ef4ee3e8ff55ac6f14adc34bad288323424af6da2c22a962363310865c77c89ed
16932250c46b2b84c410fc0d4561fa3d8b3ef104ee4d9dda773da0b2c1b6951ffa329860
a320e2e69c2f7ee64262f7b1180444e222ef42935323a28a1e82dac845e228482b61d5c8
3cc9028cd91d131ab0fbe4671d3dfacafa98c4f651fa6d8a9961caa796023bb2fb27ba94
d6411bc3c3d5e2d2c96fd6ba3b92d44e15c4a9d8c686b2bd827fa64829ef58e7015c7e09
57cf0a4906319e92e35421aa59cf3612141bbb4b440cac36b7254c5ee899d1cdb3ebc3b9
bcefd371dbad7ec5286b197d4881d3a8036d5d354c76ff69b14cab338092637756a3db9e
a46d8fb98b99763555fb0158320f2714b150af085138be9ba4eb2df3c0052bf6178612f9
1310ce463e80f84363575a46b83f49eccd7191b76082433565e029a7ed69a28790ae23a1
b01b20ed16408e16e0f2558bf401b33a23157c7e2ae5d9556b6892317573ed588d7789a8
cefb55e557d797142f6bcfb626baf924982128ab90f749c33d82a27b460141b7cef1d5ca
1c1e5825610b3284421bf0661d53f5eeb0dde9d53d6786cf754b572ac1563a9974c50ad0
56eb6d3987969bf7b4416981466199cfcbc557444bef0321418b959f2c0c3861c557667b
7d4e21a8eba643ad283e876e50bf6a98bd4d5e7b776e92c6a6c256422f285bd0a4c38af3
6e2528ed84c1ff30b9ac4458a2ef78f8cc262e8d3dbedebfb060e7e943071179ae4806bc
e7e1091b4a0dd035d2be125a66bf1fe5d3c4ec0ca79d6d4c43149a41fca59558d655ed56
2bdc52b4f3ae77d0269286b98eafc0e06ff66558bdc09648b95479b83fff586c73f96566
0daeed0477b64254e565644c829176723455eaa5cf650efad9d80bc2707f050128b008e4
89f900c58abececd002f6258573ba6cb4078aebe13f095778ff1421936c69db7d2e76151
2b39c7c356102c945ae7a79dc4cd226e08702a33cd8206d1747b4f51dbedbca277859f81
c3e412df61e11a12e9a6cd5e5401c06d51ab392e8a5f630fa5c440a811828c222223ff44
2feab331903a02827b5672915e64003f764cc0370d2fffb47a8aa225c05eb78823784ff5
4e81be26a3cd9bd59021446ac757c9b22debb1909959e46393976dffb2e0120bc54ea0bc
0610149ca5717f1150d0961f7e297375777d64b88648dc541a060118246439f2d06cab8f
66c45170f73ba026d208b24f8c40ecee907483cc4a662ac9ecaaa9d6918e26fa98eb4f89
09ef3654fe774de42c5c1cdaf14b95315fefac759f3eb13f93f5dba8193d04a5afe05644
7ffc13e415cac9ca9cbb12712e1bafc62f506b8e1eed5435873d3a3e563531d23e88b5a8
6785c42b114aeda3f38714ee8f6ecfb2de45cadc3fd578c674994f42d3cacf187f586ffe
8d84231e75bf91a07bf4610db00fbe2f74034e5ce69f9657109377a5184476030b647609
16733e17aa7d7d13b34b5f5c1554f2e62bafaa6add0946a279ed0c03239ca430a17e7d8e
a143dc63724b440a40a6ae6d84c69cd19a40ab1e9470e5f24ae436cd67b3f78ff7f83d66
95138e1f01b5ce69d5870ced7251bd75c9dffb2c9aa26b823c33543da33a1c32aeb43eed
50debbea73defa3e980d39c48b82533acad24f3e3428737ce480f528fbe6ede203af8edd
77e7cae00e1d71a7ae9a025c9257c2157b72152afdf5a68c21325439ec21d6444e2ffce3
455198419f07783e7243677538f0fcd5b4f0dccd8970c028dc0515fd4987debce6e4aaaa
9373c39828c6391d78f111f8c98e8b81600cefc1655894ed624557e19563b8311d6300ec
fed8e1130fba426cc67feae25a0ee30204105c3e7b848027029135a43af8ffbeb84ff66c
0b42dfdbbfdf3effba8d4e40e23394174590a1765a54633fa80e9a0eadf78d40b6e577e3
3cc74809ede0a8344a714fa543da68207c1cbc2007db199f09fe415500e64c77ad3556fc
b82735e09e06e6daf2e8456a530927920df6c14a2ab86028132bc4dce98b02e066af47bc
6765e929ed5cc3ce0d9555882289cf2a63a4a64cd0a0c7fbfcb80091fb7eafefb237feeb
17161d5c0398ee4ed3e6c7c63de658c8883cb42ebb8e08f10bb56592a37511b36a1fe699
adf051b471bb685826decfedd171898af296142a931d194649dbb9e6b869a9e46c4ced27
4c7ad9cca271e1863d009d18f5d275b760466f5757228a7b0f92463b98ba4be307bc3494
7f1d65d1783fc5c39cfa4ea10e99dd513c698791070cfe20cf7ae8032e851eafea67403d
7ac348834ca8807c083f6b02b376f2356fffc61760241b573aa1d96d24a7acf711945c0a
eb860a5448c44888b5745ca3dd429e330c095ea3f2b91924c39565e9fa2afd4ce3ba07a2
02b930992b386fe546c2d655ef8cfeb56d3f4354003098dae1bf619598c78bc16c8c5d07
70d35f86dc6557a99fc7af1769be974e950e1f41f116f1f16ba43532d59c9ddee93cd515
2822b3aa6d823271af800ed3babd96efb23629175c06af6b439fcca0a0055af58e67ae25
ee5d0bc2a1f787c6081583ba64760e567aeeb6ef5f90763443fbe81666abc0df0b489ca8
8506c595b49c346f30aaedfb63ba45f58fc7bf3dd789798e1b39c01390390b7451c8566d
017dbfc0d2e76228aef21ffed75e93bc274aab168cba5442783df33bfac1fca0d7940659
9bfcfcdb9b1c55bb0fdcb1659c4dfa8243a87bad01cf51cdf32a9e8c3ec3851ea9073bf2
a2073bc1d65f031f84c71bf7dafa604b2dde8bb4ff26bb2d0a7edf0ebd3a805b82f8094e
78bbfe31c1a837c90214c058dd24bf846f296503a150744008dd89bc136e5a36560740e9
71e28e53fe630a99d793e45a4f3c7180af09291ec1a82e9f3899cc2f7b496c572a0f44bc
a465bcf6c45970853e3c2bff0dcced225eabf641bf70152dd094fc38e2378f8b2c2c18d4
6fc86d7ad78346097696a06e986ba20a52d9e747253d67620bfd3f902a7f531aaff928d7
1cbbb136c4f9ab55f154ac7904320b0098c61cdbd58e6c08db9bc811103740166a972973
0f9be09714e77a0d992fe1c4fceafee102e64423c6f8703bd975a3488c966368a9cf23a6
97e91c69410e3a9d9e30a700d8eee0922493784394303d8268334bc403fc3f9c3ab78b49
ab39932aa575ed3c4bd1ecd3fc6edcd0603c63c3c8342baf1015d188f6987a8e2e213d34
fe4bdcd2a850e126973ce0c0fd0f2ecb3ba79c6d45bdf358ef6afd0260b2af6860f00416
8fca20ace917dbb41b771d7dcc866710a21b1e30dcbf3192985a71ce476db03a8ffac121
6ed9277c9e69054613ff3c4a036c593ec32f3d48fb6ca387fbd00d895053ff7781cb1e9b
fc52b7f1eda334b4f3e04ce4f0e713bda9c6dad7b84a557563f902e04acce9d60d328b05
839c1af9cc9fddaf0cfcde91955a4b17112eb38afb6f2c5256cfa71392a870ebb4c88f54
1a0d75a3f38464365af328754e4216c5a34614bc4dd683ac6800f0a86c0d481b84a9ed80
311e196a6708334d9d124f7c93e24d9b478ad05657e365530d44dca204a0cf33f457dcaf
0ca221378d944f7683317043cdbbeb7cc6b0f57876bd0a86b55f1935e3213a7e6c8995b1
71c6aa69ee0d4425c16197a22be62eacacc0de444fb24673e6c785fa3d6e186b5e1adea9
2084f5235a2473f993eb4ff4384e958cde4dbd7fe5cc13232bfbef06267b113aa6a61b9c
24fabee21637313bde345a4f0e32364f3360cf738db8611cf550c53d7899dbb415662193
bfc396f267fb928a7f836595f2a9ef991f3c1d7761a986c199e7a6a380c1eb022d1d6430
5b50769b2b66706d44120762b91c2a8b026538dcb36552a43429588d5a778b3cd6abe1dc
3a13e0bd6a0b5eef4336423417d306807ce936bf5eaf77182a0b2e17de85442802ad1649
2195a4fbe1eaa5259898116eacdcd03ac1b3f82186136709d6edb2733e9ddda2b8547ddd
80e6058a12a588d00ac5a9f9262659d4df3d47bac59aa49b297d9ae7cff36269871fcd99
55131fde41fc09141f0084fc047a664685da6e986048fb6448953023437ece612de4d9e1
dbd7da8abe11b5daf74cd096e4ec5943fbde3ee545dbb4b83bc2af0ff05f72fb70e9f5a1
4f16fda5eb184c7ffb2e224c01dacb663c1a1d9e4d85222009dbc43a7b54d2b8974a2093
bb4fa855500371dcd3ef020e94ae155f432f8d6f95a2fef0b1778f5c7c1f020a0d5c7a8a
32f7ed14066cbadc0ebcc93c8f77b4d127374be25ea2689c348786d61139737b89a2b99e
6e0b67785ebf9c0f6a746ee8bcf4ff3f227bb961225ddec9d874d11b039ec87673b5d50f
7cbf41a81b0f6b46af30c3ad0540278351f3be5bc5c4764457ddcceb8a21b1e843dba2d8
cdd3f1d85231b38fc5cb6b6a6843a270b8c1ef8455479bcdb65d23f28ae0e2317c050ec9
a4c4546dda2611d0c98c6764818a182ca3146e3553e4fd51c7ee17e8890566ce94835195
008460d855649e7fea5581e3be4e176684d4a28bb3817aff00560ee04dc57e03f92bbb80
7320f969be2163fde1957e067e1aad10c5a73204f89557c918b758c0d1a603d36b770c34
5d4ac2a2d2da2c248e257c8c84740bc0f4561551b77c681912a24c65bb5a8396a3261db0
220dda457182df5d7cacdc9f3c6a736303fc59a1f348bbc7725305b3c656f9274fd7218b
bcfd0767cc7ed475eb3b3a4ea739b10dc1a4fdc6eb025de7312eee8d57f82b42875e5681
403000a790820c2f4b031e8e921c03270b633264f2f339dd3bd853fc5912a2700b7b4fc0
c0e832ee0327610c1eabdc268900aa477e6c7eaae7e0dd864518bb9089b6a9fc9a70a129
3682a8393f949cc05fd2dde4c3df61562feb20786206b46464fabf211f632ab8f63ecc19
c8c5da73848a8f65323a17265af63d93932fc1959ca275359e696f068a7e9440c973b562
4927a8277a3fe22b8479d67ec92cff18ce67b485b8f865705b93cf69242df3cc4a743e3b
4ff7809887fe593671720f1dafd696f2919e9a17239b3a08098759f04fb8c9217e4292fb
fb88dc77efc4e001245ab5f3c1ee2661f6f2c776bfc4369f260e75920f9d25c7d7489f8a
1865cd559229407ee4d19ba9caee0c6810c3e164111e65f9eeeec77e19a37d23983897eb
d1a72b1db4e119d011a67bae0fc3bbf90ae7fd3b8cbf6f1801017e21f69a2970a2540727
61796193e67c7ebaf98413b74a57b4a0af13866e10ac36bedf1d14af2e224cf27eb58a71
68d21a74c7f6fcc32a74149826def204c07d38c84de5eb429d79f6ca50a3e1eade700371
9c8a2c3838af59d8eabaeab4d77d00a080b61be6548a8ba822ae0f44519df5df11981240
01018d03b515c1f87ed2185864a034218f0b9c2be3e2f5f6931ba85ebddadabf28228cf2
97ca9298207d6c104d54ab4fa6ca9996a9b7caf28f0ead9d3171dabb000e564f9eb3b23e
b87b2ec053e9e09695454c46d291c3b3d8c8dedc7e46d63e6d05938bb8b34208b4c824b3
51eeb57be7a8f1d01e6d59e87e407588ca004e17d85e9669d17ac503c45230de2166a183
2aaa73f650a1d6ac5db7028ca49ed9d940615c64722cb4ef987824c5378601b8192ad344
a5d8f6cbed2616175dd1cecd5a616cafc098d0318d85b83065b1c16cbb598175343b2094
9ff96f4e475a8b3b574038925532e2049df87ae59e78ddf1a4b7605329d8af9cff5d322b
9c4a2ca07ed16c132a001bf62e6d2ab79d541bd266e8cd6b2617aeddce214d9d97904c95
11ad8df3ea3aafc4f87acd3fe7a068845834533437ad5cb02deb49abddb2851b31b1696c
a1b6e9bb7d94d3dc2330b0a2d34f3c16353f3a734703d289e37c1fcf999b9b9b918e31ac
e0c6aa6fb9a9bd9a07bff5a9bff7469a226cd03ba6eba56b63bb7a4d82432538cacaf60d
8d5ee1e3bd49cc4515d30cfad01d1916d504878994aaeda9772a96e4d9a445263dd8f8bc
2259a801dbd00ee67610732cdca7697561e230bafa770ca688335fd51b76c7000f34d96f
1bb2619f4fd60736747de3d01553e7263aab24dd3e727eacc819d7e82d9b777ac600ea64
9b5520f4233e4f4e41d3223ef556c81500e9b8824ffe4e674abfb47a4ac044e2c343aca4
b5b17e13cc8d7b298b019a8f1a2217fa50d1974464b6893c4ef6a5f577a13c3fe28e2fab
bc69c8ea6db858950b1900a2ebcf13fdab3b4c9befe9df7acf82718dbbf77f5ebeaaeef0
8a9969cb07e808fcd690acf2993fea991eeeba657b7169724e3cfe69575699e9810bb414
9ffe492a2de2d9ab30228f6e6176c6c01394232db7ed5dee016be1888cd4c96a20925dd8
daf90b709722c3e23a385f57ec291bc3819b9e09942a3a071a97f88c23ad501f348aa201
65b2a1dd3a136c35080f3b54692826fa93b18742494ce397e103b9d1dbe498887a5e8a6d
6cd4befdb3d036dfb2be026032f955ce07bbc5e22bf32a03ffc75f9fa56b82e4ad0097b5
317ac20caf065fafe2f6e25cf4dd8e052e769ac9125e64e95b388e6de716e8c6018ae3be
c40d992af33eb3049daf97fe8fd61d0b85a07212b79632f51011668c7bb3abf8a9a1b192
22cd8f07dbe5f64367f34aba3d6b57dfd70b3ffaa460015c75773c63f7d171454ec0c52a
9a691dae36677d9696e4255a11d04a574f7a032ad3ca86a54dc52a2ab96c5df4c458d426
85a20e7b9b9c2b7359992c5bac86f449f257406d98b29f060e9c17210f48153c8274f26c
9d1c0f50c54134e93cab1c2ce57fb985e6d028332f314d700082766b5c3580461ca43537
fcfdfae59e81cea7690fea8ecbff863e01fe9ee6c1b13cfa1cdc7f54b493085671ea246c
e345786d11afd6f50c173a77c2e5d921c53e577c9f9f45df1ee0814859f77f1194d835b3
9dd71fb270ef89678c2bb1bcc340db65be7859b8af2306a7b161f62412b8c26f47f155ba
ac65ec5ea2f07e80fb09091ec4e988f60a9e1feca76cabca6bd55cb04813e9aceccce032
8f32cd8435885fc491c31bd2b825033601cb44b87949ebe0811248fad1c2324fe09931bd
e758c0bc89dad9bcfc757dfc11477c9c544e93b5d7fadcaadf444a1d2d0779106e1e153c
acf23751d20bcc45d013cfdf340b97945018a1bb8a296bf12ca646834dde06615a2f2852
d2960bb5c71606c16dc85bdf71f38302d17974cbe7308cb0cbf617133d733aa7af8527fb
9ccd21ad9aea44ac4967c9131b4e447a7fb233863b2f174985a01629d8300982b316ba9c
382619cce12fb81ba3967989f9b86b98f04a8c2a57027bf4d728247957ecc72118c7c41f
71ee922f346beced6d06e2c4ed34dff82ec6f811268754ead99ba205283a17d617b689a5
ec60e93b87b33409efa771b141081160d141018c96a3a2130d5264614142ce48c9eb6b10
4ecae7d14347c4d6a9ab0b8307980562b29112f6f27c725384e9105c5b344fa5aaa67ae1
8406c7e3da4b5a6d4bb7aca87a895f85ef1cee54b79fdf80155d060d386f7f777408805a
83165ae9b040d80960c787e95bd89227319a1dc323be282bb4ed3620927f01bc71d54d95
a1c2e64625e3fc8590cc4ae016f02a09d28aafc00ae3ba5549335aeb0cf3c71aae333eec
ab10d032d4dafb6e2b75ad007bdf3f4555f7a978ca15fd7dd8d4e5ec5f1787831ccf4ddd
33d3dff639537f9d424bf2526bc17ac9a4e3da47dec3faf83fe38b662e92f027439d5bfb
70426e47e77acd9607b389d51a9c8c2d8a05f9b9c5feebfbd0f8a5fe8bbc1c4ea7b7800b
656f5ffcdc6f26e4d56aa21439d6a1c7e2d2e3c78d3e8578766994970ec5736eaa145a7c
7adae849bec88c65b41addc7d4fd5454cde326dffe1ab81231abd9f202fcb41e91db2d55
82b59e4c3a1e48977f31085fb3ad9787ed897df50d813767f33d98bda6f0d1888ccbad52
5881acf38a1fa90ddf1ee392fe74bbecf7e58fac67d6df26db64e1fe53e98d0320ef4c85
0e025479d4ca053f509385ac3705dc9e2ff2a31cff86ba2eb09e26a65f362501b442d897
5fe4f07bd014290d211139e6e171e8c993059e0cea9831cd33326a09aa89dc505955c986
0d06e44a861038ebcd60f146638a2d8324b0be0adedc3c349c89d3792bffd8ee2f2809b2
e7c4b92814b88789f6d896749b7caeb2df77139d67755288641860c7a4c9352534f866fc
ee534732e2f431f8fbb6f55752ed859acb2e855f417215fc460a3b9dd90a03116c43eb5c
1a745c2c80894fd335b4a9c746cbfa8bc1aa64b21a2ff7effe3ca107c8af88b7ac9888e9
8d48ed3e8b22473b959c5ff4c94a5044fb714db143cf704f265c17f9dae62db4d48d3447
3b1e40214c5f651b38af9964833941004d0be9f9aa6e5cc217b6d64e3665521d9fe8ecea
2a25621f84879f11805933ffd82feb1da860c82e7af484401bc4e9d927895091cf95b392
dc1481f51f437ffbd047ba976d22e761d46d3d4c14fa251240c697fc11618786577f5aea
2654a759e5cd9295c911ae590a8d2edcd74fde4c63085d8a26abb5bcd344cb30c42104e6
d9d139d42b7b7d2c6d9ec12e618cc5af6754a72cf04fb820024704eb90739689132c81d7
589f0e65f91deab4cb038f02fe9a87b99a780a19d656edf7c13dd9de29709314bff420ae
a7dd04fc393ce315db40c0cb7785b907fd013e605c40a21d1339af37c6fff4c988de8d45
a891113e68bec095ed478538d98a822780abcd6a69c6fc8d46126506546d8d3d56501195
e3cc1fc6819ed7d3512bda88207f7e45b02ba974389fb5bce3f5c666e9361dc30d8751bf
fce9edb5293768dded35aa4bce7fecb1cc49e06259ad7089b5e5afdfed763c38d2f35928
3e3bf445b08f9d36612b339ac617474aa8754102ffd6f2d58754cc79adda7d4eac9316de
102746970da315d6139940e6e613280105838e3bde511fe5e9f995f339af56b48507f062
a9d88cd8d8f385bbb3d867a51aaea4281e1fce1192d91d0d34b3351018e1906928524a9f
92dd7973c9f41b87b783bff62ad5ada5bb4c99296ce982ec982c1b0a3b87dc96f9931d50
c1adf51d99637c3b1bc6b698782e082f8503e6555b1ae559e92ce1669db32f928936b54c
a90235172107e8fea5d1d9631cc4939b50c286c6ce9ab061070662b8c73ccd659ae8734b
2c3d8332e698cd39b951e94595b173557cf40da82a371356554937b3add9d4545becb437
4bc14f3cb832e63827a0d018475c19ae52cd74c8d8294f5df51c886945923c2da0d2c8b9
5f8d943614a33a5b513cbd67c3a691181899d42e491d03b5b03f3500315e79023b49a4bd
353c11671920be245290b2e041429dbd1b50afa0952a83dff5d049109c08ff520613939e
7a3e53ef617fa1dcbbc5331650b4199e96bd350fd73cd84cc0978903b1242e24f5b887d6
272a075566a6e06648c33034e4bef8ba83192f798a3f1cc1d27cc695432de4ba866727da
0bbd09b917fe6b3c0bf8ff508923efc94cd6fbdb1cb3e32dc7e79085d648008fb6cd97dd
62ae3c455383278d826e805c1349ee7887ac82a572975432e3bc34fea707c29aa3854acf
ea643a2734b1795f21baed136e922e3e51bc87a2a972f44fd949dc510ae64cd87e8fff89
e294a542a210c5569812acca7d3d490538a147b8e008f44e2e9a3556892fd738fdca1d80
a4676d12c8dd1e6569df2011dbf6653a7994900a2533285ab06f654c697b28f4544d3c81
bdcabbb291c3b8a79792c6a7a98d16acca43ba35ac11b54c6c77b88450ed304473470814
4572b93f795f48fdf3e41dd08e4f22807eb9c071e9e2247e9682afbb44b90a6bc89b7b2d
c2353dd109b5a062fd7fa1fe12e4227f4dcf97e0ca702091d90352565570961f486f198c
e2872453ddeeb316258aa2635edcea40ce9b929ab0e24aabf78e735398de464ac5b5f339
430886adf743ee2df22e115d3ce6aa67129fa0286653b296eb600128f6d17eb853c1a624
c48d544e826c49ae7af0c4e22e3f5c102f07df598564f0ed7e102fa45a595c54827fc96c
e7f86b1287f94e5ea6f77fbbef194be4ae408e099fa7f3eddd89cd9fcc9bf9e465f44686
cf52926c83a4bf9f5a7116dbda64d4d4d6050a069a25cda8216339e193d384e588b9aa73
37684206a582d2364e689a3fab7d96ef6edf980ccf4ccca2814c7a64840c489f1189b8ba
dae455930e117ae5bca6e02de46e1f118bbaf6d3a47232050d2f45d980a871e2154b7c46
be5c9fb8ba77749e557693eec8ed0059006003718020c95cbb8de5b606874109fd98a577
8758241d44ac72447c48ec46dab673532dd809b4a4f2e5ebed649a096d33fc678c83f430
0d8f5a7ca69a2271146eac7e9caf25b42bc39bfe8885e1f6a0002827810d6070a7024a24
c7a0a59845cc271feab807d5fb926274952d0b49dd710b2bdc0c6c2df19305655a8f5e5d
b2db5779e03f277cfc5138210abaf248fb14b705595e4b20415c86b3c27319f044d16c6f
5650f0c54e24b72db4717de104a9295a3afaec4218e246b18d7b73a65ad9e6af95db6f03
29a3cdf29095ae3d5999e76aa9a52c2c042946bc743774127cb3ddd418c33cb45dac0a98
d662edfb0b5307c2645cff955099cc6572112f660877011deb34c5e208868fafd66811ec
40c238e4758c1e0f7d2338dcbd5104a72c2388e90e281aa5714aadbfd5f49660306335ba
bcf79a95775b2df1c9aea8e474d258c53f40e54e83a0f98064d630b91c5e7d6c07565a44
233d15b5380772e695ef3e67942dc0bb5d9d06893a8e1099e40bf04ed333f7f1caa8fcb8
b8b7e93ff1e60932bc999a41e7f3697e8c80a5f151b4ca00d18f2c32a83b4ebde4b8f7d5
8d0df6cad557736f703e791870a6790d4b3f03f652c9cb48a5a188f5601e72ba5bac9e60
bc60c8e4ed5901ab1992a42ef8b4953ec9cfebb64e0f2e5835922d25b552950ece47909a
73b07140011b1d6717b2c1e7d3f548386d806e3eea228a234e7ccb6926e0211bfaf6a985
5382e3b10b77b4ea784d840e2cd475c14dbe35de6bdc98ae936a8cc24a2ccc23ab2175f8
942076a25ae0805d0f0e5639e96a21ca00e5cd9e45b0846915707f708b05ec8ebe17d77b
9658c84fb5695c609dccc05d5b92960a7e220484e7cca0e361474111b67b3d5c125a74ae
d40a7c69412b26271e92822ee5b49e002a41dde76b48fee88365aedf08a6bd270e6a59bb
ff0d0d5cf5812a6d15ce1e9fa68e7c36a1c5e6ea82fad7c7f1021c8489c6b16f8fb53bc4
574127dfb67a0f5c415b81ba1b66b62bb13c016531ab70d0ab012f65848f0ffe0a0bc0e5
e9f8a581da3304c668b103f870553f1b3e9d4d704f1be601b5db4409ebf24d4a62a48428
48e04ce5dd998ad04d0f6f414af647e5ff71bf4bc4b98fb0c094627fecc0aedb1a5fdd14
ee45f1afa6816a379e9863c86e90184923482e228da24889599d43dd9ad867ef6561d266
e29fd830d6b0890fd2a0fd9c43716d5b6b0caee381d76f12458b96f884cf7ead42baded2
5921a234f89649626a712e1286e848f042f1b546c4a05417d4a96cf7caf25a0341cbe17d
33de94038d8bf4901070b4ec248bc2c789b61f3d85a8276ffe2e92bea5501daa8677395b
7fd027a8397deafd2b01208a0b4528cbed06bc3bc294355b3a15490918a461f1ce927688
b6d9b01fb36a71edba71a73b77872d3e592e548cd5a8de798f82c4ea785c7c9b7a56e359
1f01e3d1f2bba1ca47b3acbfe1f25051fbbe7c71a82de3ff96dde3a96153f3304313caab
d395517492c74c47d3128303bd970174f188e375480af8d5ae47b4ab055bbffcc837d8a5
053fc84bdb613f7ad9184e498a64495bd79a27f08deaeac7926127900f6082bd238ab807
fc7d99b0119dd7345e873937e1dc4888f88ce0b52854f2e21a040cf03a0a3c354a75e0fa
3509f3bb3dad4e5c6ab4097d23933ec49fd1be78db631dfa9e81668db768f658e0818f1d
0106103fd707edef9466077a070520a81e278e13dd6622cc7dfd58820e78718e6e7cde7c
75b8b77423d1b2aff35c3d004c202991b79789eca5c634bede8026ed0073d271f5bdca6f
73807069e867b91d25e3a5daf5c7fe4f0b40a4ff990e36be8784439806141e4bcdde2acf
d86f5559b97704318dcd5876491acc9d3da9df5b1550a1413cbfdb6fa20d0814e47536f8
94e265dd5aeaa44f7b3a84a36fe4e337d7806355110a61fd3d8bd9c1f50a83e93bd8d1bf
2eeb6085b3a965b10a70eafdcf3e87f09b084875bff64132164b44317bac1453b7f1f13d
6fa576642efec9eb10c1900942206403592ac673f7d3d59cfdf430c9e5e2ae4de64f37c5
daa08ac821a7377d1a3db8d4688d3b67e5ec80c5020ae6d8c80c6c3f4028bd3d5f6c604c
32e433d34ad4b4dbe968d8e009458cf85fcfbdcf9488322c3ffe496b974805ab6f886a6d
d1e0c7ae4ce16cd31a4ad9c0a249aaa4911a5078fa49d0e103a5784e4e87212e932b03eb
d57ac0db990d8d7e28b5922f1bc71a0ddf91f44e13fecc86a1bb6e3df846d9fc32384168
aa35131d2879037329b0bdc6c564db302bef40016faccfa541712386d00e13372763884e
910072e00115d9467e8f98a86225ea1379fbd326affae4a09e44beb64c6bb4bd526e834c
10f5ac2389d1a15ee615399bdb24744355e29687483c72ff1437dbbfef8be4885e66be91
68da77e2be81f9da536fae8d20235b6199c0159d6fc76af2ca56fa9790572f178993fdd1
68ea766b82408dc9c76684c4901c36ddee4b55cafe6e2b4ea41623e2d6cbe632d06ba086
887c8e0dbf708f7d7e0f8603a193ed8b47cc25375eb9bae8474d3e169e157724e10e1eeb
f9c0386d4e8edb2004db844b54a120368f0e1ad7d960b3da4f0ef80754b01ce0356b9572
c0169e790845dcc30f6ee83eac2d284d742fe924f8234a709d8013aa958d921f18f71f2f
d642197dfb0dbcb2c8fad33bb05e1e8351a9293b619f082fed848e649355002728ced68e
06520c03ac93c08ade0c9424d7a60489b116756125b64f53e591a2f5a4d76d0cbff39e43
679df7ffca4fb2ec9434af4f834a98cf41d304be719537afadbebe936c4ba6cdc1474af7
e7bc2f3eca4db29039577801468d658027d307f6f6d9879663d45064f17b78048888e680
40170ecb132a86fa2c0ad8d463404b9151dd99eeb9e4a7e4527bc11f8e2bd105e69f7dbd
4e37018df41e7b8fcd251edb14e7451498e6eecacef3ffea655804d5b54e3fcceb659981
25417befe0b4bd62823204a924dd7d84e01990a11f93a8ee561f9f5a795c063d3e50eea2
54a519a0b84e261d6395ddf35bb6c88251d90b8a7ebd2808d6890df6ccc5f5de2d9371fb
2266374a4d5531495d39f43548b76233ecadee3205f5bfcd58d643fa005bd27ed89f5971
be5d1ee279f28f5eca0219a0531f9fdf9aea5687ccd8efb859214408513695dac7f5e148
ef5521b28c31a6709ea9df4bf1548d77cc6868648c8173c78993670fc604553be688a864
27e7dd44e8647b85844e8ffafdebfcad006372c1d8ac6a3ae8540a6a9afd3b7b2ed7cda7
365471b5f0e36cfebf5cec855436b91fa3382685ac289700906d785ba66b7bc3be33624d
86c2d852407fcc9b87cff72816dd28b9a0ff37c0680127db9d8774315a4444db8f4c2eed
242f1eb8d55eec004133588f604814b82e97141faa61cec974db16fcda0218db8d6aa5fb
c9205aba1fcab6f2bafcd02d2f3ffd411a15d78a8c75480c3b328d51ce81f4b091bc9b36
c9d32c8a400ba131ee7312f6fdccd34a8cd497e83bc403ab903adc3f2d61c9a37d207127
0ad700bdfdbe43a81c379b451959837a1333d2eba6f4296c62e3ba8c148e32d58c50f699
8e28d7563f03bbb0b86e1f402417d89f01aee410d771c56a6fa73e53e4abca7f86a774a3
b85701c22fb6e72a0444baa303295f149e6d9a10f91886c27b0a2ed6795a8196678ec470
1f989e84a30f3e66edd65b6be5a1c1169b5051139c08c05817d13731911c2ebb81637692
b314cdeb186173e0c39f30c5bb28b3587d3f3c7d51be470c75743da0cfac45ad8ca0eb3e
b914d7e935ff379ae10b178989b07a095b29213025c44caffcb61373a88b3cd94ecc7c46
6819d3ad2ab8b4d70d63b309acd48e447345fe65d1b971b7f9dacf5dc877b078f6954a47
10e8f737a8567d9a6c6ac0505eacaafd0279725711a8085515b381053c1d64e58f8f6902
52de5ba31646020ba55d4d4aae7262f9f0a357f8829608c9b515bdada4dc9ff03c310432
0f3824088de8bf40a211bd2cc468999ef5e2b5d435367a42936e9ea8882dcda267c9a4ce
c00ac2b9e3abf0f12e10519d54dc40f445e0ecf9bcd762c2e0e1b287871ccafe669f08d8
fc31739a823b5fe591d831f3da4e25edbe01e82a4a1e12ce4563a3ccc64234f2a35ab62e
e61966171df66d1195a39637df72a6f51dfbfbb0c39e1e3011c487fea6e43843243937e7
e2c1e32a81b04dbbf33b51334f7864d389fec1800d8a0f21682cc6a41b939c37c9082b09
bd6acf1b77a22daf69588c3d6c263f9b0322c5c74190d1326e39e0e75f67798a2806225d
660c88b51842ef2123eb775fd61e846542089274d3ce513e53d2a73016c0432dfb6cc28a
d43f70998fdfec6c3f86ec10146c7e570e876d47adef390f2361ba4cd22f8d01b634da41
44482313647053ded54e440432253f0d36d7dfa242d34e817c058d1c8d550ec0a1ebd034
cd4155ce0802497a8f1a599ddd524ec543283ebd376b09bd434143aab74a53d788ce6fa7
8b9b840a7bc01a9ba43c5851d4edc377d89f3143d40e63ec053f9ca9b97d7a62ff2005b7
1940017f621e507f91e648d94ccb350fec729f9cb85bfc9a9b2cb2c9300ec763b95352ed
8d85124106b54152821c4709dc7eede398e008be3a4fbdaac2634a343d1a4083dee4169b
e8cd9a9bb8312384dd9f0a1074baae07e05b00dbcc53fb6096a3f780190875d0fbcb1da0
1b417c3b6261a2a41c3d22d6edda2a2f4b801911e76465ffc89014bebfeee9b3808fadc7
a8cb95f1d5cf0906dcee85d6d0d2b684649b386197bce26b7f20da249c17968c3535209f
67f3cb641a1e683c00e94f9173adace0ca9dfebe4a963a9557e2b3c4601c0d77c544e6d7
2a1bb01cbb38cf364532a64a0bc01f8732f1751f54e6438a09fe3b4ae8e13cec1602712d
92d3e06525c1a5b25c7ba642a3a36249bcc3f1f68cb6b2fd80ed45849dc5b1b53c30c451
a250f5445736935f32b5845a7c32c7ebac103e3ec53372fe75dd9d488d73986a0e6f4c78
d57a706775199f92d50302afdf54a2836f33371f6d177b9d25d5435e3c790c1d747df098
8787d115197a0974b18223d3fb88eed7f4454c6c59d7ce17589b1cd05ad2bf5d8a083721
8d9f9735f2aa0d1790770d345cf331746f158863c568636939ce1403edbd42b4d221e4f6
30524af61eada49bcf190d161a2eb8dbe84790037e0c7bfc0fc3cd8578ee2ecbce0a9e3a
03ca09984ad067821a3bfeeaadff1f16649113c143cafc8fe92644c057f07441dd93e2f8
b6c65345db17862abe17b1557a1a052b2fe4177a21cc36706991341401b94a651b74fecf
c94b9d2274054e41904456fd838433110eeff506605dbdd728bf7d4ef886646c0525e293
41ff6afc282123390601b286bbe3301107468eb39e9e1995642dce84b7e2970ce05606ed
58b3db747a5fcdf1c906a0545be17b0b2ccda9a343d0bb35e78b26d378095943b104db08
8a83d43bfa7862dc4da8a23925d5bf6e411b13e4f3047287e9ce41e9e0ebd4ba592569f8
71ed17f28180dacde4d8ff32e7372617ca0effe7e2ce816b1fd792b19ebe39cd1e8e104c
d68dc25826a076fa6649fcae0b757f6aa17cc39b8a603cdb687a48feb2f224c0d1d04d13
fba17232479b043110f2f9950bbc91af722d71fc27d363bc5979e2460f73d6cdea01306e
1acd9b71deedae7395eee4866126fe131d138eb606dc5f69fcb5f583f67df8c3cb96545e
e2dcf59830c286780bde3af6c486965a870622fbf4b9020cccc23829a71845fa8774a7dc
f173b5b7aa9ce804fa55de6774f18b25eff4b768e059684d09a22edd8899a89697bac058
03cf3e2f6629830e73e53f6d5a626b900c3f4aba64b601a6c4002db3a691b0f706d0664d
d19894b7580064a6babdfdfacc6d4e9e48e2dde4ad99df51f2bec123ed431e0474baca07
b7fb39a7bf368d083ff04a4c5af336207f7fc3f5cf774c09040c4ebf9c90fd9af4485ea0
eebc2dea70439ca984c3449c5ccb92aa629af77fb73344f94aa163db78e8ceab00e2f12b
7603cba757e8cb959f170478f0e2fcc993c15bc791471faed4dc3147dd821777b1420b57
1013972ce96bb728883e3d77b27c6c40a9ebc3bb813bab4b7b01f7385c05a1cd9cf2c14e
c90e6c81e49dff9ee01818238f19bd9a0da4c2e8fab0644afae71c1b6886cbf604bd5e19
8764af58278f4b60dd8bead6ea0bc95be70e59fd5e08a27abe75dada0bb88a05adde20fd
0be2156dd32c414233babc1dcbcf2da88806666a4a2d9ca38e9bafabed8dda3aec4d5d77
99190851154a488012ea57baa460d79d972b19b5fdbd546cf20e8f7fbc4bfc0825391211
64cfc2aa0e6f6f21ed9bd88a2eb654de7902bdaf8b4ce06a8b8f775e42ed408bba894ae3
7056c11ab95ba1f80273bcb21029cc7999da4e5f8c2cc6d3b9a9ec83e2cb64244349a347
7594fa070c382fd1bcafdfd6b1e6c5aeccad66d9249a1fc4becbb0615cf48ccb65708e1a
6d4ebe30850d23e631291c7955127498f7fda260d6606bfc519917918d457bff81a5ebd7
96f9f0ecd666d584a7c4be4e225f4b6e108c1a7d36b7ea9ad90c7da1fb97060b399fcc39
04d11b43780f3f871e6594dc4030ed16ea313749e4074e4240210b12f89f99177db3eeb7
ac139ec1dc2bb87691fb80dc6d3cd88dab6688524609b236de67c5f89cc866f529f0f61b
326a6b408573446cdd1a350768cdbfb9c86608c142a8d309111030bd5ad6514b2db9c0da
4a260738f9ec248689bfc15441b0a5b9f75a4c0b22b958dfea7c8fab90d52fb77225e9c4
70af99a9037cfafa8b49acf18e3cc72cd129cc8ab759878ea77bf69fb2b8d80273fb798a
fc13c4d75c49fc51c38f86b9333d643ea9a99c5d2ab2113aafacc6d2113b0d6c1f98ef90
3f01a9a4e5f7a451a915daa55a31c67c8fab67b8c5f64c736a6d7cf7aeb34a1c972f5ea2
0cbce76ca713e60fe76d3bfb82d173a847e15bda3959a44a5e6d68f58da5c8b9a8e9b6bb
e9af5d103bcf73cc57a35cea8c363231258ad30c5c83cc7ff1dad38f48d53a6c65253ece
35b7cd969f69397616b7adfaeb8610aff45a1d33f21aa64bd23f3b66eddbd1945eb1a3c0
b46d4e0e050cc37945fc97a85414faf45c8e8363867f90dd2c3848e7d99eeaa097c169c1
be136e7717e4c8b5265258cd8ffc1c790099b00ed75310300bc31ede1c9e184a97673fe6
adbfdcc4d53c4961264e5e52a868f41b3403e8a7b6c83c61780b90aed3168f5b4dcda5dd
5499660b79fc261f87a0ee57dd09b7e28f36dda4f12405efd82b0dcb105fdea73a5cf4bd
ecb9cc11ceb79142c8e9918652c28410809a26b0df1fd297e05491ec4e2ba415a9ac8b62
9d22e701a6275f4aa601256132496fbca2bec84a3e12558e13435dc0a047a372d7dae6e6
9e7cb67347b04ed871c5dec8cb19678c9a2cbd4ee92d2d565eb37b46981a05827b30ff90
c78fe2443fb814c1b4898399029f53ebab84d4b20921785642e2224806b24aa92207ad76
61ceae758203e7ef12439346282029b6dc8abda3b706bd7d7303b776d6117a57117600e8
762c91fb0f74d27dcae4aa7b4cbc10654ee95bd6a9165a82e84a4fdec4c49e6065a3809d
b78c6b0f7e0fac72761f9a1a1e7550db067bcfd09983325b934c7b6a51298edfff7e3e8a
70fd74bff27de9e2ed756083a901948987f3fc22656ad652993c63ab98f8dce705f952e9
12bd0fb9bdc8beb41a3e74afa940aaa906308a49cd85580efb198f2fc89d9379f7a3d45f
ddb7046b7e6316b5cdca29e561d8de815b9ab50233fd0528f6e9b50f5125e996480c93ee
9d99237c09b7daf53519862c3f71ce34f917b224aa7b30f0dd0c2adffe7ced37db8f1c48
6fd342bff04aa05cbf4653090a0a07f0a1d87148b13b664dd41835d4493c680cfda295bb
34a4eb2868ef3b5184cfb9b48bdfb900d00311f731548724c4650717c0957aba3785625a
91d4ad765f009fbcdadfe094e7b935cc7aae54d6e2a617052209a282d34af8b1d2dcab1f
3927a1af9c6b6618f3f173bf3dc84d07619acaa5135e39ea15ab0786e4e754e06d12ba83
c07b08119e5a45a1bf164dc3f8a941c0296750e997aae3c410d43f870afd45647b61122f
815705e2d54be06c6a442972285db234ab548f180b6fc658c5cbf7320ec78632cc1b887b
32aa610b2a8d1c4ab6295db489084d0802dc76e84649866248417e2845bc81bdafa43f8b
73732e451264a50e70314b16a01ca12a9b5bae37fee16b3703f38661326e06e35e5e0f68
d1c36efbf52b0dcd5ed0acccfe91add87b8b6c7d0c2c43ee80c96fb1d99f2282bbb1d742
3effa104b58895f0676ec84490c55285b6173b4dd800ed97deb255e19e0e76b7df9090b0
1a3a7bafafbcab63730d480316c05ada81e23613f788946de10085b09de6d02dd3dade76
55f87b2a433f45b0e264d295b11b76fea24d38dddc1124dc93f92f863cddcff336f790c2
3aa990386c1f36c2a25686e4095fba64124e9d951dfc7d668deff734944784dfa28e50f3
8876562b374dc739fce6611b129bbf5bbd4a7d31373ef9b6baab0e1627323e520aa8f2ee
77c86ba6cc0a1bcb3ff0ea92bde7f28684c3d34277f8fcd7d54bcb4e62daa00c5c83550a
4942241b98e5cccc8345614f42017b5e60fdb487edcb69b95b536c7ad656c3207bf5e67a
7814f2933dadbee9c10b99b2b8a282fc66619b6d3556567a1fd5832f9d1b796464a1d78c
5a76ef53d1c9f7619169894a74a94699b21fb060c9fd7e6d7d616c14ffc8c6023df4353d
76a306f02c980e4d45fd6191e0e36158287cae514e037dc8f559315b3f9edd18aef763fa
3a395b154face589d60068d09ce558e7cf4e4894fde844bca2fd7d247a7078e093d3512c
611ab901e7a9f058a3c8f4523b938f29bd3c6b97ded08b017d5352439d578b426b205699
4e49d81cda9795f599fa4a05bfd6b2b4ed54964ce4a7881fbceace0766daa43af3c8992e
1c9389c384345bc09fe3ddcefc556a3167776b1c6ed2135f57d51555391a8ccd234a5bca
9253aff8555e6bf562f94660bc0647c069954c9da839e38c4a7021defe9b58b36f4dc40b
14de8f33e5b58114721106fd1c8177654eabcc0b5b407ccb6213837caf99948012c49c44
6a21f8699a2a4ce8132deadda44794483eb7e650a470dcbddce52dbf0792baf82cdbd928
b3d3a862cbe86fbbb66bd0d06aac5301a82c5d67cb3fb93936c053ef905f21ef3f059d99
ddf7c6bf4e2154a54c121d9159ba1a9122668f62115e5daf7724319b30a3e41e32bbb08c
1a406d07cd8e29439703b2288c939dcc831f433f6e6adf50449a91095c1898a3d5ca5a46
2d31fbe713f184b491c508e3d62643d2b0e3380e1f008f1e84dc02632b31650bf17b7e93
4005c5f451705a0bc520438897f4c9ce99783e74cc71b9fd447801031130cf65355251c9
308a834d34f56325c7e241c59b26920d95514a093e4ba44c2f506f36ec8ab28c118d9595
6567858d92711b706d56fe66de981e3fe2853f6502cfbca028db917818182b4e09376fd7
21ed07bb8dcc07c39e6024d553861faaeeaa445c6c20b934f0f07ff3612290f7f2b9f005
3c34a2f8ac7352f9639e8fa2e5f8de2685478ff68a1a3f52c2c1069f5b1bc94bcfe34f0f
0b4cc981136e18ecd6420622eb348530efbf4da3a44580c6166c9ad462c88ea936a4bce5
bf20a029ff061d6104484b89e487a07d078d156b31b01db9080f184e9065893eb606a3a0
63801f4ad7517282ed017567a5de38b815a8785bb2bd5e0005155c5ab47c566efe50bcbe
58306deadba97b75e78cc27a2d39abef84e7ce37f7b3f7bae1c1ffe2223bb2713a77280c
f4800bffca92df405c22f80b48158d8d01da950f1fe442c7ef57a3114ac6bb726bfee747
f12afa576db3b08bf6fae017d70384055fe8b9931cb032fee6c58cb6bb1231c039cbb1f5
ff495105423560a814e508650c9817c3b11d793eac2e1aeec5920586ec60b57d18004dd7
68401f0c4a14241987f172f68f026876c3f6c97b6ed6aab1fb506cd82a1b196a61402851
330508bc3ad7aa0f365d936ded2c6c62e6511a204df720f01559bfe28c254b5b84ade0a5
40b679b66c27e9bc6eace3e3d22c8866d4d6b5d454cd148b10872caef5f12359d92270fb
b2d655fb89db1f7c539b67becd3dfb9faa3b2239d15175a2f05d5061c1ced23989d84371
398d1a89cd782d159cef6e327d7974ed8afb839ef8f4dc12927b9b773c2d488b851d3fd9
a8c8a95cf131128e8e6e2c1a2269e5f1bebc529cc5d5e31adafb56f521d99e7341f129fa
2554a8cd7b49ccfc93dec8b20394951d4e8ea076f6aed2b43c9e9901737135362dedfaf2
f6c8312b0f038735914fed3390b4368c04c94053f79b708d297aad5f37697b62bac7644b
f7fe9694cac0d6465522e60ff052f32e9979290455bd8ae41c54fb86ab6d36e04f30ec5b
aca6571d52a9c290a415d2297a7f84306634509b31af5e15cc764135d37f580e462d49e0
6c907166073b2c5da077d855fa6ac3dd1e7a9cabedca1ef9e45b0f84dad91b6964b57f2d
a2a4a6d4162e212e28bafa7ce18ed3a20bf92765b8aa36b0ee23c9d9c162e0dc5ec850c3
83493baecb3d1a3aeb4c2a6d11b50b9db9832d8bb63cada0bc77ec412104ee7fcf666b07
691fa477e3eb4a79e98c0c9001184628adb89ad107a72173d00f21c3eb6b0315b9820145
a4e967810155f3286bfae462bfc317f868cd1f17ea9bf55e3543525ccb957734282cedd0
6a9d669eaf2668090f7bbb3370bf809d366d30571bd142df0687aa3ad2d6d55d81e8de2a
d2df889f255c57a2f312aa97db78a6c0e8c644db62a3bcd01432882bf71c578d5760bf5b
29ad37893e827a32de0193addf9426be66d2d9074f3ef494320642d3b7d038298ebebfe6
e5727042f6ad551a26427b8c2ffc8027bfd051fab7d44421926a1bda83b917371fb9a099
381957bf04d746cccbd5e57308e05d89908f6078779161e8e50924414a1e5d85effb9ce9
af8d844224a82ac860587b956e07b10f83c07d42097e15e57cc7feec07d5aa13a95435b5
3a295efcf5590e778fd78ecfa122e7dc810441721301115945725d79393f9bcc6ee21fdf
1f18d06a36182fa6bd04202e37e922ea1a4582fb507195867e58a063e91d332092fcaa0a
b83da0120959ebb9c5715726b73bdace41c065532909885bd8637562c82b9e85b3cec579
3d92fa7b2b4b9d433d5012e9a4d73e4683c63a15e5819d5d0abd9fcad630b15ae4cdc732
d6f0efbadb0950582ade218fd54ce1fac38dc37773ebbf174a8f14b9404394bec9c344c7
c524f3d8e7f0e3ed53f3a50cf482e5f27449ae6370905f9a049ce3fb808bee3c2ab94ac1
e8641376dd50872c7e50b9dcf088dbb2139959ccebec3e2bc1cb3d19d70a8e7c6b7e2996
1752bf7f99cc1027f0dbee1b483e51ddbf032c2fdd964206ebda168eab3b01ca6bf9e32d
5519043b632d04ac8684f59fb8d370f1243d62200dd958921d97ffe701a43d57de61c202
b6bc40f4784fad11adc9bb30b9cbc77917eade7c29054b51e0fe218f985de6117c860e86
7abbdb019e7227302f15251215f3e56bef3730c8d940bba2e7abb4f947a852cdb926bd0e
c36045789b23f10f3bbd633e40796d89698b27aef40c08215a1f8fcd514cce27d6095767
6bcc8ae66b12b4fc5870dd2a98f781a3948c88ee292a3ab41c320086e7a292325d3d8e38
a61b6e2819c506dcaf66312846a8fed3e5f8c0177d94435a8598eea9c9870f33d44b003a
e79247a771abcb477611e2672a300462d32742b883f858f04307c98fee1e946b6d13b713
206fe22d8f06d7f7a293acd1c243102f8edccbfc9d5065046d835145df326f9eb2e0314b
f696e8db2ec71db34e53daad17bc1e3016464b1952394c560aa8ea7752f9a2756eba67bc
509d4209ebabbffbaf0033eec737f324644d41b25e0603809dd907f75f663285843e0813
3075cde539016bf9628d1a4144cad625a8f0167b0310ff1f4c1e227d5174b23c911b5115
f4808c6ee6783de301ef70163e6a2b595a9ede57b458a3744a17595f5860ddd75e3c3cc1
911737ed22b4ebac1dc5828f0ee6c56258f11b29baff02176f53a01592b93f6fa81a8afd
c735429a4f44d291666d5648b782afe7b52534d7fab13837f522f6174f30e413f890f347
2386f5616f2057ecb07b3f9bb197967bdac047f153601e07e52e3d83fdfd120f084564f3
b0b5684f912d7b90d5d2b8e16c1541fcf2810b12902225859d5b7885e696102a6d98f119
4db7d62661649f240b9ed7d2049c350df238fc9b835a5987e1c39fd3cc70ca8bbef0eeb8
f2988941c8259512ba662491a675be678b00a8f2210318b367ba54e9bc6c7b86ce190e4d
5a956e729bcf66b8f896d19e821e50474e548a467b933a21fce3b62ae7a63299ce2e8e09
bb4a78e9efdd78822b4dee55fb1b3f6623a5092e74fa406a6e36069b613b7608affc6a7b
bb6b5bf9f93b34cbc420e92d6aa4e22d1d843406e6805caf7616ae84aff03989a39d8ee8
a45c60a5877944f353a5a689603d8d6f385ff0ed9a7ade7dd6c90e4ab8b0a13a84e27a35
2fa1a164702631824801342945a80c4514d5f6ddddee320c19cbc53b588c4b144343ff85
abc8acc019bc2dce0809a31d7c91cbcd889d9d9c9de2d9c8ea8476ce68daab2e9f781679
2112fbe1af23efac66c3502fdb80b53a21486d5b8374a3143a2cf321f42a9735211a8c2b
4b773365f381dc4dafff1ac2bd8644ed6c033b9b8e882b9a37f667ae74c09965577ba908
4f9385bed4a17a01123eaf4968e879d73ebadb8e2b54810922571e248fd1e23e3887bf43
a47019d2c62b3224dd7227e62b9188648763332f8a7ab866fdb13697a584609fa30bf432
c653153217bc0649374035d5b1081b4b29c42a6acf6c0b7cb1a66992096b4039d1b992a8
b5cbddba593eba800c069eb35eef150267319975e893b2fbcc459b5d88c79a73d0880782
00472cd5cc14c6d898288986fead1568ed83ad66d8764221d60f3bd4f48d3aa08a690a86
0d0ecfd3543ea719e007b6053590bc86e347849f1aea6b40ef73e9728bb1a13fa90661e3
e43a6ee966de8fc4b8dbcb75efbbb36a7f3df91e5608dc8c764d27f07f36eb38f658162e
673110ad689d271ee78fa66d32bde25f00c1be89a829a01ba81860c8fdd0873c1387229c
1169dde825d9e47d5320e424a692d7002b1f8ecd442dd5f3b355bf55c41d2418c3985ff5
ebcd1ca90e63c80aece7bfec311ec2b29a7c638634c0c022c3941f0b1db048f15676173a
1c6046674ad098c695c3e010af30c590b381d13f58ee0760d0a05730365bf08305b3b17c
79f928cb8edea3b2d2f99366ee5184f94cf0ba73ba7531a2d42e5da5e1098bd40a7272cd
fb8b75ec2cb3cc79f89007fffae028ac1eafaaef09a3006018e8acd9f9f33c80ff2c773b
8bcdfbcb9869a631b9f761dcc99734d9b042b6cf9246ce917350133a309e50e8f503f2e1
a395575baaac58019854af5bbe75ee560785d9aaa00f04ba9551478eb12ef46ebab2e3c9
71231ec430ccffbf1a1f772abf4d6fadfd40bd9f96343ad0a86b61a836fcb144f197ca03
0b3f579ab1dfaeb1c481e4b8be9a3785b5be9caf0aa5fe1ce3edf2202ef75659815fd6f2
4a37e423cb7ce5863c9b0382a0c7aa8bb9cd530e521da4bd024fdf701d26e99dd9c6d6bb
5a80f2047e36faa11571304e70c163fb57f835e5cb9fc1fdee19237b23431337a996b016
8246548fe042fe071775c3e8dc375abeedf62d6c605c435cc158ddfbd825f21d8d77cd21
79da39197b3b4302ba4e1360fd87b1c8ea533305713724231bd46e17dd8fc839282dfa29
e0bda042770b790363b82bb2a70e2b4f7a0c0cb185f767ba7dd40d73fac1020475351b88
513a94beb8a58178b81b1b66a0623f692486fb6ed834aa7a5ce0a11771ac375e83a15398
03e4b366106452e746020c76457bc3d9531298e24ecac0c71b99c58112c7efc633cb3ef1
b9596e1ef4ea26853191168dc075e9a1d1eac22f485cf6833fa97edd3c9676ef8048d3da
6f21767e56acebb71cafa6ec42c97305efdae384bc23093f41bf6366c5d6a03543d27962
230f5b09ee120a18347edff33460b2ad82876ac82b7a0e22edd6ec33fcdfe22a7ef0899b
ce08503024272a6846a1a13bc1697aa570df89eef760b45647fb14e40b864ca2c22ffcfd
eccc88a53dfa12fd69ee49bb19c5df5d6e7d63ba1847536d706e4f63875e5f4c255b3966
bcb4804d13cf180279abee2bd0d0ee5ceb8618582585183954d8c5e093090ce3d951ab15
9ec1103e6b4f3dbe1282a7aa75d42a7d1a55aa7865fb947cccc3c18af1a33f0b8a30aacf
3f3e789c670cc1b1a4993e9ec410d11f1beef6bfac78f0c1429818227c2a10194d062587
e825e9e216b084cd258e95d422a41881f824116589021f7a6546e08a966e3de28126263e
60b5e344b3d063f63298587957abbf5b6b1a97ae38b541b3fe760c314483d5a0d9f63f4c
dc118334057c160a053e258c77984a354671292cfd3b7da41b6f5efd9bd38c336cc3e0a3
52baf11e972cd8043a66f3ea0c67d9d3e888c7b15007fd70a1ab32fd5d4f1cbb9d50e948
7e497f43e006604a09941fd1754aa2d5a4419b4b359d78c47c2af6619ebe16faf9df3be4
572c4f084d33089c6b2e824d6e9bf1e5399bd5a2e7784947cd5ee5ae2b78b83a31b27c66
222933944364ca6d24978176fb3548a95bd09f0d3852df53f3d15e087d2163191efe300a
0e4389870f4a69038ffaa22f7557015173690eb4513c867847299d659175d5c2e6f0fb11
dc9ba528366cc21f7bef31c06a72a7ac25b3c764e82b608d35b2addd396804b1875536dc
7fdc7fd9cd6cad8bd9b9f77cbb2cecd33d8c87d1fd4abeea4a5826a076864b6a3ec633b7
359d926fca8b062a81fdad703edf18c61818f83db44eab08e10f888118cd447d12c1b7c6
a201a167a3fe9669a838b3407ce1a57e64f1237d3cbee0a0d8adee3ea0c1e1d959b3385a
2e34e132fad766f038418f6a763ad65ba71082f36ffaa7e546f0a61f65bb8c393b93b823
7c88ad7ebe89ce985ec9f585fa9d56bf5ec56df1205409193d17a1a439180cacdff2f12e
996277f845b6ab39a3f2b1aa00c3b33627603ccf5d25593fffb7aca4d95ffa29b0fb654d
4b9bd9c10e2c77dfc97c75de8d07a72c7aa4a77fb580b853a35ba34c9e9fd7239942aa1f
3b6a12c34dbd1bc3be2ca07c8a7dc26a9fee1688df208acc41ddec6576e657639ae21d45
4707f37a28224b73daab5812b13e9ebb83f84b2124a4471590fa921cc22af601314c7396
73f5c5a99c5f1abedcf12961f340c9ebf7752f5baa5b623950b24082ce2ea7427a2c429d
dffa32d7ff002f906939391b2fc01ec76ed867ade9970f2df1380b43891b55d928da0602
7d71438fd1bcd02decd63e5e676fcccd6e2ed1742af627e9c17ac1bc0f427807a2cd4d0b
014fe8b2d6a6dd840c153280c9102d9050408b312637be0b79c650c2f4b08678535613ce
8a2e793aecdc21a8f4e646127ba06987730312a50e35de28bb9edd1b98b9088b7c74b4c4
4194ec73fe8ed2354499ca63681abb19bf1bba1f100941915568577eda0805e24cd8d6de
d93354d32f3220387044e1baf2ed5d57bd8e2b4bfece148f4f349cf0077fe441b05fd287
f3a15f02bb6a43bbf07da0014dd3388cbffb48db27c3717373800399b740a4bc12a9e64b
a4526a9b4723367cd5b7758a726b456b7a96e0d3ca904cb0830d4d1180c726018eaac62d
e603f3127165ff726e2643513e44b0a90d457b2d84c51de01e8c4e6858e27f2ae1e5f238
5f4cbd2265314945b29c2fc3a7952af16ff3f53d32f4a8009ec9ef34a9f86845507cc78b
9d0a7acafcf63bbe738dfb6d9d906967dd48dc2e869e6267054dfbc51a19e90b49720e1f
05abeec5b29e29802d8a6a1d5f6b0d8d498012647bb56cd279bb1f56ce4e3cb11c7704d8
ebc718e6d3ffcbe34d13d7f9d4208fdff59f3595a893d9858ddd69fca759dfea45c18913
0d750e2ebbab850fbb7d8704bd998518792e7e03431c1d82d35806e4cb6df4cda0f08dc4
6bfb7382da2689bcd2090f2d137fa1a159115d6309263773b7b0d0db2a776deb27905c8a
7d7c2a19e3420ef85c441fc8fd24f280190048ce5c857e72996916719eae9b90e00df961
f309e96e4b13bc062e4656b075fa9a71aa3a2494c557e1d83faa7b14bafd2880a6614415
96f436df0818b37dbe09c677cc264aec794beb9af39f61a549ac2f4ef5c6e4a58fa8d2a1
0e89360875c30fe59fcab01a21b9e9d168b15aafef1f07153618eb9898adc183749a6a21
6cdbc649e32071b799992f9fdd699a4c486db382155125637d85cfe3a3d36076c99f9c46
df2a2eaafd8bdca050c52d18a626e3abf7f048e504bd72208036f661112c3e8b39945f82
04983ec53f915cb291e3ca371f96a92eab9eb8992a28bb33ce5f391cf343ce112a429f7b
149b38a0e6351652ec906728d4fe270721e4d6b17227aa7c7e28a622324f1ca53a1a029b
e61eb005263bb42d68abda6e36c1365f21a9f2f66d0ad218b6046890b977164852434af3
10f8d15535bd7b144772910836cbce235e9d837581b987f99ee8f93cf7a648e9fde7b1af
669074821191241866ef0dede206240c35edd1b61b6ac83f4c9cedc830068e847925e47a
6e795f51688326fa97f5a0dc8ce1eb5f46779aa826ea44685054ae2f920884c2fa26ce63
02e51560542afff99bdfe6d932bdc7cb5658e8fb1d8ba5090da465e82fc60670d0c39d78
fc540a654e22a5d55f1ec43f8849eeb675b4077e0949792a1e2a5f1f08a4f8a01f2c12f5
feaa550bd5acdd2687762823a0ef22b030c4fba61725c758accfa986d1cac2f1e1755038
5bf51be83b8d9a9994963d00d82be8f41ea7968d73d29e06973e58db8268b4a96438e264
3f26e8cf141371b3b3911bd660d48842ec0885c2ead3054d0484e5f551f3f66010285a07
c274e65fb010e03bec0c8f3be260315a5d9b4a171bb8b5fcfbc5d83ff7152510e696a1aa
b3c23c0da29cf64d982adf16df732ef64d0ab164e6e78bbd3ade86e8a69de933e1e656a1
0b9f05492ee93eb9b18a87ca7688a2a9b584462af00b3439e4a2f36a0c4d568c144f0462
f434bb81604647de714b035e9c428cc07bcdcdf0722bcbec145fd019b588c29eb11660ae
f530e3f561ad4b81519c3b4552fb0574b2e72435d8d75f503e024cf2cfea3f5f2e829e2f
cd91421b359fffca0c437a73917afaa5e33dcbfdb287c343f8024c28c7f941fc8165afcb
4d2a6e3e0ef1815927b08e60cca0d79b9b1dea7288a2a4ec212cd084eb14be060158d03e
2867425cf455b762213b264172a5fe55f96689f6667dc0ceb27d977e49757cf2615d2f22
73813030db90704e0cb82d26574e8167736bc8cc04543528678ae7dcf484d9317ee2fca0
4295d58ab85abca29900e90d76643ac8e84850e528a40589bc3edacaf6a6a1fad1edc610
cfc4ff1a3781cf2aee0c510c17667ae9278d0622069b23605179113aa75162a1f03e5dcb
28dda40f476b25b3c891768b42c77da5cbde1011a28121bc9f8d69c08e218d01db230e4a
4ca273ecba3b015f6f8a5699cefe0c6fd1d38b66cdad14c2dcd07e26b31c7bb5558ee6ca
59e8e157d0b375f6a64506adc115f04dace0a7ae49bda426119f573ce6163c8aa2ec1d6a
da4a2aa5a5fd8b52b33c1d254239fa1ed13614c2d94f26fc3e3c18f86041f9683e788bfe
d54a085c7610448e2aa49edab92082f2d2f2d55044527fa23693cbb4cb0fe35b6e788b07
5795844a5ee8c01c812b3d5689f5e6c463eb59726e8cb8eb4db6c7449f64c266188d3a52
8ba50281d910a19960528b7f2b2a609791a5c356e6fc371baac2d878ea4015982050115b
722d3931eb2020275fe38068577f1653bf02c660a7bcabd715aecd189fb9d60c1400b2fe
be0c7f407b7084c94bf80e98e95ce5cc8357a8f09679ea5b5135a6451e6ce6b51a21a6c0
c86945902c7f9c40a60893aacf4911f06ef4a93c148423fc481d6ced516534d7eeec962c
82eb85103405a28535a66e535fa59bc182da5ccd48f2af007aa8ebb78356a2012715d697
0d9913135ae4d7b9f41cf6dc4b537bd2af93e8700505b8b135296ef677f84e73816a1455
8e652cbe2c23f6e797252e1cb49d9fedaf5e98734ba80aebc6626fefa927e32e23b684c9
35cba78441d0ba42ee902714bcf087fff10d9d35fb52853f90aa5b504d3ad3a6aab8aa3a
1a6c5eeaedc0221ec6829f22b9c6e977c42ed53694d80f3f5b3ca8df2d87a80e3de0bfa8
a3d6c220643889c4f09ec50d3de2c20d0cd88ed9c8d7286ad92f6c377e44855270523ccf
20a1b7e9b14401f3174d146c36ae3ee37d1c2051f579905f71b28b7400432290cd491d95
206323f6e144f2546122c131032ebed29a4724773ade159038b56f7ab43ae4dec155c29d
7770a0aab1e333ef7607b3041fffb3647687208b5f9ae6d2c24aeb5c91d00efb005abb70
b953af33dbb5db369f403178f74459adfbf4978b6b737ddffe18931541897d26cb6492ae
813d7fa7c3b27468f3ae727f30173fd38f8402ba8589114a46ba7e64b8cb981daa304345
610961bd7c8af3628ac5cb8356bccc4fd2d38e7712b4b0959f94b637ec59eaa5a841bdcc
a3f806bdf8e6f8ca9278e61939ba0dbb97df5edd4e69ebba535a0b5903234d28319df345
56ad14afbc4160d7ec183d78018966e678d5062e32b3a0b484deb4791af7fd9371b80697
65468888a23e2687cbe7a7bb76d68fa07eb8cae5a8813c9a4f6282169740972a40e7bf17
880d731d895fd92415245d39f7cab143a270c5dde6601454b8b4570aeebc9bf4954b1426
00d663006f0dc48a9af303a16867ae8a28997d1362f6fab2256cd9a9c00a32f4d03bd8fb
733362dff0888851bdfda14dd484799db2554d62e87cc37fbdca054c2756e7e4d0de9615
7bab1af6ef9312cd425b050ebffb858097fcec69131e9188993a86901f95564e12b22a26
ac1e9f90d31359487551df60d90efd9129fb7603396d3f435b76c646e429adbe6b53848f
2d368f2c92dcc7c6cd77bc60ab2fb0c35f6e5ba6b7903264505ec3079646c50ba36e7f47
8486605ce5f990ecef669828efc2887d6d86bde830d4f43f8b7e7734f0862dab5c86dacb
02f246a23cf9193fc9a77083cb84a31cf6beaad76e690600fe51970ac7b2ef6ae3ce12bf
38e3abd5a31118ef4d9af64ba051458448b194458cb6d14484f14d65e5899401b2c320b0
27c099dc9002040bcea61c86936afa709ece272058bf5dbd2ff8dc575ed2dd9c703b196b
07ed89f3d686f6f4204713ad996eba4af07f469e24cf2770eac7dd38688766ddb45f29f3
65f0c494c877ca2b468740d2a098b4dee62dbf89efd972a764fad0551d0c8e68e41f687c
2832761a06b55150b75d9538910a5161ebe015222f35904abf51c29c60e1633476381c5e
00786d
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark

%%BeginResource: Category QRCODE 0.0 2015112400 31191 34576
%%BeginData:          6 ASCII Lines
currentglobal
true setglobal
/Generic /Category findresource dup length 1 add dict copy dup
/InstanceType /setpacking where {pop /packedarraytype} {/arraytype} ifelse put
/QRCODE exch /Category defineresource pop
setglobal
%%EndData
%%EndResource
% --END RESOURCE preamble--
% --BEGIN RESOURCE raiseerror--
% --REQUIRES preamble--
%%BeginResource: QRCODE raiseerror 0.0 2015112400 44890 44440
%%BeginData:         13 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
begin
/raiseerror {
$error exch /errorinfo exch put
$error exch /errorname exch put
$error /command null put
$error /newerror true put
handleerror quit
} bind def
/raiseerror dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END RESOURCE raiseerror--
% --BEGIN RENDERER renlinear--
% --REQUIRES preamble raiseerror--
%%BeginResource: QRCODE renlinear 0.0 2015112400 76908 76502
%%BeginData:        237 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
begin
/renlinear {
20 dict begin          % Confine variables to local scope
/args exch def   % We are given some arguments
% Default options
/sbs [] def
/bhs [] def
/bbs [] def
/txt [] def
/barcolor (unset) def
/includetext false def
/textcolor (unset) def
/textxalign (unset) def
/textyalign (unset) def
/textfont (Courier) def
/textsize 8 def
/textxoffset 0 def
/textyoffset 0 def
/textgaps 0 def
/alttext () def
/bordercolor (unset) def
/backgroundcolor (unset) def
/inkspread 0.15 def
/width 0 def
/barratio 1 def
/spaceratio 1 def
/showborder false def
/borderleft 10 def
/borderright 10 def
/bordertop 1 def
/borderbottom 1 def
/borderwidth 0.5 def
/guardwhitespace false def
/guardleftpos 0 def
/guardleftypos 0 def
/guardrightpos 0 def
/guardrightypos 0 def
/guardwidth 6 def
/guardheight 7 def

% Apply the renderer options and the user options
args {def} forall
opt {def} forall
/barcolor barcolor cvlit def
/textcolor textcolor cvlit def
/textxalign textxalign cvlit def
/textyalign textyalign cvlit def
/textfont textfont cvlit def
/textsize textsize cvr def
/textxoffset textxoffset cvr def
/textyoffset textyoffset cvr def
/textgaps textgaps cvr def
/alttext alttext cvlit def
/bordercolor bordercolor cvlit def
/backgroundcolor backgroundcolor cvlit def
/inkspread inkspread cvr def
/width width cvr def
/barratio barratio cvr def
/spaceratio spaceratio cvr def
/borderleft borderleft cvr def
/borderright borderright cvr def
/bordertop bordertop cvr def
/borderbottom borderbottom cvr def
/borderwidth borderwidth cvr def
/guardleftpos guardleftpos cvr def
/guardleftypos guardleftypos cvr def
/guardrightpos guardrightpos cvr def
/guardrightypos guardrightypos cvr def
/guardwidth guardwidth cvr def
/guardheight guardheight cvr def
% Create bar elements and put them into the bars array
/bars sbs length 1 add 2 idiv array def
/x 0.00 def /maxh 0 def
0 1 sbs length 1 add 2 idiv 2 mul 2 sub {
/i exch def
i 2 mod 0 eq {           % i is even
/d sbs i get barratio mul barratio sub 1 add def  % d=digit*r-r+1
sbs i get 0 ne {
/h bhs i 2 idiv get 72 mul def  % Height from bhs
/c d 2 div x add def            % Centre of the bar = x + d/2
/y bbs i 2 idiv get 72 mul def  % Baseline from bbs
/w d inkspread sub def          % bar width = digit - inkspread
bars i 2 idiv [h c y w] put     % Add the bar entry
h y add maxh gt {/maxh h y add def} if
} {
bars i 2 idiv -1 put            % Dummy entry
} ifelse
} {
/d sbs i get spaceratio mul spaceratio sub 1 add def  % d=digit*r-r+1
} ifelse
/x x d add def  % x+=d
} for

gsave

currentpoint translate

% Force symbol to given width
width 0 ne {
width 72 mul x div 1 scale
} if

% Set RGB or CMYK color depending on length of given hex string
/setanycolor {
/anycolor exch def
anycolor length 6 eq {
(<      >) 8 string copy dup 1 anycolor putinterval cvx exec {255 div} forall setrgbcolor
} if
anycolor length 8 eq {
(<        >) 10 string copy dup 1 anycolor putinterval cvx exec {255 div} forall setcmykcolor
} if
} bind def
% Display the border and background
newpath
borderleft neg borderbottom neg moveto
x borderleft add borderright add 0 rlineto
0 maxh borderbottom add bordertop add rlineto
x borderleft add borderright add neg 0 rlineto
0 maxh borderbottom add bordertop add neg rlineto
closepath
backgroundcolor (unset) ne { gsave backgroundcolor setanycolor fill grestore } if
showborder {
gsave
bordercolor (unset) ne { bordercolor setanycolor } if
borderwidth setlinewidth stroke
grestore
} if

% Display the bars for elements in the bars array
gsave
0 setlinecap
barcolor (unset) ne { barcolor setanycolor } if
bars {
dup -1 ne {
aload pop newpath setlinewidth moveto 0 exch rlineto stroke
} {
pop
} ifelse
} forall
grestore

% Display the text for elements in the text array
textcolor (unset) ne { textcolor setanycolor } if
includetext {
textxalign (unset) eq textyalign (unset) eq and alttext () eq and {
/s 0 def /fn () def
txt {
{} forall
2 copy s ne exch fn ne or {
2 copy /s exch def /fn exch def
exch findfont exch scalefont setfont
} {
pop pop
} ifelse
moveto show
} forall
} {
textfont findfont textsize scalefont setfont
alttext () eq {
/txt [ txt { 0 get {} forall } forall ] def
/tstr txt length string def
0 1 txt length 1 sub { dup txt exch get tstr 3 1 roll put } for
} {
/tstr alttext def
} ifelse

% Find true ascent of font
tstr length 0 eq {
0
} {
gsave
newpath 0 0 moveto (0) false charpath pathbbox
4 1 roll pop pop pop
grestore
currentfont /PaintType known {currentfont /PaintType get 2 eq} {false} ifelse
currentfont /StrokeWidth known and {
currentfont /StrokeWidth get 2 div 0 exch
currentfont /FontMatrix get dtransform
dup mul exch dup mul add sqrt
add
} if
} ifelse
/textascent exch def
/textwidth tstr stringwidth pop tstr length 1 sub textgaps mul add def

/textxpos textxoffset x textwidth sub 2 div add def
textxalign (left) eq { /textxpos textxoffset def } if
textxalign (right) eq { /textxpos x textxoffset sub textwidth sub def } if
textxalign (offleft) eq { /textxpos textwidth textxoffset add neg def } if
textxalign (offright) eq { /textxpos x textxoffset add def } if
textxalign (justify) eq textwidth x lt and {
/textxpos 0 def
/textgaps x textwidth sub tstr length 1 sub div def
} if
/textypos textyoffset textascent add 1 add neg def
textyalign (above) eq { /textypos textyoffset maxh add 1 add def } if
textyalign (center) eq { /textypos textyoffset maxh textascent sub 2 div add def } if
textxpos textypos moveto textgaps 0 tstr ashow
} ifelse
} if

% Display the guard elements
guardwhitespace {
0.75 setlinewidth
guardleftpos 0 ne {
newpath
guardleftpos neg guardwidth add guardleftypos guardwidth 2 div add moveto
guardwidth neg guardheight -2 div rlineto
guardwidth guardheight -2 div rlineto
stroke
} if
guardrightpos 0 ne {
newpath
guardrightpos x add guardwidth sub guardrightypos guardheight 2 div add moveto
guardwidth guardheight -2 div rlineto
guardwidth neg guardheight -2 div rlineto
stroke
} if
} if
grestore
end
} bind def
/renlinear dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END RENDERER renlinear--
% --BEGIN RENDERER renmatrix--
% --REQUIRES preamble raiseerror--
%%BeginResource: QRCODE renmatrix 0.0 2015112400 54074 54076
%%BeginData:         66 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
begin
/renmatrix {
20 dict begin
/args exch def
% Default options
/width 1 def
/height 1 def
/barcolor (unset) def
/backgroundcolor (unset) def

% Apply the renderer options and the user options
args {def} forall
opt {def} forall

/width width cvr def
/height height cvr def
/barcolor barcolor cvlit def
/backgroundcolor backgroundcolor cvlit def

% Set RGB or CMYK color depending on length of given hex string
/setanycolor {
/anycolor exch def
anycolor length 6 eq {
(<      >) 8 string copy dup 1 anycolor putinterval cvx exec {255 div} forall setrgbcolor
} if
anycolor length 8 eq {
(<        >) 10 string copy dup 1 anycolor putinterval cvx exec {255 div} forall setcmykcolor
} if
} bind def

% Draw the image
gsave
currentpoint translate
width pixx div 72 mul height pixy div 72 mul scale
0 0 moveto pixx 0 lineto pixx pixy lineto 0 pixy lineto closepath
backgroundcolor (unset) ne { gsave backgroundcolor setanycolor fill grestore } if
barcolor (unset) ne { barcolor setanycolor } if
/xyget {pixx mul add get} bind def
newpath
0 1 pixs length 1 sub {
dup pixx mod /x exch def
pixx idiv /y exch def
pixs x y xyget 1 eq {
x pixy y sub 1 sub moveto
0 1 rlineto
1 0 rlineto
0 -1 rlineto
-1 0 rlineto
closepath
} if
} for
fill
grestore
end
} bind def
/renmatrix dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END RENDERER renmatrix--
% --BEGIN RENDERER renmaximatrix--
% --REQUIRES preamble raiseerror--
%%BeginResource: QRCODE renmaximatrix 0.0 2015112400 55426 55272
%%BeginData:         79 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
begin
/renmaximatrix {
20 dict begin
/args exch def   % We are given some arguments
% Default options
/barcolor (unset) def
/backgroundcolor (unset) def

% Apply the renderer options and the user options
args {def} forall
opt {def} forall

/barcolor barcolor cvlit def
/backgroundcolor backgroundcolor cvlit def

% Set RGB or CMYK color depending on length of given hex string
/setanycolor {
/anycolor exch def
anycolor length 6 eq {
(<      >) 8 string copy dup 1 anycolor putinterval cvx exec {255 div} forall setrgbcolor
} if
anycolor length 8 eq {
(<        >) 10 string copy dup 1 anycolor putinterval cvx exec {255 div} forall setcmykcolor
} if
} bind def
gsave

currentpoint translate

2.4945 dup scale  % from 1pt to 1.88mm
0 0 moveto 30 0 lineto 30 29 lineto 0 29 lineto closepath
backgroundcolor (unset) ne { gsave backgroundcolor setanycolor fill grestore } if
barcolor (unset) ne { barcolor setanycolor } if
0.5 0.5774 translate
newpath
pixs {
dup
/x exch 30 mod def
/y exch 30 idiv def
y 2 mod 0 eq {x} {x 0.5 add} ifelse
32 y sub 0.8661 mul
moveto
0     0.5774 rmoveto
-0.5 -0.2887 rlineto
0    -0.5774 rlineto
0.5  -0.2887 rlineto
0.5   0.2887 rlineto
0     0.5774 rlineto
-0.5  0.2887 rlineto
closepath
} forall
fill
% Plot the locator symbol
newpath 14 13.8576 0.5774 0 360 arc closepath
14 13.8576 1.3359 360 0 arcn closepath fill
newpath 14 13.8576 2.1058 0 360 arc closepath
14 13.8576 2.8644 360 0 arcn closepath fill
newpath 14 13.8576 3.6229 0 360 arc closepath
14 13.8576 4.3814 360 0 arcn closepath fill
grestore
end

} bind def
/renmaximatrix dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END RENDERER renmaximatrix--
% --BEGIN ENCODER ean5--
% --REQUIRES preamble raiseerror renlinear--
% --DESC: EAN-5 (5 digit addon)
% --EXAM: 90200
% --EXOP: includetext guardwhitespace
% --RNDR: renlinear
%%BeginResource: QRCODE ean5 0.0 2015112400 62897 62576
%%BeginData:        135 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
begin
/ean5 {
20 dict begin
/options exch def                   % We are given an option string
/barcode exch def                   % We are given a barcode string
/dontdraw false def
/includetext false def              % Enable/disable text
/textfont /Helvetica def
/textsize 8 def
/textxoffset 0 def
/textyoffset (unset) def
/height 0.7 def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/textfont textfont cvlit def
/textsize textsize cvr def
/height height cvr def
/textxoffset textxoffset cvr def
textyoffset (unset) eq {
/textyoffset height 72 mul 1 add def
} {
/textyoffset textyoffset cvr def
} ifelse

% Validate input
barcode length 5 ne {
/bwipp.ean5badLength (EAN-5 add-on must be 5 digits) //raiseerror exec
} if
barcode {
dup 48 lt exch 57 gt or {
/bwipp.ean5badCharacter (EAN-5 add-on must contain only digits) //raiseerror exec
} if
} forall

% Create an array containing the character mappings
/encs
[ (3211) (2221) (2122) (1411) (1132)
(1231) (1114) (1312) (1213) (3112)
(112) (11)
] def

% Create a string of the available characters
/barchars (0123456789) def

% Determine the mirror map based on mod 10 checksum
/mirrormaps
[ (11000) (10100) (10010) (10001) (01100)
(00110) (00011) (01010) (01001) (00101)
] def
/checksum 0 def
0 1 4 {
/i exch def
/barchar barcode i get 48 sub def
i 2 mod 0 eq {
/checksum barchar 3 mul checksum add def
} {
/checksum barchar 9 mul checksum add def
} ifelse
} for
/checksum checksum 10 mod def
/mirrormap mirrormaps checksum get def

/sbs 31 string def
/txt 5 array def

0 1 4 {
/i exch def

% Prefix with either a start character or separator character
i 0 eq {
sbs 0 encs 10 get putinterval
} {
sbs i 1 sub 6 mul 7 add encs 11 get putinterval
} ifelse

% Lookup the encoding for the barcode character
barcode i 1 getinterval barchars exch search
pop                     % Discard true leaving pre
length /indx exch def   % indx is the length of pre
pop pop                 % Discard seek and post
/enc encs indx get def  % Get the indxth encoding
mirrormap i get 49 eq { % Reverse enc if 1 in this position in mirrormap
/enclen enc length def
/revenc enclen string def
0 1 enclen 1 sub {
/j exch def
/char enc j get def
revenc enclen j sub 1 sub char put
} for
/enc revenc def
} if
sbs i 6 mul 3 add enc putinterval   % Put encoded digit into sbs
txt i [barcode i 1 getinterval i 1 sub 9 mul 13 add textxoffset add textyoffset textfont textsize] put
} for

% Return the arguments
<<
/ren //renlinear
/sbs [sbs {48 sub} forall]
/bhs [16{height}repeat]
/bbs [16{0}repeat]
includetext {
/txt txt
} if
/opt options
/guardrightpos 10
/guardrightypos textyoffset 4 add
/bordertop 10
>>

dontdraw not //renlinear if

end

} bind def
/ean5 dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER ean5--

% --BEGIN ENCODER ean2--
% --REQUIRES preamble raiseerror renlinear--
% --DESC: EAN-2 (2 digit addon)
% --EXAM: 05
% --EXOP: includetext guardwhitespace
% --RNDR: renlinear
%%BeginResource: QRCODE ean2 0.0 2015112400 61678 61382
%%BeginData:        120 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
begin
/ean2 {

20 dict begin

/options exch def                   % We are given an options string
/barcode exch def                   % We are given a barcode string

/dontdraw false def
/includetext false def               % Enable/disable text
/textfont /Helvetica def
/textsize 8 def
/textxoffset 0 def
/textyoffset (unset) def
/height 0.7 def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/textfont textfont cvlit def
/textsize textsize cvr def
/height height cvr def
/textxoffset textxoffset cvr def
textyoffset (unset) eq {
/textyoffset height 72 mul 1 add def
} {
/textyoffset textyoffset cvr def
} ifelse

% Validate input
barcode length 2 ne {
/bwipp.ean2badLength (EAN-2 add-on must be 2 digits) //raiseerror exec
} if
barcode {
dup 48 lt exch 57 gt or {
/bwipp.ean2badCharacter (EAN-2 add-on must contain only digits) //raiseerror exec
} if
} forall

% Create an array containing the character mappings
/encs
[ (3211) (2221) (2122) (1411) (1132)
(1231) (1114) (1312) (1213) (3112)
(112) (11)
] def

% Create a string of the available characters
/barchars (0123456789) def

% Determine the mirror map based on mod 4 checksum
/mirrormap [(00) (01) (10) (11)] barcode 0 2 getinterval cvi 4 mod get def

/sbs 13 string def
/txt 2 array def

0 1 1 {
/i exch def

% Prefix with either a start character or separator character
i 0 eq {
sbs 0 encs 10 get putinterval
} {
sbs i 1 sub 6 mul 7 add encs 11 get putinterval
} ifelse

% Lookup the encoding for the barcode character
barcode i 1 getinterval barchars exch search
pop                     % Discard true leaving pre
length /indx exch def   % indx is the length of pre
pop pop                 % Discard seek and post
/enc encs indx get def  % Get the indxth encoding
mirrormap i get 49 eq { % Reverse enc if 1 in this position in mirrormap
/enclen enc length def
/revenc enclen string def
0 1 enclen 1 sub {
/j exch def
/char enc j get def
revenc enclen j sub 1 sub char put
} for
/enc revenc def
} if
sbs i 6 mul 3 add enc putinterval   % Put encoded digit into sbs
txt i [barcode i 1 getinterval i 1 sub 9 mul 13 add textxoffset add textyoffset textfont textsize] put
} for

% Return the arguments
<<
/ren //renlinear
/sbs [sbs {48 sub} forall]
/bhs [12{height}repeat]
/bbs [12{0}repeat]
includetext {
/txt txt
} if
/opt options
/guardrightpos 10
/guardrightypos textyoffset 4 add
/bordertop 10
>>

dontdraw not //renlinear if

end

} bind def
/ean2 dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER ean2--

% --BEGIN ENCODER ean13--
% --REQUIRES preamble raiseerror renlinear ean5 ean2--
% --DESC: EAN-13
% --EXAM: 2112345678900
% --EXOP: includetext guardwhitespace
% --RNDR: renlinear
%%BeginResource: QRCODE ean13 0.0 2015112400 84460 87603
%%BeginData:        215 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
dup /ean2 dup /QRCODE findresource put
dup /ean5 dup /QRCODE findresource put
begin
/ean13 {

20 dict begin

/options exch def                  % We are given an option string
/barcode exch def                  % We are given a barcode string

/dontdraw false def
/includetext false def             % Enable/disable text
/textfont /Helvetica def
/textsize 8 def
/textxoffset -10 def
/textyoffset -4 def
/height 1 def
/addongap 12 def
/addontextfont (unset) def
/addontextsize (unset) def
/addontextxoffset (unset) def
/addontextyoffset (unset) def

% Parse the input options, either a string or a dict
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/textfont textfont cvlit def
/textsize textsize cvr def
/textxoffset textxoffset cvr def
/textyoffset textyoffset cvr def
/height height cvr def
/addongap addongap cvr def
addontextfont (unset) ne {/addontextfont addontextfont cvlit def} if
addontextsize (unset) ne {/addontextsize addontextsize cvr def} if
addontextxoffset (unset) ne {/addontextxoffset addontextxoffset cvr def} if
addontextyoffset (unset) ne {/addontextyoffset addontextyoffset cvr def} if

% Split off the addon
barcode ( ) search {
/barcode exch def
pop
/addon exch def
} {
pop
/addon () def
} ifelse

% Validate the input
barcode length 12 ne barcode length 13 ne and {
/bwipp.ean13badLength (EAN-13 must be 12 or 13 digits) //raiseerror exec
} if
barcode {
dup 48 lt exch 57 gt or {
/bwipp.ean13badCharacter (EAN-13 must contain only digits) //raiseerror exec
} if
} forall
addon length 0 ne addon length 2 ne and addon length 5 ne and {
/bwipp.ean13badAddOnLength (Add-on for EAN-13 must be 2 or 5 digits) //raiseerror exec
} if

% Add checksum digit
/pad 13 string def
/checksum 0 def
0 1 11 {
/i exch def
/barchar barcode i get 48 sub def
i 2 mod 0 eq {
/checksum barchar checksum add def
} {
/checksum barchar 3 mul checksum add def
} ifelse
} for
/checksum 10 checksum 10 mod sub 10 mod def
barcode length 13 eq {
barcode 12 get checksum 48 add ne {
/bwipp.ean13badCheckDigit (Incorrect EAN-13 check digit provided) //raiseerror exec
} if
} if
pad 0 barcode putinterval       % Add barcode to the start of the pad
pad 12 checksum 48 add put      % Put ascii for checksum at end of pad
/barcode pad def

% Create an array containing the character mappings
/encs
[ (3211) (2221) (2122) (1411) (1132)
(1231) (1114) (1312) (1213) (3112)
(111) (11111) (111)
] def

% Create a string of the available characters
/barchars (0123456789) def

% Digits to mirror on left side
/mirrormaps
[ (000000) (001011) (001101) (001110) (010011)
(011001) (011100) (010101) (010110) (011010)
] def

/sbs 59 string def
/txt 13 array def

% Put the start character
sbs 0 encs 10 get putinterval

% First digit - determine mirrormap by this and show before guard bars
/mirrormap mirrormaps barcode 0 get 48 sub get def
txt 0 [barcode 0 1 getinterval textxoffset textyoffset textfont textsize] put

% Left side - performs mirroring
1 1 6 {
% Lookup the encoding for the each barcode character
/i exch def
barcode i 1 getinterval barchars exch search
pop                            % Discard true leaving pre
length /indx exch def          % indx is the length of pre
pop pop                        % Discard seek and post
/enc encs indx get def         % Get the indxth encoding
mirrormap i 1 sub get 49 eq {   % Reverse enc if 1 in this position in mirrormap
/enclen enc length def
/revenc enclen string def
0 1 enclen 1 sub {
/j exch def
/char enc j get def
revenc enclen j sub 1 sub char put
} for
/enc revenc def
} if
sbs i 1 sub 4 mul 3 add enc putinterval   % Put encoded digit into sbs
txt i [barcode i 1 getinterval i 1 sub 7 mul 14 add textxoffset add textyoffset textfont textsize] put
} for

% Put the middle character
sbs 7 1 sub 4 mul 3 add encs 11 get putinterval

% Right side
7 1 12 {
% Lookup the encoding for the each barcode character
/i exch def
barcode i 1 getinterval barchars exch search
pop                            % Discard true leaving pre
length /indx exch def          % indx is the length of pre
pop pop                        % Discard seek and post
/enc encs indx get def         % Get the indxth encoding
sbs i 1 sub 4 mul 8 add enc putinterval  % Put encoded digit into sbs
txt i [barcode i 1 getinterval i 1 sub 7 mul 18 add textxoffset add textyoffset textfont textsize] put
} for

% Put the end character
sbs 56 encs 12 get putinterval

/sbs [sbs {48 sub} forall] def
includetext {
/bhs [height height 12{height .075 sub}repeat height height 12{height .075 sub}repeat height height] def
/bbs [0 0 12{.075}repeat 0 0 12{.075}repeat 0 0] def
} {
/bhs [30{height}repeat] def
/bbs [30{0}repeat] def
/txt [] def
} ifelse
/guardrightypos 0 def

% Append the addon
addon () ne {
/addopts <<
/dontdraw true
/includetext true
/height height 0.15 sub
/textxoffset addontextxoffset (unset) ne {addontextxoffset} {95 addongap add} ifelse
addontextyoffset (unset) ne {/textyoffset addontextyoffset} if
/textsize addontextsize (unset) ne {addontextsize} {textsize} ifelse
/textfont addontextfont (unset) ne {addontextfont} {textfont} ifelse
>> def
addon length 2 eq {addon addopts //ean2 exec} if
addon length 5 eq {addon addopts //ean5 exec} if
/addcode exch def
/sbs [sbs aload pop addongap addcode (sbs) get aload pop] def
/bhs [bhs aload pop addcode (bhs) get {.075 sub} forall] def
/bbs [bbs aload pop addcode (bbs) get {.075 add} forall] def
/txt [txt aload pop addcode (txt) get aload pop] def
/guardrightypos height 72 mul 6 sub def
} if

% Return the arguments
<<
/ren //renlinear
/sbs sbs
/bhs bhs
/bbs bbs
/txt txt
/opt options
/guardrightpos 10
/guardrightypos guardrightypos
/borderbottom 5
>>

dontdraw not //renlinear if

end

} bind def
/ean13 dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER ean13--

% --BEGIN ENCODER ean8--
% --REQUIRES preamble raiseerror renlinear ean5 ean2--
% --DESC: EAN-8
% --EXAM: 02345673
% --EXOP: includetext guardwhitespace
% --RNDR: renlinear
%%BeginResource: QRCODE ean8 0.0 2015112400 81954 85278
%%BeginData:        196 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
dup /ean2 dup /QRCODE findresource put
dup /ean5 dup /QRCODE findresource put
begin
/ean8 {

20 dict begin

/options exch def                  % We are given an option string
/barcode exch def                  % We are given a barcode string

/dontdraw false def
/includetext false def              % Enable/disable text
/textfont /Helvetica def
/textsize 8 def
/textxoffset 4 def
/textyoffset -4 def
/height 1 def
/addongap 12 def
/addontextfont (unset) def
/addontextsize (unset) def
/addontextxoffset (unset) def
/addontextyoffset (unset) def

% Parse the input options, either a string or a dict
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/textfont textfont cvlit def
/textsize textsize cvr def
/textxoffset textxoffset cvr def
/textyoffset textyoffset cvr def
/height height cvr def
/addongap addongap cvr def
addontextfont (unset) ne {/addontextfont addontextfont cvlit def} if
addontextsize (unset) ne {/addontextsize addontextsize cvr def} if
addontextxoffset (unset) ne {/addontextxoffset addontextxoffset cvr def} if
addontextyoffset (unset) ne {/addontextyoffset addontextyoffset cvr def} if

% Split off the addon
barcode ( ) search {
/barcode exch def
pop
/addon exch def
} {
pop
/addon () def
} ifelse

% Validate the input
barcode length 7 ne barcode length 8 ne and {
/bwipp.ean8badLength (EAN-8 must be 7 or 8 digits) //raiseerror exec
} if
barcode {
dup 48 lt exch 57 gt or {
/bwipp.ean8badCharacter (EAN-8 must contain only digits) //raiseerror exec
} if
} forall
addon length 0 ne addon length 2 ne and addon length 5 ne and {
/bwipp.ean8badAddOnLength (Add-on for EAN-8 must be 2 or 5 digits) //raiseerror exec
} if

% Add checksum digit
/pad 8 string def
/checksum 0 def
0 1 6 {
/i exch def
/barchar barcode i get 48 sub def
i 2 mod 0 ne {
/checksum barchar checksum add def
} {
/checksum barchar 3 mul checksum add def
} ifelse
} for
/checksum 10 checksum 10 mod sub 10 mod def
barcode length 8 eq {
barcode 7 get checksum 48 add ne {
/bwipp.ean8badCheckDigit (Incorrect EAN-8 check digit provided) //raiseerror exec
} if
} if
pad 0 barcode putinterval      % Add barcode to the start of the pad
pad 7 checksum 48 add put      % Put ascii for checksum at end of pad
/barcode pad def

% Create an array containing the character mappings
/encs
[ (3211) (2221) (2122) (1411) (1132)
(1231) (1114) (1312) (1213) (3112)
(111) (11111) (111)
] def

% Create a string of the available characters
/barchars (0123456789) def

/sbs 43 string def
/txt 8 array def

% Put the start character
sbs 0 encs 10 get putinterval

% Left side
0 1 3 {
% Lookup the encoding for the each barcode character
/i exch def
barcode i 1 getinterval barchars exch search
pop                                % Discard true leaving pre
length /indx exch def              % indx is the length of pre
pop pop                            % Discard seek and post
/enc encs indx get def             % Get the indxth encoding
sbs i 4 mul 3 add enc putinterval  % Put encoded digit into sbs
txt i [barcode i 1 getinterval i 7 mul textxoffset add textyoffset textfont textsize] put
} for

% Put the middle character
sbs 4 4 mul 3 add encs 11 get putinterval

% Right side
4 1 7 {
% Lookup the encoding for the each barcode character
/i exch def
barcode i 1 getinterval barchars exch search
pop                                % Discard true leaving pre
length /indx exch def              % indx is the length of pre
pop pop                            % Discard seek and post
/enc encs indx get def             % Get the indxth encoding
sbs i 4 mul 8 add enc putinterval  % Put encoded digit into sbs
txt i [barcode i 1 getinterval i 7 mul textxoffset add 4 add textyoffset textfont textsize] put
} for

% Put the end character
sbs 40 encs 12 get putinterval

/sbs [sbs {48 sub} forall] def
includetext {
/bhs [height height 8{height .075 sub}repeat height height 8{height .075 sub}repeat height height] def
/bbs [0 0 8{.075}repeat 0 0 8{.075}repeat 0 0] def
} {
/bhs [22{height}repeat] def
/bbs [22{0}repeat] def
/txt [] def
} ifelse
/guardrightypos 0 def

% Append the addon
addon () ne {
/addopts <<
/dontdraw true
/includetext true
/height height 0.15 sub
/textxoffset addontextxoffset (unset) ne {addontextxoffset} {67 addongap add} ifelse
addontextyoffset (unset) ne {/textyoffset addontextyoffset} if
/textsize addontextsize (unset) ne {addontextsize} {textsize} ifelse
/textfont addontextfont (unset) ne {addontextfont} {textfont} ifelse
>> def
addon length 2 eq {addon addopts //ean2 exec} if
addon length 5 eq {addon addopts //ean5 exec} if
/addcode exch def
/sbs [sbs aload pop addongap addcode (sbs) get aload pop] def
/bhs [bhs aload pop addcode (bhs) get {.075 sub} forall] def
/bbs [bbs aload pop addcode (bbs) get {.075 add} forall] def
/txt [txt aload pop addcode (txt) get aload pop] def
/guardrightypos height 72 mul 6 sub def
} if

% Return the arguments
<<
/ren //renlinear
/sbs sbs
/bhs bhs
/bbs bbs
/txt txt
/opt options
/guardleftpos 10
/guardrightpos 10
/guardrightypos guardrightypos
/borderbottom 5
>>

dontdraw not //renlinear if

end

} bind def
/ean8 dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER ean8--

% --BEGIN ENCODER upca--
% --REQUIRES preamble raiseerror renlinear ean5 ean2--
% --DESC: UPC-A
% --EXAM: 416000336108
% --EXOP: includetext
% --RNDR: renlinear
%%BeginResource: QRCODE upca 0.0 2015112400 89013 91922
%%BeginData:        248 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
dup /ean2 dup /QRCODE findresource put
dup /ean5 dup /QRCODE findresource put
begin
/upca {

20 dict begin

/options exch def
/barcode exch def             % We are given a barcode string

/dontdraw false def
/includetext false def         % Enable/disable text
/textfont /Helvetica def
/textsize 8 def
/textxoffset -7 def
/textyoffset -4 def
/height 1 def
/addongap 12 def
/addontextfont (unset) def
/addontextsize (unset) def
/addontextxoffset (unset) def
/addontextyoffset (unset) def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/textfont textfont cvlit def
/textsize textsize cvr def
/textxoffset textxoffset cvr def
/textyoffset textyoffset cvr def
/height height cvr def
/addongap addongap cvr def
addontextfont (unset) ne {/addontextfont addontextfont cvlit def} if
addontextsize (unset) ne {/addontextsize addontextsize cvr def} if
addontextxoffset (unset) ne {/addontextxoffset addontextxoffset cvr def} if
addontextyoffset (unset) ne {/addontextyoffset addontextyoffset cvr def} if

% Split off the addon
barcode ( ) search {
/barcode exch def
pop
/addon exch def
} {
pop
/addon () def
} ifelse

% Expand a given UPC-E
barcode length 7 eq barcode length 8 eq or {
% Validate the input
barcode {
dup 48 lt exch 57 gt or {
/bwipp.upcAupcEbadCharacter (UPC-E must contain only digits) //raiseerror exec
} if
} forall
barcode 0 get dup 48 ne exch 49 ne and {
/bwipp.upcAupcEbadNumberSystem (UPC-E must have number system 0 or 1) //raiseerror exec
} if
1 {  % Common exit
/upcacode barcode length 8 eq {12} {11} ifelse string def
barcode 6 get 48 sub 2 le {
upcacode 0 barcode 0 3 getinterval putinterval
upcacode 3 barcode 6 1 getinterval putinterval
upcacode 4 (0000) putinterval
upcacode 8 barcode 3 3 getinterval putinterval
exit
} if
barcode 6 get 48 sub 3 eq {
upcacode 0 barcode 0 4 getinterval putinterval
upcacode 4 (00000) putinterval
upcacode 9 barcode 4 2 getinterval putinterval
exit
} if
barcode 6 get 48 sub 4 eq {
upcacode 0 barcode 0 5 getinterval putinterval
upcacode 5 (00000) putinterval
upcacode 10 barcode 5 1 getinterval putinterval
exit
} if
barcode 6 get 48 sub 5 ge {
upcacode 0 barcode 0 6 getinterval putinterval
upcacode 6 (0000) putinterval
upcacode 10 barcode 6 1 getinterval putinterval
exit
} if
} repeat
barcode length 8 eq {
upcacode 11 barcode 7 1 getinterval putinterval
} if
/barcode upcacode def
} if

% Validate the input
barcode length 11 ne barcode length 12 ne and {
/bwipp.upcAbadLength (UPC-A must be 11 or 12 digits) //raiseerror exec
} if
barcode {
dup 48 lt exch 57 gt or {
/bwipp.upcAbadCharacter (UPC-A must contain only digits) //raiseerror exec
} if
} forall
addon length 0 ne addon length 2 ne and addon length 5 ne and {
/bwipp.upcAbadAddOnLength (Add-on for UPC-A must be 2 or 5 digits) //raiseerror exec
} if

% Add checksum digit to barcode
/pad 12 string def   % Create pad one bigger than barcode
/checksum 0 def
0 1 10 {
/i exch def
/barchar barcode i get 48 sub def
i 2 mod 0 ne {
/checksum checksum barchar add def
} {
/checksum checksum barchar 3 mul add def
} ifelse
} for
/checksum 10 checksum 10 mod sub 10 mod def
barcode length 12 eq {
barcode 11 get checksum 48 add ne {
/bwipp.upcAbadCheckDigit (Incorrect UPC check digit provided) //raiseerror exec
} if
} if
pad 0 barcode putinterval       % Add barcode to the start of the pad
pad 11 checksum 48 add put      % Put ascii for checksum at end of pad
/barcode pad def

% Create an array containing the character mappings
/encs
[ (3211) (2221) (2122) (1411) (1132)
(1231) (1114) (1312) (1213) (3112)
(111) (11111) (111)
] def

% Create a string of the available characters
/barchars (0123456789) def

/sbs 59 string def
/txt 12 array def

% Put the start character
sbs 0 encs 10 get putinterval

% Left side
0 1 5 {
% Lookup the encoding for the each barcode character
/i exch def
barcode i 1 getinterval barchars exch search
pop                                % Discard true leaving pre
length /indx exch def              % indx is the length of pre
pop pop                            % Discard seek and post
/enc encs indx get def             % Get the indxth encoding
sbs i 4 mul 3 add enc putinterval  % Put encoded digit into sbs
i 0 eq {      % First digit is before the guard bars
txt 0 [barcode 0 1 getinterval textxoffset textyoffset textfont textsize 2 sub] put
} {
txt i [barcode i 1 getinterval i 7 mul 11 add textxoffset add textyoffset textfont textsize] put
} ifelse
} for

% Put the middle character
sbs 6 4 mul 3 add encs 11 get putinterval

% Right side
6 1 11 {
% Lookup the encoding for the each barcode character
/i exch def
barcode i 1 getinterval barchars exch search
pop                                % Discard true leaving pre
length /indx exch def              % indx is the length of pre
pop pop                            % Discard seek and post
/enc encs indx get def             % Get the indxth encoding
sbs i 4 mul 8 add enc putinterval  % Put encoded digit into sbs
i 11 eq {       % Last digit is after guard bars
txt 11 [barcode 11 1 getinterval textxoffset 103 add textyoffset textfont textsize 2 sub] put
} {
txt i [barcode i 1 getinterval i 7 mul textxoffset add 15 add textyoffset textfont textsize] put
} ifelse
} for

% Put the end character
sbs 56 encs 12 get putinterval

/sbs [sbs {48 sub} forall] def
includetext {
/bhs [4{height}repeat 10{height .075 sub}repeat height height 10{height .075 sub}repeat 4{height}repeat] def
/bbs [0 0 0 0 10{.075}repeat 0 0 10{.075}repeat 0 0 0 0] def
} {
/bhs [30{height}repeat] def
/bbs [30{0}repeat] def
/txt [] def
} ifelse
/guardrightypos 0 def

% Append the addon
addon () ne {
/addopts <<
/dontdraw true
/includetext true
/height height 0.15 sub
/textxoffset addontextxoffset (unset) ne {addontextxoffset} {95 addongap add} ifelse
addontextyoffset (unset) ne {/textyoffset addontextyoffset} if
/textsize addontextsize (unset) ne {addontextsize} {textsize} ifelse
/textfont addontextfont (unset) ne {addontextfont} {textfont} ifelse
>> def
addon length 2 eq {addon addopts //ean2 exec} if
addon length 5 eq {addon addopts //ean5 exec} if
/addcode exch def
/sbs [sbs aload pop addongap addcode (sbs) get aload pop] def
/bhs [bhs aload pop addcode (bhs) get {.075 sub} forall] def
/bbs [bbs aload pop addcode (bbs) get {.075 add} forall] def
/txt [txt aload pop addcode (txt) get aload pop] def
/guardrightypos height 72 mul 6 sub def
} if

% Return the arguments
<<
/ren //renlinear
/sbs sbs
/bhs bhs
/bbs bbs
/txt txt
/opt options
/guardrightpos 10
/guardrightypos guardrightypos
/borderbottom 5
>>

dontdraw not //renlinear if

end

} bind def
/upca dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER upca--

% --BEGIN ENCODER upce--
% --REQUIRES preamble raiseerror renlinear ean5 ean2--
% --DESC: UPC-E
% --EXAM: 00123457
% --EXOP: includetext
% --RNDR: renlinear
%%BeginResource: QRCODE upce 0.0 2015112400 92938 99490
%%BeginData:        287 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
dup /ean2 dup /QRCODE findresource put
dup /ean5 dup /QRCODE findresource put
begin
/upce {

20 dict begin

/options exch def                   % We are given an option string
/barcode exch def                   % We are given a barcode string

/dontdraw false def
/includetext false def               % Enable/disable text
/textfont /Helvetica def
/textsize 8 def
/textxoffset -7 def
/textyoffset -4 def
/height 1 def
/addongap 12 def
/addontextfont (unset) def
/addontextsize (unset) def
/addontextxoffset (unset) def
/addontextyoffset (unset) def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/textfont textfont cvlit def
/textsize textsize cvr def
/textxoffset textxoffset cvr def
/textyoffset textyoffset cvr def
/height height cvr def
/addongap addongap cvr def
addontextfont (unset) ne {/addontextfont addontextfont cvlit def} if
addontextsize (unset) ne {/addontextsize addontextsize cvr def} if
addontextxoffset (unset) ne {/addontextxoffset addontextxoffset cvr def} if
addontextyoffset (unset) ne {/addontextyoffset addontextyoffset cvr def} if

% Split off the addon
barcode ( ) search {
/barcode exch def
pop
/addon exch def
} {
pop
/addon () def
} ifelse

% Compress a given UPC-A
barcode length 11 eq barcode length 12 eq or {
% Validate the input
barcode {
dup 48 lt exch 57 gt or {
/bwipp.upcEupcAbadCharacter (UPC-A must contain only digits) //raiseerror exec
} if
} forall
1 {  % Common exit
/upcecode barcode length 12 eq {8} {7} ifelse string def
barcode 3 get 48 sub 2 le barcode 4 4 getinterval (0000) eq and {
upcecode 0 barcode  0 3 getinterval putinterval
upcecode 3 barcode  8 3 getinterval putinterval
upcecode 6 barcode  3 1 getinterval putinterval
exit
} if
barcode 4 5 getinterval (00000) eq {
upcecode 0 barcode  0 4 getinterval putinterval
upcecode 4 barcode  9 2 getinterval putinterval
upcecode 6 (3) putinterval
exit
} if
barcode 5 5 getinterval (00000) eq {
upcecode 0 barcode  0 5 getinterval putinterval
upcecode 5 barcode 10 1 getinterval putinterval
upcecode 6 (4) putinterval
exit
} if
barcode 10 get 48 sub 5 ge barcode 6 4 getinterval (0000) eq and {
upcecode 0 barcode  0 6 getinterval putinterval
upcecode 6 barcode 10 1 getinterval putinterval
exit
} if
/bwipp.upcEupcAnotCompressible (UPC-A cannot be converted to a UPC-E) //raiseerror exec
} repeat
barcode length 12 eq {
upcecode 7 barcode 11 1 getinterval putinterval
} if
/barcode upcecode def
} if

% Validate the input
barcode length 7 ne barcode length 8 ne and {
/bwipp.upcEbadLength (UPC-E must be 7 or 8 digits) //raiseerror exec
} if
barcode {
dup 48 lt exch 57 gt or {
/bwipp.upcEbadCharacter (UPC-E must contain only digits) //raiseerror exec
} if
} forall
addon length 0 ne addon length 2 ne and addon length 5 ne and {
/bwipp.upcEbadAddOnLength (Add-on for UPC-E must be 2 or 5 digits) //raiseerror exec
} if

% Ensure 0 or 1 number systems
barcode 0 get dup 48 ne exch 49 ne and {
/bwipp.upcEbadNumberSystem (UPC-E must have number system 0 or 1) //raiseerror exec
} if

% Create an array containing the character mappings
/encs
[ (3211) (2221) (2122) (1411) (1132)
(1231) (1114) (1312) (1213) (3112)
(111) (111111)
] def

% Create a string of the available characters
/barchars (0123456789) def

/mirrormaps
[ (000111) (001011) (001101) (001110) (010011)
(011001) (011100) (010101) (010110) (011010)
] def

% Derive the equivalent UPC-A for its checksum
1 {  % Common exit
/upcacode 11 string def
barcode 6 get 48 sub 2 le {
upcacode 0 barcode 0 3 getinterval putinterval
upcacode 3 barcode 6 1 getinterval putinterval
upcacode 4 (0000) putinterval
upcacode 8 barcode 3 3 getinterval putinterval
exit
} if
barcode 6 get 48 sub 3 eq {
upcacode 0 barcode 0 4 getinterval putinterval
upcacode 4 (00000) putinterval
upcacode 9 barcode 4 2 getinterval putinterval
exit
} if
barcode 6 get 48 sub 4 eq {
upcacode 0 barcode 0 5 getinterval putinterval
upcacode 5 (00000) putinterval
upcacode 10 barcode 5 1 getinterval putinterval
exit
} if
barcode 6 get 48 sub 5 ge {
upcacode 0 barcode 0 6 getinterval putinterval
upcacode 6 (0000) putinterval
upcacode 10 barcode 6 1 getinterval putinterval
exit
} if
} repeat
/checksum 0 def
0 1 10 {
/i exch def
/barchar upcacode i get 48 sub def
i 2 mod 0 ne {
/checksum checksum barchar add def
} {
/checksum checksum barchar 3 mul add def
} ifelse
} for
/checksum 10 checksum 10 mod sub 10 mod def
barcode length 8 eq {
barcode 7 get checksum 48 add ne {
/bwipp.upcEbadCheckDigit (Incorrect UPC check digit provided) //raiseerror exec
} if
} if
/pad 8 string def
pad 0 barcode putinterval       % Add barcode to the start of the pad
pad 7 checksum 48 add put       % Put ascii for checksum at end of pad
/barcode pad def
/txt 8 array def
txt 0 [barcode 0 1 getinterval textxoffset textyoffset textfont textsize 2 sub] put

% Determine the mirror map based on checksum
/mirrormap mirrormaps checksum get def

% Invert the mirrormap if we are using a non-zero number system
barcode 0 get 48 eq {
/invt mirrormap length string def
0 1 mirrormap length 1 sub {
/i exch def
mirrormap i get 48 eq {
invt i 49 put
} {
invt i 48 put
} ifelse
} for
/mirrormap invt def
} if

/sbs 33 string def

% Put the start character
sbs 0 encs 10 get putinterval

1 1 6 {
/i exch def
% Lookup the encoding for the each barcode character
barcode i 1 getinterval barchars exch search
pop                            % Discard true leaving pre
length /indx exch def          % indx is the length of pre
pop pop                        % Discard seek and post
/enc encs indx get def         % Get the indxth encoding
mirrormap i 1 sub get 49 eq {  % Reverse enc if 1 in this position in mirrormap
/enclen enc length def
/revenc enclen string def
0 1 enclen 1 sub {
/j exch def
/char enc j get def
revenc enclen j sub 1 sub char put
} for
/enc revenc def
} if
sbs i 1 sub 4 mul 3 add enc putinterval   % Put encoded digit into sbs
txt i [barcode i 1 getinterval i 1 sub 7 mul 11 add textxoffset add textyoffset textfont textsize] put
} for

txt 7 [barcode 7 1 getinterval 6 7 mul 18 add textxoffset add textyoffset textfont textsize 2 sub] put

% Put the end character
sbs 27 encs 11 get putinterval

/sbs [sbs {48 sub} forall] def
includetext {
/bhs [height height 12{height .075 sub}repeat height height height] def
/bbs [0 0 12{.075}repeat 0 0 0] def
} {
/bhs [17{height}repeat] def
/bbs [17{0}repeat] def
/txt [] def
} ifelse
/guardrightypos 0 def

% Append the addon
addon () ne {
/addopts <<
/dontdraw true
/includetext true
/height height 0.15 sub
/textxoffset addontextxoffset (unset) ne {addontextxoffset} {51 addongap add} ifelse
addontextyoffset (unset) ne {/textyoffset addontextyoffset} if
/textsize addontextsize (unset) ne {addontextsize} {textsize} ifelse
/textfont addontextfont (unset) ne {addontextfont} {textfont} ifelse
>> def
addon length 2 eq {addon addopts //ean2 exec} if
addon length 5 eq {addon addopts //ean5 exec} if
/addcode exch def
/sbs [sbs aload pop addongap addcode (sbs) get aload pop] def
/bhs [bhs aload pop addcode (bhs) get {.075 sub} forall] def
/bbs [bbs aload pop addcode (bbs) get {.075 add} forall] def
/txt [txt aload pop addcode (txt) get aload pop] def
/guardrightypos height 72 mul 6 sub def
} if

% Return the arguments
<<
/ren //renlinear
/sbs sbs
/bhs bhs
/bbs bbs
/txt txt
/opt options
/guardrightpos 10
/guardrightypos guardrightypos
/borderbottom 5
>>

dontdraw not //renlinear if

end

} bind def
/upce dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER upce--

% --BEGIN ENCODER isbn--
% --REQUIRES preamble raiseerror renlinear ean5 ean2 ean13--
% --DESC: ISBN
% --EXAM: 978-1-56581-231-4 52250
% --EXOP: includetext guardwhitespace
% --RNDR: renlinear
%%BeginResource: QRCODE isbn 0.0 2015112400 97266 100181
%%BeginData:        252 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
dup /ean13 dup /QRCODE findresource put
begin
/isbn {

20 dict begin

/options exch def      % We are given an options string
/barcode exch def      % We are given the isbn text with dashes

/dontdraw false def
/includetext false def  % Enable/disable ISBN text
/isbntextfont /Courier def
/isbntextsize 9 def
/isbntextxoffset (unset) def
/isbntextyoffset (unset) def
/height 1 def
/addongap 12 def
/legacy false def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/isbntextfont isbntextfont cvlit def
/isbntextsize isbntextsize cvr def
isbntextxoffset (unset) ne {/isbntextxoffset isbntextxoffset cvr def} if
isbntextyoffset (unset) ne {/isbntextyoffset isbntextyoffset cvr def} if
/height height cvr def
/addongap addongap cvr def

% Split off the addon
barcode ( ) search {
/barcode exch def
pop
/addon exch def
} {
pop
/addon () def
} ifelse

% Validate the input
barcode length 15 ne barcode length 17 ne and
barcode length 11 ne barcode length 13 ne and and {
/bwipp.isbnBadLength (ISBN-13 must be 15 or 17 characters including dashes. ISBN-10 must be 11 or 13 characters including dashes) //raiseerror exec
} if
addon length 0 ne addon length 2 ne and addon length 5 ne and {
/bwipp.isbnBadAddOnLength (Add-on for ISBN must be 2 or 5 digits) //raiseerror exec
} if
barcode length 15 ge {  % ISBN-13
barcode 0 4 getinterval dup (978-) ne exch (979-) ne and {
/bwipp.isbn13badPrefix (ISBN-13 prefix must be 978- or 979-) //raiseerror exec
} if
/wasdash false def /numdash 0 def /numdigit 0 def
barcode 5 9 getinterval {
dup
45 eq {
wasdash {
/bwipp.isbn13adjacentDashes (ISBN-13 does not permit adjacent dashes) //raiseerror exec
} if
/wasdash true def
/numdash numdash 1 add def
} if
dup 48 ge exch 57 le and {
/wasdash false def
/numdigit numdigit 1 add def
} if
} forall
numdash 2 ne numdigit 7 ne or {
/bwipp.isbn13numDashesDigits (Incorrect number of dashes and digits for ISBN-13) //raiseerror exec
} if
barcode 14 get dup 48 lt exch 57 gt or {
/bwipp.isbn13character15 (ISBN-13 character 15 must be a digit) //raiseerror exec
} if
barcode length 17 eq {
barcode 15 1 getinterval (-) ne {
/bwipp.isbn13character16 (ISBN-13 penultimate character must be a dash) //raiseerror exec
} if
barcode 16 get dup 48 lt exch 57 gt or {
/bwipp.isbn13character17 (ISBN-13 final character must be a digit) //raiseerror exec
} if
} if
} {  % ISBN-10
barcode 0 get dup 48 lt exch 57 gt or {
/bwipp.isbn10FirstDigit (ISBN-10 first character must be a digit) //raiseerror exec
} if
/wasdash false def /numdash 0 def /numdigit 0 def
barcode 1 9 getinterval {
dup
45 eq {
wasdash {
/bwipp.isbn10adjacentDashes (ISBN-10 does not permit adjacent dashes) //raiseerror exec
} if
/wasdash true def
/numdash numdash 1 add def
} if
dup 48 ge exch 57 le and {
/wasdash false def
/numdigit numdigit 1 add def
} if
} forall
numdash 2 ne numdigit 7 ne or {
/bwipp.isbn10numDashesDigits (Incorrect number of dashes and digits for ISBN-10) //raiseerror exec
} if
barcode 10 get dup 48 lt exch 57 gt or {
/bwipp.isbn10character11 (ISBN-10 character 11 must be a digit) //raiseerror exec
} if
barcode length 13 eq {
barcode 11 1 getinterval (-) ne {
/bwipp.isbn10character12 (ISBN-10 penultimate character must be a dash) //raiseerror exec
} if
barcode 12 get dup dup 48 lt exch 57 gt or exch 88 ne and {
/bwipp.isbn10character13 (ISBN-10 final character must be a digit or X) //raiseerror exec
} if
} if
} ifelse

/isbntxt barcode def

% Read the digits from isbntxt and validate checksum for ISBN-10
isbntxt length 13 le {
/isbn 10 string def
/checksum 0 def
/i 0 def /n 0 def
{ % loop
/isbnchar isbntxt i get 48 sub def
isbnchar -3 ne {     % Ignore dashes
isbn n isbnchar 48 add put
n 9 lt {
/checksum checksum 10 n sub isbnchar mul add def
} if
/n n 1 add def
} if
/i i 1 add def
i isbntxt length eq {exit} if
} loop
/checksum 11 checksum 11 mod sub 11 mod dup 10 eq {pop 40} if 48 add def
/isbn isbn 0 9 getinterval def
isbntxt length 13 eq {
isbntxt 12 get checksum ne {
/bwipp.isbn10badCheckDigit (Incorrect ISBN-10 check digit provided) //raiseerror exec
} if
} if
} if

legacy not isbntxt length 15 ge or {

% Convert ISBN-10 to ISBN-13
isbntxt length 13 le {
/pad 15 string def
pad 0 (978-) putinterval
pad 4 isbntxt 0 11 getinterval putinterval
/isbntxt pad def
} if

% Read the digits from isbntxt and validate checksum for ISBN-13
/isbn 13 string def
/checksum 0 def
/i 0 def /n 0 def
{ % loop
/isbnchar isbntxt i get 48 sub def
isbnchar -3 ne {     % Ignore dashes
isbn n isbnchar 48 add put
n 12 lt {
/checksum isbnchar n 2 mod 0 ne {3 mul} if checksum add def
} if
/n n 1 add def
} if
/i i 1 add def
i isbntxt length eq {exit} if
} loop
/checksum 10 checksum 10 mod sub 10 mod 48 add def
/isbn isbn 0 12 getinterval def
isbntxt length 17 eq {
isbntxt 16 get checksum ne {
/bwipp.isbn13badCheckDigit (Incorrect ISBN-13 check digit provided) //raiseerror exec
} if
} if

} if

% Add the ISBN header to the isbntxt
/pad isbn length 12 eq {22} {18} ifelse string def
pad 0 (ISBN ) putinterval
pad 5 isbntxt putinterval
pad pad length 2 sub 45 put
pad pad length 1 sub checksum put
/isbntxt pad def

% Convert ISBN digits to EAN-13
/barcode 12 string def
isbn length 9 eq {
barcode 0 (978) putinterval
barcode 3 isbn putinterval
} {
barcode 0 isbn putinterval
} ifelse

% Append the addon
addon () ne {
12 addon length add 1 add string
dup 0 barcode putinterval
dup 12 ( ) putinterval
dup 13 addon putinterval
/barcode exch def
} if

% Get the result of encoding with ean13
options (dontdraw) true put
options (addongap) addongap put
/args barcode options //ean13 exec def

% Add the ISBN text
includetext {
isbntextxoffset (unset) eq {
/isbntextxoffset isbn length 9 eq {-1} {-12} ifelse def
} if
isbntextyoffset (unset) eq {
/isbntextyoffset height 72 mul 3 add def
} if
args (txt) known {
/txt args (txt) get def
/newtxt txt length 1 add array def
newtxt 0 txt putinterval
newtxt newtxt length 1 sub [isbntxt isbntextxoffset isbntextyoffset isbntextfont isbntextsize] put
args (txt) newtxt put
} {
args (txt) [ [isbntxt isbntextxoffset isbntextyoffset isbntextfont isbntextsize] ] put
} ifelse
} if

args (opt) options put
args

dontdraw not //renlinear if

end

} bind def
/isbn dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER isbn--

% --BEGIN ENCODER ismn--
% --REQUIRES preamble raiseerror renlinear ean5 ean2 ean13--
% --DESC: ISMN
% --EXAM: 979-0-2605-3211-3
% --EXOP: includetext guardwhitespace
% --RNDR: renlinear
%%BeginResource: QRCODE ismn 0.0 2015112400 94206 93526
%%BeginData:        231 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
dup /ean13 dup /QRCODE findresource put
begin
/ismn {

20 dict begin

/options exch def      % We are given an options string
/barcode exch def      % We are given the ismn text with dashes

/dontdraw false def
/includetext false def  % Enable/disable ISMN text
/ismntextfont /Courier def
/ismntextsize 7 def
/ismntextxoffset (unset) def
/ismntextyoffset (unset) def
/height 1 def
/addongap 12 def
/legacy false def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/ismntextfont ismntextfont cvlit def
/ismntextsize ismntextsize cvr def
ismntextxoffset (unset) ne {/ismntextxoffset ismntextxoffset cvr def} if
ismntextyoffset (unset) ne {/ismntextyoffset ismntextyoffset cvr def} if
/height height cvr def
/addongap addongap cvr def

% Split off the addon
barcode ( ) search {
/barcode exch def
pop
/addon exch def
} {
pop
/addon () def
} ifelse

% Validate the input
barcode length 15 ne barcode length 17 ne and
barcode length 11 ne barcode length 13 ne and and {
/bwipp.ismnBadLength (ISMN-13 must be 15 or 17 characters including dashes. ISMN-10 must be 11 or 13 characters including dashes) //raiseerror exec
} if
addon length 0 ne addon length 2 ne and addon length 5 ne and {
/bwipp.ismnBadAddOnLength (Add-on for ISMN must be 2 or 5 digits) //raiseerror exec
} if
barcode length 15 ge {  % ISMN-13
barcode 0 4 getinterval (979-) ne {
/bwipp.ismn13badPrefix (ISMN-13 prefix must be 979-) //raiseerror exec
} if
/wasdash false def /numdash 0 def /numdigit 0 def
barcode 5 9 getinterval {
dup
45 eq {
wasdash {
/bwipp.ismn13adjacentDashes (ISMN-13 does not permit adjacent dashes) //raiseerror exec
} if
/wasdash true def
/numdash numdash 1 add def
} if
dup 48 ge exch 57 le and {
/wasdash false def
/numdigit numdigit 1 add def
} if
} forall
numdash 2 ne numdigit 7 ne or {
/bwipp.ismn13numDashesDigits (Incorrect number of dashes and digits for ISMN-13) //raiseerror exec
} if
barcode 14 get dup 48 lt exch 57 gt or {
/bwipp.ismn13character15 (ISMN-13 character 15 must be a digit) //raiseerror exec
} if
barcode length 17 eq {
barcode 15 1 getinterval (-) ne {
/bwipp.ismn13character16 (ISMN-13 penultimate character must be a dash) //raiseerror exec
} if
barcode 16 get dup 48 lt exch 57 gt or {
/bwipp.ismn13character17 (ISMN-13 final character must be a digit) //raiseerror exec
} if
} if
} {  % ISMN-10
barcode 0 2 getinterval (M-) ne {
/bwipp.ismn10badPrefix (ISMN-10 prefix must be M-) //raiseerror exec
} if
barcode 2 get dup 48 lt exch 57 gt or {
/bwipp.ismn10character3 (ISMN-10 character 3 must be a digit) //raiseerror exec
} if
/wasdash false def /numdash 0 def /numdigit 0 def
barcode 3 7 getinterval {
dup
45 eq {
wasdash {
/bwipp.ismn10adjacentDashes (ISMN-10 does not permit adjacent dashes) //raiseerror exec
} if
/wasdash true def
/numdash numdash 1 add def
} if
dup 48 ge exch 57 le and {
/wasdash false def
/numdigit numdigit 1 add def
} if
} forall
numdash 1 ne numdigit 6 ne or {
/bwipp.ismn10numDashesDigits (Incorrect number of dashes and digits for ISMN-10) //raiseerror exec
} if
barcode 10 get dup 48 lt exch 57 gt or {
/bwipp.ismn10character11 (ISMN-10 character 11 must be a digit) //raiseerror exec
} if
barcode length 13 eq {
barcode 11 1 getinterval (-) ne {
/bwipp.ismn10character12 (ISMN-10 penultimate character must be a dash) //raiseerror exec
} if
barcode 12 get dup dup 48 lt exch 57 gt or exch 88 ne and {
/bwipp.ismn10character13 (ISMN-10 final character must be a digit or X) //raiseerror exec
} if
} if
} ifelse

/ismntxt barcode def

% Convert old ISMN to ISMN-13
/legacytxt () def
ismntxt length 13 le {
/legacytxt ismntxt def
/pad ismntxt length 4 add string def
pad 0 (979-0-) putinterval
pad 6 ismntxt 2 ismntxt length 2 sub getinterval putinterval
/ismntxt pad def
} if

% Read the digits from ismntxt and calculate checksums
/ismn 13 string def
/checksum 0 def
/i 0 def /n 0 def
{ % loop
/ismnchar ismntxt i get 48 sub def
ismnchar -3 ne {           % Ignore dashes
ismn n ismnchar 48 add put
n 12 lt {
n 2 mod 0 eq {
/checksum ismnchar checksum add def
} {
/checksum ismnchar 3 mul checksum add def
} ifelse
} if
/n n 1 add def
} if
/i i 1 add def
i ismntxt length eq {exit} if
} loop
/checksum 10 checksum 10 mod sub 10 mod 48 add def

% Validate the checksum
barcode length 13 eq barcode length 17 eq or {
barcode dup length 1 sub get checksum ne {
/bwipp.ismnBadCheckDigit (Incorrect ISMN check digit provided) //raiseerror exec
} if
} if

% Add the ISMN header and checksum to the ismntxt
legacy legacytxt () ne and {
/ismntxt legacytxt def
/pad 18 string def
} {
/pad 22 string def
} ifelse
pad 0 (ISMN ) putinterval
pad 5 ismntxt putinterval
pad pad length 2 sub 45 put
pad pad length 1 sub checksum put
/ismntxt pad def

% Convert ISMN digits to EAN-13
/barcode ismn 0 12 getinterval def

% Append the addon
addon () ne {
12 addon length add 1 add string
dup 0 barcode putinterval
dup 12 ( ) putinterval
dup 13 addon putinterval
/barcode exch def
} if

% Get the result of encoding with ean13
options (dontdraw) true put
options (addongap) addongap put
/args barcode options //ean13 exec def

% Add the ISMN text
includetext {
ismntextxoffset (unset) eq {
/ismntextxoffset ismntxt length 18 eq {-1} {-12} ifelse def
} if
ismntextyoffset (unset) eq {
/ismntextyoffset height 72 mul 3 add def
} if
args (txt) known {
/txt args (txt) get def
/newtxt txt length 1 add array def
newtxt 0 txt putinterval
newtxt newtxt length 1 sub [ismntxt ismntextxoffset ismntextyoffset ismntextfont ismntextsize] put
args (txt) newtxt put
} {
args (txt) [ [ismntxt ismntextxoffset ismntextyoffset ismntextfont ismntextsize] ] put
} ifelse
} if

args (opt) options put
args

dontdraw not //renlinear if

end

} bind def
/ismn dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER ismn--

% --BEGIN ENCODER issn--
% --REQUIRES preamble raiseerror renlinear ean2 ean5 ean13--
% --DESC: ISSN
% --EXAM: 0311-175X 00 17
% --EXOP: includetext guardwhitespace
% --RNDR: renlinear
%%BeginResource: QRCODE issn 0.0 2015112400 85135 81376
%%BeginData:        177 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
dup /ean13 dup /QRCODE findresource put
begin
/issn {

20 dict begin

/options exch def      % We are given an options string
/issntxt exch def      % We are given the issn text with dashes

/dontdraw false def
/includetext false def  % Enable/disable ISSN text
/issntextfont /Courier def
/issntextsize 7 def
/issntextxoffset (unset) def
/issntextyoffset (unset) def
/height 1 def
/addongap 12 def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/issntextfont issntextfont cvlit def
/issntextsize issntextsize cvr def
issntextxoffset (unset) ne {/issntextxoffset issntextxoffset cvr def} if
issntextyoffset (unset) ne {/issntextyoffset issntextyoffset cvr def} if
/height height cvr def
/addongap addongap cvr def

% Split off the ISSN
issntxt ( ) search {
/issntxt exch def
pop
/seqvar exch def
} {
pop
/seqvar () def
} ifelse

% Split off the sequence variant and addon
seqvar ( ) search {
/seqvar exch def
pop
/addon exch def
} {
pop
/addon seqvar def
/seqvar (00) def
} ifelse

% Validate the input
issntxt length 8 ne issntxt length 9 ne and {
/bwipp.issnBadLength (ISSN must be 8 or 9 characters including dash) //raiseerror exec
} if
issntxt 0 4 getinterval {
dup 48 lt exch 57 gt or {
/bwipp.issnBadFormat (ISSN must have the format XXXX-XXXX) //raiseerror exec
} if
} forall
issntxt 4 1 getinterval (-) ne {
/bwipp.issnBadFormat (ISSN must have the format XXXX-XXXX) //raiseerror exec
} if
issntxt 5 3 getinterval {
dup 48 lt exch 57 gt or {
/bwipp.issnBadFormat (ISSN must have the format XXXX-XXXX) //raiseerror exec
} if
} forall
issntxt length 9 eq {
issntxt 8 get dup dup 48 lt exch 57 gt or exch 88 ne and {  % Digits or X
/bwipp.issnBadFormat (ISSN must have the format XXXX-XXXX) //raiseerror exec
} if
} if
seqvar length 2 ne {
/bwipp.issnBadSequenceVariantLength (Sequence variant for ISSN must be 2 digits) //raiseerror exec
} if
seqvar {
dup 48 lt exch 57 gt or {
/bwipp.issnSequenceVariantBadCharacter (Sequence variant for ISSN must contain only digits) //raiseerror exec
} if
} forall
addon length 0 ne addon length 2 ne and addon length 5 ne and {
/bwipp.issnBadAddOnLength (Add-on for ISSN must be 2 or 5 digits) //raiseerror exec
} if

% Read the digits from issntxt and calculate checksums
/issn 8 string def
/checksum 0 def
/i 0 def /n 0 def
{ % loop
/issnchar issntxt i get 48 sub def
issnchar -3 ne {           % Ignore dashes
issn n issnchar 48 add put
n 7 lt {
/checksum checksum issnchar 8 n sub mul add def
} if
/n n 1 add def
} if
/i i 1 add def
i issntxt length eq {exit} if
} loop
/checksum 11 checksum 11 mod sub 11 mod def
/checksum checksum 48 add dup 58 eq {pop 88} if def
issntxt length 9 eq {
issntxt 8 get checksum ne {
/bwipp.issnBadCheckDigit (Incorrect ISSN check digit provided) //raiseerror exec
} if
} if

% Add the ISSN header and checksum to the issntxt
/pad 14 string def
pad 0 (ISSN ) putinterval
pad 5 issntxt putinterval  % Add issntxt to the pad
pad 13 checksum put
/issntxt pad def

% Convert ISSN digits to EAN-13
/barcode issn 0 7 getinterval def

% Append the sequence variant
/barcode 12 string def
barcode 0 (977) putinterval
barcode 3 issn putinterval
barcode 10 seqvar putinterval

% Append the addon
addon () ne {
12 addon length add 1 add string
dup 0 barcode putinterval
dup 12 ( ) putinterval
dup 13 addon putinterval
/barcode exch def
} if

% Get the result of encoding with ean13
options (dontdraw) true put
options (addongap) addongap put
/args barcode options //ean13 exec def

% Add the ISSN text
includetext {
issntextxoffset (unset) eq {/issntextxoffset 10 def} if
issntextyoffset (unset) eq {
/issntextyoffset height 72 mul 3 add def
} if
args (txt) known {
/txt args (txt) get def
/newtxt txt length 1 add array def
newtxt 0 txt putinterval
newtxt newtxt length 1 sub [issntxt issntextxoffset issntextyoffset issntextfont issntextsize] put
args (txt) newtxt put
} {
args (txt) [ [issntxt issntextxoffset issntextyoffset issntextfont issntextsize] ] put
} ifelse
} if

args (opt) options put
args

dontdraw not //renlinear if

end

} bind def
/issn dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER issn--

% --BEGIN ENCODER code128--
% --REQUIRES preamble raiseerror renlinear--
% --DESC: Code 128
% --EXAM: Count01234567!
% --EXOP: includetext
% --RNDR: renlinear
%%BeginResource: QRCODE code128 0.0 2015112400 118230 128296
%%BeginData:        455 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
begin
/code128 {

20 dict begin                  % Confine variables to local scope

/options exch def        % We are given an option string
/barcode exch def        % We are given a barcode string

/dontdraw false def
/includetext false def    % Enable/disable text
/textfont /Courier def
/textsize 8 def
/textxoffset 0 def
/textyoffset -7 def
/height 1 def
/encoding (auto) def
/raw false def
/parse false def
/parsefnc false def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/textfont textfont cvlit def
/textsize textsize cvr def
/textxoffset textxoffset cvr def
/textyoffset textyoffset cvr def
/height height cvr def

% Parse ordinals of the form ^NNN to ASCII
parse {
/msg barcode length string def
/j 0 def
barcode
{ % loop
(^) search {
dup msg exch j exch putinterval
length j add 1 add /j exch def
pop
dup 0 3 getinterval cvi msg exch j 1 sub exch put
dup length 3 sub 3 exch getinterval
} {
dup msg exch j exch putinterval
length j add /j exch def
/barcode msg 0 j getinterval def
exit
} ifelse
} loop
} if

/barlen barcode length def

% Special function characters
/sta  -1 def  /stb  -2 def  /stc  -3 def
/swa  -4 def  /swb  -5 def  /swc  -6 def
/fn1  -7 def  /fn2  -8 def  /fn3  -9 def
/fn4 -10 def  /sft -11 def  /stp -12 def
/lka -13 def  /lkc -14 def  % CC-A/B and CC-C linkage

% Character maps for each state
/charmaps [
%  A    B    C         A    B    C         A    B    C
[  32   32  (00) ]  [ (!)  (!)  (01) ]  [ (")  (")  (02) ]  % 0-2
[ (#)  (#)  (03) ]  [ ($)  ($)  (04) ]  [ (%)  (%)  (05) ]  % 3-5
[ (&)  (&)  (06) ]  [ (')  (')  (07) ]  [  40   40  (08) ]  % 6-8
[  41   41  (09) ]  [ (*)  (*)  (10) ]  [ (+)  (+)  (11) ]  % 9-11
[ (,)  (,)  (12) ]  [ (-)  (-)  (13) ]  [ (.)  (.)  (14) ]  % 12-14
[ (/)  (/)  (15) ]  [ (0)  (0)  (16) ]  [ (1)  (1)  (17) ]  % 15-17
[ (2)  (2)  (18) ]  [ (3)  (3)  (19) ]  [ (4)  (4)  (20) ]  % 18-20
[ (5)  (5)  (21) ]  [ (6)  (6)  (22) ]  [ (7)  (7)  (23) ]  % 21-23
[ (8)  (8)  (24) ]  [ (9)  (9)  (25) ]  [ (:)  (:)  (26) ]  % 24-26
[ (;)  (;)  (27) ]  [ (<)  (<)  (28) ]  [ (=)  (=)  (29) ]  % 27-29
[ (>)  (>)  (30) ]  [ (?)  (?)  (31) ]  [ (@)  (@)  (32) ]  % 30-32
[ (A)  (A)  (33) ]  [ (B)  (B)  (34) ]  [ (C)  (C)  (35) ]  % 33-35
[ (D)  (D)  (36) ]  [ (E)  (E)  (37) ]  [ (F)  (F)  (38) ]  % 36-38
[ (G)  (G)  (39) ]  [ (H)  (H)  (40) ]  [ (I)  (I)  (41) ]  % 39-41
[ (J)  (J)  (42) ]  [ (K)  (K)  (43) ]  [ (L)  (L)  (44) ]  % 42-44
[ (M)  (M)  (45) ]  [ (N)  (N)  (46) ]  [ (O)  (O)  (47) ]  % 45-47
[ (P)  (P)  (48) ]  [ (Q)  (Q)  (49) ]  [ (R)  (R)  (50) ]  % 48-50
[ (S)  (S)  (51) ]  [ (T)  (T)  (52) ]  [ (U)  (U)  (53) ]  % 51-53
[ (V)  (V)  (54) ]  [ (W)  (W)  (55) ]  [ (X)  (X)  (56) ]  % 54-56
[ (Y)  (Y)  (57) ]  [ (Z)  (Z)  (58) ]  [ ([)  ([)  (59) ]  % 57-59
[  92   92  (60) ]  [ (])  (])  (61) ]  [ (^)  (^)  (62) ]  % 60-62
[ (_)  (_)  (63) ]  [   0  (`)  (64) ]  [   1  (a)  (65) ]  % 63-65
[   2  (b)  (66) ]  [   3  (c)  (67) ]  [   4  (d)  (68) ]  % 66-68
[   5  (e)  (69) ]  [   6  (f)  (70) ]  [   7  (g)  (71) ]  % 69-71
[   8  (h)  (72) ]  [   9  (i)  (73) ]  [  10  (j)  (74) ]  % 72-74
[  11  (k)  (75) ]  [  12  (l)  (76) ]  [  13  (m)  (77) ]  % 75-77
[  14  (n)  (78) ]  [  15  (o)  (79) ]  [  16  (p)  (80) ]  % 78-80
[  17  (q)  (81) ]  [  18  (r)  (82) ]  [  19  (s)  (83) ]  % 81-83
[  20  (t)  (84) ]  [  21  (u)  (85) ]  [  22  (v)  (86) ]  % 84-86
[  23  (w)  (87) ]  [  24  (x)  (88) ]  [  25  (y)  (89) ]  % 87-89
[  26  (z)  (90) ]  [  27  ({)  (91) ]  [  28  (|)  (92) ]  % 90-92
[  29  (})  (93) ]  [  30  (~)  (94) ]  [  31  127  (95) ]  % 93-95
[ fn3  fn3  (96) ]  [ fn2  fn2  (97) ]  [ sft  sft  (98) ]  % 96-98
[ swc  swc  (99) ]  [ swb  fn4  swb  ]  [ fn4  swa  swa  ]  % 99-101
[ fn1  fn1  fn1  ]  [ sta  sta  sta  ]  [ stb  stb  stb  ]  % 102-104
[ stc  stc  stc  ]  [ stp  stp  stp  ]                      % 105-106
] def

% Invert charmaps to give character to value maps for each state
/charvals [ 109 dict 109 dict 109 dict ] def
0 1 charmaps length 1 sub {
/i exch def
/encs charmaps i get def
0 1 2 {
/j exch def
encs j get dup type /stringtype eq {0 get} if  % convert string to ASCII if required
charvals j get exch i put
} for
} for
/seta charvals 0 get def
/setb charvals 1 get def
/setc charvals 2 get def

% Include pseudo characters for GS1-128 Composite linkage identifiers
seta lka seta swb get put  seta lkc seta swc get put
setb lka setb swc get put  setb lkc setb swa get put
setc lka setc swa get put  setc lkc setc swb get put

raw {/encoding (raw) def} if

encoding (raw) eq {
/cws barlen array def
/i 0 def /j 0 def
{ % loop
i barlen eq {exit} if
/cw barcode i 1 add 3 getinterval cvi def
cws j cw put
/i i 4 add def
/j j 1 add def
} loop
/cws cws 0 j getinterval def
/text () def
} if

encoding (auto) eq {

/fncvals <<
(FNC1) fn1
(FNC2) fn2
(FNC3) fn3
%            (FNC4) fn4    Not user accessible as encoded automatically
(LNKA) lka
(LNKC) lkc
>> def

% Convert input into bytes accounting for FNC and LNK characters
/msg barlen array def
/text barlen string def
/i 0 def /j 0 def {
i barlen eq {exit} if
/char barcode i get def
text j char put
parsefnc char 94 eq and i barlen 4 sub lt and {
barcode i 1 add get 94 ne {
/char fncvals barcode i 1 add 4 getinterval get def
text j ( ) putinterval
/i i 4 add def
} {
/i i 1 add def
} ifelse
} if
msg j char put
/i i 1 add def
/j j 1 add def
} loop
/msg msg 0 j getinterval def
/msglen msg length def
/text text 0 j getinterval def

% Standard and extended ASCII runlength at position
/numSA [ msglen {0} repeat 0 ] def
/numEA [ msglen {0} repeat 0 ] def
msglen 1 sub -1 0 {
/i exch def
msg i get 0 ge {
msg i get 128 ge {
numEA i numEA i 1 add get 1 add put
} {
numSA i numSA i 1 add get 1 add put
} ifelse
} if
} for

% FNC4 codeword insertion for extended ASCII
/ea false def /msgtmp [] def
0 1 msglen 1 sub {
/i exch def
/c msg i get def
ea c 128 lt xor not c 0 ge and {  % Other mode required
ea {numSA} {numEA} ifelse i get dup  % Runlength of other mode
i add msglen eq {3} {5} ifelse       % Does run terminate symbol
lt {  % Shift
/msgtmp [ msgtmp aload pop fn4 ] def
} {   % Latch
/msgtmp [ msgtmp aload pop fn4 fn4 ] def
/ea ea not def
} ifelse
} if
/msgtmp [ msgtmp aload pop c 0 ge {c 127 and} {c} ifelse ] def
} for
/msg msgtmp def
/msglen msg length def

% Determine digit runlength and characters from given position
/numsscr {
/n 0 def /s 0 def
/p exch def {
p msglen ge {exit} if
msg p get
dup setc exch known not {pop exit} if
fn1 eq {
% FNC1 in odd position of run like two digits
s 2 mod 0 eq {/s s 1 add def} {exit} ifelse
} if
/n n 1 add def
/s s 1 add def
/p p 1 add def
} loop
n s
} bind def

% Encoding for each alphabet
/enca {
seta exch get cws exch j exch put
/j j 1 add def
} bind def
/encb {
setb exch get cws exch j exch put
/j j 1 add def
} bind def
/encc {
dup type /arraytype ne {
setc exch get
} {
aload pop 48 sub exch 48 sub 10 mul add
} ifelse
cws exch j exch put
/j j 1 add def
} bind def

% Character exclusively in either alphabet A or B
/anotb {dup seta exch known exch setb exch known not and} bind def
/bnota {dup setb exch known exch seta exch known not and} bind def

% Pre-compute relative position of next anotb and next bnota characters
/nextanotb [ msg length {0} repeat 9999 ] def
/nextbnota [ msg length {0} repeat 9999 ] def
msg length 1 sub -1 0 {
/i exch def
msg i get anotb {
nextanotb i 0 put
} {
nextanotb i nextanotb i 1 add get 1 add put
} ifelse
msg i get bnota {
nextbnota i 0 put
} {
nextbnota i nextbnota i 1 add get 1 add put
} ifelse
} for

% Does a-only come before b-only after given position and vice versa
/abeforeb {dup nextanotb exch get exch nextbnota exch get lt} bind def
/bbeforea {dup nextbnota exch get exch nextanotb exch get lt} bind def

/cws barcode length 2 mul 3 add array def

% Select start character
/j 0 def
msglen 0 gt {0 numsscr} {-1 -1} ifelse /nums exch def /nchars exch def
{  % common exit
msglen 0 eq {
stb enca
/cset (setb) def
exit
} if
msglen 2 eq nums 2 eq and {
stc enca
/cset (setc) def
exit
} if
nums 4 ge {
stc enca
/cset (setc) def
exit
} if
0 abeforeb {
sta enca
/cset (seta) def
exit
} if
stb enca
/cset (setb) def
exit
} loop

% Main encoding loop
/i 0 def {
i msglen eq {exit} if

i numsscr /nums exch def /nchars exch def

% Determine switches and shifts
{  % common exit
cset (seta) eq cset (setb) eq or nums 4 ge and
msg i get fn1 ne and {
nums 2 mod 0 eq {
swc cset (seta) eq {enca} {encb} ifelse
/cset (setc) def
exit
} {
msg i get cset (seta) eq {enca} {encb} ifelse
/i i 1 add def
swc cset (seta) eq {enca} {encb} ifelse
/cset (setc) def
exit
} ifelse
} if
cset (setb) eq msg i get anotb and {
i msglen 1 sub lt {
i 1 add bbeforea {
sft encb
msg i get enca
/i i 1 add def
exit
} if
} if
swa encb
/cset (seta) def
exit
} if
cset (seta) eq msg i get bnota and {
i msglen 1 sub lt {
i 1 add abeforeb {
sft enca
msg i get encb
/i i 1 add def
exit
} if
} if
swb enca
/cset (setb) def
exit
} if
cset (setc) eq nums 2 lt and {
i abeforeb {
swa encc
/cset (seta) def
exit
} if
swb encc
/cset (setb) def
exit
} if

% No switches or latches so encode
cset (seta) eq {
msg i get enca
/i i 1 add def
exit
} if
cset (setb) eq {
msg i get encb
/i i 1 add def
exit
} if
cset (setc) eq {
msg i get fn1 eq {
fn1 encc
/i i 1 add def
} {
msg i 2 getinterval encc
/i i 2 add def
} ifelse
exit
} if

exit
} loop

} loop
/cws cws 0 j getinterval def
} if  % auto encoding

% Derive checksum and place stop character
/cws j 2 add array dup 0 cws putinterval def
/csum cws 0 get def
1 1 j 1 sub {
/i exch def
/csum csum cws i get i mul add def
} for
/csum csum 103 mod def
cws j csum put
cws j 1 add seta stp get put

% Create an array containing the character mappings
/encs
[ (212222) (222122) (222221) (121223) (121322) (131222) (122213)
(122312) (132212) (221213) (221312) (231212) (112232) (122132)
(122231) (113222) (123122) (123221) (223211) (221132) (221231)
(213212) (223112) (312131) (311222) (321122) (321221) (312212)
(322112) (322211) (212123) (212321) (232121) (111323) (131123)
(131321) (112313) (132113) (132311) (211313) (231113) (231311)
(112133) (112331) (132131) (113123) (113321) (133121) (313121)
(211331) (231131) (213113) (213311) (213131) (311123) (311321)
(331121) (312113) (312311) (332111) (314111) (221411) (431111)
(111224) (111422) (121124) (121421) (141122) (141221) (112214)
(112412) (122114) (122411) (142112) (142211) (241211) (221114)
(413111) (241112) (134111) (111242) (121142) (121241) (114212)
(124112) (124211) (411212) (421112) (421211) (212141) (214121)
(412121) (111143) (111341) (131141) (114113) (114311) (411113)
(411311) (113141) (114131) (311141) (411131) (211412) (211214)
(211232) (2331112)
] def

% Derive space bar succession
/sbs cws length 6 mul 1 add string def
0 1 cws length 1 sub {
/i exch def
sbs i 6 mul encs cws i get get putinterval
} for

% Return the arguments
<<
/ren //renlinear
/sbs [sbs {48 sub} forall]
/bhs [sbs length 1 add 2 idiv {height} repeat]
/bbs [sbs length 1 add 2 idiv {0} repeat]
/txt [ [text textxoffset textyoffset textfont textsize] ]
/textxalign (center)
/opt options
>>

dontdraw not //renlinear if

end

} bind def
/code128 dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER code128--

% --BEGIN ENCODER gs1-128--
% --REQUIRES preamble raiseerror renlinear code128--
% --DESC: GS1-128
% --EXAM: (01)95012345678903(3103)000123
% --EXOP: includetext
% --RNDR: renlinear
%%BeginResource: QRCODE gs1-128 0.0 2015112400 77699 77161
%%BeginData:        157 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
dup /code128 dup /QRCODE findresource put
begin
/gs1-128 {

20 dict begin            % Confine variables to local scope

/options exch def  % We are given an option string
/barcode exch def  % We are given a barcode string

/dontdraw false def
/includetext false def    % Enable/disable text
/textfont /Courier def
/textsize 8 def
/textxoffset 0 def
/textyoffset -7 def
/height 0.5 def
/linkagea false def
/linkagec false def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/textfont textfont cvlit def
/textsize textsize cvr def
/textxoffset textxoffset cvr def
/textyoffset textyoffset cvr def
/height height cvr def

/text barcode def

% Expand ordinals of the form ^NNN to ASCII
/expand {
/in exch def
/out in length string def
/j 0 def
in
{ % loop
(^) search {
dup out exch j exch putinterval
length j add 1 add /j exch def
pop
dup 0 3 getinterval cvi out exch j 1 sub exch put
dup length 3 sub 3 exch getinterval
} {
dup out exch j exch putinterval
length j add /j exch def
out 0 j getinterval exit
} ifelse
} loop
} bind def

% Parse out AIs
/ais [] def
/aival 2 dict def
barcode dup length 1 sub 1 exch getinterval
{  % loop
dup () eq {exit} if
(\)) search pop
exch pop
exch (\() search {
exch pop exch 3 1 roll
} {
() 3 1 roll
} ifelse
[ ais aload pop counttomark 2 add index ] /ais exch def
aival 3 1 roll expand put
} loop
pop

% Pre-defined fixed length data field AIs
% any AI whose prefix is not included in this table must be
% terminated with "FNC1", even if it's fixed length
/aifixed 23 dict def
[
0 1 4 {} for
] {
(00) 2 string copy dup dup 1 5 -1 roll 48 add put aifixed 3 1 roll put
} forall
[
11 1 20 {} for
23
31 1 36 {} for
41
] {
10 2 string cvrs dup aifixed 3 1 roll put
} forall

% Create the code128 data
/fnc1 -1 def
/c128 [ fnc1 ] def
0 1 ais length 1 sub {
/i exch def
/ai ais i get def
/val aival ai get def
c128 length ai length add val length add array
dup 0 c128 putinterval
dup c128 length ai [ exch {} forall ] putinterval
dup c128 length ai length add val [ exch {} forall ] putinterval
/c128 exch def
i ais length 1 sub ne aifixed ai 0 2 getinterval known not and {  % Append FNC1
c128 length 1 add array
dup 0 c128 putinterval
dup c128 length fnc1 put
/c128 exch def
} if
} for

% Compose input to code128
/barcode c128 length 1 add 5 mul string def
/i 0 def /j 0 def {
i c128 length eq {exit} if
c128 i get dup fnc1 eq {
pop barcode j (^FNC1) putinterval
/j j 4 add def
} {
barcode exch j exch put
} ifelse
/i i 1 add def
/j j 1 add def
} loop
linkagea linkagec or {
barcode j linkagea {(^LNKA)} {(^LNKC)} ifelse putinterval
/j j 5 add def
} if
/barcode barcode 0 j getinterval def

% Get the result of encoding with code128
options (height) height put
options (dontdraw) true put
options (parsefnc) true put
/args barcode options //code128 exec def

args (txt) [ [text textxoffset textyoffset textfont textsize] ] put
args (textxalign) (center) put
args (opt) options put
args

dontdraw not //renlinear if

end

} bind def
/gs1-128 dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER gs1-128--

% --BEGIN ENCODER ean14--
% --REQUIRES preamble raiseerror renlinear code128--
% --DESC: GS1-14
% --EXAM: (01) 0 46 01234 56789 3
% --EXOP: includetext
% --RNDR: renlinear
%%BeginResource: QRCODE ean14 0.0 2015112400 69977 69481
%%BeginData:        105 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
dup /code128 dup /QRCODE findresource put
begin
/ean14 {

20 dict begin            % Confine variables to local scope

/options exch def  % We are given an option string
/barcode exch def  % We are given a barcode string

/dontdraw false def
/includetext false def    % Enable/disable text
/textfont /Courier def
/textsize 8 def
/textxoffset 0 def
/textyoffset -7 def
/height 1 def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/textfont textfont cvlit def
/textsize textsize cvr def
/textxoffset textxoffset cvr def
/textyoffset textyoffset cvr def
/height height cvr def

% Strip spaces from the given data
/text barcode def
barcode dup length string exch 0 exch
{dup 32 ne {3 copy put pop 1 add} {pop} ifelse} forall
0 exch getinterval /barcode exch def
/hasspace text length barcode length ne def

% Validate the input
barcode 0 4 getinterval (\(01\)) ne {
/bwipp.ean14badAI (GS1-14 must begin with (01) application identifier) //raiseerror exec
} if
barcode length 17 ne barcode length 18 ne and {
/bwipp.ean14badLength (GS1-14 must be 13 or 14 digits) //raiseerror exec
} if
barcode 4 barcode length 4 sub getinterval {
dup 48 lt exch 57 gt or {
/bwipp.ean14badCharacter (GS1-14 must contain only digits) //raiseerror exec
} if
} forall

% Calculate checksum and add to end of barcode
/checksum 0 def
0 1 12 {
/i exch def
/checksum checksum barcode i 4 add get 48 sub i 2 mod 0 eq {3 mul} if add def
} for
/checksum 10 checksum 10 mod sub 10 mod def
barcode length 18 eq {
barcode 17 get checksum 48 add ne {
/bwipp.ean14badCheckDigit (Incorrect GS1-14 check digit provided) //raiseerror exec
} if
} {
18 string
dup 0 barcode putinterval
dup 17 checksum 48 add put
/barcode exch def
text length hasspace {2} {1} ifelse add string
dup dup length 2 sub ( ) putinterval
dup dup length 1 sub checksum 48 add put
dup 0 text putinterval
/text exch def
} ifelse
/gtin barcode 4 14 getinterval def

% Compose input to code128
/barcode 21 string def
barcode 0 (^FNC101) putinterval
barcode 7 gtin putinterval

% Get the result of encoding with code128
options (dontdraw) true put
options (parsefnc) true put
/args barcode options //code128 exec def

args (txt) [ [text textxoffset textyoffset textfont textsize] ] put
args (textxalign) (center) put
args (opt) options put
args

dontdraw not //renlinear if

end

} bind def
/ean14 dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER ean14--

% --BEGIN ENCODER sscc18--
% --REQUIRES preamble raiseerror renlinear code128--
% --DESC: SSCC-18
% --EXAM: (00) 0 0614141 123456789 0
% --EXOP: includetext
% --RNDR: renlinear
%%BeginResource: QRCODE sscc18 0.0 2015112400 69989 69488
%%BeginData:        105 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
dup /code128 dup /QRCODE findresource put
begin
/sscc18 {

20 dict begin            % Confine variables to local scope

/options exch def  % We are given an option string
/barcode exch def  % We are given a barcode string

/dontdraw false def
/includetext false def    % Enable/disable text
/textfont /Courier def
/textsize 8 def
/textxoffset 0 def
/textyoffset -7 def
/height 1 def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/textfont textfont cvlit def
/textsize textsize cvr def
/textxoffset textxoffset cvr def
/textyoffset textyoffset cvr def
/height height cvr def

% Strip spaces from the given data
/text barcode def
barcode dup length string exch 0 exch
{dup 32 ne {3 copy put pop 1 add} {pop} ifelse} forall
0 exch getinterval /barcode exch def
/hasspace text length barcode length ne def

% Validate the input
barcode 0 4 getinterval (\(00\)) ne {
/bwipp.sscc18badAI (SSCC-18 must begin with (00) application identifier) //raiseerror exec
} if
barcode length 21 ne barcode length 22 ne and {
/bwipp.sscc18badLength (SSCC-18 must be 17 or 18 digits) //raiseerror exec
} if
barcode 4 barcode length 4 sub getinterval {
dup 48 lt exch 57 gt or {
/bwipp.sscc18badCharacter (SSCC-18 must contain only digits) //raiseerror exec
} if
} forall

% Calculate checksum and add to end of barcode
/checksum 0 def
0 1 16 {
/i exch def
/checksum checksum barcode i 4 add get 48 sub i 2 mod 0 eq {3 mul} if add def
} for
/checksum 10 checksum 10 mod sub 10 mod def
barcode length 22 eq {
barcode 21 get checksum 48 add ne {
/bwipp.sscc18badCheckDigit (Incorrect SSCC-18 check digit provided) //raiseerror exec
} if
} {
22 string
dup 0 barcode putinterval
dup 21 checksum 48 add put
/barcode exch def
text length hasspace {2} {1} ifelse add string
dup dup length 2 sub ( ) putinterval
dup dup length 1 sub checksum 48 add put
dup 0 text putinterval
/text exch def
} ifelse
/sscc barcode 4 18 getinterval def

% Compose input to code128
/barcode 25 string def
barcode 0 (^FNC100) putinterval
barcode 7 sscc putinterval

% Get the result of encoding with code128
options (dontdraw) true put
options (parsefnc) true put
/args barcode options //code128 exec def

args (txt) [ [text textxoffset textyoffset textfont textsize] ] put
args (textxalign) (center) put
args (opt) options put
args

dontdraw not //renlinear if

end

} bind def
/sscc18 dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER sscc18--

% --BEGIN ENCODER code39--
% --REQUIRES preamble raiseerror renlinear--
% --DESC: Code 39
% --EXAM: THIS IS CODE 39
% --EXOP: includetext includecheck includecheckintext
% --RNDR: renlinear
%%BeginResource: QRCODE code39 0.0 2015112400 67013 66837
%%BeginData:        141 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
begin
/code39 {

20 dict begin                 % Confine variables to local scope

/options exch def       % We are given an option string
/barcode exch def       % We are given a barcode string

/dontdraw false def
/includecheck false def
/validatecheck false def
/includetext false def
/includecheckintext false def
/hidestars false def
/textfont /Courier def
/textsize 8 def
/textyoffset -7 def
/height 1 def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/textfont textfont cvlit def
/textsize textsize cvr def
/textyoffset textyoffset cvr def
/height height cvr def

% Create a string of the available characters
/barchars (0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%) def
/charvals 43 dict def
0 1 42 {charvals exch dup barchars exch 1 getinterval exch put} for

% Validate the input
0 1 barcode length 1 sub {
barcode exch 1 getinterval charvals exch known not {
/bwipp.code39badCharacter (Code 39 must contain only digits, capital letters, spaces and the symbols -.$/+%) //raiseerror exec
} if
} for

/barlen barcode length validatecheck {1 sub} if def

/checksum 0 def
0 1 barlen 1 sub {
barcode exch 1 getinterval charvals exch get
checksum add /checksum exch def
} for
/checksum checksum 43 mod def
validatecheck {
barcode barlen get barchars checksum get ne {
/bwipp.code39badCheckDigit (Incorrect Code 39 check digit provided) //raiseerror exec
} if
/barcode barcode 0 barlen getinterval def
/includecheck true def
} if

% Create an array containing the character mappings
/encs
[ (1113313111) (3113111131) (1133111131) (3133111111) (1113311131)
(3113311111) (1133311111) (1113113131) (3113113111) (1133113111)
(3111131131) (1131131131) (3131131111) (1111331131) (3111331111)
(1131331111) (1111133131) (3111133111) (1131133111) (1111333111)
(3111111331) (1131111331) (3131111311) (1111311331) (3111311311)
(1131311311) (1111113331) (3111113311) (1131113311) (1111313311)
(3311111131) (1331111131) (3331111111) (1311311131) (3311311111)
(1331311111) (1311113131) (3311113111) (1331113111) (1313131111)
(1313111311) (1311131311) (1113131311) (1311313111)
] def

/sbs barlen includecheck {3} {2} ifelse add 10 mul string def
/txt barlen includecheck {3} {2} ifelse add array def

% Put the start character
sbs 0 encs 43 get putinterval
hidestars not {
txt 0 [(*) 0 textyoffset textfont textsize] put
} {
txt 0 [() 0 textyoffset textfont textsize] put
} ifelse

0 1 barlen 1 sub {
/i exch def
/indx charvals barcode i 1 getinterval get def
sbs i 10 mul 10 add encs indx get putinterval
txt i 1 add [barcode i 1 getinterval i 1 add 16 mul textyoffset textfont textsize] put
} for

% Put the checksum and end characters
includecheck {
sbs barlen 10 mul 10 add encs checksum get putinterval
includecheckintext {
txt barlen 1 add [barchars checksum 1 getinterval barlen 1 add 16 mul textyoffset textfont textsize] put
} {
txt barlen 1 add [() barlen 1 add 16 mul textyoffset textfont textsize] put
} ifelse
sbs barlen 10 mul 20 add encs 43 get putinterval
hidestars not {
txt barlen 2 add [(*) barlen 2 add 16 mul textyoffset textfont textsize] put
} {
txt barlen 2 add [() barlen 2 add 16 mul textyoffset textfont textsize] put
} ifelse
} {
sbs barlen 10 mul 10 add encs 43 get putinterval
hidestars not {
txt barlen 1 add [(*) barlen 1 add 16 mul textyoffset textfont textsize] put
} {
txt barlen 1 add [() barlen 1 add 16 mul textyoffset textfont textsize] put
} ifelse
} ifelse

% Return the arguments
<<
/ren //renlinear
/sbs [sbs {48 sub} forall]
/bhs [sbs length 1 add 2 idiv {height} repeat]
/bbs [sbs length 1 add 2 idiv {0} repeat]
includetext {
/txt txt
} if
/opt options
>>

dontdraw not //renlinear if

end

} bind def
/code39 dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER code39--

% --BEGIN ENCODER code39ext--
% --REQUIRES preamble raiseerror renlinear code39--
% --DESC: Code 39 Extended
% --EXAM: Code39 Ext!
% --EXOP: includetext includecheck includecheckintext
% --RNDR: renlinear
%%BeginResource: QRCODE code39ext 0.0 2015112400 65588 65334
%%BeginData:        110 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
dup /code39 dup /QRCODE findresource put
begin
/code39ext {

20 dict begin

/options exch def      % We are given an options string
/barcode exch def      % We are given the code39extended text

/dontdraw false def
/includetext false def
/parse false def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

% Parse ordinals of the form ^NNN to ASCII
parse {
/msg barcode length string def
/j 0 def
barcode
{ % loop
(^) search {
dup msg exch j exch putinterval
length j add 1 add /j exch def
pop
dup 0 3 getinterval cvi msg exch j 1 sub exch put
dup length 3 sub 3 exch getinterval
} {
dup msg exch j exch putinterval
length j add /j exch def
/barcode msg 0 j getinterval def
exit
} ifelse
} loop
} if

% Validate the input
barcode {
128 ge {
/bwipp.code39extBadCharacter (Code 39 Extended must contain only ASCII characters) //raiseerror exec
} if
} forall

/barlen barcode length def

% Extended alphabet to non-extended alphabet
/extencs
[ (%U) ($A) ($B) ($C) ($D) ($E) ($F) ($G) ($H) ($I) ($J) ($K) ($L) ($M) ($N) ($O)
($P) ($Q) ($R) ($S) ($T) ($U) ($V) ($W) ($X) ($Y) ($Z) (%A) (%B) (%C) (%D) (%E)
( )  (/A) (/B) (/C) (/D) (/E) (/F) (/G) (/H) (/I) (/J) (/K) (/L) (-)  (.)  (/O)
(0)  (1)  (2)  (3)  (4)  (5)  (6)  (7)  (8)  (9)  (/Z) (%F) (%G) (%H) (%I) (%J)
(%V) (A)  (B)  (C)  (D)  (E)  (F)  (G)  (H)  (I)  (J)  (K)  (L)  (M)  (N)  (O)
(P)  (Q)  (R)  (S)  (T)  (U)  (V)  (W)  (X)  (Y)  (Z)  (%K) (%L) (%M) (%N) (%O)
(%W) (+A) (+B) (+C) (+D) (+E) (+F) (+G) (+H) (+I) (+J) (+K) (+L) (+M) (+N) (+O)
(+P) (+Q) (+R) (+S) (+T) (+U) (+V) (+W) (+X) (+Y) (+Z) (%P) (%Q) (%R) (%S) (%T)
] def

/newcode barlen 2 mul string def
/newtext barlen 2 mul string def
/j 0 def
0 1 barlen 1 sub {
/i exch def
/extchar extencs barcode i get get def
newcode j extchar putinterval
newtext j barcode i get put
extchar length 1 ne {newtext j 1 add ( ) putinterval} if
/j j extchar length add def
} for
/newcode newcode 0 j getinterval def
/newtext newtext 0 j getinterval def

% Get the result of encoding with code39
options (dontdraw) true put
/args newcode options //code39 exec def

% Replace chars in /txt with chars in newtext
includetext {
/txt args (txt) get def
0 1 newtext length 1 sub {
/i exch def
/txtentry txt i 1 add get def
txtentry 0 newtext i 1 getinterval put
txt i 1 add txtentry put
} for
args (txt) txt put
} if
args (opt) options put
args

dontdraw not //renlinear if

end

} bind def
/code39ext dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER code39ext--

% --BEGIN ENCODER code32--
% --REQUIRES preamble raiseerror renlinear code39--
% --DESC: Italian Pharmacode
% --EXAM: 01234567
% --EXOP: includetext
% --RNDR: renlinear
%%BeginResource: QRCODE code32 0.0 2015112400 63549 63380
%%BeginData:         99 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
dup /code39 dup /QRCODE findresource put
begin
/code32 {

20 dict begin

/options exch def      % We are given an options string
/barcode exch def      % We are given a barcode string

/dontdraw false def
/includetext false def  % Enable/disable code32 text
/textfont /Courier def
/textsize 8 def
/textyoffset -7 def
/textxoffset 0 def
/height 1 def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/textfont textfont cvlit def
/textsize textsize cvr def
/textyoffset textyoffset cvr def
/height height cvr def

% Validate the input
barcode length 8 ne barcode length 9 ne and {
/bwipp.code32badLength (Italian Pharmacode must be 8 or 9 digits) //raiseerror exec
} if
barcode {
dup 48 lt exch 57 gt or {
/bwipp.code32badCharacter (Italian Pharmacode must contain only digits) //raiseerror exec
} if
} forall

% Calculate check digit
/checksum 0 def
0 1 7 {
/i exch def
barcode i get 48 sub i 2 mod 0 ne {2 mul} if dup 9 gt {9 sub} if
checksum add /checksum exch def
} for
/checksum checksum 10 mod def
barcode length 9 eq {
barcode 8 get checksum 48 add ne {
/bwipp.code32badCheckDigit (Incorrect Italian Pharmacode check digit provided) //raiseerror exec
} if
} if
10 string
dup 0 barcode putinterval
dup 8 checksum 48 add put
/text exch def

% convert number from base10 to base32
/val text cvi 32 barcode cvrs def
/barcode 6 string def
0 1 5 {barcode exch 48 put} for
barcode 6 val length sub val putinterval

% convert base32 number to specified character set
0 1 5 {
dup barcode exch get
dup (AEIO) {ge {1 add} if dup} forall pop
barcode 3 1 roll put
} for

% format HRI
text 1 text 0 9 getinterval putinterval
text 0 65 put

% Get the result of encoding with code39
options (dontdraw) true put
/args barcode options //code39 exec def

args (txt) [ [text textxoffset textyoffset textfont textsize] ] put
args (textxalign) (center) put
args (opt) options put
args

dontdraw not //renlinear if

end

} bind def
/code32 dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER code32--

% --BEGIN ENCODER pzn--
% --REQUIRES preamble raiseerror renlinear code39--
% --DESC: Pharmazentralnummer (PZN)
% --EXAM: 123456
% --EXOP: includetext
% --RNDR: renlinear
%%BeginResource: QRCODE pzn 0.0 2015112400 63596 63384
%%BeginData:        100 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
dup /code39 dup /QRCODE findresource put
begin
/pzn {

20 dict begin

/options exch def      % We are given an options string
/barcode exch def      % We are given a barcode string

/dontdraw false def
/includetext false def  % Enable/disable code32 text
/textfont /Courier def
/textsize 8 def
/textyoffset -7 def
/textxoffset 0 def
/height 1 def
/pzn8 false def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/textfont textfont cvlit def
/textsize textsize cvr def
/textyoffset textyoffset cvr def
/textxoffset textxoffset cvr def
/height height cvr def

% Validate the input
pzn8 {
barcode length 7 ne barcode length 8 ne and {
/bwipp.pzn8badLength (PZN8 must be 7 or 8 digits) //raiseerror exec
} if
} {
barcode length 6 ne barcode length 7 ne and {
/bwipp.pzn7badLength (PZN7 must be 6 or 7 digits) //raiseerror exec
} if
} ifelse
barcode {
dup 48 lt exch 57 gt or {
/bwipp.pznBadCharacter (PZN must contain only digits) //raiseerror exec
} if
} forall

% Calculate check digit
/msglen pzn8 {9} {8} ifelse def
/checksum 0 def
0 1 msglen 3 sub {
/i exch def
barcode i get 48 sub i pzn8 {1} {2} ifelse add mul
checksum add /checksum exch def
} for
/checksum checksum 11 mod def
checksum 10 eq {
/bwipp.pznBadInputSequence (Incorrect PZN input sequence provided) //raiseerror exec
} if
barcode length msglen 1 sub eq {
barcode msglen 2 sub get checksum 48 add ne {
/bwipp.pznBadCheckDigit (Incorrect PZN check digit provided) //raiseerror exec
} if
} if
msglen string
dup 0 45 put
dup 1 barcode putinterval
dup msglen 1 sub checksum 48 add put
/msg exch def

% Get the result of encoding with code39
options (dontdraw) true put
/args msg options //code39 exec def

% format HRI
/text msglen 5 add string def
text 0 (PZN - ) putinterval
text 6 msg 1 msglen 1 sub getinterval putinterval

args (txt) [ [text textxoffset textyoffset textfont textsize] ] put
args (textxalign) (center) put
args (opt) options put
args

dontdraw not //renlinear if

end

} bind def
/pzn dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER pzn--

% --BEGIN ENCODER code93--
% --REQUIRES preamble raiseerror renlinear--
% --DESC: Code 93
% --EXAM: THIS IS CODE 93
% --EXOP: includetext includecheck
% --RNDR: renlinear
%%BeginResource: QRCODE code93 0.0 2015112400 65852 65716
%%BeginData:        148 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
begin
/code93 {

20 dict begin                 % Confine variables to local scope

/options exch def       % We are given an option string
/barcode exch def       % We are given a barcode string

/dontdraw false def
/includecheck false def  % Enable/disable checkdigit
/includetext false def   % Enable/disable text
/textfont /Courier def
/textsize 8 def
/textyoffset -7 def
/height 1 def
/parsefnc false def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/textfont textfont cvlit def
/textsize textsize cvr def
/textyoffset textyoffset cvr def
/height height cvr def

/encs
[ (131112) (111213) (111312) (111411) (121113)
(121212) (121311) (111114) (131211) (141111)
(211113) (211212) (211311) (221112) (221211)
(231111) (112113) (112212) (112311) (122112)
(132111) (111123) (111222) (111321) (121122)
(131121) (212112) (212211) (211122) (211221)
(221121) (222111) (112122) (112221) (122121)
(123111) (121131) (311112) (311211) (321111)
(112131) (113121) (211131) (121221) (312111)
(311121) (122211) (111141) (1111411)
] def

% Create a string of the available characters
/barchars (0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%) def

/barlen barcode length def

% Special function characters
/sft1 -1 def  /sft2 -2 def  /sft3 -3 def  /sft4 -4 def
/fncvals <<
(SFT$) sft1
(SFT%) sft2
(SFT/) sft3
(SFT+) sft4
>> def

% Convert input into bytes accounting for shift characters
/msg barlen array def
/i 0 def /j 0 def {
i barlen eq {exit} if
/char barcode i get def
parsefnc char 94 eq and i barlen 4 sub lt and {
barcode i 1 add get 94 ne {
/char fncvals barcode i 1 add 4 getinterval get def
/i i 4 add def
} {
/i i 1 add def
} ifelse
} if
msg j char put
/i i 1 add def
/j j 1 add def
} loop
/msg msg 0 j getinterval def
/msglen msg length def

includecheck {
/sbs msglen 6 mul 25 add string def
} {
/sbs msglen 6 mul 13 add string def
} ifelse
/txt msglen array def

% Put the start character
sbs 0 encs 47 get putinterval

/checksum1 0 def /checksum2 0 def
0 1 msglen 1 sub {
/i exch def
% Lookup the encoding for the each barcode character
msg i get dup 0 lt {
42 exch sub /indx exch def
/char ( ) def
} {
1 string dup 0 4 -1 roll put /char exch def
barchars char search
pop                                  % Discard true leaving pre
length /indx exch def                % indx is the length of pre
pop pop                              % Discard seek and post
} ifelse
/enc encs indx get def                   % Get the indxth encoding
sbs i 6 mul 6 add enc putinterval        % Put encoded digit into sbs
txt i [char i 9 mul 9 add textyoffset textfont textsize] put
/checksum1 checksum1 msglen i sub 1 sub 20 mod 1 add indx mul add def
/checksum2 checksum2 msglen i sub 15 mod 1 add indx mul add def
} for

includecheck {
% Put the first checksum character
/checksum1 checksum1 47 mod def
/checksum2 checksum2 checksum1 add 47 mod def
sbs msglen 6 mul 6 add encs checksum1 get putinterval
sbs msglen 6 mul 12 add encs checksum2 get putinterval
% Put the end character
sbs msglen 6 mul 18 add encs 48 get putinterval
} {
% Put the end character
sbs msglen 6 mul 6 add encs 48 get putinterval
} ifelse

% Return the arguments
<<
/ren //renlinear
/sbs [sbs {48 sub} forall]
/bhs [sbs length 1 add 2 idiv {height} repeat]
/bbs [sbs length 1 add 2 idiv {0} repeat]
includetext {
/txt txt
} if
/opt options
>>

dontdraw not //renlinear if

end

} bind def
/code93 dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER code93--

% --BEGIN ENCODER code93ext--
% --REQUIRES preamble raiseerror renlinear code93--
% --DESC: Code 93 Extended
% --EXAM: Code93 Ext!
% --EXOP: includetext includecheck
% --RNDR: renlinear
%%BeginResource: QRCODE code93ext 0.0 2015112400 65941 65711
%%BeginData:        114 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
dup /code93 dup /QRCODE findresource put
begin
/code93ext {

20 dict begin

/options exch def      % We are given an options string
/barcode exch def      % We are given the code39extended text

/dontdraw false def
/includetext false def
/parse false def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

% Parse ordinals of the form ^NNN to ASCII
parse {
/msg barcode length string def
/j 0 def
barcode
{ % loop
(^) search {
dup msg exch j exch putinterval
length j add 1 add /j exch def
pop
dup 0 3 getinterval cvi msg exch j 1 sub exch put
dup length 3 sub 3 exch getinterval
} {
dup msg exch j exch putinterval
length j add /j exch def
/barcode msg 0 j getinterval def
exit
} ifelse
} loop
} if

/barlen barcode length def

% Extended alphabet to non-extended alphabet
/extencs
[ (^SFT%U) (^SFT$A) (^SFT$B) (^SFT$C) (^SFT$D) (^SFT$E) (^SFT$F) (^SFT$G)
(^SFT$H) (^SFT$I) (^SFT$J) (^SFT$K) (^SFT$L) (^SFT$M) (^SFT$N) (^SFT$O)
(^SFT$P) (^SFT$Q) (^SFT$R) (^SFT$S) (^SFT$T) (^SFT$U) (^SFT$V) (^SFT$W)
(^SFT$X) (^SFT$Y) (^SFT$Z) (^SFT%A) (^SFT%B) (^SFT%C) (^SFT%D) (^SFT%E)
( )      (^SFT/A) (^SFT/B) (^SFT/C) (^SFT/D) (^SFT/E) (^SFT/F) (^SFT/G)
(^SFT/H) (^SFT/I) (^SFT/J) (^SFT/K) (^SFT/L) (-)      (.)      (^SFT/O)
(0)      (1)      (2)      (3)      (4)      (5)      (6)      (7)
(8)      (9)      (^SFT/Z) (^SFT%F) (^SFT%G) (^SFT%H) (^SFT%I) (^SFT%J)
(^SFT%V) (A)      (B)      (C)      (D)      (E)      (F)      (G)
(H)      (I)      (J)      (K)      (L)      (M)      (N)      (O)
(P)      (Q)      (R)      (S)      (T)      (U)      (V)      (W)
(X)      (Y)      (Z)      (^SFT%K) (^SFT%L) (^SFT%M) (^SFT%N) (^SFT%O)
(^SFT%W) (^SFT+A) (^SFT+B) (^SFT+C) (^SFT+D) (^SFT+E) (^SFT+F) (^SFT+G)
(^SFT+H) (^SFT+I) (^SFT+J) (^SFT+K) (^SFT+L) (^SFT+M) (^SFT+N) (^SFT+O)
(^SFT+P) (^SFT+Q) (^SFT+R) (^SFT+S) (^SFT+T) (^SFT+U) (^SFT+V) (^SFT+W)
(^SFT+X) (^SFT+Y) (^SFT+Z) (^SFT%P) (^SFT%Q) (^SFT%R) (^SFT%S) (^SFT%T)
] def

/newcode barlen 6 mul string def
/newtext barlen 6 mul string def
/j 0 def /k 0 def
0 1 barlen 1 sub {
/i exch def
/extchar extencs barcode i get get def
/extlen extchar length def
newcode j extchar putinterval
newtext k barcode i get put
extlen 1 ne {newtext k 1 add ( ) putinterval} if
/j j extlen add def
/k k extlen 1 eq {1} {2} ifelse add def
} for
/newcode newcode 0 j getinterval def
/newtext newtext 0 k getinterval def

% Get the result of encoding with code93
options (dontdraw) true put
options (parsefnc) true put
/args newcode options //code93 exec def

% Replace chars in /txt with chars in newtext
includetext {
/txt args (txt) get def
0 1 newtext length 1 sub {
/i exch def
/txtentry txt i get def
txtentry 0 newtext i 1 getinterval put
txt i txtentry put
} for
args (txt) txt put
} if
args (opt) options put
args

dontdraw not //renlinear if

end

} bind def
/code93ext dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER code93ext--

% --BEGIN ENCODER interleaved2of5--
% --REQUIRES preamble raiseerror renlinear--
% --DESC: Interleaved 2 of 5 (ITF)
% --EXAM: 2401234567
% --EXOP: height=0.5 includecheck includetext includecheckintext
% --RNDR: renlinear
%%BeginResource: QRCODE interleaved2of5 0.0 2015112400 65832 65492
%%BeginData:        150 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
begin
/interleaved2of5 {

20 dict begin         % Confine variables to local scope

/options exch def               % We are given an option string
/barcode exch def               % We are given a barcode string

/dontdraw false def
/includecheck false def         % Enable/disable checkdigit
/includetext false def          % Enable/disable text
/includecheckintext false def
/textfont /Courier def
/textsize 8 def
/textyoffset -7 def
/height 1 def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/textfont textfont cvlit def
/textsize textsize cvr def
/textyoffset textyoffset cvr def
/height height cvr def

% Validate the input
barcode {
dup 48 lt exch 57 gt or {
/bwipp.interleaved2of5badCharacter (Interleaved 2 of 5 must contain only digits) //raiseerror exec
} if
} forall

/barlen barcode length def      % Length of the code

% Prefix 0 to barcode if length is even and including checkdigit
% or length is odd and not including checkdigit
barlen 2 mod 0 eq includecheck and          % even & includecheck
barlen 2 mod 0 ne includecheck not and or { % odd  & !includecheck
/pad barlen 1 add string def  % Create pad one bigger than barcode
pad 0 48 put                  % Put ascii 0 at start of pad
pad 1 barcode putinterval     % Add barcode to the end of pad
/barcode pad def              % barcode=pad
/barlen barlen 1 add def      % barlen++
} if

% Add checksum to end of barcode
includecheck {
/checksum 0 def
0 1 barlen 1 sub {
/i exch def
i 2 mod 0 eq {
/checksum checksum barcode i get 48 sub 3 mul add def
} {
/checksum checksum barcode i get 48 sub add def
} ifelse
} for
/checksum 10 checksum 10 mod sub 10 mod def
/pad barlen 1 add string def    % Create pad one bigger than barcode
pad 0 barcode putinterval       % Add barcode to the start of pad
pad barlen checksum 48 add put  % Add checksum to end of pad
/barcode pad def                % barcode=pad
/barlen barlen 1 add def        % barlen++
} if

% Create an array containing the character mappings
/encs
[ (11221) (21112) (12112) (22111) (11212)
(21211) (12211) (11122) (21121) (12121)
(1111)  (2111)
] def

% Create a string of the available characters
/barchars (0123456789) def
/sbs barlen 5 mul 8 add string def
/txt barlen array def

% Put the start character
sbs 0 encs 10 get putinterval

0 2 barlen 1 sub {
/i exch def
% Lookup the encodings for two consecutive barcode characters
barcode i 1 getinterval barchars exch search
pop                           % Discard true leaving pre
length /indx exch def         % indx is the length of pre
pop pop                       % Discard seek and post
/enca encs indx get def       % Get the indxth encoding

barcode i 1 add 1 getinterval barchars exch search
pop                           % Discard true leaving pre
length /indx exch def         % indx is the length of pre
pop pop                       % Discard seek and post
/encb encs indx get def       % Get the indxth encoding

% Interleave the two character encodings
/intl enca length 2 mul string def
0 1 enca length 1 sub {
/j exch def
/achar enca j get def
/bchar encb j get def
intl j 2 mul achar put
intl j 2 mul 1 add bchar put
} for

sbs i 5 mul 4 add intl putinterval   % Put encoded digit into sbs
txt i [barcode i 1 getinterval i 9 mul 4 add textyoffset textfont textsize] put
includecheck includecheckintext not and barlen 2 sub i eq and {
txt i 1 add [( ) i 1 add 9 mul 4 add textyoffset textfont textsize] put
} {
txt i 1 add [barcode i 1 add 1 getinterval i 1 add 9 mul 4 add textyoffset textfont textsize] put
} ifelse
} for

% Put the end character
sbs barlen 5 mul 4 add encs 11 get putinterval

% Return the arguments
<<
/ren //renlinear
/sbs [sbs {48 sub} forall]
/bhs [sbs length 1 add 2 idiv {height} repeat]
/bbs [sbs length 1 add 2 idiv {0} repeat]
includetext {
/txt txt
} if
/barratio 2
/spaceratio 2
/opt options
>>

dontdraw not //renlinear if

end

} bind def
/interleaved2of5 dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER interleaved2of5--

% --BEGIN ENCODER itf14--
% --REQUIRES preamble raiseerror renlinear interleaved2of5--
% --DESC: ITF-14
% --EXAM: 0 46 01234 56789 3
% --EXOP: includetext
% --RNDR: renlinear
%%BeginResource: QRCODE itf14 0.0 2015112400 65819 65737
%%BeginData:        109 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
dup /interleaved2of5 dup /QRCODE findresource put
begin
/itf14 {

20 dict begin            % Confine variables to local scope

/options exch def  % We are given an option string
/barcode exch def  % We are given a barcode string

/dontdraw false def
/includetext false def
/includecheckintext true def
/textfont /Courier def
/textsize 8 def
/textxoffset 0 def
/textyoffset 3 def
/height 0.5 def
/showborder true def
/borderwidth 4 def
/borderleft 15 def
/borderright 15 def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/textfont textfont cvlit def
/textsize textsize cvr def
/textxoffset textxoffset cvr def
/textyoffset textyoffset cvr def
/height height cvr def
/borderwidth borderwidth cvr def
/borderleft borderleft cvr def
/borderright borderright cvr def

% Strip spaces from the given data
/text barcode def
barcode dup length string exch 0 exch
{dup 32 ne {3 copy put pop 1 add} {pop} ifelse} forall
0 exch getinterval /barcode exch def
/hasspace text length barcode length ne def

% Validate the input
barcode length 13 ne barcode length 14 ne and {
/bwipp.itf14badLength (ITF-14 must be 13 or 14 digits) //raiseerror exec
} if
barcode {
dup 48 lt exch 57 gt or {
/bwipp.itf14badCharacter (ITF-14 must contain only digits) //raiseerror exec
} if
} forall

% Calculate ITF checksum and add to end of barcode
/checksum 0 def
0 1 12 {
/i exch def
/checksum checksum barcode i get 48 sub i 2 mod 0 eq {3 mul} if add def
} for
/checksum 10 checksum 10 mod sub 10 mod def
barcode length 14 eq {
barcode 13 get checksum 48 add ne {
/bwipp.itf14badCheckDigit (Incorrect ITF-14 check digit provided) //raiseerror exec
} if
} {
14 string
dup 0 barcode putinterval
dup 13 checksum 48 add put
/barcode exch def
text length hasspace {2} {1} ifelse add string
dup dup length 2 sub ( ) putinterval
dup dup length 1 sub checksum 48 add put
dup 0 text putinterval
/text exch def
} ifelse

% Get the result of encoding with interleaved2of5
options (dontdraw) true put
options (showborder) showborder put
options (borderwidth) borderwidth put
options (borderleft) borderleft put
options (borderright) borderright put
options (height) height put
options (textyoffset) textyoffset put
/args barcode options //interleaved2of5 exec def

args (txt) [ [text textxoffset textyoffset textfont textsize] ] put
args (textxalign) (center) put
args (opt) options put
args

dontdraw not //renlinear if

end

} bind def
/itf14 dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER itf14--

% --BEGIN ENCODER identcode--
% --REQUIRES preamble raiseerror renlinear interleaved2of5--
% --DESC: Deutsche Post Identcode
% --EXAM: 563102430313
% --EXOP: includetext
% --RNDR: renlinear
%%BeginResource: QRCODE identcode 0.0 2015112400 62754 62576
%%BeginData:         91 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
dup /interleaved2of5 dup /QRCODE findresource put
begin
/identcode {

20 dict begin            % Confine variables to local scope

/options exch def  % We are given an option string
/barcode exch def  % We are given a barcode string

/dontdraw false def
/includetext false def    % Enable/disable text
/textfont /Courier def
/textsize 8 def
/textxoffset 0 def
/textyoffset -7 def
/height 1 def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/textfont textfont cvlit def
/textsize textsize cvr def
/textxoffset textxoffset cvr def
/textyoffset textyoffset cvr def
/height height cvr def

% Validate the input
barcode length 11 ne barcode length 12 ne and {
/bwipp.identcodeBadLength (Deutsche Post Identcode must be 11 or 12 digits) //raiseerror exec
} if
barcode {
dup 48 lt exch 57 gt or {
/bwipp.identcodeBadCharacter (Deutsche Post Identcode must contain only digits) //raiseerror exec
} if
} forall

% Calculate checksum and add to end of barcode
/checksum 0 def
0 1 10 {
/i exch def
/checksum checksum barcode i get 48 sub i 2 mod 0 eq {4 mul} {9 mul} ifelse add def
} for
/checksum 10 checksum 10 mod sub 10 mod def
barcode length 12 eq {
barcode 11 get checksum 48 add ne {
/bwipp.identcodeBadCheckDigit (Incorrect Deutsche Post Identcode check digit provided) //raiseerror exec
} if
} if
12 string
dup 0 barcode putinterval
dup 11 checksum 48 add put
/barcode exch def

% Compose the human readable text
/text (  .       .     ) 16 string copy def
text  0 barcode  0 2 getinterval putinterval
text  3 barcode  2 3 getinterval putinterval
text  7 barcode  5 3 getinterval putinterval
text 11 barcode  8 3 getinterval putinterval
text 15 barcode 11 1 getinterval putinterval

% Get the result of encoding with interleaved2of5
options (dontdraw) true put
options (includecheck) false put
/args barcode options //interleaved2of5 exec def

args (txt) [ [text textxoffset textyoffset textfont textsize] ] put
args (textxalign) (center) put
args (opt) options put
args

dontdraw not //renlinear if

end

} bind def
/identcode dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER identcode--

% --BEGIN ENCODER leitcode--
% --REQUIRES preamble raiseerror renlinear interleaved2of5--
% --DESC: Deutsche Post Leitcode
% --EXAM: 21348075016401
% --EXOP: includetext
% --RNDR: renlinear
%%BeginResource: QRCODE leitcode 0.0 2015112400 62746 62572
%%BeginData:         91 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
dup /interleaved2of5 dup /QRCODE findresource put
begin
/leitcode {

20 dict begin            % Confine variables to local scope

/options exch def  % We are given an option string
/barcode exch def  % We are given a barcode string

/dontdraw false def
/includetext false def    % Enable/disable text
/textfont /Courier def
/textsize 8 def
/textxoffset 0 def
/textyoffset -7 def
/height 1 def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/textfont textfont cvlit def
/textsize textsize cvr def
/textxoffset textxoffset cvr def
/textyoffset textyoffset cvr def
/height height cvr def

% Validate the input
barcode length 13 ne barcode length 14 ne and {
/bwipp.leitcodeBadLength (Deutsche Post Leitcode must be 13 or 14 digits) //raiseerror exec
} if
barcode {
dup 48 lt exch 57 gt or {
/bwipp.leitcodeBadCharacter (Deutsche Post Leitcode must contain only digits) //raiseerror exec
} if
} forall

% Calculate checksum and add to end of barcode
/checksum 0 def
0 1 12 {
/i exch def
/checksum checksum barcode i get 48 sub i 2 mod 0 eq {4 mul} {9 mul} ifelse add def
} for
/checksum 10 checksum 10 mod sub 10 mod def
barcode length 14 eq {
barcode 13 get checksum 48 add ne {
/bwipp.leitcodeBadCheckDigit (Incorrect Deutsche Post Leitcode check digit provided) //raiseerror exec
} if
} if
14 string
dup 0 barcode putinterval
dup 13 checksum 48 add put
/barcode exch def

% Compose the human readable text
/text (     .   .   .    ) 18 string copy def
text  0 barcode  0 5 getinterval putinterval
text  6 barcode  5 3 getinterval putinterval
text 10 barcode  8 3 getinterval putinterval
text 14 barcode 11 2 getinterval putinterval
text 17 barcode 13 1 getinterval putinterval

% Get the result of encoding with interleaved2of5
options (dontdraw) true put
options (includecheck) false put
/args barcode options //interleaved2of5 exec def

args (txt) [ [text textxoffset textyoffset textfont textsize] ] put
args (textxalign) (center) put
args (opt) options put
args

dontdraw not //renlinear if

end

} bind def
/leitcode dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER leitcode--

% --BEGIN ENCODER databaromni--
% --REQUIRES preamble raiseerror renlinear renmatrix--
% --DESC: GS1 DataBar Omnidirectional
% --EXAM: (01)24012345678905
% --EXOP:
% --RNDR: renlinear renmatrix
%%BeginResource: QRCODE databaromni 0.0 2015112400 112081 118257
%%BeginData:        418 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
dup /renmatrix dup /QRCODE findresource put
begin
/databaromni {

20 dict begin            % Confine variables to local scope

/options exch def  % We are given an option string
/barcode exch def  % We are given a barcode string

/dontdraw false def
/height 33 72 div def
/linkage false def
/format (omni) def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

format (truncated) eq {/height 13 72 div def} if
/height height cvr def

% Validate the input
barcode 0 4 getinterval (\(01\)) ne {
/bwipp.databaromniBadAI (GS1 DataBar Omnidirectional must begin with (01) application identifier) //raiseerror exec
} if
barcode length 17 ne barcode length 18 ne and {
/bwipp.databaromniBadLength (GS1 DataBar Omnidirectional must be 13 or 14 digits) //raiseerror exec
} if
barcode 4 barcode length 4 sub getinterval {
dup 48 lt exch 57 gt or {
/bwipp.databaromniBadCharacter (GS1 DataBar Omnidirectional must contain only digits) //raiseerror exec
} if
} forall

% Calculate checksum and add to end of barcode
/checksum 0 def
0 1 12 {
/i exch def
/checksum checksum barcode i 4 add get 48 sub i 2 mod 0 eq {3 mul} if add def
} for
/checksum 10 checksum 10 mod sub 10 mod def
barcode length 18 eq {
barcode 17 get checksum 48 add ne {
/bwipp.databaromniBadCheckDigit (Incorrect GS1 DataBar Omnidirectional check digit provided) //raiseerror exec
} if
} if
18 string
dup 0 barcode putinterval
dup 17 checksum 48 add put
/barcode exch def

% Create the human readable text
/txt barcode length array def
0 1 barcode length 1 sub {
/i exch def
txt i [barcode i 1 getinterval 0 0 () 0] put
} for

/ncr {  % n r
2 copy sub 2 copy lt {exch} if  % n r maxd mind
1 1 5 3 roll  % mind j=1 v=1 n maxd
1 add -1 exch {  % mind j v  n -1 maxd+1
mul  % mind j v*i
1 index 3 index le {
1 index idiv exch 1 add exch
} if
} for
{  % mind j v
1 index 3 index gt {exit} if
1 index idiv exch 1 add exch
} loop
exch pop exch pop
} bind def

/getRSSwidths {
/oe exch def
/el exch def
/mw exch def
/nm exch def
/val exch def
/out el array def
/mask 0 def
0 1 el 2 sub {
/bar exch def
/ew 1 def
/mask mask 1 bar bitshift or def {
/sval nm ew sub 1 sub el bar sub 2 sub ncr def
oe mask 0 eq and nm ew sub el 2 mul sub bar 2 mul add -2 ge and {
/sval sval nm ew sub el sub bar add el bar sub 2 sub ncr sub def
} if
el bar sub 2 gt {
/lval 0 def
nm ew sub el sub bar add 2 add -1 mw 1 add {
nm exch sub ew sub 1 sub el bar sub 3 sub ncr
/lval exch lval add def
} for
/sval sval lval el bar sub 1 sub mul sub def
} {
nm ew sub mw gt {/sval sval 1 sub def} if
} ifelse
/val val sval sub def
val 0 lt {exit} if
/ew ew 1 add def
/mask mask 1 bar bitshift not and def
} loop
/val val sval add def
/nm nm ew sub def
out bar ew put
} for
out el 1 sub nm put
out
} bind def

/binval [
linkage {1} {0} ifelse
barcode 4 13 getinterval {48 sub} forall
] def

0 1 12 {
/i exch def
binval i 1 add 2 copy get binval i get 4537077 mod 10 mul add put
binval i binval i get 4537077 idiv put
} for
/right binval 13 get 4537077 mod def
binval 13 2 copy get 4537077 idiv put

/left 0 def
/i true def
0 1 13 {
/j exch def
binval j get
dup 0 eq i and {
pop
} {
/i false def
/left left 3 -1 roll 10 13 j sub exp cvi mul add def
} ifelse
} for

/d1 left 1597 idiv def
/d2 left 1597 mod def
/d3 right 1597 idiv def
/d4 right 1597 mod def

/tab164 [
160   0     12 4   8 1  161   1
960   161   10 6   6 3  80   10
2014  961   8  8   4 5  31   34
2714  2015  6  10  3 6  10   70
2840  2715  4  12  1 8  1    126
] def

/tab154 [
335   0     5  10  2 7  4   84
1035  336   7  8   4 5  20  35
1515  1036  9  6   6 3  48  10
1596  1516  11 4   8 1  81  1
] def

/i 0 def {
d1 tab164 i get le {
tab164 i 1 add 7 getinterval {} forall
/d1te exch def /d1to exch def
/d1mwe exch def /d1mwo exch def
/d1ele exch def /d1elo exch def
/d1gs exch def
exit
} if
/i i 8 add def
} loop

/i 0 def {
d2 tab154 i get le {
tab154 i 1 add 7 getinterval {} forall
/d2te exch def /d2to exch def
/d2mwe exch def /d2mwo exch def
/d2ele exch def /d2elo exch def
/d2gs exch def
exit
} if
/i i 8 add def
} loop

/i 0 def {
d3 tab164 i get le {
tab164 i 1 add 7 getinterval {} forall
/d3te exch def /d3to exch def
/d3mwe exch def /d3mwo exch def
/d3ele exch def /d3elo exch def
/d3gs exch def
exit
} if
/i i 8 add def
} loop

/i 0 def {
d4 tab154 i get le {
tab154 i 1 add 7 getinterval {} forall
/d4te exch def /d4to exch def
/d4mwe exch def /d4mwo exch def
/d4ele exch def /d4elo exch def
/d4gs exch def
exit
} if
/i i 8 add def
} loop

/d1wo d1 d1gs sub d1te idiv d1elo d1mwo 4 false getRSSwidths def
/d1we d1 d1gs sub d1te mod  d1ele d1mwe 4 true  getRSSwidths def
/d2wo d2 d2gs sub d2to mod  d2elo d2mwo 4 true  getRSSwidths def
/d2we d2 d2gs sub d2to idiv d2ele d2mwe 4 false getRSSwidths def
/d3wo d3 d3gs sub d3te idiv d3elo d3mwo 4 false getRSSwidths def
/d3we d3 d3gs sub d3te mod  d3ele d3mwe 4 true  getRSSwidths def
/d4wo d4 d4gs sub d4to mod  d4elo d4mwo 4 true  getRSSwidths def
/d4we d4 d4gs sub d4to idiv d4ele d4mwe 4 false getRSSwidths def

/d1w 8 array def
0 1 3 {
/i exch def
d1w i 2 mul d1wo i get put
d1w i 2 mul 1 add d1we i get put
} for

/d2w 8 array def
0 1 3 {
/i exch def
d2w 7 i 2 mul sub d2wo i get put
d2w 6 i 2 mul sub d2we i get put
} for

/d3w 8 array def
0 1 3 {
/i exch def
d3w 7 i 2 mul sub d3wo i get put
d3w 6 i 2 mul sub d3we i get put
} for

/d4w 8 array def
0 1 3 {
/i exch def
d4w i 2 mul d4wo i get put
d4w i 2 mul 1 add d4we i get put
} for

/widths [
d1w {} forall
d2w {} forall
d3w {} forall
d4w {} forall
] def

/checkweights [
1   3   9   27  2   6   18  54
58  72  24  8   29  36  12  4
74  51  17  32  37  65  48  16
64  34  23  69  49  68  46  59
] def

/checkwidths [
3 8 2 1 1   3 5 5 1 1   3 3 7 1 1
3 1 9 1 1   2 7 4 1 1   2 5 6 1 1
2 3 8 1 1   1 5 7 1 1   1 3 9 1 1
] def

/checksum 0 def
0 1 31 {
/i exch def
/checksum checksum widths i get checkweights i get mul add def
} for
/checksum checksum 79 mod def
checksum 8 ge {/checksum checksum 1 add def} if
checksum 72 ge {/checksum checksum 1 add def} if
/checklt checkwidths checksum 9 idiv 5 mul 5 getinterval def
/checkrtrev checkwidths checksum 9 mod 5 mul 5 getinterval def
/checkrt 5 array def
0 1 4 {
/i exch def
checkrt i checkrtrev 4 i sub get put
} for

% Stacked format
format (omni) eq format (truncated) eq or {  % linear

/sbs [
1 d1w {} forall checklt {} forall d2w {} forall
d4w {} forall checkrt {} forall d3w {} forall 1 1
] def

<<
/ren //renlinear
/sbs sbs
/bhs [sbs length 1 add 2 idiv {height} repeat]
/bbs [sbs length 1 add 2 idiv {0} repeat]
/txt txt
/textxalign (center)
/opt options
>>

dontdraw not //renlinear if

} {  % 2D - stacked or stackedomni

/top [ 1 1 d1w {} forall checklt {} forall d2w {} forall 1 1 0 ] def
/bot [ 1 1 d4w {} forall checkrt {} forall d3w {} forall 1 1 0 ] def
0 2 24 {
/i exch def
top i get {0} repeat
top i 1 add get {1} repeat
} for
50 array astore /top exch def
0 2 24 {
/i exch def
bot i get {1} repeat
bot i 1 add get {0} repeat
} for
50 array astore /bot exch def

% Stacked
format (stacked) eq {
/sep [ 50 {0} repeat ] def
4 1 45 {
/i exch def
top i get bot i get eq {
sep i 1 top i get sub put
} {
sep i 1 sep i 1 sub get sub put
} ifelse
} for
/pixs [
5 {top aload pop} repeat
sep aload pop
7 {bot aload pop} repeat
] def
/pixy pixs length 50 idiv def
} if

% Stacked omnidirectional
format (stackedomni) eq {
/sep1 [ top {1 exch sub} forall ] def
sep1 0  [ 0 0 0 0 ] putinterval
sep1 46 [ 0 0 0 0 ] putinterval
18 1 30 {
/i exch def
top i get 0 eq {
top i 1 sub get 1 eq {
1
} {
sep1 i 1 sub get 0 eq {1} {0} ifelse
} ifelse
} {
0
} ifelse
sep1 exch i exch put
} for
/sep2 [ 0 0 0 0 21 { 0 1 } repeat 0 0 0 0 ] def
/sep3 [ bot {1 exch sub} forall ] def
sep3 0  [ 0 0 0 0 ] putinterval
sep3 46 [ 0 0 0 0 ] putinterval
19 1 31 {
/i exch def
bot i get 0 eq {
bot i 1 sub get 1 eq {
1
} {
sep3 i 1 sub get 0 eq {1} {0} ifelse
} ifelse
} {
0
} ifelse
sep3 exch i exch put
} for
/f3 [1 1 1 1 1 1 1 1 1 0 1 1 1] def
true 0 1 12 {dup bot exch 19 add get exch f3 exch get eq and} for {
% Right shifted module for value 3 finder
sep3 19 [ 0 0 0 0 0 0 0 0 0 0 1 0 0 ] putinterval
} if
/pixs [
33 {top aload pop} repeat
sep1 aload pop
sep2 aload pop
sep3 aload pop
33 {bot aload pop} repeat
] def
/pixy pixs length 50 idiv def
} if

% Return the arguments
<<
/ren //renmatrix
/pixs pixs
/pixx 50
/pixy pixy
/height pixy 72 div
/width 50 72 div
/opt options
>>

dontdraw not //renmatrix if

} ifelse

end

} bind def
/databaromni dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER databaromni--

% --BEGIN ENCODER databarstacked--
% --REQUIRES preamble raiseerror renlinear renmatrix databaromni--
% --DESC: GS1 DataBar Stacked
% --EXAM: (01)24012345678905
% --EXOP:
% --RNDR: renmatrix
%%BeginResource: QRCODE databarstacked 0.0 2015112400 67872 71029
%%BeginData:         73 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renmatrix dup /QRCODE findresource put
dup /databaromni dup /QRCODE findresource put
begin
/databarstacked {

20 dict begin                 % Confine variables to local scope

/options exch def       % We are given an option string
/barcode exch def       % We are given a barcode string

/dontdraw false def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

% Validate the input
barcode 0 4 getinterval (\(01\)) ne {
/bwipp.databarstackedBadAI (GS1 DataBar Stacked must begin with (01) application identifier) //raiseerror exec
} if
barcode length 17 ne barcode length 18 ne and {
/bwipp.databarstackedBadLength (GS1 DataBar Stacked must be 13 or 14 digits) //raiseerror exec
} if
barcode 4 barcode length 4 sub getinterval {
dup 48 lt exch 57 gt or {
/bwipp.databarstackedBadCharacter (GS1 DataBar Stacked must contain only digits) //raiseerror exec
} if
} forall

% Calculate checksum and add to end of barcode
/checksum 0 def
0 1 12 {
/i exch def
/checksum checksum barcode i 4 add get 48 sub i 2 mod 0 eq {3 mul} if add def
} for
/checksum 10 checksum 10 mod sub 10 mod def
barcode length 18 eq {
barcode 17 get checksum 48 add ne {
/bwipp.databarstackedBadCheckDigit (Incorrect GS1 DataBar Stacked check digit provided) //raiseerror exec
} if
} if
18 string
dup 0 barcode putinterval
dup 17 checksum 48 add put
/barcode exch def

% Get the result of encoding with databaromni with format=stacked
options (dontdraw) true put
options (format) (stacked) put

/args barcode options //databaromni exec def

args (opt) options put
args

dontdraw not //renmatrix if

end

} bind def
/databarstacked dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER databarstacked--

% --BEGIN ENCODER databarstackedomni--
% --REQUIRES preamble raiseerror renlinear renmatrix databaromni--
% --DESC: GS1 DataBar Stacked Omnidirectional
% --EXAM: (01)24012345678905
% --EXOP:
% --RNDR: renmatrix
%%BeginResource: QRCODE databarstackedomni 0.0 2015112400 67972 71109
%%BeginData:         73 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renmatrix dup /QRCODE findresource put
dup /databaromni dup /QRCODE findresource put
begin
/databarstackedomni {

20 dict begin                 % Confine variables to local scope

/options exch def       % We are given an option string
/barcode exch def       % We are given a barcode string

/dontdraw false def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

% Validate the input
barcode 0 4 getinterval (\(01\)) ne {
/bwipp.databarstackedomniBadAI (GS1 DataBar Stacked Omnidirectional must begin with (01) application identifier) //raiseerror exec
} if
barcode length 17 ne barcode length 18 ne and {
/bwipp.databarstackedomniBadLength (GS1 DataBar Stacked Omnidirectional must be 13 or 14 digits) //raiseerror exec
} if
barcode 4 barcode length 4 sub getinterval {
dup 48 lt exch 57 gt or {
/bwipp.databarstackedomniBadCharacter (GS1 DataBar Stacked Omnidirectional must contain only digits) //raiseerror exec
} if
} forall

% Calculate checksum and add to end of barcode
/checksum 0 def
0 1 12 {
/i exch def
/checksum checksum barcode i 4 add get 48 sub i 2 mod 0 eq {3 mul} if add def
} for
/checksum 10 checksum 10 mod sub 10 mod def
barcode length 18 eq {
barcode 17 get checksum 48 add ne {
/bwipp.databarstackedomniBadCheckDigit (Incorrect GS1 DataBar Stacked Omnidirectional check digit provided) //raiseerror exec
} if
} if
18 string
dup 0 barcode putinterval
dup 17 checksum 48 add put
/barcode exch def

% Get the result of encoding with databaromni with format=stackedomni
options (dontdraw) true put
options (format) (stackedomni) put

/args barcode options //databaromni exec def

args (opt) options put
args

dontdraw not //renmatrix if

end

} bind def
/databarstackedomni dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER databarstackedomni--

% --BEGIN ENCODER databartruncated--
% --REQUIRES preamble raiseerror renlinear renmatrix databaromni--
% --DESC: GS1 DataBar Truncated
% --EXAM: (01)24012345678905
% --EXOP:
% --RNDR: renlinear renmatrix
%%BeginResource: QRCODE databartruncated 0.0 2015112400 67898 71045
%%BeginData:         73 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
dup /databaromni dup /QRCODE findresource put
begin
/databartruncated {

20 dict begin                 % Confine variables to local scope

/options exch def       % We are given an option string
/barcode exch def       % We are given a barcode string

/dontdraw false def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

% Validate the input
barcode 0 4 getinterval (\(01\)) ne {
/bwipp.databartruncatedBadAI (GS1 DataBar Truncated must begin with (01) application identifier) //raiseerror exec
} if
barcode length 17 ne barcode length 18 ne and {
/bwipp.databartruncatedBadLength (GS1 DataBar Truncated must be 13 or 14 digits) //raiseerror exec
} if
barcode 4 barcode length 4 sub getinterval {
dup 48 lt exch 57 gt or {
/bwipp.databartruncatedBadCharacter (GS1 DataBar Truncated must contain only digits) //raiseerror exec
} if
} forall

% Calculate checksum and add to end of barcode
/checksum 0 def
0 1 12 {
/i exch def
/checksum checksum barcode i 4 add get 48 sub i 2 mod 0 eq {3 mul} if add def
} for
/checksum 10 checksum 10 mod sub 10 mod def
barcode length 18 eq {
barcode 17 get checksum 48 add ne {
/bwipp.databartruncatedBadCheckDigit (Incorrect GS1 DataBar Truncated check digit provided) //raiseerror exec
} if
} if
18 string
dup 0 barcode putinterval
dup 17 checksum 48 add put
/barcode exch def

% Get the result of encoding with databaromni with format=truncated
options (dontdraw) true put
options (format) (truncated) put

/args barcode options //databaromni exec def

args (opt) options put
args

dontdraw not //renlinear if

end

} bind def
/databartruncated dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER databartruncated--

% --BEGIN ENCODER databarlimited--
% --REQUIRES preamble raiseerror renlinear--
% --DESC: GS1 DataBar Limited
% --EXAM: (01)15012345678907
% --EXOP:
% --RNDR: renlinear
%%BeginResource: QRCODE databarlimited 0.0 2015112400 83260 86093
%%BeginData:        276 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
begin
/databarlimited {

20 dict begin            % Confine variables to local scope

/options exch def  % We are given an option string
/barcode exch def  % We are given a barcode string

/dontdraw false def
/height 10 72 div def
/linkage false def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/height height cvr def

% Validate the input
barcode 0 4 getinterval (\(01\)) ne {
/bwipp.databarlimitedBadAI (GS1 DataBar Limited must begin with (01) application identifier) //raiseerror exec
} if
barcode length 17 ne barcode length 18 ne and {
/bwipp.databarlimitedBadLength (GS1 DataBar Limited must be 13 or 14 digits) //raiseerror exec
} if
barcode 4 get dup 48 lt exch 49 gt or {
/bwipp.databarlimitedBadStartDigit (GS1 DataBar Limited must begin with 0 or 1) //raiseerror exec
} if
barcode 5 barcode length 5 sub getinterval {
dup 48 lt exch 57 gt or {
/bwipp.databarlimitedBadCharacter (GS1 DataBar Limited must contain only digits) //raiseerror exec
} if
} forall

% Calculate checksum and add to end of barcode
/checksum 0 def
0 1 12 {
/i exch def
/checksum checksum barcode i 4 add get 48 sub i 2 mod 0 eq {3 mul} if add def
} for
/checksum 10 checksum 10 mod sub 10 mod def
barcode length 18 eq {
barcode 17 get checksum 48 add ne {
/bwipp.databaromniBadCheckDigit (Incorrect GS1 DataBar Limited check digit provided) //raiseerror exec
} if
} if
18 string
dup 0 barcode putinterval
dup 17 checksum 48 add put
/barcode exch def

% Strip the AI and optional check digit
/binval [
barcode 4 13 getinterval {48 sub} forall
] def
linkage {
/linkval [ 2 0 1 5 1 3 3 5 3 1 0 9 6 ] def
0 1 binval length 1 sub {
/i exch def
binval i binval i get linkval i get add put
} for
} if

% Create the human readable text
/txt barcode length array def
0 1 barcode length 1 sub {
/i exch def
txt i [barcode i 1 getinterval 0 0 () 0] put
} for

/ncr {  % n r
2 copy sub 2 copy lt {exch} if  % n r maxd mind
1 1 5 3 roll  % mind j=1 v=1 n maxd
1 add -1 exch {  % mind j v  n -1 maxd+1
mul  % mind j v*i
1 index 3 index le {
1 index idiv exch 1 add exch
} if
} for
{  % mind j v
1 index 3 index gt {exit} if
1 index idiv exch 1 add exch
} loop
exch pop exch pop
} bind def

/getRSSwidths {
/oe exch def
/el exch def
/mw exch def
/nm exch def
/val exch def
/out el array def
/mask 0 def
0 1 el 2 sub {
/bar exch def
/ew 1 def
/mask mask 1 bar bitshift or def {
/sval nm ew sub 1 sub el bar sub 2 sub ncr def
oe mask 0 eq and nm ew sub el 2 mul sub bar 2 mul add -2 ge and {
/sval sval nm ew sub el sub bar add el bar sub 2 sub ncr sub def
} if
el bar sub 2 gt {
/lval 0 def
nm ew sub el sub bar add 2 add -1 mw 1 add {
nm exch sub ew sub 1 sub el bar sub 3 sub ncr
/lval exch lval add def
} for
/sval sval lval el bar sub 1 sub mul sub def
} {
nm ew sub mw gt {/sval sval 1 sub def} if
} ifelse
/val val sval sub def
val 0 lt {exit} if
/ew ew 1 add def
/mask mask 1 bar bitshift not and def
} loop
/val val sval add def
/nm nm ew sub def
out bar ew put
} for
out el 1 sub nm put
out
} bind def

0 1 11 {
/i exch def
binval i 1 add 2 copy get binval i get 2013571 mod 10 mul add put
binval i binval i get 2013571 idiv put
} for
/d2 binval 12 get 2013571 mod def
binval 12 2 copy get 2013571 idiv put

/d1 0 def
/i true def
0 1 12 {
/j exch def
binval j get
dup 0 eq i and {
pop
} {
/i false def
/d1 d1 3 -1 roll 10 12 j sub exp cvi mul add def
} ifelse
} for

/tab267 [
183063   0        17 9   6 3  6538   28
820063   183064   13 13  5 4  875    728
1000775  820064   9  17  3 6  28     6454
1491020  1000776  15 11  5 4  2415   203
1979844  1491021  11 15  4 5  203    2408
1996938  1979845  19 7   8 1  17094  1
2013570  1996939  7  19  1 8  1      16632
] def

/i 0 def {
d1 tab267 i get le {
tab267 i 1 add 7 getinterval {} forall
/d1te exch def /d1to exch def
/d1mwe exch def /d1mwo exch def
/d1ele exch def /d1elo exch def
/d1gs exch def
exit
} if
/i i 8 add def
} loop

/i 0 def {
d2 tab267 i get le {
tab267 i 1 add 7 getinterval {} forall
/d2te exch def /d2to exch def
/d2mwe exch def /d2mwo exch def
/d2ele exch def /d2elo exch def
/d2gs exch def
exit
} if
/i i 8 add def
} loop

/d1wo d1 d1gs sub d1te idiv d1elo d1mwo 7 false getRSSwidths def
/d1we d1 d1gs sub d1te mod  d1ele d1mwe 7 true  getRSSwidths def
/d2wo d2 d2gs sub d2te idiv d2elo d2mwo 7 false getRSSwidths def
/d2we d2 d2gs sub d2te mod  d2ele d2mwe 7 true  getRSSwidths def

/d1w 14 array def
0 1 6 {
/i exch def
d1w i 2 mul d1wo i get put
d1w i 2 mul 1 add d1we i get put
} for

/d2w 14 array def
0 1 6 {
/i exch def
d2w i 2 mul d2wo i get put
d2w i 2 mul 1 add d2we i get put
} for

/widths [
d1w {} forall
d2w {} forall
] def

/checkweights [
1  3  9  27 81 65 17 51 64 14 42 37 22 66
20 60 2  6  18 54 73 41 34 13 39 28 84 74
] def

/checkseq [
0 1 43 {} for
45 52 57
63 1 66 {} for
73 1 79 {} for
82
126 1 130 {} for
132
141 1 146 {} for
210 1 217 {} for
220
316 1 320 {} for
322 323
326 337
] def

/checksum 0 def
0 1 27 {
/i exch def
/checksum checksum widths i get checkweights i get mul add def
} for
/checksum checksum 89 mod def
/seq checkseq checksum get def
/swidths seq 21 idiv 8 3 6 false getRSSwidths def
/bwidths seq 21 mod  8 3 6 false getRSSwidths def

/checkwidths [0 0 0 0 0 0 0 0 0 0 0 0 1 1] def
0 1 5 {
/i exch def
checkwidths i 2 mul swidths i get put
checkwidths i 2 mul 1 add bwidths i get put
} for

/sbs [
1 d1w {} forall checkwidths {} forall d2w {} forall 1 1
] def

% Return the arguments
<<
/ren //renlinear
/sbs sbs
/bhs [sbs length 1 add 2 idiv {height} repeat]
/bbs [sbs length 1 add 2 idiv {0} repeat]
/txt txt
/textxalign (center)
/opt options
>>

dontdraw not //renlinear if

end

} bind def
/databarlimited dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER databarlimited--

% --BEGIN ENCODER databarexpanded--
% --REQUIRES preamble raiseerror renlinear renmatrix--
% --DESC: GS1 DataBar Expanded
% --EXAM: (01)95012345678903(3103)000123
% --EXOP:
% --RNDR: renlinear renmatrix
%%BeginResource: QRCODE databarexpanded 0.0 2015112400 197224 210202
%%BeginData:        871 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
dup /renmatrix dup /QRCODE findresource put
begin
/databarexpanded {

20 dict begin            % Confine variables to local scope

/options exch def  % We are given an option string
/barcode exch def  % We are given a barcode string

/dontdraw false def
/height 34 72 div def
/format (expanded) def
/segments -1 def
/linkage false def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/height height cvr def
/segments segments cvi def

segments -1 eq {
/segments format (expandedstacked) eq {4} {22} ifelse def
} if

% Expand ordinals of the form ^NNN to ASCII
/expand {
/in exch def
/out in length string def
/j 0 def
in
{ % loop
(^) search {
dup out exch j exch putinterval
length j add 1 add /j exch def
pop
dup 0 3 getinterval cvi out exch j 1 sub exch put
dup length 3 sub 3 exch getinterval
} {
dup out exch j exch putinterval
length j add /j exch def
out 0 j getinterval exit
} ifelse
} loop
} bind def

% Parse out AIs
/ais [] def
/aival 2 dict def
barcode dup length 1 sub 1 exch getinterval
{  % loop
dup () eq {exit} if
(\)) search pop
exch pop
exch (\() search {
exch pop exch 3 1 roll
} {
() 3 1 roll
}  ifelse
[ ais aload pop counttomark 2 add index ] /ais exch def
aival 3 1 roll expand put
} loop
pop

% Method selection
{  % common exit

% (01)9...(3103)...
ais length 2 eq {
ais 0 get (01) eq ais 1 get (3103) eq and {
aival (01) get 0 1 getinterval (9) eq aival (3103) get cvi 32767 le and {
(0100) false exit
} if
} if
} if

% (01)9...(3202)...
ais length 2 eq {
ais 0 get (01) eq ais 1 get (3202) eq and {
aival (01) get 0 1 getinterval (9) eq aival (3202) get cvi 9999 le and {
(0101) false exit
} if
} if
} if

% (01)9...(3203)...
ais length 2 eq {
ais 0 get (01) eq ais 1 get (3203) eq and {
aival (01) get 0 1 getinterval (9) eq aival (3203) get cvi 22767 le and {
(0101) false exit
} if
} if
} if

% (01)9...(310x/320x)...[(11/13/15/17)...]
ais length dup 2 eq exch 3 eq or {
/ai310x false 3100 1 3109 {10 4 string cvrs ais 1 get eq or} for def
/ai320x false 3200 1 3209 {10 4 string cvrs ais 1 get eq or} for def
ais length 3 eq {
/aibad true [ (11) (13) (15) (17) ] {ais 2 get ne and} forall def
} {
/aibad false def
} ifelse
ais 0 get (01) eq ai310x ai320x or and aibad not and {
ais length 3 eq {
aival (01) get 0 1 getinterval (9) eq
aival ais 1 get get cvi 99999 le and
aival ais 2 get get cvi 999999 le and {
ai310x ais 2 get (11) eq and { (0111000) false exit } if
ai320x ais 2 get (11) eq and { (0111001) false exit } if
ai310x ais 2 get (13) eq and { (0111010) false exit } if
ai320x ais 2 get (13) eq and { (0111011) false exit } if
ai310x ais 2 get (15) eq and { (0111100) false exit } if
ai320x ais 2 get (15) eq and { (0111101) false exit } if
ai310x ais 2 get (17) eq and { (0111110) false exit } if
ai320x ais 2 get (17) eq and { (0111111) false exit } if
} if
} {
aival (01) get 0 1 getinterval (9) eq
aival ais 1 get get cvi 99999 le and {
ai310x { (0111000) false exit } if
ai320x { (0111001) false exit } if
} if
} ifelse
} if
} if

% (01)9...(392x)...
ais length 2 ge {
/ai392x false 3920 1 3923 {10 4 string cvrs ais 1 get eq or} for def
ais 0 get (01) eq ai392x and {
aival (01) get 0 1 getinterval (9) eq { (01100) true exit } if
} if
} if

% (01)9...(393x)...
ais length 2 ge {
/ai393x false 3930 1 3933 {10 4 string cvrs ais 1 get eq or} for def
ais 0 get (01) eq ai393x and {
aival (01) get 0 1 getinterval (9) eq { (01101) true exit } if
} if
} if

% (01)...
ais 0 get (01) eq { (1) true exit } if

% Freeform
(00) true exit

} loop
/gpfallow exch def
/method exch def

/conv12to40 {
(0000000000000000000000000000000000000000) 40 string copy
2 copy  0 10 getinterval exch 0 3 getinterval cvi 2 10 string cvrs dup length 10 exch sub exch putinterval
2 copy 10 10 getinterval exch 3 3 getinterval cvi 2 10 string cvrs dup length 10 exch sub exch putinterval
2 copy 20 10 getinterval exch 6 3 getinterval cvi 2 10 string cvrs dup length 10 exch sub exch putinterval
2 copy 30 10 getinterval exch 9 3 getinterval cvi 2 10 string cvrs dup length 10 exch sub exch putinterval
exch pop
} bind def

/conv13to44 {
(00000000000000000000000000000000000000000000) 44 string copy
2 copy 0 4 getinterval exch 0 1 getinterval cvi 2 4 string cvrs dup length 4 exch sub exch putinterval
dup 3 -1 roll 1 12 getinterval conv12to40 4 exch putinterval
} bind def

/tobin {
string dup length 1 sub 0 exch 1 exch {1 index exch 48 put} for
dup 3 -1 roll 2 2 index length string cvrs dup length 2 index length exch sub exch putinterval
} bind def

method (00) eq {
/cdf [] def
/gpf [] def
} if

method (1) eq {
/cdf aival (01) get 0 13 getinterval conv13to44 def
/cdf [ cdf {48 sub} forall ] def
/gpf [] def
/ais ais 1 ais length 1 sub getinterval def
} if

method (0100) eq {
/cdf 55 string def
cdf 0 aival (01) get 1 12 getinterval conv12to40 putinterval
cdf 40 aival (3103) get cvi 15 tobin putinterval
/cdf [ cdf {48 sub} forall ] def
/gpf [] def
/ais [] def
} if

method (0101) eq {
/cdf 55 string def
cdf 0 aival (01) get 1 12 getinterval conv12to40 putinterval
ais 1 get (3202) eq {
aival (3202) get cvi 15 tobin
} {
aival (3203) get cvi 10000 add 15 tobin
} ifelse
cdf exch 40 exch putinterval
/cdf [ cdf {48 sub} forall ] def
/gpf [] def
/ais [] def
} if

method length 7 eq {
/cdf 76 string def
cdf 0 aival (01) get 1 12 getinterval conv12to40 putinterval
6 string dup 0 ais 1 get 3 1 getinterval putinterval
dup aival ais 1 get get 1 5 getinterval 1 exch putinterval cvi 20 tobin
cdf exch 40 exch putinterval
ais length 3 eq {
aival ais 2 get get
dup 0 2 getinterval cvi 384 mul exch
dup 2 2 getinterval cvi 1 sub 32 mul exch
4 2 getinterval cvi add add
} {
38400
} ifelse
16 tobin cdf exch 60 exch putinterval
/cdf [ cdf {48 sub} forall ] def
/gpf [] def
/ais [] def
} if

method (01100) eq {
/cdf 42 string def
cdf 0 aival (01) get 1 12 getinterval conv12to40 putinterval
cdf 40 ais 1 get 3 1 getinterval cvi 2 tobin putinterval
/cdf [ cdf {48 sub} forall ] def
/gpf [ aival ais 1 get get {} forall ] def
/ais ais 2 ais length 2 sub getinterval def
} if

method (01101) eq {
/cdf 52 string def
cdf 0 aival (01) get 1 12 getinterval conv12to40 putinterval
cdf 40 ais 1 get 3 1 getinterval cvi 2 tobin putinterval
cdf 42 aival ais 1 get get 0 3 getinterval cvi 10 tobin putinterval
/cdf [ cdf {48 sub} forall ] def
/gpf [ aival ais 1 get get dup length 3 sub 3 exch getinterval {} forall ] def
/ais ais 2 ais length 2 sub getinterval def
} if

% Variable length symbol field
gpfallow {
/vlf 2 array def
} {
/vlf [] def
} ifelse

% Pre-defined fixed length data field AIs
% any AI whose prefix is not included in this table must be
% terminated with "FNC1", even if it's fixed length
/aifixed 23 dict def
[
0 1 4 {} for
] {
(00) 2 string copy dup dup 1 5 -1 roll 48 add put aifixed 3 1 roll put
} forall
[
11 1 20 {} for
23
31 1 36 {} for
41
] {
10 2 string cvrs dup aifixed 3 1 roll put
} forall

/fnc1 -1 def /lnumeric -2 def /lalphanumeric -3 def /liso646 -4 def

/numeric <<
0 1 119 {
dup (00) 2 string copy dup 3 -1 roll 11 2 string cvrs
dup length 2 exch sub exch putinterval
dup 0 get 65 eq {dup 0 94 put} if
dup 1 get 65 eq {dup 1 94 put} if
exch 8 add
(0000000) 7 string copy dup 3 -1 roll 2 7 string cvrs
dup length 7 exch sub exch putinterval
} for
lalphanumeric (0000)
>> def

/alphanumeric <<
48 1 57 {dup 43 sub 5 tobin} for
fnc1 (01111)
65 1 90 {dup 33 sub 6 tobin} for
42 (111010)
44 1 47 {dup 15 add 6 tobin} for
lnumeric (000)
liso646 (00100)
>> def

/iso646 <<
48 1 57 {dup 43 sub 5 tobin} for
fnc1 (01111)
65 1 90 {dup 1 sub 7 tobin} for
97 1 122 {dup 7 sub 7 tobin} for
33 (11101000)
34 (11101001)
37 1 47 {dup 197 add 8 tobin} for
58 1 63 {dup 187 add 8 tobin} for
95 (11111011)
32 (11111100)
lnumeric (000)
lalphanumeric (00100)
>> def

% Append the remaining AI data
0 1 ais length 1 sub {
/i exch def
/ai ais i get def
/val aival ai get def
gpf length ai length add val length add array
dup 0 gpf putinterval
dup gpf length ai [ exch {} forall ] putinterval
dup gpf length ai length add val [ exch {} forall ] putinterval
/gpf exch def
i ais length 1 sub ne aifixed ai 0 2 getinterval known not and {  % Append FNC1
gpf length 1 add array
dup 0 gpf putinterval
dup gpf length fnc1 put
/gpf exch def
} if
} for

% Calculate the number of bits remaining to the next valid symbol size
/rembits {
dup
12 div ceiling cvi 12 mul            % Round up to multiple of 12
48 2 copy lt {exch} if pop           % At least 4 symbols
dup 12 idiv dup segments mod 1 eq {  % At least 2 symbols on last row of stacked symbol
1 add 12 mul exch pop
} {
pop
} ifelse
exch sub
} bind def

/encode {
dup /raw ne {exch get} {pop} ifelse
[ exch {48 sub} forall ]
dup length exch
gpfenc exch j exch putinterval
/j exch j add def
} bind def

% Pre-compute alphanumeric and numeric runlengths and position of next ISO646-only characters
/numericruns [ gpf length {0} repeat 0 -1 ] def
/alphanumericruns [ gpf length {0} repeat 0 ] def
/nextiso646only [ gpf length {0} repeat 9999 ] def
gpf length 1 sub -1 0 {
/i exch def
gpf i get
(00) 2 string copy
dup 0 gpf i get dup fnc1 eq {pop 94} if put
i gpf length 1 sub lt {dup 1 gpf i 1 add get dup fnc1 eq {pop 94} if put} if
numeric exch known {
numericruns i numericruns i 2 add get 2 add put
} {
numericruns i 0 put
} ifelse
dup alphanumeric exch known {
alphanumericruns i alphanumericruns i 1 add get 1 add put
} {
alphanumericruns i 0 put
} ifelse
dup iso646 exch known exch alphanumeric exch known not and {
nextiso646only i 0 put
} {
nextiso646only i nextiso646only i 1 add get 1 add put
} ifelse
} for

% Encode the general purpose field
/gpfenc 252 array def
/i 0 def /j 0 def /mode (numeric) def
{  % loop
i gpf length eq {exit} if
{  % not a loop but common exit point

mode (numeric) eq {
i gpf length 2 sub le {
2 string
dup 0 gpf i get dup fnc1 eq {pop 94} if put
dup 1 gpf i 1 add get dup fnc1 eq {pop 94} if put
dup numeric exch known {
numeric encode
/i i 2 add def
exit
} if
pop
lalphanumeric numeric encode
/mode (alphanumeric) def
exit
} {
gpf i get dup 48 lt exch 57 gt or {
lalphanumeric numeric encode
/mode (alphanumeric) def
exit
} if
/rem 12 1 add method length add vlf length add cdf length add j add rembits def
rem 4 ge rem 6 le and {  % C1 + 1 into 4 to 6 bits
(000000) 6 string copy 0 rem getinterval
dup gpf i get 47 sub 2 4 string cvrs
dup length 4 exch sub exch putinterval /raw encode
/i i 1 add def
exit
} {  % C1.FNC1
2 string dup 0 gpf i get put dup 1 94 put numeric encode
/i i 1 add def
exit
} ifelse
} ifelse
} if

mode (alphanumeric) eq {
gpf i get fnc1 eq {
fnc1 alphanumeric encode
/mode (numeric) def
/i i 1 add def
exit
} if
gpf i get dup iso646 exch known exch alphanumeric exch known not and {
liso646 alphanumeric encode
/mode (iso646) def
exit
} if
numericruns i get 6 ge {
lnumeric alphanumeric encode
/mode (numeric) def
exit
} if
numericruns i get dup 4 ge exch i add gpf length eq and {
lnumeric alphanumeric encode
/mode (numeric) def
exit
} if
gpf i get alphanumeric encode
/i i 1 add def
exit
} if

mode (iso646) eq {
gpf i get fnc1 eq {
fnc1 iso646 encode
/mode (numeric) def
/i i 1 add def
exit
} if
numericruns i get 4 ge nextiso646only i get 10 ge and {
lnumeric iso646 encode
/mode (numeric) def
exit
} if
alphanumericruns i get 5 ge nextiso646only i get 10 ge and {
lalphanumeric iso646 encode
/mode (alphanumeric) def
exit
} if
gpf i get iso646 encode
/i i 1 add def
exit
} if

} loop
} loop
/gpf gpfenc 0 j getinterval def

% Complete the variable length field and create pad
1 12 add method length add vlf length add cdf length add gpf length add
dup rembits dup array /pad exch def
vlf length 0 ne {
add 12 idiv
dup 2 mod vlf exch 0 exch put
14 le {0} {1} ifelse vlf exch 1 exch put
} {
pop pop
} ifelse
pad length 0 gt {
0 5 pad length 1 sub {  % Fill with 00100
/i exch def
pad i [ 0 0 1 0 0 ] 0 pad length i sub 5 2 copy gt {exch} if pop getinterval putinterval
} for
mode (numeric) eq {  % Prefix shift from numeric to ASCII
/pad [ 0 0 0 0 pad aload pop ] 0 pad length getinterval def
} if
} if

% Concatinate fields
/binval [
linkage {1} {0} ifelse
method {48 sub} forall
vlf aload pop
cdf aload pop
gpf aload pop
pad aload pop
] def
/datalen binval length 12 idiv def

/ncr {  % n r
2 copy sub 2 copy lt {exch} if  % n r maxd mind
1 1 5 3 roll  % mind j=1 v=1 n maxd
1 add -1 exch {  % mind j v  n -1 maxd+1
mul  % mind j v*i
1 index 3 index le {
1 index idiv exch 1 add exch
} if
} for
{  % mind j v
1 index 3 index gt {exit} if
1 index idiv exch 1 add exch
} loop
exch pop exch pop
} bind def

/getRSSwidths {
/oe exch def
/el exch def
/mw exch def
/nm exch def
/val exch def
/out el array def
/mask 0 def
0 1 el 2 sub {
/bar exch def
/ew 1 def
/mask mask 1 bar bitshift or def {
/sval nm ew sub 1 sub el bar sub 2 sub ncr def
oe mask 0 eq and nm ew sub el 2 mul sub bar 2 mul add -2 ge and {
/sval sval nm ew sub el sub bar add el bar sub 2 sub ncr sub def
} if
el bar sub 2 gt {
/lval 0 def
nm ew sub el sub bar add 2 add -1 mw 1 add {
nm exch sub ew sub 1 sub el bar sub 3 sub ncr
/lval exch lval add def
} for
/sval sval lval el bar sub 1 sub mul sub def
} {
nm ew sub mw gt {/sval sval 1 sub def} if
} ifelse
/val val sval sub def
val 0 lt {exit} if
/ew ew 1 add def
/mask mask 1 bar bitshift not and def
} loop
/val val sval add def
/nm nm ew sub def
out bar ew put
} for
out el 1 sub nm put
out
} bind def

/tab174 [
347   0     12 5   7 2  87  4
1387  348   10 7   5 4  52  20
2947  1388  8  9   4 5  30  52
3987  2948  6  11  3 6  10  104
4191  3988  4  13  1 8  1   204
] def

/dxw datalen array def

0 1 datalen 1 sub {

/x exch def

/d binval x 12 mul 12 getinterval def
/d 0 0 1 11 {/j exch def 2 11 j sub exp cvi d j get mul add} for def

/j 0 def {
d tab174 j get le {
tab174 j 1 add 7 getinterval {} forall
/dte exch def /dto exch def
/dmwe exch def /dmwo exch def
/dele exch def /delo exch def
/dgs exch def
exit
} if
/j j 8 add def
} loop

/dwo d dgs sub dte idiv delo dmwo 4 true  getRSSwidths def
/dwe d dgs sub dte mod  dele dmwe 4 false getRSSwidths def

/dw 8 array def
x 2 mod 0 eq {
0 1 3 {
/j exch def
dw 7 j 2 mul sub dwo j get put
dw 6 j 2 mul sub dwe j get put
} for
} {
0 1 3 {
/j exch def
dw j 2 mul dwo j get put
dw j 2 mul 1 add dwe j get put
} for
} ifelse

dxw x dw put

} for

/finderwidths [
1 8 4 1 1    1 1 4 8 1
3 6 4 1 1    1 1 4 6 3
3 4 6 1 1    1 1 6 4 3
3 2 8 1 1    1 1 8 2 3
2 6 5 1 1    1 1 5 6 2
2 2 9 1 1    1 1 9 2 2
] def

/finderseq [
[0 1]
[0 3 2]
[0 5 2 7]
[0 9 2 7 4]
[0 9 2 7 6 11]
[0 9 2 7 8 11 10]
[0 1 2 3 4 5 6 7]
[0 1 2 3 4 5 6 9 8]
[0 1 2 3 4 5 6 9 10 11]
[0 1 2 3 4 7 6 9 8 11 10]
] def

/seq finderseq datalen 2 sub 2 idiv get def
/fxw seq length array def
0 1 seq length 1 sub {
/x exch def
fxw x finderwidths seq x get 5 mul 5 getinterval put
} for

/checkweights [
-1   -1   -1   -1   -1   -1   -1   -1   % A1L
77   96   32   81   27   9    3    1    % A1R
20   60   180  118  143  7    21   63   % A2L
205  209  140  117  39   13   145  189  % A2R
193  157  49   147  19   57   171  91   % B1L
132  44   85   169  197  136  186  62   % B1R
185  133  188  142  4    12   36   108  % B2L
50   87   29   80   97   173  128  113  % B2R
150  28   84   41   123  158  52   156  % C1L
166  196  206  139  187  203  138  46   % C1R
76   17   51   153  37   111  122  155  % C2L
146  119  110  107  106  176  129  43   % C2R
16   48   144  10   30   90   59   177  % D1L
164  125  112  178  200  137  116  109  % D1R
70   210  208  202  184  130  179  115  % D2L
190  204  68   93   31   151  191  134  % D2R
148  22   66   198  172  94   71   2    % E1L
40   154  192  64   162  54   18   6    % E1R
120  149  25   75   14   42   126  167  % E2L
175  199  207  69   23   78   26   79   % E2R
103  98   83   38   114  131  182  124  % F1L
159  53   88   170  127  183  61   161  % F1R
55   165  73   8    24   72   5    15   % F2L
89   100  174  58   160  194  135  45   % F2R
] def

/checkweightseq [
seq {16 mul checkweights exch 16 getinterval aload pop} forall
] dup length 8 sub 8 exch getinterval def

/widths [
dxw {{} forall} forall
] def

/checksum 0 def
0 1 widths length 1 sub {
/i exch def
/checksum checksum widths i get checkweightseq i get mul add def
} for
/checksum checksum 211 mod datalen 3 sub 211 mul add def

/i 0 def {
checksum tab174 i get le {
tab174 i 1 add 7 getinterval {} forall
/cte exch def /cto exch def
/cmwe exch def /cmwo exch def
/cele exch def /celo exch def
/cgs exch def
exit
} if
/i i 8 add def
} loop

/cwo checksum cgs sub cte idiv celo cmwo 4 true  getRSSwidths def
/cwe checksum cgs sub cte mod  cele cmwe 4 false getRSSwidths def

/cw 8 array def
0 1 3 {
/i exch def
cw i 2 mul cwo i get put
cw i 2 mul 1 add cwe i get put
} for

22 array dup dup
0 cw put 1 dxw putinterval 0 datalen 1 add getinterval
/dxw exch def
/datalen dxw length def

% Encode row runlengths
/rows datalen segments div ceiling cvi array def
/numrows rows length def
0 1 numrows 1 sub {
/r exch def
mark
segments 4 mod 0 ne r 2 mod 1 eq and {0} if
1 1
0 1 segments 1 sub {
/pos exch r segments mul add def
pos datalen lt {
dxw pos get {} forall
pos 2 mod 0 eq {fxw pos 2 idiv get {} forall} if
} if
} for
1 1
counttomark array astore rows exch r exch put pop
} for

format (expandedstacked) ne {  % Linear

% Remove leading space
/sbs rows 0 get dup length 1 sub 1 exch getinterval def

/sbs [
1
0 1 datalen 1 sub {
/i exch def
dxw i get {} forall
i 2 mod 0 eq {fxw i 2 idiv get {} forall} if
} for
1 1
] def

<<
/ren //renlinear
/sbs sbs
/bhs [sbs length 1 add 2 idiv {height} repeat]
/bbs [sbs length 1 add 2 idiv {0} repeat]
/opt options
>>

dontdraw not //renlinear if

} {  % expandedstacked

/seps numrows array def
0 1 numrows 1 sub {

/r exch def
/row rows r get def

% Sample runlengths into bitmap
mark
0 2 row length 1 sub {
/i exch def
row i get {0} repeat
i row length 1 sub lt {row i 1 add get {1} repeat} if
} for
counttomark array astore /row exch def pop

% Derive the separator pattern
/sep [ row {1 exch sub} forall ] def
sep 0 [ 0 0 0 0 ] putinterval
sep row length 4 sub [ 0 0 0 0 ] putinterval
/finderpos [  % Finder pattern module positions
19 98 row length 13 sub {} for
68 98 row length 13 sub {} for
] def
finderpos {
dup 14 add 1 exch {
/i exch def
row i get 0 eq {
row i 1 sub get 1 eq {
1
} {
sep i 1 sub get 0 eq {1} {0} ifelse
} ifelse
} {
0
} ifelse
sep exch i exch put
} for
} forall

% For even segment-pair symbols reverse alternate rows
segments 4 mod 0 eq r 2 mod 1 eq and {
rows r get length rows 0 get length ne  % Except partial width last row
finderpos length 2 mod 1 eq and {       % with odd finders
/row [ 0 row aload pop ] def
/sep [ 0 sep aload pop ] def
} {
row length 1 sub -1 0 {row exch get} for
row astore pop
sep length 1 sub -1 0 {sep exch get} for
sep astore pop
} ifelse
} if

rows r row put
seps r sep put

} for

% Extend last row and separator to fill width of symbol
/pixx rows 0 get length def
[ pixx {0} repeat ] dup 0 rows numrows 1 sub get putinterval
rows exch numrows 1 sub exch put
[ pixx {0} repeat ] dup 0 seps numrows 1 sub get putinterval
seps exch numrows 1 sub exch put

% Middle separator pattern
/sep [ pixx 2 idiv 1 add { 0 1 } repeat ] 0 pixx getinterval def
sep 0 [0 0 0 0] putinterval
sep pixx 4 sub [0 0 0 0] putinterval

% Compose the symbol
/pixs [
0 1 numrows 1 sub {
/r exch def
r 0 ne {
seps r get aload pop
} if
34 {rows r get aload pop} repeat
r numrows 1 sub ne {
seps r get aload pop
sep aload pop
} if
} for
] def

<<
/ren //renmatrix
/pixs pixs
/pixx pixx
/pixy pixs length pixx idiv
/height pixs length pixx idiv 72 div
/width pixx 72 div
/opt options
>>

dontdraw not //renmatrix if

} ifelse

end

} bind def
/databarexpanded dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER databarexpanded--

% --BEGIN ENCODER databarexpandedstacked--
% --REQUIRES preamble raiseerror renlinear renmatrix databarexpanded--
% --DESC: GS1 DataBar Expanded Stacked
% --EXAM: (01)95012345678903(3103)000123
% --EXOP: segments=4
% --RNDR: renlinear renmatrix
%%BeginResource: QRCODE databarexpandedstacked 0.0 2015112400 63589 66857
%%BeginData:         43 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renmatrix dup /QRCODE findresource put
dup /databarexpanded dup /QRCODE findresource put
begin
/databarexpandedstacked {

20 dict begin                 % Confine variables to local scope

/options exch def       % We are given an option string
/barcode exch def       % We are given a barcode string

/dontdraw false def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

% Get the result of encoding with databarexpanded with format=expandedstacked
options (dontdraw) true put
options (format) (expandedstacked) put

/args barcode options //databarexpanded exec def

args (opt) options put
args

dontdraw not //renmatrix if

end

} bind def
/databarexpandedstacked dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER databarexpandedstacked--

% --BEGIN ENCODER pharmacode--
% --REQUIRES preamble raiseerror renlinear--
% --DESC: Pharmaceutical Binary Code
% --EXAM: 117480
% --EXOP: showborder
% --RNDR: renlinear
%%BeginResource: QRCODE pharmacode 0.0 2015112400 60269 60124
%%BeginData:         91 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
begin
/pharmacode {

20 dict begin                 % Confine variables to local scope

/options exch def       % We are given an option string
/barcode exch def       % We are given a barcode string

/dontdraw false def
/height 8 2.835 mul 72 div def
/nwidth 0.5 2.835 mul def
/wwidth 1.5 2.835 mul def
/swidth 1.0 2.835 mul def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/height height cvr def
/nwidth nwidth cvr def
/wwidth wwidth cvr def
/swidth swidth cvr def

% Validate the input
barcode length 1 lt barcode length 6 gt or {
/bwipp.pharmacodeBadLength (Pharmacode must be 1 to 6 digits) //raiseerror exec
} if
barcode {
dup 48 lt exch 57 gt or {
/bwipp.pharmacodeBadCharacter (Pharmacode must contain only digits) //raiseerror exec
} if
} forall
barcode cvi dup 3 lt exch 131070 gt or {
/bwipp.pharmacodeBadValue (Pharmacode value must be between 3 and 131070) //raiseerror exec
} if

% Create the human readable text
/txt barcode length array def
0 1 barcode length 1 sub {
/i exch def
txt i [barcode i 1 getinterval 0 0 () 0] put
} for

% Convert the integer into the paramacode string
/barcode barcode cvi 1 add 2 17 string cvrs def
/barcode barcode 1 barcode length 1 sub getinterval def

/barlen barcode length def  % Length of the code
/sbs barlen 2 mul array def

0 1 barlen 1 sub {
/i exch def
/enc barcode i 1 getinterval def
enc (0) eq {
sbs i 2 mul nwidth put
} {
sbs i 2 mul wwidth put
} ifelse
sbs i 2 mul 1 add swidth put
} for

% Return the arguments
<<
/ren //renlinear
/sbs sbs
/bhs [sbs length 1 add 2 idiv {height} repeat]
/bbs [sbs length 1 add 2 idiv {0} repeat]
/txt txt
/textxalign (center)
/opt options
>>

dontdraw not //renlinear if

end

} bind def
/pharmacode dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER pharmacode--

% --BEGIN ENCODER pharmacode2--
% --REQUIRES preamble raiseerror renlinear--
% --DESC: Two-track Pharmacode
% --EXAM: 117480
% --EXOP: includetext showborder
% --RNDR: renlinear
%%BeginResource: QRCODE pharmacode2 0.0 2015112400 60956 60646
%%BeginData:         96 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
begin
/pharmacode2 {

20 dict begin

/options exch def           % We are given an option string
/barcode exch def           % We are given a barcode string

/dontdraw false def
/includetext false def      % Enable/disable text
/height 4 def               % Height of short bars in millimetres

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/height height cvr def

% Validate the input
barcode length 1 lt barcode length 8 gt or {
/bwipp.pharmacode2BadLength (Two-track Pharmacode must be 1 to 6 digits) //raiseerror exec
} if
barcode {
dup 48 lt exch 57 gt or {
/bwipp.pharmacode2badCharacter (Two-track Pharmacode must contain only digits) //raiseerror exec
} if
} forall
barcode cvi dup 4 lt exch 64570080 gt or {
/bwipp.pharmacode2badValue (Two-track Pharmacode value must be between 4 and 64570080) //raiseerror exec
} if

% Create the human readable text
/txt barcode length array def
0 1 barcode length 1 sub {
/i exch def
txt i [barcode i 1 getinterval 0 0 () 0] put
} for

/encstr 16 string def
/bhs 16 array def
/bbs 16 array def
/sbs 32 array def
/bar 1 25.4 div height mul def     % bar height (mm)
/spc 1 25.4 div 72 mul def         % bar width & spacing (1mm)

% Convert number into a base3 representation
/i 15 def
/val barcode cvi def
{  % loop
val 0 eq {exit} if
val 3 mod dup
[3 1 2] exch get val exch sub 3 idiv /val exch def
encstr i [2 0 1] 4 -1 roll get put
/i i 1 sub def
} loop
/encstr encstr i 1 add 15 i sub getinterval def

% Generate the bar pattern
0 1 encstr length 1 sub {
/i exch def
encstr i get dup
bhs i bar [1 1 2] 5 -1 roll get mul put
bbs i [0 bar 0] 4 -1 roll get put
} for

% Return the arguments
<<
/ren //renlinear
/bhs bhs
/bbs bbs
/sbs [encstr length 2 mul {spc} repeat]
/txt txt
/textxalign (center)
/textyoffset 4
/opt options
>>

dontdraw not //renlinear if

end

} bind def
/pharmacode2 dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER pharmacode2--

% --BEGIN ENCODER code2of5--
% --REQUIRES preamble raiseerror renlinear--
% --DESC: Code 25
% --EXAM: 01234567
% --EXOP: includetext includecheck includecheckintext
% --RNDR: renlinear
%%BeginResource: QRCODE code2of5 0.0 2015112400 67430 67109
%%BeginData:        150 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
begin
/code2of5 {

20 dict begin                 % Confine variable to local scope

/options exch def       % We are given an option string
/barcode exch def       % We are given a barcode string

/dontdraw false def
/includecheck false def
/validatecheck false def
/includetext false def   % Enable/disable text
/includecheckintext false def
/textfont /Courier def
/textsize 8 def
/textyoffset -7 def
/height 1 def
/version (industrial) def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/textfont textfont cvlit def
/textsize textsize cvr def
/textyoffset textyoffset cvr def
/height height cvr def

% Validate input
barcode {
dup 48 lt exch 57 gt or {
/bwipp.code2of5badCharacter (Code 25 must contain only digits) //raiseerror exec
} if
} forall

/barlen barcode length validatecheck {1 sub} if def

/checksum 0 def
0 1 barlen 1 sub {
/i exch def
/checksum checksum barcode i get 48 sub barlen i sub 2 mod 0 ne {3 mul} if add def
} for
/checksum 10 checksum 10 mod sub 10 mod def
validatecheck {
barcode barlen get checksum 48 add ne {
/bwipp.code2of5badCheckDigit (Incorrect Code 25 check digit provided) //raiseerror exec
} if
/barcode barcode 0 barlen getinterval def
/includecheck true def
} if

% Create an array containing the character mappings
/versions <<
/industrial
[ (1111313111) (3111111131) (1131111131) (3131111111)
(1111311131) (3111311111) (1131311111) (1111113131)
(3111113111) (1131113111) (313111)     (31113)
]
/iata
[ (1111313111) (3111111131) (1131111131) (3131111111)
(1111311131) (3111311111) (1131311111) (1111113131)
(3111113111) (1131113111) (1111)       (311)
]
/matrix
[ (113311) (311131) (131131) (331111) (113131) (313111)
(133111) (111331) (311311) (131311) (311111) (31111)
]
/coop
[ (331111) (111331) (113131) (113311) (131131) (131311)
(133111) (311131) (311311) (313111) (3131)   (133)
]
/datalogic
[ (113311) (311131) (131131) (331111) (113131) (313111)
(133111) (111331) (311311) (131311) (1111)   (311)
]
>> def
versions version known not {
/bwipp.code2of5badVersion (Unrecognised Code 25 version) //raiseerror exec
} if
/encs versions version get def

/cs encs 0 get length def
/cw 0 encs 0 get {48 sub add} forall def
/ss encs dup length 2 sub get length def
/sw 0 encs dup length 2 sub get {48 sub add} forall def

% Create a string of the available characters
/barchars (0123456789) def

/sbs barlen includecheck {1 add} if cs mul ss add ss add string def
/txt barlen includecheck {1 add} if array def

% Put the start character
sbs 0 encs 10 get putinterval
0 1 barlen 1 sub {
/i exch def
% Lookup the encoding for the each barcode character
barcode i 1 getinterval barchars exch search
pop                                 % Discard true leaving pre
length /indx exch def               % indx is the length of pre
pop pop                             % Discard seek and post
/enc encs indx get def              % Get the indxth encoding
sbs i cs mul ss add enc putinterval % Put encoded digit into sbs
txt i [barcode i 1 getinterval i cw mul sw add textyoffset textfont textsize] put
} for

% Put the checksum and end characters
includecheck {
sbs barlen cs mul ss add encs checksum get putinterval
sbs barlen cs mul cs add ss add encs 11 get putinterval
includecheckintext {
txt barlen [barchars checksum 1 getinterval barlen cw mul sw add textyoffset textfont textsize] put
} {
txt barlen [( ) barlen cw mul sw add textyoffset textfont textsize] put
} ifelse
} {
sbs barlen cs mul ss add encs 11 get putinterval
} ifelse

% Return the arguments
<<
/ren //renlinear
/sbs [sbs {48 sub} forall]
/bhs [sbs length 1 add 2 idiv {height} repeat]
/bbs [sbs length 1 add 2 idiv {0} repeat]
includetext {
/txt txt
} if
/opt options
>>

dontdraw not //renlinear if

end

} bind def
/code2of5 dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER code2of5--

% --BEGIN ENCODER industrial2of5--
% --REQUIRES preamble raiseerror renlinear code2of5--
% --DESC: Industrial 2 of 5
% --EXAM: 01234567
% --EXOP: includetext includecheck includecheckintext
% --RNDR: renlinear
%%BeginResource: QRCODE industrial2of5 0.0 2015112400 57882 57606
%%BeginData:         55 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
dup /code2of5 dup /QRCODE findresource put
begin
/industrial2of5 {

20 dict begin            % Confine variables to local scope

/options exch def  % We are given an option string
/barcode exch def  % We are given a barcode string

/dontdraw false def
/includetext false def    % Enable/disable text
/textfont /Courier def
/textsize 8 def
/textxoffset 0 def
/textyoffset -7 def
/height 1 def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/textfont textfont cvlit def
/textsize textsize cvr def
/textxoffset textxoffset cvr def
/textyoffset textyoffset cvr def
/height height cvr def

% Get the result of encoding with code2of5 with version=industrial
options (dontdraw) true put
options (version) (industrial) put

/args barcode options //code2of5 exec def

args (opt) options put
args

dontdraw not //renlinear if

end

} bind def
/industrial2of5 dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER industrial2of5--

% --BEGIN ENCODER iata2of5--
% --REQUIRES preamble raiseerror renlinear code2of5--
% --DESC: IATA 2 of 5
% --EXAM: 01234567
% --EXOP: includetext includecheck includecheckintext
% --RNDR: renlinear
%%BeginResource: QRCODE iata2of5 0.0 2015112400 57852 57582
%%BeginData:         55 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
dup /code2of5 dup /QRCODE findresource put
begin
/iata2of5 {

20 dict begin            % Confine variables to local scope

/options exch def  % We are given an option string
/barcode exch def  % We are given a barcode string

/dontdraw false def
/includetext false def    % Enable/disable text
/textfont /Courier def
/textsize 8 def
/textxoffset 0 def
/textyoffset -7 def
/height 1 def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/textfont textfont cvlit def
/textsize textsize cvr def
/textxoffset textxoffset cvr def
/textyoffset textyoffset cvr def
/height height cvr def

% Get the result of encoding with code2of5 with version=iata
options (dontdraw) true put
options (version) (iata) put

/args barcode options //code2of5 exec def

args (opt) options put
args

dontdraw not //renlinear if

end

} bind def
/iata2of5 dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER iata2of5--

% --BEGIN ENCODER matrix2of5--
% --REQUIRES preamble raiseerror renlinear code2of5--
% --DESC: Matrix 2 of 5
% --EXAM: 01234567
% --EXOP: includetext includecheck includecheckintext
% --RNDR: renlinear
%%BeginResource: QRCODE matrix2of5 0.0 2015112400 57862 57590
%%BeginData:         55 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
dup /code2of5 dup /QRCODE findresource put
begin
/matrix2of5 {

20 dict begin            % Confine variables to local scope

/options exch def  % We are given an option string
/barcode exch def  % We are given a barcode string

/dontdraw false def
/includetext false def    % Enable/disable text
/textfont /Courier def
/textsize 8 def
/textxoffset 0 def
/textyoffset -7 def
/height 1 def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/textfont textfont cvlit def
/textsize textsize cvr def
/textxoffset textxoffset cvr def
/textyoffset textyoffset cvr def
/height height cvr def

% Get the result of encoding with code2of5 with version=matrix
options (dontdraw) true put
options (version) (matrix) put

/args barcode options //code2of5 exec def

args (opt) options put
args

dontdraw not //renlinear if

end

} bind def
/matrix2of5 dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER matrix2of5--

% --BEGIN ENCODER coop2of5--
% --REQUIRES preamble raiseerror renlinear code2of5--
% --DESC: COOP 2 of 5
% --EXAM: 01234567
% --EXOP: includetext includecheck includecheckintext
% --RNDR: renlinear
%%BeginResource: QRCODE coop2of5 0.0 2015112400 57852 57582
%%BeginData:         55 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
dup /code2of5 dup /QRCODE findresource put
begin
/coop2of5 {

20 dict begin            % Confine variables to local scope

/options exch def  % We are given an option string
/barcode exch def  % We are given a barcode string

/dontdraw false def
/includetext false def    % Enable/disable text
/textfont /Courier def
/textsize 8 def
/textxoffset 0 def
/textyoffset -7 def
/height 1 def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/textfont textfont cvlit def
/textsize textsize cvr def
/textxoffset textxoffset cvr def
/textyoffset textyoffset cvr def
/height height cvr def

% Get the result of encoding with code2of5 with version=coop
options (dontdraw) true put
options (version) (coop) put

/args barcode options //code2of5 exec def

args (opt) options put
args

dontdraw not //renlinear if

end

} bind def
/coop2of5 dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER coop2of5--

% --BEGIN ENCODER datalogic2of5--
% --REQUIRES preamble raiseerror renlinear code2of5--
% --DESC: Datalogic 2 of 5
% --EXAM: 01234567
% --EXOP: includetext includecheck includecheckintext
% --RNDR: renlinear
%%BeginResource: QRCODE datalogic2of5 0.0 2015112400 57877 57602
%%BeginData:         55 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
dup /code2of5 dup /QRCODE findresource put
begin
/datalogic2of5 {

20 dict begin            % Confine variables to local scope

/options exch def  % We are given an option string
/barcode exch def  % We are given a barcode string

/dontdraw false def
/includetext false def    % Enable/disable text
/textfont /Courier def
/textsize 8 def
/textxoffset 0 def
/textyoffset -7 def
/height 1 def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/textfont textfont cvlit def
/textsize textsize cvr def
/textxoffset textxoffset cvr def
/textyoffset textyoffset cvr def
/height height cvr def

% Get the result of encoding with code2of5 with version=datalogic
options (dontdraw) true put
options (version) (datalogic) put

/args barcode options //code2of5 exec def

args (opt) options put
args

dontdraw not //renlinear if

end

} bind def
/datalogic2of5 dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER datalogic2of5--

% --BEGIN ENCODER code11--
% --REQUIRES preamble raiseerror renlinear--
% --DESC: Code 11
% --EXAM: 0123456789
% --EXOP: includetext includecheck includecheckintext
% --RNDR: renlinear
%%BeginResource: QRCODE code11 0.0 2015112400 69086 68582
%%BeginData:        158 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
begin
/code11 {

20 dict begin            % Confine variables to local scope

/options exch def  % We are given an option string
/barcode exch def  % We are given a barcode string

/dontdraw false def
/includecheck false def
/validatecheck false def
/includetext false def
/includecheckintext false def
/textfont /Courier def
/textsize 8 def
/textyoffset -7 def
/height 1 def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/textfont textfont cvlit def
/textsize textsize cvr def
/textyoffset textyoffset cvr def
/height height cvr def

% Create an array containing the character mappings
/encs
[ (111131) (311131) (131131) (331111) (113131)
(313111) (133111) (111331) (311311) (311111)
(113111) (113311)
] def

% Create a string of the available characters
/barchars (0123456789-) def
/charvals 11 dict def
0 1 10 {charvals exch dup barchars exch 1 getinterval exch put} for

% Validate the input
0 1 barcode length 1 sub {
barcode exch 1 getinterval charvals exch known not {
/bwipp.code11badCharacter (Code 11 must contain only digits and dashes) //raiseerror exec
} if
} for

/barlen barcode length def
validatecheck {
barlen 11 eq {
/bwipp.code11badLength (Code 11 cannot be 11 characters using check digits) //raiseerror exec
} if
/barlen barlen barlen 10 le {1} {2} ifelse sub def
} if

/numchecks includecheck validatecheck or {barlen 10 ge {2} {1} ifelse} {0} ifelse def
/checksum1 0 def /checksum2 0 def
0 1 barlen 1 sub {
/i exch def
/indx charvals barcode i 1 getinterval get def
/checksum1 checksum1 barlen i sub 1 sub 10 mod 1 add indx mul add def
/checksum2 checksum2 barlen i sub 9 mod 1 add indx mul add def
} for
/checksum1 checksum1 11 mod def
/checksum2 checksum2 checksum1 add 11 mod def
validatecheck {
numchecks 1 eq {
barcode barlen get barchars checksum1 get ne {
/bwipp.code11badCheckDigit (Incorrect Code 11 check digit provided) //raiseerror exec
} if
} {
barcode barlen get barchars checksum1 get ne
barcode barlen 1 add get barchars checksum2 get ne or {
/bwipp.code11badCheckDigits (Incorrect Code 11 check digits provided) //raiseerror exec
} if
} ifelse
/barcode barcode 0 barlen getinterval def
/includecheck true def
} if

/sbs barlen numchecks add 6 mul 12 add string def
/txt barlen numchecks add array def

% Put the start character
sbs 0 encs 11 get putinterval

/xpos 8 def
0 1 barlen 1 sub {
/i exch def
/indx charvals barcode i 1 getinterval get def
/enc encs indx get def
sbs i 6 mul 6 add enc putinterval
txt i [barcode i 1 getinterval xpos textyoffset textfont textsize] put
0 1 5 {       % xpos+=width of the character
/xpos exch enc exch get 48 sub xpos add def
} for
} for

% Put the checksum and end characters
includecheck {
barlen 10 ge {
sbs barlen 6 mul 6 add encs checksum1 get putinterval
sbs barlen 6 mul 12 add encs checksum2 get putinterval
includecheckintext {
txt barlen [barchars checksum1 1 getinterval xpos textyoffset textfont textsize] put
/enc encs checksum1 get def
0 1 5 {       % xpos+=width of the character
/xpos exch enc exch get 48 sub xpos add def
} for
txt barlen 1 add [barchars checksum2 1 getinterval xpos textyoffset textfont textsize] put
} {
txt barlen [() xpos textyoffset textfont textsize] put
txt barlen 1 add [() xpos textyoffset textfont textsize] put
} ifelse
sbs barlen 6 mul 18 add encs 11 get putinterval
} {
sbs barlen 6 mul 6 add encs checksum1 get putinterval
includecheckintext {
txt barlen [barchars checksum1 1 getinterval xpos textyoffset textfont textsize] put
} {
txt barlen [() xpos textyoffset textfont textsize] put
} ifelse
sbs barlen 6 mul 12 add encs 11 get putinterval
} ifelse
} {
sbs barlen 6 mul 6 add encs 11 get putinterval
} ifelse

% Return the arguments
<<
/ren //renlinear
/sbs [sbs {48 sub} forall]
/bhs [sbs length 1 add 2 idiv {height} repeat]
/bbs [sbs length 1 add 2 idiv {0} repeat]
includetext {
/txt txt
} if
/opt options
>>

dontdraw not //renlinear if

end

} bind def
/code11 dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER code11--

% --BEGIN ENCODER bc412--
% --REQUIRES preamble raiseerror renlinear--
% --DESC: BC412
% --EXAM: BC412
% --EXOP: semi includetext includecheckintext
% --RNDR: renlinear
%%BeginResource: QRCODE bc412 0.0 2015112400 64995 64541
%%BeginData:        148 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
begin
/bc412 {

20 dict begin                 % Confine variables to local scope

/options exch def       % We are given an option string
/barcode exch def       % We are given a barcode string

/dontdraw false def
/includecheck false def
/validatecheck false def
/includetext false def
/includecheckintext false def
/includestartstop false def
/semi false def
/textfont /Courier def
/textsize 8 def
/textyoffset -7 def
/height 1 def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/textfont textfont cvlit def
/textsize textsize cvr def
/textyoffset textyoffset cvr def
/height height cvr def

semi {
/includecheck true def
/includestartstop true def
} if

% Create a string of the available characters
/barchars (0R9GLVHA8EZ4NTS1J2Q6C7DYKBUIX3FWP5M) def
/charvals 35 dict def
0 1 34 {charvals exch dup barchars exch 1 getinterval exch put} for

% Validate the input
0 1 barcode length 1 sub {
barcode exch 1 getinterval charvals exch known not {
/bwipp.bc412badCharacter (BC412 must contain only digits and capital letters except O) //raiseerror exec
} if
} for

/barlen barcode length validatecheck {1 sub} if def

/checksum 0 def
0 1 barlen 1 sub {
barcode exch 1 getinterval charvals exch get
checksum add /checksum exch def
} for
/checksum checksum 35 mod def
validatecheck {
barcode barlen get barchars checksum get ne {
/bwipp.bc412badCheckDigit (Incorrect BC412 check digit provided) //raiseerror exec
} if
/barcode barcode 0 barlen getinterval def
/includecheck true def
} if

% Create an array containing the character mappings
/encs
[ (11111115) (13111212) (11131113) (12111213) (12121311)
(13131111) (12111312) (11131212) (11121411) (11151111)
(15111111) (11111511) (12131211) (13121112) (13111212)
(11111214) (12121113) (11111313) (13111113) (11121213)
(11141112) (11121312) (11141211) (14121111) (12121212)
(11131311) (13121211) (12111411) (14111211) (11111412)
(12111114) (14111112) (12141111) (11121114) (12131112)
(12) (111)
] def

/sbs barlen 1 add 8 mul 5 add string def
includecheck {
/txt barlen 1 add array def
} {
/txt barlen array def
} ifelse

% Put the start character
includestartstop {
sbs 0 encs 35 get putinterval
/pos 2 def
/txtpos 3 def
} {
/pos 0 def
/txtpos 0 def
} ifelse

0 1 barlen 1 sub {
/i exch def
/indx charvals barcode i 1 getinterval get def
sbs pos encs indx get putinterval
txt i [barcode i 1 getinterval i 12 mul txtpos add textyoffset textfont textsize] put
/pos pos 8 add def
} for

% Put the checksum
includecheck {
sbs pos encs checksum get putinterval
includecheckintext {
txt barlen [barchars checksum 1 getinterval barlen 12 mul txtpos add textyoffset textfont textsize] put
} {
txt barlen [() barlen 12 mul txtpos add textyoffset textfont textsize] put
} ifelse
/pos pos 8 add def
} if

% Put the stop character
includestartstop {
sbs pos encs 36 get putinterval
/pos pos 2 add def
} if

% Return the arguments
/sbs sbs 0 pos getinterval def
<<
/ren //renlinear
/sbs [sbs {48 sub} forall]
/bhs [sbs length 1 add 2 idiv {height} repeat]
/bbs [sbs length 1 add 2 idiv {0} repeat]
includetext {
/txt txt
} if
/opt options
>>

dontdraw not //renlinear if

end

} bind def
/bc412 dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER bc412--

% --BEGIN ENCODER rationalizedCodabar--
% --REQUIRES preamble raiseerror renlinear--
% --DESC: Codabar
% --EXAM: A0123456789B
% --EXOP: includetext includecheck includecheckintext
% --RNDR: renlinear
%%BeginResource: QRCODE rationalizedCodabar 0.0 2015112400 69398 68906
%%BeginData:        156 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
begin
/rationalizedCodabar {

20 dict begin                    % Confine variables to local scope

/options exch def          % We are given an option string
/barcode exch def          % We are given a barcode string

/dontdraw false def
/altstartstop false def
/includecheck false def     % Enable/disable checkdigit
/validatecheck false def
/includetext false def      % Enable/disable text
/includecheckintext false def
/textfont /Courier def
/textsize 8 def
/textyoffset -7 def
/height 1 def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/textfont textfont cvlit def
/textsize textsize cvr def
/textyoffset textyoffset cvr def
/height height cvr def

% Create an array containing the character mappings
/encs
[ (11111331) (11113311) (11131131) (33111111) (11311311)
(31111311) (13111131) (13113111) (13311111) (31131111)
(11133111) (11331111) (31113131) (31311131) (31313111)
(11313131) (11331311) (13131131) (11131331) (11133311)
] def

% Create a string of the available characters
altstartstop {
/barchars (0123456789-$:/.+TN*E) def
} {
/barchars (0123456789-$:/.+ABCD) def
} ifelse
/charvals 20 dict def
0 1 19 {charvals exch dup barchars exch 1 getinterval exch put} for
/bodyvals 16 dict def
0 1 15 {bodyvals exch dup barchars exch 1 getinterval exch put} for
/ssvals 4 dict def
16 1 19 {ssvals exch dup barchars exch 1 getinterval exch put} for

% Validate the input
barcode 0 1 getinterval ssvals exch known not
barcode barcode length 1 sub 1 getinterval ssvals exch known not or {
altstartstop {
/bwipp.rationalizedCodabarBadAltStartStop (Codabar start and stop characters must be one of E N T or *) //raiseerror exec
} {
/bwipp.rationalizedCodabarBadStartStop (Codabar start and stop characters must be one of A B C or D) //raiseerror exec
} ifelse
} if
1 1 barcode length 2 sub {
barcode exch 1 getinterval bodyvals exch known not {
/bwipp.rationalizedCodabarBadCharacter (Codabar body must contain only digits and symbols - $ : / . +) //raiseerror exec
} if
} for

/barlen barcode length validatecheck {1 sub} if def

/checksum 0 def
0 1 barlen 2 sub {
barcode exch 1 getinterval charvals exch get
checksum add /checksum exch def
} for
barcode barcode length 1 sub 1 getinterval charvals exch get
checksum add /checksum exch def
/checksum 16 checksum 16 mod sub 16 mod def
validatecheck {
barcode barlen 1 sub get barchars checksum get ne {
/bwipp.rationalizedCodabarBadCheckDigit (Incorrect Codabar check digit provided) //raiseerror exec
} if
barlen string
dup 0 barcode 0 barlen 1 sub getinterval putinterval
dup barlen 1 sub barcode barlen 1 getinterval putinterval
/barcode exch def
/includecheck true def
} if

/sbs barlen includecheck {1 add} if 8 mul string def
/txt barlen includecheck {1 add} if array def

/xpos 0 def
0 1 barlen 2 sub {
/i exch def
/indx charvals barcode i 1 getinterval get def
/enc encs indx get def
sbs i 8 mul enc putinterval  % Put encoded digit into sbs
txt i [barcode i 1 getinterval xpos textyoffset textfont textsize] put
0 1 7 {       % xpos+=width of the character
/xpos exch enc exch get 48 sub xpos add def
} for
} for

% Put the checksum character and stop character
includecheck {
% Put the checksum character
sbs barlen 8 mul 8 sub encs checksum get putinterval
includecheckintext {
txt barlen 1 sub [barchars checksum 1 getinterval xpos textyoffset textfont textsize] put
} {
txt barlen 1 sub [( ) xpos textyoffset textfont textsize] put
} ifelse
0 1 7 {       % xpos+=width of the character
/xpos exch encs checksum get exch get 48 sub xpos add def
} for
% Put the end character
/indx charvals barcode barlen 1 sub 1 getinterval get def
/enc encs indx get def            % Get the indxth encoding
sbs barlen 8 mul enc putinterval  % Put encoded digit into sbs
txt barlen [barcode barlen 1 sub 1 getinterval xpos textyoffset textfont textsize] put
} {
% Put the end character
/indx charvals barcode barlen 1 sub 1 getinterval get def
/enc encs indx get def                  % Get the indxth encoding
sbs barlen 8 mul 8 sub enc putinterval  % Put encoded digit into sbs
txt barlen 1 sub [barcode barlen 1 sub 1 getinterval xpos textyoffset textfont textsize] put
} ifelse

% Return the arguments
<<
/ren //renlinear
/sbs [sbs {48 sub} forall]
/bhs [sbs length 1 add 2 idiv {height} repeat]
/bbs [sbs length 1 add 2 idiv {0} repeat]
includetext {
/txt txt
} if
/opt options
>>

dontdraw not //renlinear if

end

} bind def
/rationalizedCodabar dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER rationalizedCodabar--

% --BEGIN ENCODER onecode--
% --REQUIRES preamble raiseerror renlinear--
% --DESC: USPS Intelligent Mail
% --EXAM: 0123456709498765432101234567891
% --EXOP: barcolor=FF0000
% --RNDR: renlinear
%%BeginResource: QRCODE onecode 0.0 2015112400 101896 104906
%%BeginData:        335 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
begin
/onecode {

20 dict begin

/options exch def              % We are given an option string
/barcode exch def              % We are given a barcode string

/dontdraw false def
/height 0.15 def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/height height cvr def

/barlen barcode length def

% Create the human readable text
/txtdict <<
2 dup
5 dup
barcode 5 1 getinterval (9) eq {14} {11} ifelse dup
20 dup
25 dup
29 dup
>> def
/txt barlen 6 add array def
/spacecnt 0 def
0 1 barlen 1 sub {
/i exch def
txtdict i known {
txt i spacecnt add [( ) 0 0 () 0] put
/spacecnt spacecnt 1 add def
} if
txt i spacecnt add [barcode i 1 getinterval 0 0 () 0] put
} for
/txt txt 0 barcode length spacecnt add getinterval def

/normalize {
/base exch def
/num exch def
num length 1 sub -1 1 {
/i exch def
num i 1 sub 2 copy get num i get base idiv add put
num i num i get base mod put
} for
{ %loop - extend input as necessary
num 0 get base lt {exit} if
/num [0 num {} forall] def
num 0 num 0 get num 1 get base idiv add put
num 1 num 1 get base mod put
} loop
% Trim leading zeros
/num [/i true def num {dup 0 eq i and {pop} {/i false def} ifelse} forall] def
num length 0 eq {/num [0] def} if
num
} bind def

/bigadd {
2 copy length exch length
2 copy sub abs /offset exch def
lt {exch} if
/a exch def /b exch def
0 1 b length 1 sub {
dup a exch offset add 2 copy get b 5 -1 roll get add put
} for
a
} bind def

% Conversion of data fields into binary data
barlen 20 eq {[0]} if
barlen 25 eq {[1]} if
barlen 29 eq {[1 0 0 0 0 1]} if
barlen 31 eq {[1 0 0 0 1 0 0 0 0 1]} if
/binval exch [barcode 20 barlen 20 sub getinterval {48 sub} forall] bigadd def
/binval [binval {} forall barcode 0 get 48 sub] def
/binval [binval {5 mul} forall] [barcode 1 get 48 sub] bigadd 10 normalize def
/binval [binval {} forall barcode 2 18 getinterval {48 sub} forall] def

% Conversion of binary data into byte array
/bytes 13 array def
/bintmp [binval {} forall] def
12 -1 0 {
/i exch def
0 1 bintmp length 2 sub {
/j exch def
bintmp j 1 add 2 copy get bintmp j get 256 mod 10 mul add put
bintmp j bintmp j get 256 idiv put
} for
bytes i bintmp bintmp length 1 sub get 256 mod put
bintmp bintmp length 1 sub 2 copy get 256 idiv put
} for

% Generation of 11-bit CRC on byte array
/fcs 2047 def
/dat bytes 0 get 5 bitshift def
6 {
fcs dat xor 1024 and 0 ne {
/fcs fcs 1 bitshift 3893 xor def
} {
/fcs fcs 1 bitshift def
} ifelse
/fcs fcs 2047 and def
/dat dat 1 bitshift def
} repeat
1 1 12 {
bytes exch get 3 bitshift /dat exch def
8 {
fcs dat xor 1024 and 0 ne {
/fcs fcs 1 bitshift 3893 xor def
} {
/fcs fcs 1 bitshift def
} ifelse
/fcs fcs 2047 and def
/dat dat 1 bitshift def
} repeat
} for

% Conversion from binary data to codewords
/codewords 10 array def
9 -1 0 {
/i exch def
i 9 eq {
/b 636 def
} {
/b 1365 def
} ifelse
0 1 binval length 2 sub {
/j exch def
binval j 1 add 2 copy get binval j get b mod 10 mul add put
binval j binval j get b idiv put
} for
codewords i binval binval length 1 sub get b mod put
binval binval length 1 sub 2 copy get b idiv put
} for

% Inserting additional information into codewords
codewords 9 codewords 9 get 2 mul put
fcs 1024 and 0 ne {
codewords 0 codewords 0 get 659 add put
} if

% Conversion from codewords to characters
/tab513 [
31 7936   47 7808   55 7552   59 7040   61 6016   62 3968   79 7744   87
7488   91 6976   93 5952   94 3904  103 7360  107 6848  109 5824  110 3776
115 6592  117 5568  118 3520  121 5056  122 3008  124 1984  143 7712  151
7456  155 6944  157 5920  158 3872  167 7328  171 6816  173 5792  174 3744
179 6560  181 5536  182 3488  185 5024  186 2976  188 1952  199 7264  203
6752  205 5728  206 3680  211 6496  213 5472  214 3424  217 4960  218 2912
220 1888  227 6368  229 5344  230 3296  233 4832  234 2784  236 1760  241
4576  242 2528  244 1504  248  992  271 7696  279 7440  283 6928  285 5904
286 3856  295 7312  299 6800  301 5776  302 3728  307 6544  309 5520  310
3472  313 5008  314 2960  316 1936  327 7248  331 6736  333 5712  334 3664
339 6480  341 5456  342 3408  345 4944  346 2896  348 1872  355 6352  357
5328  358 3280  361 4816  362 2768  364 1744  369 4560  370 2512  372 1488
376  976  391 7216  395 6704  397 5680  398 3632  403 6448  405 5424  406
3376  409 4912  410 2864  412 1840  419 6320  421 5296  422 3248  425 4784
426 2736  428 1712  433 4528  434 2480  436 1456  440  944  451 6256  453
5232  454 3184  457 4720  458 2672  460 1648  465 4464  466 2416  468 1392
472  880  481 4336  482 2288  484 1264  488  752  527 7688  535 7432  539
6920  541 5896  542 3848  551 7304  555 6792  557 5768  558 3720  563 6536
565 5512  566 3464  569 5000  570 2952  572 1928  583 7240  587 6728  589
5704  590 3656  595 6472  597 5448  598 3400  601 4936  602 2888  604 1864
611 6344  613 5320  614 3272  617 4808  618 2760  620 1736  625 4552  626
2504  628 1480  632  968  647 7208  651 6696  653 5672  654 3624  659 6440
661 5416  662 3368  665 4904  666 2856  668 1832  675 6312  677 5288  678
3240  681 4776  682 2728  684 1704  689 4520  690 2472  692 1448  696  936
707 6248  709 5224  710 3176  713 4712  714 2664  716 1640  721 4456  722
2408  724 1384  728  872  737 4328  738 2280  740 1256  775 7192  779 6680
781 5656  782 3608  787 6424  789 5400  790 3352  793 4888  794 2840  796
1816  803 6296  805 5272  806 3224  809 4760  810 2712  812 1688  817 4504
818 2456  820 1432  824  920  835 6232  837 5208  838 3160  841 4696  842
2648  844 1624  849 4440  850 2392  852 1368  865 4312  866 2264  868 1240
899 6200  901 5176  902 3128  905 4664  906 2616  908 1592  913 4408  914
2360  916 1336  929 4280  930 2232  932 1208  961 4216  962 2168  964 1144
1039 7684 1047 7428 1051 6916 1053 5892 1054 3844 1063 7300 1067 6788 1069
5764 1070 3716 1075 6532 1077 5508 1078 3460 1081 4996 1082 2948 1084 1924
1095 7236 1099 6724 1101 5700 1102 3652 1107 6468 1109 5444 1110 3396 1113
4932 1114 2884 1116 1860 1123 6340 1125 5316 1126 3268 1129 4804 1130 2756
1132 1732 1137 4548 1138 2500 1140 1476 1159 7204 1163 6692 1165 5668 1166
3620 1171 6436 1173 5412 1174 3364 1177 4900 1178 2852 1180 1828 1187 6308
1189 5284 1190 3236 1193 4772 1194 2724 1196 1700 1201 4516 1202 2468 1204
1444 1219 6244 1221 5220 1222 3172 1225 4708 1226 2660 1228 1636 1233 4452
1234 2404 1236 1380 1249 4324 1250 2276 1287 7188 1291 6676 1293 5652 1294
3604 1299 6420 1301 5396 1302 3348 1305 4884 1306 2836 1308 1812 1315 6292
1317 5268 1318 3220 1321 4756 1322 2708 1324 1684 1329 4500 1330 2452 1332
1428 1347 6228 1349 5204 1350 3156 1353 4692 1354 2644 1356 1620 1361 4436
1362 2388 1377 4308 1378 2260 1411 6196 1413 5172 1414 3124 1417 4660 1418
2612 1420 1588 1425 4404 1426 2356 1441 4276 1442 2228 1473 4212 1474 2164
1543 7180 1547 6668 1549 5644 1550 3596 1555 6412 1557 5388 1558 3340 1561
4876 1562 2828 1564 1804 1571 6284 1573 5260 1574 3212 1577 4748 1578 2700
1580 1676 1585 4492 1586 2444 1603 6220 1605 5196 1606 3148 1609 4684 1610
2636 1617 4428 1618 2380 1633 4300 1634 2252 1667 6188 1669 5164 1670 3116
1673 4652 1674 2604 1681 4396 1682 2348 1697 4268 1698 2220 1729 4204 1730
2156 1795 6172 1797 5148 1798 3100 1801 4636 1802 2588 1809 4380 1810 2332
1825 4252 1826 2204 1857 4188 1858 2140 1921 4156 1922 2108 2063 7682 2071
7426 2075 6914 2077 5890 2078 3842 2087 7298 2091 6786 2093 5762 2094 3714
2099 6530 2101 5506 2102 3458 2105 4994 2106 2946 2119 7234 2123 6722 2125
5698 2126 3650 2131 6466 2133 5442 2134 3394 2137 4930 2138 2882 2147 6338
2149 5314 2150 3266 2153 4802 2154 2754 2161 4546 2162 2498 2183 7202 2187
6690 2189 5666 2190 3618 2195 6434 2197 5410 2198 3362 2201 4898 2202 2850
2211 6306 2213 5282 2214 3234 2217 4770 2218 2722 2225 4514 2226 2466 2243
6242 2245 5218 2246 3170 2249 4706 2250 2658 2257 4450 2258 2402 2273 4322
2311 7186 2315 6674 2317 5650 2318 3602 2323 6418 2325 5394 2326 3346 2329
4882 2330 2834 2339 6290 2341 5266 2342 3218 2345 4754 2346 2706 2353 4498
2354 2450 2371 6226 2373 5202 2374 3154 2377 4690 2378 2642 2385 4434 2401
4306 2435 6194 2437 5170 2438 3122 2441 4658 2442 2610 2449 4402 2465 4274
2497 4210 2567 7178 2571 6666 2573 5642 2574 3594 2579 6410 2581 5386 2582
3338 2585 4874 2586 2826 2595 6282 2597 5258 2598 3210 2601 4746 2602 2698
2609 4490 2627 6218 2629 5194 2630 3146 2633 4682 2641 4426 2657 4298 2691
6186 2693 5162 2694 3114 2697 4650 2705 4394 2721 4266 2753 4202 2819 6170
2821 5146 2822 3098 2825 4634 2833 4378 2849 4250 2881 4186 2945 4154 3079
7174 3083 6662 3085 5638 3086 3590 3091 6406 3093 5382 3094 3334 3097 4870
3107 6278 3109 5254 3110 3206 3113 4742 3121 4486 3139 6214 3141 5190 3145
4678 3153 4422 3169 4294 3203 6182 3205 5158 3209 4646 3217 4390 3233 4262
3265 4198 3331 6166 3333 5142 3337 4630 3345 4374 3361 4246 3393 4182 3457
4150 3587 6158 3589 5134 3593 4622 3601 4366 3617 4238 3649 4174 3713 4142
3841 4126 4111 7681 4119 7425 4123 6913 4125 5889 4135 7297 4139 6785 4141
5761 4147 6529 4149 5505 4153 4993 4167 7233 4171 6721 4173 5697 4179 6465
4181 5441 4185 4929 4195 6337 4197 5313 4201 4801 4209 4545 4231 7201 4235
6689 4237 5665 4243 6433 4245 5409 4249 4897 4259 6305 4261 5281 4265 4769
4273 4513 4291 6241 4293 5217 4297 4705 4305 4449 4359 7185 4363 6673 4365
5649 4371 6417 4373 5393 4377 4881 4387 6289 4389 5265 4393 4753 4401 4497
4419 6225 4421 5201 4425 4689 4483 6193 4485 5169 4489 4657 4615 7177 4619
6665 4621 5641 4627 6409 4629 5385 4633 4873 4643 6281 4645 5257 4649 4745
4675 6217 4677 5193 4739 6185 4741 5161 4867 6169 4869 5145 5127 7173 5131
6661 5133 5637 5139 6405 5141 5381 5155 6277 5157 5253 5187 6213 5251 6181
5379 6165 5635 6157 6151 7171 6155 6659 6163 6403 6179 6275 6211 5189 4681
4433 4321 3142 2634 2386 2274 1612 1364 1252  856  744  496
] def

/tab213 [
3 6144    5 5120    6 3072    9 4608   10 2560   12 1536   17 4352   18
2304   20 1280   24  768   33 4224   34 2176   36 1152   40  640   48  384
65 4160   66 2112   68 1088   72  576   80  320   96  192  129 4128  130
2080  132 1056  136  544  144  288  257 4112  258 2064  260 1040  264  528
513 4104  514 2056  516 1032 1025 4100 1026 2052 2049 4098 4097 2050 1028
520  272  160
] def

/chars 10 array def
0 1 9 {
/i exch def
codewords i get dup 1286 le {
tab513 exch get
} {
tab213 exch 1287 sub get
} ifelse
chars i 3 -1 roll put
} for

9 -1 0 {
/i exch def
2 i exp cvi fcs and 0 ne {
chars i chars i get 8191 xor put
} if
} for

% Conversion from characters to the OneCode encoding
/barmap [
7 2 4 3    1 10 0 0   9 12 2 8   5 5 6 11   8 9 3 1
0 1 5 12   2 5 1 8    4 4 9 11   6 3 8 10   3 9 7 6
5 11 1 4   8 5 2 12   9 10 0 2   7 1 6 7    3 6 4 9
0 3 8 6    6 4 2 7    1 1 9 9    7 10 5 2   4 0 3 8
6 2 0 4    8 11 1 0   9 8 3 12   2 6 7 7    5 1 4 10
1 12 6 9   7 3 8 0    5 8 9 7    4 6 2 10   3 4 0 5
8 4 5 7    7 11 1 9   6 0 9 6    0 6 4 8    2 1 3 2
5 9 8 12   4 11 6 1   9 5 7 4    3 3 1 2    0 7 2 0
1 3 4 1    6 10 3 5   8 7 9 4    2 11 5 6   0 8 7 12
4 2 8 1    5 10 3 0   9 3 0 9    6 5 2 4    7 8 1 7
5 0 4 5    2 3 0 10   6 12 9 2   3 11 1 6   8 8 7 9
5 4 0 11   1 5 2 2    9 1 4 12   8 3 6 6    7 0 3 7
4 7 7 5    0 12 1 11  2 9 9 0    6 8 5 3    3 10 8 2
] def

/bbs 65 array def
/bhs 65 array def
0 1 64 {
/i exch def
/dec chars barmap i 4 mul get get 2 barmap i 4 mul 1 add get exp cvi and 0 ne def
/asc chars barmap i 4 mul 2 add get get 2 barmap i 4 mul 3 add get exp cvi and 0 ne def
dec not asc not and {
bbs i 3 height mul 8 div put
bhs i 2 height mul 8 div put
} if
dec not asc and {
bbs i 3 height mul 8 div put
bhs i 5 height mul 8 div put
} if
dec asc not and {
bbs i 0 height mul 8 div put
bhs i 5 height mul 8 div put
} if
dec asc and {
bbs i 0 height mul 8 div put
bhs i 8 height mul 8 div put
} if
} for

% Return the arguments
<<
/ren //renlinear
/bbs bbs
/bhs bhs
/sbs [bhs length 1 sub {1.44 1.872} repeat 1.44]
/txt txt
/textxalign (left)
/textfont /Helvetica
/textyoffset 1
/textxoffset -0.3
/opt options
>>

dontdraw not //renlinear if

end

} bind def
/onecode dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER onecode--

% --BEGIN ENCODER postnet--
% --REQUIRES preamble raiseerror renlinear--
% --DESC: USPS POSTNET
% --EXAM: 01234
% --EXOP: includetext includecheckintext
% --RNDR: renlinear
%%BeginResource: QRCODE postnet 0.0 2015112400 65689 65439
%%BeginData:        140 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
begin
/postnet {

20 dict begin

/options exch def              % We are given an option string
/barcode exch def              % We are given a barcode string

/dontdraw false def
/includetext false def          % Enable/disable text
/validatecheck false def
/includecheckintext false def
/textfont /Courier def
/textsize 8 def
/textyoffset -7 def
/height 0.125 def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/textfont textfont cvlit def
/textsize textsize cvr def
/textyoffset textyoffset cvr def
/height height cvr def

/barlen barcode length validatecheck {1 sub} if def

% Validate the input
barlen 5 ne barlen 9 ne and barlen 11 ne and {
/bwipp.postnetBadLength (USPS POSTNET must be 5, 9 or 11 digits excluding check digit) //raiseerror exec
} if
barcode {
dup 48 lt exch 57 gt or {
/bwipp.postnetBadCharacter (USPS POSTNET must contain only digits) //raiseerror exec
} if
} forall

% Create a string of the available characters
/barchars (0123456789) def

/checksum 0 def
0 1 barlen 1 sub {
/i exch def
/checksum checksum barcode i get 48 sub add def
} for
/checksum 10 checksum 10 mod sub 10 mod def
validatecheck {
barcode barlen get barchars checksum get ne {
/bwipp.postnetBadCheckDigit (Incorrect USPS POSTNET check digit provided) //raiseerror exec
} if
/barcode barcode 0 barlen getinterval def
} if

% Create an array containing the character mappings
/encs
[ (55222) (22255) (22525) (22552) (25225)
(25252) (25522) (52225) (52252) (52522)
(5) (5)
] def

/bhs barlen 5 mul 7 add array def
/txt barlen 1 add array def

% Put start character
/enc encs 10 get def
/heights enc length array def
0 1 enc length 1 sub {
/j exch def
heights j enc j 1 getinterval cvi height mul 5 div put
} for
bhs 0 heights putinterval   % Put encoded digit into sbs

0 1 barlen 1 sub {
/i exch def
/enc encs barcode i get 48 sub get def
/heights enc length array def
0 1 enc length 1 sub {
/j exch def
heights j enc j 1 getinterval cvi height mul 5 div put
} for
bhs i 5 mul 1 add heights putinterval   % Put encoded digit into sbs
txt i [barcode i 1 getinterval i 5 mul 1 add 3.312 mul textyoffset textfont textsize] put
} for

% Put the checksum character
/enc encs checksum get def
/heights enc length array def
0 1 enc length 1 sub {
/j exch def
heights j enc j 1 getinterval cvi height mul 5 div put
} for
bhs barlen 5 mul 1 add heights putinterval

includecheckintext {
txt barlen [barchars checksum 1 getinterval barlen 5 mul 1 add 3.312 mul textyoffset textfont textsize] put
} {
txt barlen [( ) barlen 5 mul 1 add 72 mul 25 div textyoffset textfont textsize] put
} ifelse

% Put end character
/enc encs 11 get def
/heights enc length array def
0 1 enc length 1 sub {
/j exch def
heights j enc j 1 getinterval cvi height mul 5 div put
} for
bhs barlen 5 mul 6 add heights putinterval

% Return the arguments
<<
/ren //renlinear
/bhs bhs
/bbs [bhs length {0} repeat]
/sbs [bhs length 1 sub {1.44 1.872} repeat 1.44]
includetext {
/txt txt
} if
/opt options
>>

dontdraw not //renlinear if

end

} bind def
/postnet dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER postnet--

% --BEGIN ENCODER planet--
% --REQUIRES preamble raiseerror renlinear--
% --DESC: USPS PLANET
% --EXAM: 01234567890
% --EXOP: includetext includecheckintext
% --RNDR: renlinear
%%BeginResource: QRCODE planet 0.0 2015112400 65565 65215
%%BeginData:        141 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
begin
/planet {

20 dict begin

/options exch def              % We are given an option string
/barcode exch def              % We are given a barcode string

/dontdraw false def
/includetext false def          % Enable/disable text
/validatecheck false def
/includecheckintext false def
/textfont /Courier def
/textsize 8 def
/textyoffset -7 def
/height 0.125 def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/textfont textfont cvlit def
/textsize textsize cvr def
/textyoffset textyoffset cvr def
/height height cvr def

/barlen barcode length validatecheck {1 sub} if def

% Validate the input
barlen 11 ne barlen 13 ne and {
/bwipp.planetBadLength (USPS PLANET must be 11 or 13 digits excluding check digit) //raiseerror exec
} if
barcode {
dup 48 lt exch 57 gt or {
/bwipp.planetBadCharacter (USPS PLANET must contain only digits) //raiseerror exec
} if
} forall

% Create a string of the available characters
/barchars (0123456789) def

% Calculate the checksum
/checksum 0 def
0 1 barlen 1 sub {
/i exch def
/checksum checksum barcode i get 48 sub add def
} for
/checksum 10 checksum 10 mod sub 10 mod def
validatecheck {
barcode barlen get barchars checksum get ne {
/bwipp.planetBadCheckDigit (Incorrect USPS PLANET check digit provided) //raiseerror exec
} if
/barcode barcode 0 barlen getinterval def
} if

% Create an array containing the character mappings
/encs
[ (22555) (55522) (55252) (55225) (52552)
(52525) (52255) (25552) (25525) (25255)
(5) (5)
] def

/bhs barlen 5 mul 7 add array def
/txt barlen 1 add array def

% Put start character
/enc encs 10 get def
/heights enc length array def
0 1 enc length 1 sub {
/j exch def
heights j enc j 1 getinterval cvi height mul 5 div put
} for
bhs 0 heights putinterval   % Put encoded digit into sbs

0 1 barlen 1 sub {
/i exch def
/enc encs barcode i get 48 sub get def
/heights enc length array def
0 1 enc length 1 sub {
/j exch def
heights j enc j 1 getinterval cvi height mul 5 div put
} for
bhs i 5 mul 1 add heights putinterval   % Put encoded digit into sbs
txt i [barcode i 1 getinterval i 5 mul 1 add 3.312 mul textyoffset textfont textsize] put
} for

% Put the checksum character
/enc encs checksum get def
/heights enc length array def
0 1 enc length 1 sub {
/j exch def
heights j enc j 1 getinterval cvi height mul 5 div put
} for
bhs barlen 5 mul 1 add heights putinterval

includecheckintext {
txt barlen [barchars checksum 1 getinterval barlen 5 mul 1 add 3.312 mul textyoffset textfont textsize] put
} {
txt barlen [( ) barlen 5 mul 1 add 72 mul 25 div textyoffset textfont textsize] put
} ifelse

% Put end character
/enc encs 11 get def
/heights enc length array def
0 1 enc length 1 sub {
/j exch def
heights j enc j 1 getinterval cvi height mul 5 div put
} for
bhs barlen 5 mul 6 add heights putinterval

% Return the arguments
<<
/ren //renlinear
/bhs bhs
/bbs [bhs length {0} repeat]
/sbs [bhs length 1 sub {1.44 1.872} repeat 1.44]
includetext {
/txt txt
} if
/opt options
>>

dontdraw not //renlinear if

end

} bind def
/planet dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER planet--

% --BEGIN ENCODER royalmail--
% --REQUIRES preamble raiseerror renlinear--
% --DESC: Royal Mail 4 State Customer Code
% --EXAM: LE28HS9Z
% --EXOP: includetext barcolor=FF0000
% --RNDR: renlinear
%%BeginResource: QRCODE royalmail 0.0 2015112400 66136 65853
%%BeginData:        145 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
begin
/royalmail {

20 dict begin

/options exch def              % We are given an option string
/barcode exch def              % We are given a barcode string

/dontdraw false def
/includetext false def          % Enable/disable text
/validatecheck false def
/includecheckintext false def
/textfont /Courier def
/textsize 8 def
/textyoffset -7 def
/height 0.175 def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/textfont textfont cvlit def
/textsize textsize cvr def
/textyoffset textyoffset cvr def
/height height cvr def

% Create a string of the available characters
/barchars (ZUVWXY501234B6789AHCDEFGNIJKLMTOPQRS) def
/charvals 36 dict def
0 1 35 {charvals exch dup barchars exch 1 getinterval exch put} for

% Validate the input
0 1 barcode length 1 sub {
barcode exch 1 getinterval charvals exch known not {
/bwipp.royalmailBadCharacter (RM4SCC must contain only capital letters and digits) //raiseerror exec
} if
} for

/barlen barcode length validatecheck {1 sub} if def

/checksumrow 0 def
/checksumcol 0 def
0 1 barlen 1 sub {
/i exch def
/indx charvals barcode i 1 getinterval get def
/checksumrow checksumrow indx 6 idiv add def
/checksumcol checksumcol indx 6 mod add def
} for
/checksum checksumrow 6 mod 6 mul checksumcol 6 mod add def
validatecheck {
barcode barlen get barchars checksum get ne {
/bwipp.royalmailBadCheckDigit (Incorrect RM4SCC check digit provided) //raiseerror exec
} if
/barcode barcode 0 barlen getinterval def
} if

% Create an array containing the character mappings
/encs
[ (3300) (2211) (2301) (2310) (3201) (3210)
(1122) (0033) (0123) (0132) (1023) (1032)
(1302) (0213) (0303) (0312) (1203) (1212)
(1320) (0231) (0321) (0330) (1221) (1230)
(3102) (2013) (2103) (2112) (3003) (3012)
(3120) (2031) (2121) (2130) (3021) (3030)
(2) (3)
] def

/encstr barlen 4 mul 6 add string def
/txt barlen 1 add array def

% Put start character
encstr 0 encs 36 get putinterval

0 1 barlen 1 sub {
/i exch def
/indx charvals barcode i 1 getinterval get def
encstr i 4 mul 1 add encs indx get putinterval
txt i [barcode i 1 getinterval i 4 mul 1 add 3.312 mul textyoffset textfont textsize] put
} for

% Put the checksum character
encstr barlen 4 mul 1 add encs checksum get putinterval
includecheckintext {
txt barlen [barchars checksum 1 getinterval barlen 4 mul 1 add 3.312 mul textyoffset textfont textsize] put
} {
txt barlen [( ) barlen 4 mul 1 add 3.312 mul textyoffset textfont textsize] put
} ifelse

% Put end character
encstr barlen 4 mul 5 add encs 37 get putinterval

/bbs encstr length array def
/bhs encstr length array def
0 1 encstr length 1 sub {
/i exch def
/enc encstr i 1 getinterval def
enc (0) eq {
bbs i 3 height mul 8 div put
bhs i 2 height mul 8 div put
} if
enc (1) eq {
bbs i 0 height mul 8 div put
bhs i 5 height mul 8 div put
} if
enc (2) eq {
bbs i 3 height mul 8 div put
bhs i 5 height mul 8 div put
} if
enc (3) eq {
bbs i 0 height mul 8 div put
bhs i 8 height mul 8 div put
} if
} for

% Return the arguments
<<
/ren //renlinear
/bbs bbs
/bhs bhs
/sbs [bhs length 1 sub {1.44 1.872} repeat 1.44]
includetext {
/txt txt
} if
/opt options
>>

dontdraw not //renlinear if

end

} bind def
/royalmail dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER royalmail--

% --BEGIN ENCODER auspost--
% --REQUIRES preamble raiseerror renlinear--
% --DESC: AusPost 4 State Customer Code
% --EXAM: 5956439111ABA 9
% --EXOP: includetext custinfoenc=character
% --RNDR: renlinear
%%BeginResource: QRCODE auspost 0.0 2015112400 75628 75331
%%BeginData:        202 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
begin
/auspost {

20 dict begin

/options exch def              % We are given an option string
/barcode exch def              % We are given a barcode string

/dontdraw false def
/includetext false def         % Enable/disable text
/textfont /Courier def
/textsize 8 def
/textyoffset -7 def
/height 0.175 def
/custinfoenc (character) def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/textfont textfont cvlit def
/textsize textsize cvr def
/textyoffset textyoffset cvr def
/height height cvr def

% Create an array containing the character mappings
/encs
[ (000) (001) (002) (010) (011) (012) (020) (021)
(022) (100) (101) (102) (110) (111) (112) (120)
(121) (122) (200) (201) (202) (210) (211) (212)
(220) (221) (222) (300) (301) (302) (310) (311)
(312) (320) (321) (322) (023) (030) (031) (032)
(033) (103) (113) (123) (130) (131) (132) (133)
(203) (213) (223) (230) (231) (232) (233) (303)
(313) (323) (330) (331) (332) (333) (003) (013)
(00) (01) (02) (10) (11) (12) (20) (21) (22) (30)
(13) (3)
] def

% Create a string of the available characters
/barchars (ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz #) def

/barlen barcode length def
barcode 0 2 getinterval (11) eq {37} if
barcode 0 2 getinterval (45) eq {37} if
barcode 0 2 getinterval (59) eq {52} if
barcode 0 2 getinterval (62) eq {67} if
/encstr exch string def
/txt barlen 2 sub array def

% Put start character
encstr 0 encs 74 get putinterval

% Encode the FCC
0 1 1 {
/i exch def
encs barcode i 1 getinterval cvi 64 add get
encstr i 2 mul 2 add 3 2 roll putinterval
} for

% Encode the DPID
2 1 9 {
/i exch def
encs barcode i 1 getinterval cvi 64 add get
encstr i 2 mul 2 add 3 2 roll putinterval
txt i 2 sub [barcode i 1 getinterval i 2 sub 2 mul 6 add 3.312 mul textyoffset textfont textsize] put
} for

% Encode the customer information
custinfoenc (numeric) eq {
0 1 barlen 11 sub {
/i exch def
encs barcode i 10 add 1 getinterval cvi 64 add get
encstr i 2 mul 22 add 3 2 roll putinterval
txt i 8 add [barcode i 10 add 1 getinterval i 2 mul 22 add 3.312 mul textyoffset textfont textsize] put
} for
/ciflen barlen 10 sub 2 mul def
} {
0 1 barlen 11 sub {
/i exch def
barcode i 10 add 1 getinterval barchars exch search
pop
length /indx exch def
pop pop
/enc encs indx get def
encstr i 3 mul 22 add enc putinterval
txt i 8 add [barcode i 10 add 1 getinterval i 3 mul 22 add 3.312 mul textyoffset textfont textsize] put
} for
/ciflen barlen 10 sub 3 mul def
} ifelse

% Add any filler characters
22 ciflen add 1 encstr length 14 sub {
encstr exch encs 75 get putinterval
} for

% Create the 64x64 Reed-Solomon table
/rstable 64 64 mul array def
rstable 0 [ 64 {0} repeat ] putinterval
rstable 64 [ 0 1 63 {} for ] putinterval
/prev 1 def
64 {
/next prev 1 bitshift def
next 64 and 0 ne {
/next next 67 xor def
} if
0 1 63 {
/j exch def
/nextcell {rstable 64 next mul j add} def
nextcell rstable 64 prev mul j add get 1 bitshift put
nextcell get 64 and 0 ne {
nextcell nextcell get 67 xor put
} if
} for
/prev next def
} repeat

% Calculate the Reed-Solomon codes for triples
/rscodes encstr length 16 sub 3 idiv 4 add array def
rscodes 0 [ 4 {0} repeat ] putinterval
2 3 encstr length 16 sub {
/i exch def
rscodes rscodes length i 2 sub 3 idiv sub 1 sub
encstr i 1 getinterval cvi 16 mul
encstr i 1 add 1 getinterval cvi 4 mul add
encstr i 2 add 1 getinterval cvi add
put
} for
rscodes length 5 sub -1 0 {
/i exch def
0 1 4 {
/j exch def
rscodes i j add rscodes i j add get
rstable 64 [48 17 29 30 1] j get mul rscodes i 4 add get add get
xor put
} for
} for
/checkcode (000000000000) 12 string copy def
0 1 3 {
/i exch def
/enc rscodes 3 i sub get 4 3 string cvrs def
checkcode i 3 mul 3 enc length sub add enc putinterval
} for

% Put checkcode and end characters
encstr encstr length 14 sub checkcode putinterval
encstr encstr length 2 sub encs 74 get putinterval

/bbs encstr length array def
/bhs encstr length array def
0 1 encstr length 1 sub {
/i exch def
/enc encstr i 1 getinterval def
enc (0) eq {
bbs i 0 height mul 8 div put
bhs i 8 height mul 8 div put
} if
enc (1) eq {
bbs i 3 height mul 8 div put
bhs i 5 height mul 8 div put
} if
enc (2) eq {
bbs i 0 height mul 8 div put
bhs i 5 height mul 8 div put
} if
enc (3) eq {
bbs i 3 height mul 8 div put
bhs i 2 height mul 8 div put
} if
} for

% Return the arguments
<<
/ren //renlinear
/bbs bbs
/bhs bhs
/sbs [bhs length 1 sub {1.44 1.872} repeat 1.44]
includetext {
/txt txt
} if
/opt options
>>

dontdraw not //renlinear if

end

} bind def
/auspost dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER auspost--

% --BEGIN ENCODER kix--
% --REQUIRES preamble raiseerror renlinear--
% --DESC: Royal Dutch TPG Post KIX
% --EXAM: 1231FZ13XHS
% --EXOP: includetext
% --RNDR: renlinear
%%BeginResource: QRCODE kix 0.0 2015112400 61942 61672
%%BeginData:        111 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
begin
/kix {

20 dict begin

/options exch def              % We are given an option string
/barcode exch def              % We are given a barcode string

/dontdraw false def
/includetext false def          % Enable/disable text
/textfont /Courier def
/textsize 8 def
/textyoffset -7 def
/height 0.175 def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/textfont textfont cvlit def
/textsize textsize cvr def
/textyoffset textyoffset cvr def
/height height cvr def

% Create an array containing the character mappings
/encs
[ (0033) (0123) (0132) (1023) (1032) (1122)
(0213) (0303) (0312) (1203) (1212) (1302)
(0231) (0321) (0330) (1221) (1230) (1320)
(2013) (2103) (2112) (3003) (3012) (3102)
(2031) (2121) (2130) (3021) (3030) (3120)
(2211) (2301) (2310) (3201) (3210) (3300)
] def

% Create a string of the available characters
/barchars (0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ) def
/charvals 36 dict def
0 1 35 {charvals exch dup barchars exch 1 getinterval exch put} for

% Validate the input
0 1 barcode length 1 sub {
barcode exch 1 getinterval charvals exch known not {
/bwipp.kixBadCharacter (KIX must contain only capital letters and digits) //raiseerror exec
} if
} for

/barlen barcode length def
/encstr barlen 4 mul string def
/txt barlen array def

0 1 barlen 1 sub {
/i exch def
/indx charvals barcode i 1 getinterval get def
encstr i 4 mul encs indx get putinterval
txt i [barcode i 1 getinterval i 4 mul 3.312 mul textyoffset textfont textsize] put
} for

/bbs encstr length array def
/bhs encstr length array def
0 1 encstr length 1 sub {
/i exch def
/enc encstr i 1 getinterval def
enc (0) eq {
bbs i 3 height mul 8 div put
bhs i 2 height mul 8 div put
} if
enc (1) eq {
bbs i 0 height mul 8 div put
bhs i 5 height mul 8 div put
} if
enc (2) eq {
bbs i 3 height mul 8 div put
bhs i 5 height mul 8 div put
} if
enc (3) eq {
bbs i 0 height mul 8 div put
bhs i 8 height mul 8 div put
} if
} for

% Return the arguments
<<
/ren //renlinear
/bbs bbs
/bhs bhs
/sbs [bhs length 1 sub {1.44 1.872} repeat 1.44]
includetext {
/txt txt
} if
/opt options
>>

dontdraw not //renlinear if

end

} bind def
/kix dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER kix--

% --BEGIN ENCODER japanpost--
% --REQUIRES preamble raiseerror renlinear--
% --DESC: Japan Post 4 State Customer Code
% --EXAM: 6540123789-A-K-Z
% --EXOP: includetext includecheckintext
% --RNDR: renlinear
%%BeginResource: QRCODE japanpost 0.0 2015112400 66345 66129
%%BeginData:        162 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
begin
/japanpost {

20 dict begin

/options exch def              % We are given an option string
/barcode exch def              % We are given a barcode string

/dontdraw false def
/includetext false def          % Enable/disable text
/includecheckintext false def
/textfont /Courier def
/textsize 8 def
/textyoffset -7 def
/height 0.175 def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/textfont textfont cvlit def
/textsize textsize cvr def
/textyoffset textyoffset cvr def
/height height cvr def

% Create an array containing the character mappings
% 0123456789- C1C2C3C4C5C6C7C8 ST EN
/encs
[ (300) (330) (312) (132) (321) (303) (123) (231) (213) (033) (030)
(120) (102) (210) (012) (201) (021) (003) (333)
(31) (13)
] def

% Create a string of the available characters
/barchars (0123456789-ABCDEFGHIJKLMNOPQRSTUVWXYZ) def
/barlen barcode length def

/encstr 20 1 add 3 mul 4 add string def
/digits 20 array def
/txt barlen 1 add array def

% Put start character
encstr 0 encs 19 get putinterval

/checksum 0 def
/j 0 def /i 0 def
0 1 barlen 1 sub {
/i exch def
barcode i 1 getinterval barchars exch search
pop                                  % Discard true leaving pre
length /indx exch def                % indx is the length of pre
pop pop                              % Discard match and post
indx 11 ge indx 37 lt and {          % Insert escape
j 18 gt {exit} if                % Should fit in 20 chars
% 11-20: C1 (11)
% 21-30: C2 (12)
% 31-36: C3 (13)
/digit indx 1 sub 10 idiv 10 add def
encstr j 3 mul 2 add encs digit get putinterval
/checksum checksum digit add def
digits j digit put
/j j 1 add def
} if
j 19 gt {exit} if                    % Should fit in 20 chars
/digit 0 def
indx 37 eq {
/digit 14 def                    % space (C14)
} if
indx 11 ge indx 37 lt and {
/digit indx 1 sub 10 mod def
} if
indx 11 lt {
/digit indx def
} if
encstr j 3 mul 2 add encs digit get putinterval % space
/checksum checksum digit add def
digits j digit put
txt i [barcode i 1 getinterval j 3 mul 2 add 3.312 mul textyoffset textfont textsize] put
/j j 1 add def
} for

% Fill spaces (c14) at right end
j 1 20 1 sub {
/k exch def
encstr k 3 mul 2 add encs 14 get putinterval
/checksum checksum 14 add def
digits k 14 put
} for

% Put the checksum character
/checksum checksum 19 mod 19 exch sub def
encstr 2 20 3 mul add encs checksum get putinterval

% Put end character
encstr 2 21 3 mul add encs 20 get putinterval
/checkdigit ( ) def
includecheckintext {
/checkdigit barchars checksum 1 getinterval def
} if
txt i 1 add [ checkdigit 20 3 mul 2 add 3.312 mul textyoffset textfont textsize] put

% Put end character
encstr 20 1 add 3 mul 2 add encs 20 get putinterval

/bbs 21 3 mul 4 add array def
/bhs bbs length array def
0 1 bbs length 1 sub {
/i exch def
/enc encstr i 1 getinterval def
/bunit 0 def
/hunit 0 def
enc (0) eq {
/bunit 3 def
/hunit 2 def
} if
enc (1) eq {
/bunit 0 def
/hunit 5 def
} if
enc (2) eq {
/bunit 3 def
/hunit 5 def
} if
enc (3) eq {
/bunit 0 def
/hunit 8 def
} if
bbs i bunit height mul 8 div put
bhs i hunit height mul 8 div put
} for

% Return the arguments
<<
/ren //renlinear
/bbs bbs
/bhs bhs
/sbs [bhs length 1 sub {1.44 1.872} repeat 1.44]
includetext {
/txt txt
} if
/opt options
>>

dontdraw not //renlinear if

end

} bind def
/japanpost dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER japanpost--

% --BEGIN ENCODER msi--
% --REQUIRES preamble raiseerror renlinear--
% --DESC: MSI Modified Plessey
% --EXAM: 0123456789
% --EXOP: includetext includecheck includecheckintext
% --RNDR: renlinear
%%BeginResource: QRCODE msi 0.0 2015112400 71052 70834
%%BeginData:        139 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
begin
/msi {

20 dict begin                 % Confine variables to local scope

/options exch def       % We are given an option string
/barcode exch def       % We are given a barcode string

/dontdraw false def
/includecheck false def  % Enable/disable checkdigit
/includetext false def   % Enable/disable text
/includecheckintext false def
/checktype (mod10) def
/badmod11 false def
/textfont /Courier def
/textsize 8 def
/textyoffset -7 def
/height 1 def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/textfont textfont cvlit def
/textsize textsize cvr def
/textyoffset textyoffset cvr def
/height height cvr def

% Create an array containing the character mappings
/encs
[ (12121212) (12121221) (12122112) (12122121) (12211212)
(12211221) (12212112) (12212121) (21121212) (21121221)
(21) (121)
] def

% Create a string of the available characters
/barchars (0123456789) def

/barlen barcode length def     % Length of the code
/txtlen barlen def

/mod10 {
/code exch def
0 0 code {48 sub exch 10 mul add exch} forall pop 2 mul
0 {1 index 10 mod add exch 10 idiv dup 0 eq {pop exit} if exch} loop
0 0 code {48 sub add exch} forall exch pop add
10 mod 10 exch sub 10 mod
code length 1 add string dup 0 code putinterval dup code length 4 -1 roll 48 add put
} bind def

/mod11 {
/code exch def
code length 1 sub code {48 sub exch dup 1 sub exch 6 mod 2 add exch} forall pop
0 code length {3 1 roll mul add} repeat
11 mod 11 exch sub 11 mod
dup 10 eq badmod11 and {
pop code length 2 add string dup 0 code putinterval dup code length (10) putinterval
} {
code length 1 add string dup 0 code putinterval dup code length 4 -1 roll 48 add put
} ifelse
} bind def

/ncrmod11 {
/code exch def
code length 1 sub code {48 sub exch dup 1 sub exch 8 mod 2 add exch} forall pop
0 code length {3 1 roll mul add} repeat
11 mod 11 exch sub 11 mod
dup 10 eq badmod11 and {
pop code length 2 add string dup 0 code putinterval dup code length (10) putinterval
} {
code length 1 add string dup 0 code putinterval dup code length 4 -1 roll 48 add put
} ifelse
} bind def

% Calculate checksum
includecheck {
checktype (mod10) eq      {barcode mod10} if
checktype (mod1010) eq    {barcode mod10 mod10} if
checktype (mod11) eq      {barcode mod11} if
checktype (ncrmod11) eq   {barcode ncrmod11} if
checktype (mod1110) eq    {barcode mod11 mod10} if
checktype (ncrmod1110) eq {barcode ncrmod11 mod10} if
/barcode exch def
/barlen barcode length def
includecheckintext {/txtlen barlen def} if
} if

/sbs barlen 8 mul 5 add string def
/txt barlen array def

% Put start character
sbs 0 encs 10 get putinterval

0 1 barlen 1 sub {
/i exch def
% Lookup the encoding for the each barcode character
barcode i 1 getinterval barchars exch search
pop                                % Discard true leaving pre
length /indx exch def              % indx is the length of pre
pop pop                            % Discard seek and post
/enc encs indx get def             % Get the indxth encoding
sbs i 8 mul 2 add enc putinterval  % Put encoded digit into sbs
txt i [barcode i 1 getinterval i 12 mul 3 add textyoffset textfont textsize] put
} for

% Put the end character
sbs barlen 8 mul 2 add encs 11 get putinterval

% Return the arguments
<<
/ren //renlinear
/sbs [sbs {48 sub} forall]
/bhs [sbs length 1 add 2 idiv {height} repeat]
/bbs [sbs length 1 add 2 idiv {0} repeat]
includetext {
/txt txt 0 txtlen getinterval
} if
/opt options
>>

dontdraw not //renlinear if

end

} bind def
/msi dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER msi--

% --BEGIN ENCODER plessey--
% --REQUIRES preamble raiseerror renlinear--
% --DESC: Plessey UK
% --EXAM: 01234ABCD
% --EXOP: includetext includecheckintext
% --RNDR: renlinear
%%BeginResource: QRCODE plessey 0.0 2015112400 67754 67457
%%BeginData:        146 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
begin
/plessey {

20 dict begin                  % Confine variables to local scope

/options exch def        % We are given an option string
/barcode exch def        % We are given a barcode string

/dontdraw false def
/includetext false def    % Enable/disable text
/validatecheck false def
/includecheckintext false def
/unidirectional false def
/textfont /Courier def
/textsize 8 def
/textyoffset -7 def
/height 1 def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/textfont textfont cvlit def
/textsize textsize cvr def
/textyoffset textyoffset cvr def
/height height cvr def

% Create a string of the available characters
/barchars (0123456789ABCDEF) def
/charvals 16 dict def
0 1 15 {charvals exch dup barchars exch 1 getinterval exch put} for

% Validate the input
0 1 barcode length 1 sub {
barcode exch 1 getinterval charvals exch known not {
/bwipp.plesseyBadCharacter (Plessey must contain only digits and letters A B C D E F) //raiseerror exec
} if
} for

/barlen barcode length validatecheck {2 sub} if def

% Calculate the checksums
/checkbits barlen 4 mul 8 add array def
checkbits barlen 4 mul [ 0 0 0 0 0 0 0 0 ] putinterval
0 1 barlen 1 sub {
/i exch def
/indx charvals barcode i 1 getinterval get def
checkbits i 4 mul [
indx 1 and
indx -1 bitshift 1 and
indx -2 bitshift 1 and
indx -3 bitshift
] putinterval
} for
/checksalt [ 1 1 1 1 0 1 0 0 1 ] def
0 1 barlen 4 mul 1 sub {
/i exch def
checkbits i get 1 eq {
0 1 8 {
/j exch def
checkbits i j add checkbits i j add get checksalt j get xor put
} for
} if
} for
/checkval 0 def
0 1 7 {
/i exch def
/checkval checkval 2 i exp cvi checkbits barlen 4 mul i add get mul add def
} for
/checksum1 checkval 15 and def
/checksum2 checkval -4 bitshift def
validatecheck {
barcode barlen get barchars checksum1 get ne
barcode barlen 1 add get barchars checksum2 get ne or {
/bwipp.plesseyBadCheckDigits (Incorrect Plessey check digits provided) //raiseerror exec
} if
/barcode barcode 0 barlen getinterval def
} if

% Create an array containing the character mappings
/encs
[ (14141414) (32141414) (14321414) (32321414)
(14143214) (32143214) (14323214) (32323214)
(14141432) (32141432) (14321432) (32321432)
(14143232) (32143232) (14323232) (32323232)
(32321432) (541412323) (323)
] def

/sbs barlen 8 mul unidirectional {27} {33} ifelse add string def
/txt barlen 2 add array def

% Put start character
sbs 0 encs 16 get putinterval

0 1 barlen 1 sub {
/i exch def
/indx charvals barcode i 1 getinterval get def
sbs i 8 mul 8 add encs indx get putinterval
txt i [barcode i 1 getinterval i 20 mul 20 add textyoffset textfont textsize] put
} for

% Put the checksum characters
sbs barlen 8 mul 8 add encs checksum1 get putinterval
sbs barlen 8 mul 16 add encs checksum2 get putinterval
includecheckintext {
txt barlen [barchars checksum1 1 getinterval barlen 20 mul 20 add textyoffset textfont textsize] put
txt barlen 1 add [barchars checksum2 1 getinterval barlen 1 add 20 mul 20 add textyoffset textfont textsize] put
} {
txt barlen [( ) barlen 20 mul 20 add textyoffset textfont textsize] put
txt barlen 1 add [( ) barlen 1 add 20 mul 20 add textyoffset textfont textsize] put
} ifelse

% Put end character
sbs barlen 8 mul 24 add encs unidirectional {18} {17} ifelse get putinterval

% Return the arguments
<<
/ren //renlinear
/sbs [sbs {48 sub} forall]
/bhs [sbs length 1 add 2 idiv {height} repeat]
/bbs [sbs length 1 add 2 idiv {0} repeat]
includetext {
/txt txt
} if
/opt options
>>

dontdraw not //renlinear if

end

} bind def
/plessey dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER plessey--

% --BEGIN ENCODER telepen--
% --REQUIRES preamble raiseerror renlinear--
% --DESC: Telepen
% --EXAM: ABCDEF
% --EXOP: includetext
% --RNDR: renlinear
%%BeginResource: QRCODE telepen 0.0 2015112400 68624 68368
%%BeginData:        173 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
begin
/telepen {

20 dict begin                  % Confine variables to local scope

/options exch def        % We are given an option string
/barcode exch def        % We are given a barcode string

/numeric false def
/dontdraw false def
/includetext false def    % Enable/disable text
/textfont /Courier def
/textsize 8 def
/textyoffset -7 def
/height 1 def
/parse false def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/textfont textfont cvlit def
/textsize textsize cvr def
/textyoffset textyoffset cvr def
/height height cvr def

% Parse ordinals of the form ^NNN to ASCII
parse {
/msg barcode length string def
/j 0 def
barcode
{ % loop
(^) search {
dup msg exch j exch putinterval
length j add 1 add /j exch def
pop
dup 0 3 getinterval cvi msg exch j 1 sub exch put
dup length 3 sub 3 exch getinterval
} {
dup msg exch j exch putinterval
length j add /j exch def
/barcode msg 0 j getinterval def
exit
} ifelse
} loop
} if

% Create an array containing the character mappings
/encs
[ (31313131)        (1131313111)     (33313111)       (1111313131)
(3111313111)      (11333131)       (13133131)       (111111313111)
(31333111)        (1131113131)     (33113131)       (1111333111)
(3111113131)      (1113133111)     (1311133111)     (111111113131)
(3131113111)      (11313331)       (333331)         (111131113111)
(31113331)        (1133113111)     (1313113111)     (1111113331)
(31131331)        (113111113111)   (3311113111)     (1111131331)
(311111113111)    (1113111331)     (1311111331)     (11111111113111)
(31313311)        (1131311131)     (33311131)       (1111313311)
(3111311131)      (11333311)       (13133311)       (111111311131)
(31331131)        (1131113311)     (33113311)       (1111331131)
(3111113311)      (1113131131)     (1311131131)     (111111113311)
(3131111131)      (1131131311)     (33131311)       (111131111131)
(3111131311)      (1133111131)     (1313111131)     (111111131311)
(3113111311)      (113111111131)   (3311111131)     (111113111311)
(311111111131)    (111311111311)   (131111111311)   (11111111111131)
(3131311111)      (11313133)       (333133)         (111131311111)
(31113133)        (1133311111)     (1313311111)     (1111113133)
(313333)          (113111311111)   (3311311111)     (11113333)
(311111311111)    (11131333)       (13111333)       (11111111311111)
(31311133)        (1131331111)     (33331111)       (1111311133)
(3111331111)      (11331133)       (13131133)       (111111331111)
(3113131111)      (1131111133)     (33111133)       (111113131111)
(3111111133)      (111311131111)   (131111131111)   (111111111133)
(31311313)        (113131111111)   (3331111111)     (1111311313)
(311131111111)    (11331313)       (13131313)       (11111131111111)
(3133111111)      (1131111313)     (33111313)       (111133111111)
(3111111313)      (111313111111)   (131113111111)   (111111111313)
(313111111111)    (1131131113)     (33131113)       (11113111111111)
(3111131113)      (113311111111)   (131311111111)   (111111131113)
(3113111113)      (11311111111111) (331111111111)   (111113111113)
(31111111111111)  (111311111113)   (131111111113)   (1111111111111111)
] def

/barlen barcode length def    % Length of the code
/sbs barlen 16 mul 48 add string def
/txt barlen array def

% Put the start character ASCII 95
/enc encs 95 get def
sbs 0 enc putinterval
/l enc length def

/checksum 0 def
/i 0 def /j 0 def
{ % loop
i barlen eq {exit} if
numeric {  % numeric mode: 00-99 & 0X-9X
barcode i get 16 gt {
/np barcode i 2 getinterval def
np 1 1 getinterval (X) eq {  % X in even position amongst digits
/indx np 0 1 getinterval cvi 17 add def
} {
/indx np cvi 27 add def
} ifelse
txt j [np j 16 mul 16 add textyoffset textfont textsize] put
/i i 2 add def
} {
/indx barcode i get def
txt j [( ) j 16 mul 16 add textyoffset textfont textsize] put
/i i 1 add def
} ifelse
} {  % ASCII mode
/indx barcode i get def
indx 32 ge indx 126 le and {
txt j [barcode i 1 getinterval j 16 mul 16 add textyoffset textfont textsize] put
} {
txt j [( ) j 16 mul 16 add textyoffset textfont textsize] put
} ifelse
/i i 1 add def
} ifelse
/checksum checksum indx add def
/enc encs indx get def
sbs l enc putinterval          % Put encoded digit into sbs
/l l enc length add def
/j j 1 add def
} loop

% Put the checksum character
/checksum 127 checksum 127 mod sub 127 mod def
/enc encs checksum get def
sbs l enc putinterval
/l l enc length add def

% Put the end character ASCII 122
/enc encs 122 get def
sbs l enc putinterval
/l l enc length add def

% Shrink sbs and txt to fit exactly
/sbs sbs 0 l getinterval def
/txt txt 0 j getinterval def

% Return the arguments
<<
/ren //renlinear
/sbs [sbs {48 sub} forall]
/bhs [sbs length 1 add 2 idiv {height} repeat]
/bbs [sbs length 1 add 2 idiv {0} repeat]
includetext {
/txt txt
} if
/opt options
>>

dontdraw not //renlinear if

end

} bind def
/telepen dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER telepen--

% --BEGIN ENCODER telepennumeric--
% --REQUIRES preamble raiseerror renlinear telepen--
% --DESC: Telepen Numeric
% --EXAM: 01234567
% --EXOP: includetext
% --RNDR: renlinear
%%BeginResource: QRCODE telepennumeric 0.0 2015112400 57870 57594
%%BeginData:         55 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
dup /telepen dup /QRCODE findresource put
begin
/telepennumeric {

20 dict begin            % Confine variables to local scope

/options exch def  % We are given an option string
/barcode exch def  % We are given a barcode string

/dontdraw false def
/includetext false def    % Enable/disable text
/textfont /Courier def
/textsize 8 def
/textxoffset 0 def
/textyoffset -7 def
/height 1 def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/textfont textfont cvlit def
/textsize textsize cvr def
/textxoffset textxoffset cvr def
/textyoffset textyoffset cvr def
/height height cvr def

% Get the result of encoding with code2of5 with version=industrial
options (dontdraw) true put
options (numeric) true put

/args barcode options //telepen exec def

args (opt) options put
args

dontdraw not //renlinear if

end

} bind def
/telepennumeric dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER telepennumeric--

% --BEGIN ENCODER posicode--
% --REQUIRES preamble raiseerror renlinear--
% --DESC: PosiCode
% --EXAM: ABC123
% --EXOP: version=b inkspread=-0.5 parsefnc includetext
% --RNDR: renlinear
%%BeginResource: QRCODE posicode 0.0 2015112400 106927 109835
%%BeginData:        423 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
begin
/posicode {

20 dict begin                  % Confine variables to local scope

/options exch def        % We are given an option string
/barcode exch def        % We are given a barcode string

/dontdraw false def
/includetext false def    % Enable/disable text
/textfont /Courier def
/textsize 8 def
/textxoffset 0 def
/textyoffset -7 def
/height 1 def
/encoding (auto) def
/version (a) def
/checkoffset 0 def
/raw false def
/parse false def
/parsefnc false def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/textfont textfont cvlit def
/textsize textsize cvr def
/textxoffset textxoffset cvr def
/textyoffset textyoffset cvr def
/encoding encoding cvlit def
/version version cvlit def
/checkoffset checkoffset cvi def
/height height cvr def

% Parse ordinals of the form ^NNN to ASCII
parse {
/msg barcode length string def
/j 0 def
barcode
{ % loop
(^) search {
dup msg exch j exch putinterval
length j add 1 add /j exch def
pop
dup 0 3 getinterval cvi msg exch j 1 sub exch put
dup length 3 sub 3 exch getinterval
} {
dup msg exch j exch putinterval
length j add /j exch def
/barcode msg 0 j getinterval def
exit
} ifelse
} loop
} if

/barlen barcode length def

% Special function characters
/la0  -1 def  /la1  -2 def  /la2  -3 def
/sf0  -4 def  /sf1  -5 def  /sf2  -6 def
/fn1  -7 def  /fn2  -8 def  /fn3  -9 def  /fn4 -10 def

% Character maps for each state
<<
/normal
[
%  0    1    2        0    1    2        0    1    2
[ (0)  (^)  (') ]  [ (1)  (;)   27 ]  [ (2)  (<)   28 ]  % 0-2
[ (3)  (=)   29 ]  [ (4)  (>)   30 ]  [ (5)  (?)   31 ]  % 3-5
[ (6)  (@)  (!) ]  [ (7)  ([)  (") ]  [ (8)   92  (#) ]  % 6-8
[ (9)  (])  (&) ]  [ (A)  (a)    1 ]  [ (B)  (b)    2 ]  % 9-11
[ (C)  (c)    3 ]  [ (D)  (d)    4 ]  [ (E)  (e)    5 ]  % 12-14
[ (F)  (f)    6 ]  [ (G)  (g)    7 ]  [ (H)  (h)    8 ]  % 15-17
[ (I)  (i)    9 ]  [ (J)  (j)   10 ]  [ (K)  (k)   11 ]  % 18-20
[ (L)  (l)   12 ]  [ (M)  (m)   13 ]  [ (N)  (n)   14 ]  % 21-23
[ (O)  (o)   15 ]  [ (P)  (p)   16 ]  [ (Q)  (q)   17 ]  % 24-26
[ (R)  (r)   18 ]  [ (S)  (s)   19 ]  [ (T)  (t)   20 ]  % 27-29
[ (U)  (u)   21 ]  [ (V)  (v)   22 ]  [ (W)  (w)   23 ]  % 30-32
[ (X)  (x)   24 ]  [ (Y)  (y)   25 ]  [ (Z)  (z)   26 ]  % 33-35
[ (-)  (_)   40 ]  [ (.)  (`)   41 ]  [ ( )  127    0 ]  % 36-38
[ ($)  ({)  (*) ]  [ (/)  (|)  (,) ]  [ (+)  (})  (:) ]  % 39-41
[ (%)  (~)  fn1 ]  [ la1  la0  fn2 ]  [ sf1  sf0  fn3 ]  % 42-44
[ sf2  sf2  fn4 ]                                        % 45
]
/limited
[
[ (0)  -98  -98 ]  [ (1)  -98   -98 ]  [ (2)  -98  -98 ]  % 0-2
[ (3)  -98  -98 ]  [ (4)  -98   -98 ]  [ (5)  -98  -98 ]  % 3-5
[ (6)  -98  -98 ]  [ (7)  -98   -98 ]  [ (8)  -98  -98 ]  % 6-8
[ (9)  -98  -98 ]  [ (A)  -98   -98 ]  [ (B)  -98  -98 ]  % 9-11
[ (C)  -98  -98 ]  [ (D)  -98   -98 ]  [ (E)  -98  -98 ]  % 12-14
[ (F)  -98  -98 ]  [ (G)  -98   -98 ]  [ (H)  -98  -98 ]  % 15-17
[ (I)  -98  -98 ]  [ (J)  -98   -98 ]  [ (K)  -98  -98 ]  % 18-20
[ (L)  -98  -98 ]  [ (M)  -98   -98 ]  [ (N)  -98  -98 ]  % 21-23
[ (O)  -98  -98 ]  [ (P)  -98   -98 ]  [ (Q)  -98  -98 ]  % 24-26
[ (R)  -98  -98 ]  [ (S)  -98   -98 ]  [ (T)  -98  -98 ]  % 27-29
[ (U)  -98  -98 ]  [ (V)  -98   -98 ]  [ (W)  -98  -98 ]  % 30-32
[ (X)  -98  -98 ]  [ (Y)  -98   -98 ]  [ (Z)  -98  -98 ]  % 33-35
[ (-)  -98  -98 ]  [ (.)  -98   -98 ]                     % 36-37
]
>>
version (a) eq version (b) eq or {/normal} {/limited} ifelse get
/charmaps exch def

% Invert charmaps to give character to value maps for each state
/charvals [
charmaps length dict charmaps length dict charmaps length dict
] def
0 1 charmaps length 1 sub {
/i exch def
/encs charmaps i get def
0 1 2 {
/j exch def
encs j get dup type /stringtype eq {0 get} if  % convert string to ASCII if required
charvals j get exch i put
} for
} for
/set0 charvals 0 get def
/set1 charvals 1 get def
/set2 charvals 2 get def

raw {/encoding (raw) def} if

encoding (raw) eq {
/cws barlen array def
/i 0 def /j 0 def
{ % loop
i barlen eq {exit} if
/cw barcode i 1 add 3 getinterval cvi def
cws j cw put
/i i 4 add def
/j j 1 add def
} loop
/cws cws 0 j getinterval def
/text () def
} if

encoding (auto) eq {

/fncvals <<
(FNC1) fn1
(FNC2) fn2
(FNC3) fn3
%            (FNC4) fn4        Not user accessible as encoded automatically
>> def

% Convert input into bytes accounting for FNC characters
/msg barlen array def
/text barlen string def
/i 0 def /j 0 def {
i barlen eq {exit} if
/char barcode i get def
text j char put
parsefnc char 94 eq and i barlen 4 sub lt and {
barcode i 1 add get 94 ne {
/char fncvals barcode i 1 add 4 getinterval get def
text j ( ) putinterval
/i i 4 add def
} {
/i i 1 add def
} ifelse
} if
msg j char put
/i i 1 add def
/j j 1 add def
} loop
/msg msg 0 j getinterval def
/msglen msg length def
/text text 0 j getinterval def

% Standard and extended ASCII runlength at position
/numSA [ msglen {0} repeat 0 ] def
/numEA [ msglen {0} repeat 0 ] def
msglen 1 sub -1 0 {
/i exch def
msg i get 0 ge {
msg i get 128 ge {
numEA i numEA i 1 add get 1 add put
} {
numSA i numSA i 1 add get 1 add put
} ifelse
} if
} for

% FNC4 codeword insertion for extended ASCII
/ea false def /msgtmp [] def
0 1 msglen 1 sub {
/i exch def
/c msg i get def
ea c 128 lt xor not c 0 ge and {  % Other mode required
ea {numSA} {numEA} ifelse i get dup  % Runlength of other mode
i add msglen eq {3} {5} ifelse       % Does run terminate symbol
lt {  % Shift
/msgtmp [ msgtmp aload pop fn4 ] def
} {   % Latch
/msgtmp [ msgtmp aload pop fn4 fn4 ] def
/ea ea not def
} ifelse
} if
/msgtmp [ msgtmp aload pop c 0 ge {c 127 and} {c} ifelse ] def
} for
/msg msgtmp def
/msglen msg length def

% Convert the input message to codewords
/enc {
exch get cws exch j exch put
/j j 1 add def
} bind def

/cws msglen 2 mul array def
/i 0 def /j 0 def /cset (set0) def
{
i msglen eq {exit} if

{  % common exit

% Read next two characters
/char1 msg i get def
/char2 i 1 add msglen lt {msg i 1 add get} {-99} ifelse def

% If current mode is sufficient then directly encode
cset load char1 known {
char1 cset load enc
/i i 1 add def
exit
} if

% If char1 is in set2 then shift encode
set2 char1 known {
sf2 cset load enc
char1 set2 enc
/i i 1 add def
exit
} if

% If char2 is also not in this set then latch else shift encode
cset load char2 known not {
cset (set0) eq {
la1 cset load enc
/cset (set1) def
} {
la0 cset load enc
/cset (set0) def
} ifelse
exit
} {
cset (set0) eq {
sf1 cset load enc
char1 set1 enc
} {
sf0 cset load enc
char1 set0 enc
} ifelse
/i i 1 add def
exit
} ifelse

exit
} loop

} loop
/cws cws 0 j getinterval def
} if  % auto encoding

% Create an array containing the character mappings
<<   % ";"=11, "<"=12
/a
[ (141112) (131212) (121312) (111412) (131113)
(121213) (111313) (121114) (111214) (111115)
(181111) (171211) (161311) (151411) (141511)
(131611) (121711) (111811) (171112) (161212)
(151312) (141412) (131512) (121612) (111712)
(161113) (151213) (141313) (131413) (121513)
(111613) (151114) (141214) (131314) (121414)
(111514) (141115) (131215) (121315) (111415)
(131116) (121216) (111316) (121117) (111217)
(111118) (1<111112) (111111111;1)
]
/b
[ (151213) (141313) (131413) (121513) (141214)
(131314) (121414) (131215) (121315) (121216)
(191212) (181312) (171412) (161512) (151612)
(141712) (131812) (121912) (181213) (171313)
(161413) (151513) (141613) (131713) (121813)
(171214) (161314) (151414) (141514) (131614)
(121714) (161215) (151315) (141415) (131515)
(121615) (151216) (141316) (131416) (121516)
(141217) (131317) (121417) (131218) (121318)
(121219) (1<121312) (121212121<1)
]
/limiteda
[ (111411) (111312) (111213) (111114) (121311)
(121212) (121113) (141111) (131211) (131112)
(171111) (161211) (151311) (141411) (131511)
(121611) (111711) (161112) (151212) (141312)
(131412) (121512) (111612) (151113) (141213)
(131313) (121413) (111513) (141114) (131214)
(121314) (111414) (131115) (121215) (111315)
(121116) (111216) (111117) (151111) (1)
]
/limitedb
[ (121512) (121413) (121314) (121215) (131412)
(131313) (131214) (151212) (141312) (141213)
(181212) (171312) (161412) (151512) (141612)
(131712) (121812) (171213) (161313) (151413)
(141513) (131613) (121713) (161214) (151314)
(141414) (131514) (121614) (151215) (141315)
(131415) (121515) (141216) (131316) (121416)
(131217) (121317) (121218) (141212) (1)
]
>>
version get /encs exch def

/c2w [
[ 495 330 210 126  70  35  15   5 ]
[ 165 120  84  56  35  20  10   4 ]
[  45  36  28  21  15  10   6   3 ]
[   9   8   7   6   5   4   3   2 ]
[   1   1   1   1   1   1   1   1 ]
] def
/v 0 def
cws {
/cw exch def
6 {
cw v xor 1 and 0 ne {
/v v 7682 xor def
} if
/v v -1 bitshift def
/cw cw -1 bitshift def
} repeat
} forall
/v v checkoffset add def

version (limiteda) eq version (limitedb) eq or {
/v v 1023 and def
v 824 gt v 853 lt and {
/v v 292 add def
} if
} {
/v v 1023 and 45 add def
} ifelse

/d [ 2 2 2 2 2 2 ] def
/r 0 def /c 0 def /w 0 def /sum 0 def
{
sum v eq {exit} if
/t sum c2w r get c get add def
t v eq {
/w w 1 add def
d r w 2 add put
/sum t def
} if
t v gt {
d r w 2 add put
/r r 1 add def
/w 0 def
} if
t v lt {
/c c 1 add def
/w w 1 add def
/sum t def
} if
} loop
20 0 1 4 {d exch get sub} for
d exch 5 exch put
version (b) eq version (limitedb) eq or {
/d [ d {1 add} forall ] def
} if
/cbs (111111111111) 12 string copy def
5 -1 0 {
/i exch def
cbs 5 i sub 2 mul 1 add d i get 47 add put
} for

% Concatenate the space bar successions
/sbs cws length 6 mul 31 add string def
encs encs length 2 sub get dup
sbs exch 0 exch putinterval
length /j exch def
0 1 cws length 1 sub {
/i exch def
sbs j encs cws i get get putinterval
/j j 6 add def
} for
sbs j cbs putinterval
/j j 12 add def
encs encs length 1 sub get dup
sbs exch j exch putinterval
length j add /j exch def
/sbs sbs 0 j getinterval def

% Return the arguments
<<
/ren //renlinear
/sbs [sbs {48 sub} forall]
/bhs [sbs length 1 add 2 idiv {height} repeat]
/bbs [sbs length 1 add 2 idiv {0} repeat]
/txt [ [text textxoffset textyoffset textfont textsize] ]
/textxalign (center)
/opt options
>>

dontdraw not //renlinear if

end

} bind def
/posicode dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER posicode--

% --BEGIN ENCODER codablockf--
% --REQUIRES preamble raiseerror renmatrix--
% --DESC: Codablock F
% --EXAM: CODABLOCK F 34567890123456789010040digit
% --EXOP: columns=8
% --RNDR: renmatrix
%%BeginResource: QRCODE codablockf 0.0 2015112400 126266 132420
%%BeginData:        521 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renmatrix dup /QRCODE findresource put
begin
/codablockf {

20 dict begin

/options exch def
/barcode exch def

/dontdraw false def
/rows -1 def
/columns 8 def
/rowheight 10 def
/sepheight 1 def
/encoding (auto) def
/parse false def
/parsefnc false def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/rows rows cvi def
/columns columns cvi def
/rowheight rowheight cvi def
/sepheight sepheight cvi def

columns 4 ge columns 62 le and
rows 2 ge rows 44 le and rows -1 eq or and {/c columns def} if

% Parse ordinals of the form ^NNN to ASCII
parse {
/msg barcode length string def
/j 0 def
barcode
{ % loop
(^) search {
dup msg exch j exch putinterval
length j add 1 add /j exch def
pop
dup 0 3 getinterval cvi msg exch j 1 sub exch put
dup length 3 sub 3 exch getinterval
} {
dup msg exch j exch putinterval
length j add /j exch def
/barcode msg 0 j getinterval def
exit
} ifelse
} loop
} if

/barlen barcode length def

% Convert input into bytes accounting for FNC characters
/swa -1 def  /swb -2 def  /swc -3 def  /sft -4 def
/fn1 -5 def  /fn2 -6 def  /fn3 -7 def  /fn4 -8 def
/sta -9 def  /stp -10 def

% Character maps for each state
/charmaps [
%  A    B    C         A    B    C         A    B    C
[  32   32  (00) ]  [ (!)  (!)  (01) ]  [ (")  (")  (02) ]  % 0-2
[ (#)  (#)  (03) ]  [ ($)  ($)  (04) ]  [ (%)  (%)  (05) ]  % 3-5
[ (&)  (&)  (06) ]  [ (')  (')  (07) ]  [  40   40  (08) ]  % 6-8
[  41   41  (09) ]  [ (*)  (*)  (10) ]  [ (+)  (+)  (11) ]  % 9-11
[ (,)  (,)  (12) ]  [ (-)  (-)  (13) ]  [ (.)  (.)  (14) ]  % 12-14
[ (/)  (/)  (15) ]  [ (0)  (0)  (16) ]  [ (1)  (1)  (17) ]  % 15-17
[ (2)  (2)  (18) ]  [ (3)  (3)  (19) ]  [ (4)  (4)  (20) ]  % 18-20
[ (5)  (5)  (21) ]  [ (6)  (6)  (22) ]  [ (7)  (7)  (23) ]  % 21-23
[ (8)  (8)  (24) ]  [ (9)  (9)  (25) ]  [ (:)  (:)  (26) ]  % 24-26
[ (;)  (;)  (27) ]  [ (<)  (<)  (28) ]  [ (=)  (=)  (29) ]  % 27-29
[ (>)  (>)  (30) ]  [ (?)  (?)  (31) ]  [ (@)  (@)  (32) ]  % 30-32
[ (A)  (A)  (33) ]  [ (B)  (B)  (34) ]  [ (C)  (C)  (35) ]  % 33-35
[ (D)  (D)  (36) ]  [ (E)  (E)  (37) ]  [ (F)  (F)  (38) ]  % 36-38
[ (G)  (G)  (39) ]  [ (H)  (H)  (40) ]  [ (I)  (I)  (41) ]  % 39-41
[ (J)  (J)  (42) ]  [ (K)  (K)  (43) ]  [ (L)  (L)  (44) ]  % 42-44
[ (M)  (M)  (45) ]  [ (N)  (N)  (46) ]  [ (O)  (O)  (47) ]  % 45-47
[ (P)  (P)  (48) ]  [ (Q)  (Q)  (49) ]  [ (R)  (R)  (50) ]  % 48-50
[ (S)  (S)  (51) ]  [ (T)  (T)  (52) ]  [ (U)  (U)  (53) ]  % 51-53
[ (V)  (V)  (54) ]  [ (W)  (W)  (55) ]  [ (X)  (X)  (56) ]  % 54-56
[ (Y)  (Y)  (57) ]  [ (Z)  (Z)  (58) ]  [ ([)  ([)  (59) ]  % 57-59
[  92   92  (60) ]  [ (])  (])  (61) ]  [ (^)  (^)  (62) ]  % 60-62
[ (_)  (_)  (63) ]  [   0  (`)  (64) ]  [   1  (a)  (65) ]  % 63-65
[   2  (b)  (66) ]  [   3  (c)  (67) ]  [   4  (d)  (68) ]  % 66-68
[   5  (e)  (69) ]  [   6  (f)  (70) ]  [   7  (g)  (71) ]  % 69-71
[   8  (h)  (72) ]  [   9  (i)  (73) ]  [  10  (j)  (74) ]  % 72-74
[  11  (k)  (75) ]  [  12  (l)  (76) ]  [  13  (m)  (77) ]  % 75-77
[  14  (n)  (78) ]  [  15  (o)  (79) ]  [  16  (p)  (80) ]  % 78-80
[  17  (q)  (81) ]  [  18  (r)  (82) ]  [  19  (s)  (83) ]  % 81-83
[  20  (t)  (84) ]  [  21  (u)  (85) ]  [  22  (v)  (86) ]  % 84-86
[  23  (w)  (87) ]  [  24  (x)  (88) ]  [  25  (y)  (89) ]  % 87-89
[  26  (z)  (90) ]  [  27  ({)  (91) ]  [  28  (|)  (92) ]  % 90-92
[  29  (})  (93) ]  [  30  (~)  (94) ]  [  31  127  (95) ]  % 93-95
[ fn3  fn3  (96) ]  [ fn2  fn2  (97) ]  [ sft  sft  (98) ]  % 96-98
[ swc  swc  (99) ]  [ swb  fn4  swb  ]  [ fn4  swa  swa  ]  % 99-101
[ fn1  fn1  fn1  ]  [ sta  sta  sta  ]  [ stp  stp  stp  ]  % 102-104
] def

% Invert charmaps to give character to value maps for each state
/charvals [ 105 dict 105 dict 105 dict ] def
0 1 charmaps length 1 sub {
/i exch def
/encs charmaps i get def
0 1 2 {
/j exch def
encs j get dup type /stringtype eq {0 get} if  % convert string to ASCII if required
charvals j get exch i put
} for
} for
/seta charvals 0 get def
/setb charvals 1 get def
/setc charvals 2 get def

/fncvals <<
(FNC1) fn1
%        (FNC2) fn2      Not permitted for Codablock F
(FNC3) fn3
%        (FNC4) fn4      Not user accessible as encoded automatically
>> def
/msg barlen array def
/i 0 def /j 0 def {
i barlen eq {exit} if
/char barcode i get def
parsefnc char 94 eq and i barlen 4 sub lt and {
barcode i 1 add get 94 ne {
/char fncvals barcode i 1 add 4 getinterval get def
/i i 4 add def
} {
/i i 1 add def
} ifelse
} if
msg j char put
/i i 1 add def
/j j 1 add def
} loop
/msg msg 0 j getinterval def
/msglen msg length def

% FNC4 codeword insertion for extended ASCII
/msgtmp [] def
msg {
/char exch def
/msgtmp [ msgtmp aload pop char 128 lt {char} {fn4 char 127 and} ifelse ] def
} forall
/msg msgtmp def
/msglen msg length def

% Determine digit runlength and characters from given position
/numsscr {
/n 0 def /s 0 def
/p exch def {
p msglen ge {exit} if
msg p get
dup setc exch known not {pop exit} if
fn1 eq {
% FNC1 in odd position of run like two digits
s 2 mod 0 eq {/s s 1 add def} {exit} ifelse
} if
/n n 1 add def
/s s 1 add def
/p p 1 add def
} loop
n s
} bind def

% Encoding for each alphabet
/enca {
seta exch get cws exch j exch put
/j j 1 add def
} bind def
/encb {
setb exch get cws exch j exch put
/j j 1 add def
} bind def
/encc {
dup type /arraytype ne {
setc exch get
} {
aload pop 48 sub exch 48 sub 10 mul add
} ifelse
cws exch j exch put
/j j 1 add def
} bind def

% Character exclusively in either alphabet A or B
/anotb {dup seta exch known exch setb exch known not and} bind def
/bnota {dup setb exch known exch seta exch known not and} bind def

% Pre-compute relative position of next anotb and next bnota characters
/nextanotb [ msg length {0} repeat 9999 ] def
/nextbnota [ msg length {0} repeat 9999 ] def
msg length 1 sub -1 0 {
/i exch def
msg i get anotb {
nextanotb i 0 put
} {
nextanotb i nextanotb i 1 add get 1 add put
} ifelse
msg i get bnota {
nextbnota i 0 put
} {
nextbnota i nextbnota i 1 add get 1 add put
} ifelse
} for

% Does a-only come before b-only after given position and vice versa
/abeforeb {dup nextanotb exch get exch nextbnota exch get lt} bind def
/bbeforea {dup nextbnota exch get exch nextanotb exch get lt} bind def

% Add padding to row
/padrow {
{
{  % common exit
cset (seta) eq {swc enca /cset (setc) def exit} if
cset (setb) eq {swc encb /cset (setc) def exit} if
cset (setc) eq {swb encc /cset (setb) def exit} if
} loop
} repeat
} bind def

% Convert message to codewords
/cws c 5 add rows -1 ne {rows} {44} ifelse mul array def

/i 0 def /j 0 def /r 1 def
/lastrow false def {

lastrow {exit} if

% Add start character and code subset selector
sta enca
i msglen lt {i numsscr} {-1 -1} ifelse /nums exch def /nchars exch def
{  % common exit
msglen 0 eq {
swb enca
/cset (setb) def
exit
} if
nums 2 ge {
swc enca
/cset (setc) def
exit
} if
i abeforeb {
sft enca
/cset (seta) def
exit
} if
swb enca
/cset (setb) def
exit
} loop
/j j 1 add def  % Skip row indicator position

% Main encoding loop
/endofrow false def {
/rem c 3 add j c 5 add mod sub def  % Codewords to end of row

i msglen eq endofrow or {exit} if

i numsscr /nums exch def /nchars exch def

% Determine switches and shifts
{  % common exit
cset (seta) eq cset (setb) eq or nums 4 ge and
msg i get fn1 ne and {
nums 2 mod 0 eq
rem 3 ge and {
swc cset (seta) eq {enca} {encb} ifelse
/cset (setc) def
2 {
msg i get fn1 eq {
fn1 encc
/i i 1 add def
} {
msg i 2 getinterval encc
/i i 2 add def
} ifelse
} repeat
exit
} if
nums 2 mod 0 ne
rem 4 ge and {
msg i get cset (seta) eq {enca} {encb} ifelse
/i i 1 add def
swc cset (seta) eq {enca} {encb} ifelse
/cset (setc) def
2 {
msg i get fn1 eq {
fn1 encc
/i i 1 add def
} {
msg i 2 getinterval encc
/i i 2 add def
} ifelse
} repeat
exit
} if
} if
cset (setb) eq msg i get anotb and
rem 2 ge and {
i msglen 1 sub lt {
i 1 add bbeforea {
sft encb
msg i get enca
/i i 1 add def
exit
} if
} if
swa encb
/cset (seta) def
msg i get enca
/i i 1 add def
exit
} if
cset (seta) eq msg i get bnota and
rem 2 ge and {
i msglen 1 sub lt {
i 1 add abeforeb {
sft enca
msg i get encb
/i i 1 add def
exit
} if
} if
swb enca
/cset (setb) def
msg i get encb
/i i 1 add def
exit
} if
cset (setc) eq nums 2 lt and
rem 2 ge and {
i abeforeb {
swa encc
/cset (seta) def
msg i get enca
/i i 1 add def
exit
} if
swb encc
/cset (setb) def
msg i get encb
/i i 1 add def
exit
} if

% No switches or latches so try to encode
cset (seta) eq seta msg i get known and
rem 1 ge and {
msg i get enca
/i i 1 add def
exit
} if
cset (setb) eq setb msg i get known and
rem 1 ge and {
msg i get encb
/i i 1 add def
exit
} if
cset (setc) eq nums 2 ge and
rem 1 ge and {
msg i get fn1 eq {
fn1 encc
/i i 1 add def
} {
msg i 2 getinterval encc
/i i 2 add def
} ifelse
exit
} if

% Encoding does not fit in the row
/endofrow true def
exit

} loop  % common exit

} loop

% Determine whether this is the final row
r rows eq rows -1 eq or r 1 gt and i msglen eq and rem 2 ge and {
rem 2 sub padrow
/j j 3 add def  % Skip symbol and row checksum character positions
stp enca
/lastrow true def
} {
rem padrow
/j j 1 add def  % Skip row checksum character positions
stp enca
/r r 1 add def
} ifelse

} loop
/cws cws 0 j getinterval def

% Maps for row indicators and symbol checksums
/abmap [
64 1 95 {} for
0 1 15 {} for
26 1 63 {} for
] def
/cmap [ 0 1 85 {} for ] def

% Add symbol check characters to last row
/chkmsg msglen array def
/j 0 def
0 1 msglen 1 sub {
/i exch def
/char msg i get def
char 0 ge {chkmsg j char put /j j 1 add def} if
char fn1 eq i 0 ne and {chkmsg j 29 put /j j 1 add def} if
} for
/t1 0 def /t2 0 def /k1 0 def /k2 0 def
0 1 j 1 sub {
/i exch def
/t1 chkmsg i get i mul 86 mod def
/t2 t1 chkmsg i get add 86 mod def
/k1 k1 t2 add 86 mod def
/k2 k2 t1 add 86 mod def
} for
cws cws length 4 sub cset (setc) ne {abmap} {cmap} ifelse k1 get put
cws cws length 3 sub cset (setc) ne {abmap} {cmap} ifelse k2 get put

% Populate row indicators
cws 2 2 copy 1 sub get 99 ne {abmap} {cmap} ifelse r 2 sub get put
1 1 r 1 sub {
/i exch def
cws i c 5 add mul 2 add 2 copy 1 sub get 99 ne {abmap} {cmap} ifelse i 42 add get put
} for

% Calculate row check characters
0 1 r 1 sub {
cws exch c 5 add mul c 4 add getinterval /rcws exch def
/csum rcws 0 get def
1 1 rcws length 2 sub {
/i exch def
/csum csum rcws i get i mul add def
} for
rcws rcws length 1 sub csum 103 mod put
} for

% Create an array containing the character mappings
/encs
[ (212222) (222122) (222221) (121223) (121322) (131222) (122213)
(122312) (132212) (221213) (221312) (231212) (112232) (122132)
(122231) (113222) (123122) (123221) (223211) (221132) (221231)
(213212) (223112) (312131) (311222) (321122) (321221) (312212)
(322112) (322211) (212123) (212321) (232121) (111323) (131123)
(131321) (112313) (132113) (132311) (211313) (231113) (231311)
(112133) (112331) (132131) (113123) (113321) (133121) (313121)
(211331) (231131) (213113) (213311) (213131) (311123) (311321)
(331121) (312113) (312311) (332111) (314111) (221411) (431111)
(111224) (111422) (121124) (121421) (141122) (141221) (112214)
(112412) (122114) (122411) (142112) (142211) (241211) (221114)
(413111) (241112) (134111) (111242) (121142) (121241) (114212)
(124112) (124211) (411212) (421112) (421211) (212141) (214121)
(412121) (111143) (111341) (131141) (114113) (114311) (411113)
(411311) (113141) (114131) (311141) (411131) (211412) (2331112)
] def

% Derive the bits for each row
/rowbits r array def
0 1 r 1 sub {
/i exch def
/sbs [
cws i c 5 add mul c 5 add getinterval {
encs exch get {48 sub} forall
} forall
] def
mark
0 sbs {1 index 1 eq {{0}} {{1}} ifelse repeat} forall
counttomark 1 sub array astore exch pop exch pop
rowbits i 3 -1 roll put
} for

% Populate the bitmap
/symwid c 11 mul 57 add def
/pixs [
symwid sepheight mul {1} repeat
0 1 r 2 sub {
/i exch def
rowheight {rowbits i get aload pop} repeat
sepheight {
1 1 0 1 0 0 0 0 1 0 0
symwid 24 sub {1} repeat
1 1 0 0 0 1 1 1 0 1 0 1 1
} repeat
} for
rowheight {rowbits r 1 sub get aload pop} repeat
symwid sepheight mul {1} repeat
] def

% Return the arguments
<<
/ren //renmatrix
/pixs pixs
/pixx symwid
/pixy pixs length symwid idiv
/height pixs length symwid idiv 72 div
/width symwid 72 div
/opt options
>>

dontdraw not //renmatrix if

end

} bind def
/codablockf dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER codablockf--

% --BEGIN ENCODER code16k--
% --REQUIRES preamble raiseerror renmatrix--
% --DESC: Code 16K
% --EXAM: Abcd-1234567890-wxyZ
% --EXOP:
% --RNDR: renmatrix
%%BeginResource: QRCODE code16k 0.0 2015112400 147911 164544
%%BeginData:        744 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renmatrix dup /QRCODE findresource put
begin
/code16k {

20 dict begin

/options exch def
/barcode exch def

/dontdraw false def
/mode -1 def
/pos -1 def
/rows 0 def
/rowheight 8 def
/sepheight 1 def
/encoding (auto) def
/raw false def
/parse false def
/parsefnc false def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/mode mode cvi def
/pos pos cvi def
/rows rows cvi def
/rowheight rowheight cvi def
/sepheight sepheight cvi def

pos -1 ne {/rows 16 def} if

% Parse ordinals of the form ^NNN to ASCII
parse {
/msg barcode length string def
/j 0 def
barcode
{ % loop
(^) search {
dup msg exch j exch putinterval
length j add 1 add /j exch def
pop
dup 0 3 getinterval cvi msg exch j 1 sub exch put
dup length 3 sub 3 exch getinterval
} {
dup msg exch j exch putinterval
length j add /j exch def
/barcode msg 0 j getinterval def
exit
} ifelse
} loop
} if

/barlen barcode length def

% Convert input into bytes accounting for FNC characters
/swa  -1 def  /swb  -2 def  /swc  -3 def
/sa1  -4 def  /sb1  -5 def  /sc1  -6 def
/sa2  -7 def  /sb2  -8 def  /sc2  -9 def
/pad -10 def  /sb3 -11 def  /sc3 -12 def
/fn1 -13 def  /fn2 -14 def  /fn3 -15 def  /fn4 -16 def

% Character maps for each state
/charmaps [
%  A    B    C         A    B    C         A    B    C
[  32   32  (00) ]  [ (!)  (!)  (01) ]  [ (")  (")  (02) ]  % 0-2
[ (#)  (#)  (03) ]  [ ($)  ($)  (04) ]  [ (%)  (%)  (05) ]  % 3-5
[ (&)  (&)  (06) ]  [ (')  (')  (07) ]  [  40   40  (08) ]  % 6-8
[  41   41  (09) ]  [ (*)  (*)  (10) ]  [ (+)  (+)  (11) ]  % 9-11
[ (,)  (,)  (12) ]  [ (-)  (-)  (13) ]  [ (.)  (.)  (14) ]  % 12-14
[ (/)  (/)  (15) ]  [ (0)  (0)  (16) ]  [ (1)  (1)  (17) ]  % 15-17
[ (2)  (2)  (18) ]  [ (3)  (3)  (19) ]  [ (4)  (4)  (20) ]  % 18-20
[ (5)  (5)  (21) ]  [ (6)  (6)  (22) ]  [ (7)  (7)  (23) ]  % 21-23
[ (8)  (8)  (24) ]  [ (9)  (9)  (25) ]  [ (:)  (:)  (26) ]  % 24-26
[ (;)  (;)  (27) ]  [ (<)  (<)  (28) ]  [ (=)  (=)  (29) ]  % 27-29
[ (>)  (>)  (30) ]  [ (?)  (?)  (31) ]  [ (@)  (@)  (32) ]  % 30-32
[ (A)  (A)  (33) ]  [ (B)  (B)  (34) ]  [ (C)  (C)  (35) ]  % 33-35
[ (D)  (D)  (36) ]  [ (E)  (E)  (37) ]  [ (F)  (F)  (38) ]  % 36-38
[ (G)  (G)  (39) ]  [ (H)  (H)  (40) ]  [ (I)  (I)  (41) ]  % 39-41
[ (J)  (J)  (42) ]  [ (K)  (K)  (43) ]  [ (L)  (L)  (44) ]  % 42-44
[ (M)  (M)  (45) ]  [ (N)  (N)  (46) ]  [ (O)  (O)  (47) ]  % 45-47
[ (P)  (P)  (48) ]  [ (Q)  (Q)  (49) ]  [ (R)  (R)  (50) ]  % 48-50
[ (S)  (S)  (51) ]  [ (T)  (T)  (52) ]  [ (U)  (U)  (53) ]  % 51-53
[ (V)  (V)  (54) ]  [ (W)  (W)  (55) ]  [ (X)  (X)  (56) ]  % 54-56
[ (Y)  (Y)  (57) ]  [ (Z)  (Z)  (58) ]  [ ([)  ([)  (59) ]  % 57-59
[  92   92  (60) ]  [ (])  (])  (61) ]  [ (^)  (^)  (62) ]  % 60-62
[ (_)  (_)  (63) ]  [   0  (`)  (64) ]  [   1  (a)  (65) ]  % 63-65
[   2  (b)  (66) ]  [   3  (c)  (67) ]  [   4  (d)  (68) ]  % 66-68
[   5  (e)  (69) ]  [   6  (f)  (70) ]  [   7  (g)  (71) ]  % 69-71
[   8  (h)  (72) ]  [   9  (i)  (73) ]  [  10  (j)  (74) ]  % 72-74
[  11  (k)  (75) ]  [  12  (l)  (76) ]  [  13  (m)  (77) ]  % 75-77
[  14  (n)  (78) ]  [  15  (o)  (79) ]  [  16  (p)  (80) ]  % 78-80
[  17  (q)  (81) ]  [  18  (r)  (82) ]  [  19  (s)  (83) ]  % 81-83
[  20  (t)  (84) ]  [  21  (u)  (85) ]  [  22  (v)  (86) ]  % 84-86
[  23  (w)  (87) ]  [  24  (x)  (88) ]  [  25  (y)  (89) ]  % 87-89
[  26  (z)  (90) ]  [  27  ({)  (91) ]  [  28  (|)  (92) ]  % 90-92
[  29  (})  (93) ]  [  30  (~)  (94) ]  [  31  127  (95) ]  % 93-95
[ fn3  fn3  (96) ]  [ fn2  fn2  (97) ]  [ sb1  sa1  (98) ]  % 96-98
[ swc  swc  (99) ]  [ swb  fn4  swb  ]  [ fn4  swa  swa  ]  % 99-101
[ fn1  fn1  fn1  ]  [ pad  pad  pad  ]  [ sb2  sa2  sb1  ]  % 102-104
[ sc2  sc2  sb2  ]  [ sc3  sc3  sb3  ]                      % 105-106
] def

% Invert charmaps to give character to value maps for each state
/charvals [ 109 dict 109 dict 109 dict ] def
0 1 charmaps length 1 sub {
/i exch def
/encs charmaps i get def
0 1 2 {
/j exch def
encs j get dup type /stringtype eq {0 get} if  % convert string to ASCII if required
charvals j get exch i put
} for
} for
/seta charvals 0 get def
/setb charvals 1 get def
/setc charvals 2 get def

raw {/encoding (raw) def} if

encoding (raw) eq {
/cws barlen array def
/i 0 def /j 0 def
{ % loop
i barlen eq {exit} if
/cw barcode i 1 add 3 getinterval cvi def
cws j cw put
/i i 4 add def
/j j 1 add def
} loop
/cws cws 0 j getinterval def
/text () def
} if

encoding (auto) eq {

/fncvals <<
(FNC1) fn1
(FNC2) fn2
(FNC3) fn3
%            (FNC4) fn4        Not user accessible as encoded automatically
>> def
/msg barlen array def
/i 0 def /j 0 def {
i barlen eq {exit} if
/char barcode i get def
parsefnc char 94 eq and i barlen 4 sub lt and {
barcode i 1 add get 94 ne {
/char fncvals barcode i 1 add 4 getinterval get def
/i i 4 add def
} {
/i i 1 add def
} ifelse
} if
msg j char put
/i i 1 add def
/j j 1 add def
} loop
/msg msg 0 j getinterval def
/msglen msg length def

% Standard and extended ASCII runlength at position
/numSA [ msglen {0} repeat 0 ] def
/numEA [ msglen {0} repeat 0 ] def
msglen 1 sub -1 0 {
/i exch def
msg i get 0 ge {
msg i get 128 ge {
numEA i numEA i 1 add get 1 add put
} {
numSA i numSA i 1 add get 1 add put
} ifelse
} if
} for

% FNC4 codeword insertion for extended ASCII
/ea false def /msgtmp [] def
0 1 msglen 1 sub {
/i exch def
/c msg i get def
ea c 128 lt xor not c 0 ge and {  % Other mode required
ea {numSA} {numEA} ifelse i get dup  % Runlength of other mode
i add msglen eq {3} {5} ifelse       % Does run terminate symbol
lt {  % Shift
/msgtmp [ msgtmp aload pop fn4 ] def
} {   % Latch
/msgtmp [ msgtmp aload pop fn4 fn4 ] def
/ea ea not def
} ifelse
} if
/msgtmp [ msgtmp aload pop c 0 ge {c 127 and} {c} ifelse ] def
} for
/msg msgtmp def
/msglen msg length def

% Determine digit runlength and characters from given position
/numsscr {
/n 0 def /s 0 def
/p exch def {
p msglen ge {exit} if
msg p get
dup setc exch known not {pop exit} if
fn1 eq {
% FNC1 in odd position of run like two digits
s 2 mod 0 eq {/s s 1 add def} {exit} ifelse
} if
/n n 1 add def
/s s 1 add def
/p p 1 add def
} loop
n s
} bind def

% Encoding for each alphabet
/enca {
seta exch get cws exch j exch put
/j j 1 add def
} bind def
/encb {
setb exch get cws exch j exch put
/j j 1 add def
} bind def
/encc {
dup type /arraytype ne {
setc exch get
} {
aload pop 48 sub exch 48 sub 10 mul add
} ifelse
cws exch j exch put
/j j 1 add def
} bind def

% Character exclusively in either alphabet A or B
/anotb {dup seta exch known exch setb exch known not and} bind def
/bnota {dup setb exch known exch seta exch known not and} bind def

% Pre-compute relative position of next anotb and next bnota characters
/nextanotb [ msg length {0} repeat 9999 ] def
/nextbnota [ msg length {0} repeat 9999 ] def
msg length 1 sub -1 0 {
/i exch def
msg i get anotb {
nextanotb i 0 put
} {
nextanotb i nextanotb i 1 add get 1 add put
} ifelse
msg i get bnota {
nextbnota i 0 put
} {
nextbnota i nextbnota i 1 add get 1 add put
} ifelse
} for

% Does a-only come before b-only after given position and vice versa
/abeforeb {dup nextanotb exch get exch nextbnota exch get lt} bind def
/bbeforea {dup nextbnota exch get exch nextanotb exch get lt} bind def

/cws barcode length 2 mul 3 add array def

% Select mode and encode first characters
/i 0 def /j 0 def
{  % common exit
% extended data length
pos -1 ne {
% encode one and two
cws 0 pos 10 idiv 1 sub put
cws 1 pos 10 mod 1 sub put
/j 2 def
/cset (setb) def
/mode 7 def
exit
} if
% empty => b
msglen 0 eq {
/cset (setb) def
/mode 1 def
exit
} if
% FNC1 . 2+ nums => c fnc1
msglen 2 ge {
msg 0 get fn1 eq 1 numsscr exch pop 2 ge and {
/cset (setc) def
/mode 4 def
/i 1 def
exit
} if
} if
% FNC1 => b fnc1
msg 0 get fn1 eq {
/cset (setb) def
/mode 3 def
/i 1 def
exit
} if
msglen 2 ge {
% 2+ even nums => c
0 numsscr exch pop dup 2 ge exch 2 mod 0 eq and {
/cset (setc) def
/mode 2 def
exit
} if
% 3+ odd nums => c sb1 encode
0 numsscr exch pop dup 3 ge exch 2 mod 1 eq and {
msg 0 get encb
/cset (setc) def
/mode 5 def
/i 1 def
exit
} if
% b . 2+ even nums => c sb1 encode
setb msg 0 get known
1 numsscr exch pop dup 2 ge exch 2 mod 0 eq and and {
msg 0 get encb
/cset (setc) def
/mode 5 def
/i 1 def
exit
} if
% b . 3+ odd nums => c sb2 encode
setb msg 0 get known
1 numsscr exch pop dup 3 ge exch 2 mod 1 eq and and {
msg 0 get encb
msg 1 get encb
/cset (setc) def
/mode 6 def
/i 2 def
exit
} if
% b . b . 2+ even nums => c sb2 encode
setb msg 0 get known
setb msg 1 get known and
2 numsscr exch pop dup 2 ge exch 2 mod 0 eq and and {
msg 0 get encb
msg 1 get encb
/cset (setc) def
/mode 6 def
/i 2 def
exit
} if
} if
% anotb before bnota => a
0 abeforeb {
/cset (seta) def
/mode 0 def
exit
} if
% otherwise => b
/cset (setb) def
/mode 1 def
exit
} loop

{  % Encode remainder
i msglen eq {exit} if

i numsscr /nums exch def /nchars exch def

% Determine switches and shifts
{  % common exit
cset (seta) eq {
% bnota . anotb before bnota => sb1 encode
i msglen 1 sub lt {
msg i get bnota
i 1 add abeforeb and {
sb1 enca
msg i get encb
/i i 1 add def
exit
} if
} if
% bnota . bnota . anotb before bnota => sb2 encode
i msglen 2 sub lt {
msg i get bnota
msg i 1 add get bnota and
i 2 add abeforeb and {
sb2 enca
msg i get encb
msg i 1 add get encb
/i i 2 add def
exit
} if
} if
% bnota => swb
msg i get bnota {
swb enca
/cset (setb) def
exit
} if
% 4 nums . a => sc2 encode
i msglen 4 sub lt {
nums 4 eq
seta msg i 4 add get known and {
sc2 enca
2 {
msg i get fn1 eq {
fn1 encc
/i i 1 add def
} {
msg i 2 getinterval encc
/i i 2 add def
} ifelse
} repeat
exit
} if
} if
% 6 nums . a => sc3 encode
i msglen 6 sub lt {
nums 6 eq
seta msg i 6 add get known and {
sc3 enca
3 {
msg i get fn1 eq {
fn1 encc
/i i 1 add def
} {
msg i 2 getinterval encc
/i i 2 add def
} ifelse
} repeat
exit
} if
} if
% 4+ even nums => swc
nums 4 ge nums 2 mod 0 eq and {
swc enca
/cset (setc) def
exit
} if
% otherwise => encode
msg i get enca
/i i 1 add def
exit
} if
cset (setb) eq {
% anotb . bnota before anotb => sa1 encode
i msglen 1 sub lt {
msg i get anotb
i 1 add bbeforea and {
sa1 encb
msg i get enca
/i i 1 add def
exit
} if
} if
% anotb . anotb . bnota before anotb => sa2 encode
i msglen 2 sub lt {
msg i get anotb
msg i 1 add get anotb and
i 2 add bbeforea and {
sa2 encb
msg i get enca
msg i 1 add get enca
/i i 2 add def
exit
} if
} if
% anotb => swa
msg i get anotb {
swa encb
/cset (seta) def
exit
} if
% 4 nums . b => sc2 encode
i msglen 4 sub lt {
nums 4 eq
setb msg i 4 add get known and {
sc2 encb
2 {
msg i get fn1 eq {
fn1 encc
/i i 1 add def
} {
msg i 2 getinterval encc
/i i 2 add def
} ifelse
} repeat
exit
} if
} if
% 6 nums . b => sc3 encode
i msglen 6 sub lt {
nums 6 eq
setb msg i 6 add get known and {
sc3 encb
3 {
msg i get fn1 eq {
fn1 encc
/i i 1 add def
} {
msg i 2 getinterval encc
/i i 2 add def
} ifelse
} repeat
exit
} if
} if
% 4+ even nums => swc
nums 4 ge nums 2 mod 0 eq and {
swc encb
/cset (setc) def
exit
} if
% otherwise => encode
msg i get encb
/i i 1 add def
exit
} if
cset (setc) eq {
% 2+ nums => encode
nums 2 ge {
msg i get fn1 eq {
fn1 encc
/i i 1 add def
} {
msg i 2 getinterval encc
/i i 2 add def
} ifelse
exit
} if
% b . 2+ even nums => sb1 encode
i msglen 1 sub lt {
setb msg i get known
i 1 add numsscr exch pop dup 2 ge exch 2 mod 0 eq and and {
sb1 encc
msg i get encb
/i i 1 add def
exit
} if
} if
% b . 3+ odd nums => sb2 encode
i msglen 1 sub lt {
setb msg i get known
i 1 add numsscr exch pop dup 3 ge exch 2 mod 1 eq and and {
sb2 encc
msg i get encb
msg i 1 add get encb
/i i 2 add def
exit
} if
} if
% b . b . 2+ even nums => sb2 encode
i msglen 2 sub lt {
setb msg i get known
setb msg i 1 add get known and
i 2 add numsscr exch pop dup 2 ge exch 2 mod 0 eq and and {
sb2 encc
msg i get encb
msg i 1 add get encb
/i i 2 add def
exit
} if
} if
% b . b . 3+ odd nums => sb3 encode
i msglen 3 sub lt {
setb msg i get known
setb msg i 1 add get known and
i 2 add numsscr exch pop dup 3 ge exch 2 mod 1 eq and and {
sb3 encc
msg i get encb
msg i 1 add get encb
msg i 2 add get encb
/i i 3 add def
exit
} if
} if
% b . b . b . 2+ even nums => sb3 encode
i msglen 3 sub lt {
setb msg i get known
setb msg i 1 add get known and
setb msg i 2 add get known and
i 3 add numsscr exch pop dup 2 ge exch 2 mod 0 eq and and {
sb3 encc
msg i get encb
msg i 1 add get encb
msg i 2 add get encb
/i i 3 add def
exit
} if
} if
% anotb before bnota => swa
i abeforeb {
swa encc
/cset (seta) def
exit
} if
% otherwise => swb
swb encc
/cset (setb) def
exit
} if
exit
} loop

} loop
/cws cws 0 j getinterval def
} if  % auto encoding

% Basic metrics for the each symbol
%     r  dcws
/metrics [
[  2    7 ]
[  3   12 ]
[  4   17 ]
[  5   22 ]
[  6   27 ]
[  7   32 ]
[  8   37 ]
[  9   42 ]
[ 10   47 ]
[ 11   52 ]
[ 12   57 ]
[ 13   62 ]
[ 14   67 ]
[ 15   72 ]
[ 16   77 ]
] def

% Select metrics of an appropriate symbol
/urows rows def
/i 0 def
{ % loop
/m metrics i get def
/r    m 0 get def        % Columns in symbol
/dcws m 1 get def        % Data codewords in symbol
/okay true def
urows 0 ne urows r ne and {/okay false def} if
cws length dcws gt {/okay false def} if
okay {exit} if
/i i 1 add def
} loop

% Extend cws to ncws codewords by addition of pad characters
/cws [ cws aload pop dcws cws length sub {103} repeat ] def

% Add the start character
/cws [ r 2 sub 7 mul mode add cws aload pop ] def

% Calculate the check characters
0 0 1 dcws {dup 2 add exch cws exch get mul add} for
107 mod /c1 exch def
0 0 1 dcws {dup 1 add exch cws exch get mul add} for
c1 dcws 2 add mul add 107 mod /c2 exch def
/cws [ cws aload pop c1 c2 ] def

% Create an array containing the character mappings
/encs
[ (212222) (222122) (222221) (121223) (121322) (131222) (122213)
(122312) (132212) (221213) (221312) (231212) (112232) (122132)
(122231) (113222) (123122) (123221) (223211) (221132) (221231)
(213212) (223112) (312131) (311222) (321122) (321221) (312212)
(322112) (322211) (212123) (212321) (232121) (111323) (131123)
(131321) (112313) (132113) (132311) (211313) (231113) (231311)
(112133) (112331) (132131) (113123) (113321) (133121) (313121)
(211331) (231131) (213113) (213311) (213131) (311123) (311321)
(331121) (312113) (312311) (332111) (314111) (221411) (431111)
(111224) (111422) (121124) (121421) (141122) (141221) (112214)
(112412) (122114) (122411) (142112) (142211) (241211) (221114)
(413111) (241112) (134111) (111242) (121142) (121241) (114212)
(124112) (124211) (411212) (421112) (421211) (212141) (214121)
(412121) (111143) (111341) (131141) (114113) (114311) (411113)
(411311) (113141) (114131) (311141) (411131) (211412) (211214)
(211232) (211133)
] def

% Start/stop character encodings
/startencs [
(3211) (2221) (2122) (1411) (1132) (1231) (1114) (3112)
(3211) (2221) (2122) (1411) (1132) (1231) (1114) (3112)
] def
/stopencsodd [
(3211) (2221) (2122) (1411) (1132) (1231) (1114) (3112)
(1132) (1231) (1114) (3112) (3211) (2221) (2122) (1411)
] def
/stopencseven [
(2122) (1411) (1132) (1231) (1114) (3112) (1132) (1231)
(1114) (3112) (3211) (2221) (2122) (1411) (3211) (2221)
] def
pos -1 eq pos 10 idiv 2 mod 1 eq or {
/stopencs stopencsodd def
} {
/stopencs stopencseven def
} ifelse

% Derive the bits for each row
/rowbits r array def
0 1 r 1 sub {
/i exch def
/sbs [
10
startencs i get {48 sub} forall
1
cws i 5 mul 5 getinterval {
encs exch get {48 sub} forall
} forall
stopencs i get {48 sub} forall
1
] def
mark
1 sbs {1 index 0 eq {{1}} {{0}} ifelse repeat} forall
counttomark 1 sub array astore exch pop exch pop
rowbits i 3 -1 roll put
} for

% Populate the bitmap
/pixs [
81 sepheight mul {1} repeat
0 1 r 2 sub {
/i exch def
rowheight {rowbits i get aload pop} repeat
sepheight {10 {0} repeat 70 {1} repeat 0} repeat
} for
rowheight {rowbits r 1 sub get aload pop} repeat
81 sepheight mul {1} repeat
] def

% Return the arguments
<<
/ren //renmatrix
/pixs pixs
/pixx 81
/pixy pixs length 81 idiv
/height pixs length 81 idiv 72 div
/width 81 72 div
/opt options
>>

dontdraw not //renmatrix if

end

} bind def
/code16k dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER code16k--

% --BEGIN ENCODER code49--
% --REQUIRES preamble raiseerror renmatrix--
% --DESC: Code 49
% --EXAM: MULTIPLE ROWS IN CODE 49
% --EXOP:
% --RNDR: renmatrix
%%BeginResource: QRCODE code49 0.0 2015112400 218104 234960
%%BeginData:       1076 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renmatrix dup /QRCODE findresource put
begin
/code49 {

20 dict begin

/options exch def
/barcode exch def

/dontdraw false def
/mode -1 def
/pos -1 def
/rows 0 def
/rowheight 8 def
/sepheight 1 def
/parse false def
/parsefnc false def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/mode mode cvi def
/pos pos cvi def
/rows rows cvi def
/rowheight rowheight cvi def
/sepheight sepheight cvi def

% Parse ordinals of the form ^NNN to ASCII
parse {
/msg barcode length string def
/j 0 def
barcode
{ % loop
(^) search {
dup msg exch j exch putinterval
length j add 1 add /j exch def
pop
dup 0 3 getinterval cvi msg exch j 1 sub exch put
dup length 3 sub 3 exch getinterval
} {
dup msg exch j exch putinterval
length j add /j exch def
/barcode msg 0 j getinterval def
exit
} ifelse
} loop
} if

/barlen barcode length def

% Convert input into bytes accounting for FNC characters
/s1 -1 def /s2 -2 def /fn1 -3 def /fn2 -4 def /fn3 -5 def /ns -6 def
/fncvals <<
(FNC1) fn1
(FNC2) fn2
(FNC3) fn3
>> def
/msg barlen array def
/i 0 def /j 0 def {
i barlen eq {exit} if
/char barcode i get def
parsefnc char 94 eq and i barlen 4 sub lt and {
barcode i 1 add get 94 ne {
/char fncvals barcode i 1 add 4 getinterval get def
/i i 4 add def
} {
/i i 1 add def
} ifelse
} if
msg j char put
/i i 1 add def
/j j 1 add def
} loop
/msg msg 0 j getinterval def
/msglen msg length def

% Character encodings
/charmap [
(0) (1) (2) (3) (4) (5) (6) (7) (8) (9)
(A) (B) (C) (D) (E) (F) (G) (H) (I) (J) (K) (L) (M)
(N) (O) (P) (Q) (R) (S) (T) (U) (V) (W) (X) (Y) (Z)
(-) (.) ( ) ($) (/) (+) (%)
s1  s2  fn1 fn2 fn3 ns
] def

% Invert charmap to give character to value map
/charvals 49 dict def
0 1 48 {
/i exch def
charmap i get
dup type /stringtype eq {0 get} if  % convert string to ASCII if required
charvals exch i put
} for

% Shifted character encodings
/combos
[ (1 ) (1A) (1B) (1C) (1D) (1E) (1F) (1G) (1H) (1I) (1J) (1K) (1L) (1M) (1N) (1O)
(1P) (1Q) (1R) (1S) (1T) (1U) (1V) (1W) (1X) (1Y) (1Z) (11) (12) (13) (14) (15)
(  ) (16) (17) (18) ( $) ( %) (19) (10) (1-) (1.) (1$) ( +) (1/) ( -) ( .) ( /)
( 0) ( 1) ( 2) ( 3) ( 4) ( 5) ( 6) ( 7) ( 8) ( 9) (1+) (21) (22) (23) (24) (25)
(26) ( A) ( B) ( C) ( D) ( E) ( F) ( G) ( H) ( I) ( J) ( K) ( L) ( M) ( N) ( O)
( P) ( Q) ( R) ( S) ( T) ( U) ( V) ( W) ( X) ( Y) ( Z) (27) (28) (29) (20) (2-)
(2.) (2A) (2B) (2C) (2D) (2E) (2F) (2G) (2H) (2I) (2J) (2K) (2L) (2M) (2N) (2O)
(2P) (2Q) (2R) (2S) (2T) (2U) (2V) (2W) (2X) (2Y) (2Z) (2$) (2/) (2+) (2%) (2 )
] def
0 1 127 {
/i exch def
combos i get dup 0 get /c1 exch def 1 get /c2 exch def
c1 49 eq {  % s1 char
charvals i [ charvals s1 get charvals c2 get ] put
} if
c1 50 eq {  % s2 char
charvals i [ charvals s2 get charvals c2 get ] put
} if
} for

/encodealpha {
charvals exch get
dup type /arraytype ne {1 array astore} if
dup cws exch j exch putinterval
length j add /j exch def
} bind def

/base48 {
0 exch {48 sub exch 10 mul add} forall
[ 3 1 roll exch 1 sub {dup 48 mod exch 48 idiv} repeat ]
[ exch dup length 1 sub -1 0 {1 index exch get exch} for pop ]
dup cws exch j exch putinterval
length j add /j exch def
} bind def

/encodenumeric {
/nums exch def
/pre nums length dup 5 mod dup 2 ne {sub} {sub 5 sub} ifelse def
0 5 pre 1 sub {nums exch 5 getinterval 3 exch base48} for
/nums nums pre nums length pre sub getinterval def
nums length
dup 1 eq {nums i get encodealpha} if
dup 3 eq {2 nums base48} if
dup 4 eq {3 [49 48 nums aload pop] base48} if
7 eq {
3 [49 48 nums 0 4 getinterval aload pop] base48
2 nums 4 3 getinterval base48
} if
} bind def

% Pre-compute alphanumeric and numeric runlengths
/numericruns [ msglen {0} repeat 0 ] def
msglen 1 sub -1 0 {
/i exch def
msg i get
dup 48 ge exch 57 le and {
numericruns i numericruns i 1 add get 1 add put
} {
numericruns i 0 put
} ifelse
} for

% Autoselect mode
mode -1 eq {
{  % common exit
pos -1 ne {/mode 3 def exit} if
numericruns 0 get 5 ge {/mode 2 def exit} if
charvals msg 0 get get
dup type /arraytype ne {pop /mode 0 def exit} if
0 get 43 eq {4} {5} ifelse /mode exch def
exit
} loop
} if

/cws msglen 2 mul 1 add array def
/method (alpha) def /i -1 def /j -1 def

% Handle start for each mode
mode 0 eq mode 1 eq or {/method (alpha) def /i 0 def /j 0 def} if
mode 2 eq {/method (numeric) def /i 0 def /j 0 def} if
mode 3 eq {
/posval [
12 22
13 23 33
14 24 34 44
15 25 35 45 55
16 26 36 46 56 66
17 27 37 47 57 67 77
18 28 38 48 58 68 78 88
19 29 39 49 59 69 79 89 99
] def
cws 0 0 1 43 {dup posval exch get pos ne {pop} if} for 1 add put
/method (alpha) def /i 0 def /j 1 def
} if
mode 4 eq mode 5 eq or {
cws 0 charvals msg 0 get get 1 get put
/method (alpha) def /i 1 def /j 1 def
} if

% Encode remainder
{
i msglen eq {exit} if
{  % not a loop but common exit point
method (alpha) eq {
numericruns i get 5 ge {
ns encodealpha
/method (numeric) def
exit
} if
msg i get encodealpha
/i i 1 add def
exit
} if
method (numeric) eq {
numericruns i get 5 lt {
ns encodealpha
/method (alpha) def
exit
} if
msg i numericruns i get getinterval encodenumeric
/i i numericruns i get add def
exit
} if
} loop
} loop
/cws cws 0 j getinterval def

% Basic metrics for the each symbol
%     r dcws
/metrics [
[ 2    9 ]
[ 3   16 ]
[ 4   23 ]
[ 5   30 ]
[ 6   37 ]
[ 7   42 ]
[ 8   49 ]
] def

% Select metrics of an appropriate symbol
/urows rows def
/i 0 def
{ % loop
/m metrics i get def
/r    m 0 get def        % Columns in symbol
/dcws m 1 get def        % Data codewords in symbol
/okay true def
urows 0 ne urows r ne and {/okay false def} if
cws length dcws gt {/okay false def} if
okay {exit} if
/i i 1 add def
} loop

% Extend cws to ncws codewords by addition of pad characters
/cws [ cws aload pop dcws cws length sub {48} repeat ] def

% Populate code character array and add row check characters
/ccs r 8 mul array def
/j 0 def
0 1 r 2 sub {
/i exch def
/cc cws j 7 getinterval def
ccs i 8 mul cc putinterval
ccs i 8 mul 7 add 0 cc {add} forall 49 mod put
/j j 7 add def
} for
j dcws lt {
ccs ccs length 8 sub cws j dcws j sub getinterval putinterval
} if

% Place row count character
/cr7 r 2 sub 7 mul mode add def
ccs ccs length 2 sub cr7 put

% Calculate the symbol check characters
[  1  9 31 26  2 12 17 23 37 18 22  6 27 44 15 43 39
11 13  5 41 33 36  8  4 32  3 19 40 25 29 10 24 30 ]
dup [ exch 20 exch 0 32 getinterval aload pop ] /weightx exch def
dup [ exch 16 exch 1 32 getinterval aload pop ] /weighty exch def
[ exch 38 exch 2 32 getinterval aload pop ] /weightz exch def
/calccheck {
/weights exch def
/score 0 def
0 1 r 1 sub 8 mul 2 idiv 1 sub {
/i exch def
ccs i 2 mul get 49 mul ccs i 2 mul 1 add get add
weights i 1 add get mul /score exch score add def
} for
score
} bind def
/lastrow ccs ccs length 8 sub 8 getinterval def

% wr1 check character
r 7 ge {
cr7 weightz 0 get mul weightz calccheck add 2401 mod
dup 49 idiv exch 49 mod 2 array astore
lastrow 0 3 -1 roll putinterval
} if
/wr1 lastrow 0 get 49 mul lastrow 1 get add def

% wr2 check character
cr7 weighty 0 get mul weighty calccheck add
wr1 weighty r 4 mul 3 sub get mul add
2401 mod dup /wr2 exch def
dup 49 idiv exch 49 mod 2 array astore
lastrow 2 3 -1 roll putinterval

% wr3 check character
cr7 weightx 0 get mul weightx calccheck add
wr1 weightx r 4 mul 3 sub get mul add
wr2 weightx r 4 mul 2 sub get mul add
2401 mod
dup 49 idiv exch 49 mod 2 array astore
lastrow 4 3 -1 roll putinterval

% Place last row check character
ccs ccs length 8 sub 7 getinterval 0 exch {add} forall 49 mod
ccs ccs length 1 sub 3 -1 roll put

/patterns [
[  % Even parity
(11521132) (25112131) (14212132) (25121221) (14221222) (12412132) (23321221)
(12421222) (21521221) (15112222) (15121312) (13312222) (24221311) (13321312)
(11512222) (22421311) (11521312) (25112311) (14212312) (23312311) (12412312)
(21512311) (16121131) (14321131) (12521131) (15212131) (15221221) (13412131)
(13421221) (11612131) (16112221) (16121311) (14312221) (14321311) (12512221)
(12521311) (15212311) (13412311) (11612311) (11131135) (31131133) (51131131)
(21122134) (41122132) (21131224) (41131222) (11113135) (31113133) (51113131)
(11122225) (31122223) (51122221) (11131315) (31131313) (51131311) (21113224)
(41113222) (21122314) (41122312) (11113315) (31113313) (51113311) (12131134)
(32131132) (21231133) (41231131) (22122133) (42122131) (11222134) (22131223)
(42131221) (11231224) (31231222) (12113134) (32113132) (12122224) (32122222)
(12131314) (32131312) (21231313) (41231311) (22113223) (42113221) (11213224)
(22122313) (42122311) (11222314) (31222312) (12113314) (32113312) (21213313)
(41213311) (13131133) (33131131) (22231132) (11331133) (31331131) (23122132)
(12222133) (23131222) (12231223) (32231221) (21331222) (13113133) (33113131)
(13122223) (33122221) (11313133) (13131313) (33131311) (11322223) (22231312)
(11331313) (31331311) (23113222) (12213223) (23122312) (12222313) (32222311)
(21322312) (13113313) (33113311) (22213312) (11313313) (31313311) (14131132)
(23231131) (12331132) (21431131) (24122131) (13222132) (24131221) (13231222)
(11422132) (22331221) (11431222) (14113132) (14122222) (12313132) (14131312)
(12322222) (23231311) (12331312) (21431311) (24113221) (13213222) (24122311)
(13222312) (11413222) (22322311) (11422312) (14113312) (23213311) (12313312)
(21413311) (15131131) (13331131) (14222131) (14231221) (12422131) (12431221)
(15113131) (15122221) (13313131) (15131311) (13322221) (11513131) (13331311)
(11522221) (14213221) (14222311) (12413221) (12422311) (15113311) (13313311)
(11513311) (11141134) (31141132) (21132133) (41132131) (21141223) (41141221)
(11123134) (31123132) (11132224) (31132222) (11141314) (31141312) (21114133)
(41114131) (21123223) (41123221) (21132313) (41132311) (11114224) (31114222)
(11123314) (31123312) (21114313) (41114311) (12141133) (32141131) (21241132)
(22132132) (11232133) (22141222) (11241223) (31241221) (12123133) (32123131)
(12132223) (32132221) (12141313) (32141311) (21241312) (22114132) (11214133)
(22123222) (11223223) (22132312) (11232313) (31232311) (12114223) (32114221)
(12123313) (32123311) (21223312) (22114312) (11214313) (31214311) (13141132)
(22241131) (11341132) (23132131) (12232132) (23141221) (12241222) (21341221)
(13123132) (13132222) (11323132) (13141312) (11332222) (22241311) (11341312)
(23114131) (12214132) (23123221) (12223222) (23132311) (12232312) (21332311)
(13114222) (13123312) (11314222) (22223311) (11323312) (23114311) (12214312)
(21314311) (14141131) (12341131) (13232131) (13241221) (11432131) (14123131)
(14132221) (12323131) (14141311) (12332221) (12341311) (13214131) (13223221)
(11414131) (13232311) (11423221) (11432311) (14114221) (14123311) (12314221)
(12323311) (13214311) (11414311) (11151133) (31151131) (21142132) (21151222)
(11133133) (31133131) (11142223) (31142221) (11151313) (31151311) (21124132)
(21133222) (21142312) (11115133) (31115131) (11124223) (31124221) (11133313)
(31133311) (21115222) (21124312) (12151132) (21251131) (22142131) (11242132)
(22151221) (11251222) (12133132) (12142222) (12151312) (21251311) (22124131)
(11224132) (22133221) (11233222) (22142311) (11242312) (12115132) (12124222)
(12133312) (21233311) (22115221) (11215222) (22124311) (11224312) (13151131)
(12242131) (12251221) (13133131) (13142221) (11333131) (13151311) (11342221)
(12224131) (12233221) (12242311) (13115131) (13124221) (11315131) (13133311)
(11324221) (11333311) (12215221) (12224311) (11161132) (21152131) (21161221)
(11143132) (11152222) (11161312) (21134131) (21143221) (21152311) (11125132)
(11134222) (11143312) (21116131) (21125221) (21134311) (12161131) (11252131)
(12143131) (12152221) (12161311) (11234131) (11243221) (11252311) (12125131)
(12134221) (12143311) (11216131) (11225221) (11234311) (11111236) (31111234)
(51111232) (21111325) (41111323) (61111321) (11111416) (31111414) (51111412)
(31211143) (51211141) (12111235) (32111233) (52111231) (21211234) (41211232)
(22111324) (42111322) (11211325) (31211323) (51211321) (12111415) (32111413)
(52111411) (21211414) (41211412) (12211144) (32211142) (21311143) (41311141)
(13111234) (33111232) (22211233) (42211231) (11311234) (31311232) (23111323)
(43111321) (12211324) (32211322) (21311323) (41311321) (13111414) (33111412)
(22211413) (42211411) (11311414) (31311412) (13211143) (33211141) (22311142)
(11411143) (31411141) (14111233) (34111231) (23211232) (12311233) (32311231)
(21411232) (24111322) (13211323) (33211321) (22311322) (11411323) (31411321)
(14111413) (34111411) (23211412) (12311413) (32311411) (21411412) (14211142)
(23311141) (12411142) (21511141) (15111232) (24211231) (13311232) (22411231)
(11511232) (25111321) (14211322) (23311321) (12411322) (21511321) (15111412)
(24211411) (13311412) (22411411) (11511412) (15211141) (13411141) (11611141)
(16111231) (14311231) (12511231) (15211321) (13411321) (11611321) (16111411)
(14311411) (12511411) (21121144) (41121142) (11112145) (31112143) (51112141)
(11121235) (31121233) (51121231) (21112234) (41112232) (21121324) (41121322)
(11112325) (31112323) (51112321) (11121415) (31121413) (51121411) (21112414)
(41112412) (22121143) (42121141) (11221144) (31221142) (12112144) (32112142)
(12121234) (32121232) (21221233) (41221231) (22112233) (42112231) (11212234)
(22121323) (42121321) (11221324) (31221322) (12112324) (32112322) (12121414)
(32121412) (21221413) (41221411) (22112413) (42112411) (11212414) (31212412)
(23121142) (12221143) (32221141) (21321142) (13112143) (33112141) (13121233)
(33121231) (11312143) (22221232) (11321233) (31321231) (23112232) (12212233)
(23121322) (12221323) (32221321) (21321322) (13112323) (33112321) (13121413)
(33121411) (11312323) (22221412) (11321413) (31321411) (23112412) (12212413)
(32212411) (21312412) (24121141) (13221142) (22321141) (11421142) (14112142)
(14121232) (12312142) (23221231) (12321232) (21421231) (24112231) (13212232)
(24121321) (13221322) (11412232) (22321321) (11421322) (14112322) (14121412)
(12312322) (23221411) (12321412) (21421411) (24112411) (13212412) (22312411)
(11412412) (14221141) (12421141) (15112141) (15121231) (13312141) (13321231)
(11512141) (11521231) (14212231) (14221321) (12412231) (12421321) (15112321)
(15121411) (13312321) (13321411) (11512321) (11521411) (14212411) (12412411)
(21131143) (41131141) (11122144) (31122142) (11131234) (31131232) (21113143)
(41113141) (21122233) (41122231) (21131323) (41131321) (11113234) (31113232)
(11122324) (31122322) (11131414) (31131412) (21113323) (41113321) (21122413)
(41122411) (11113414) (31113412) (22131142) (11231143) (31231141) (12122143)
(32122141) (12131233) (32131231) (21231232) (22113142) (11213143) (22122232)
(11222233) (22131322) (11231323) (31231321) (12113233) (32113231) (12122323)
(32122321) (12131413) (32131411) (21231412) (22113322) (11213323) (22122412)
(11222413) (31222411) (12113413) (32113411) (21213412) (23131141) (12231142)
(21331141) (13122142) (13131232) (11322142) (22231231) (11331232) (23113141)
(12213142) (23122231) (12222232) (23131321) (12231322) (21331321) (13113232)
(13122322) (11313232) (13131412) (11322322) (22231411) (11331412) (23113321)
(12213322) (23122411) (12222412) (21322411) (13113412) (22213411) (11313412)
(13231141) (11431141) (14122141) (14131231) (12322141) (12331231) (13213141)
(13222231) (11413141) (13231321) (11422231) (11431321) (14113231) (14122321)
(12313231) (14131411) (12322321) (12331411) (13213321) (13222411) (11413321)
(11422411) (14113411) (12313411) (21141142) (11132143) (31132141) (11141233)
(31141231) (21123142) (21132232) (21141322) (11114143) (31114141) (11123233)
(31123231) (11132323) (31132321) (11141413) (31141411) (21114232) (21123322)
(21132412) (11114323) (31114321) (11123413) (31123411) (22141141) (11241142)
(12132142) (12141232) (21241231) (22123141) (11223142) (22132231) (11232232)
(22141321) (11241322) (12114142) (12123232) (12132322) (12141412) (21241411)
(22114231) (11214232) (22123321) (11223322) (22132411) (11232412) (12114322)
(12123412) (21223411) (12241141) (13132141) (13141231) (11332141) (11341231)
(12223141) (12232231) (12241321) (13114141) (13123231) (11314141) (13132321)
(11323231) (13141411) (11332321) (11341411) (12214231) (12223321) (12232411)
(13114321) (13123411) (11314321) (11323411) (21151141) (11142142) (11151232)
(21133141) (21142231) (21151321) (11124142) (11133232) (11142322) (11151412)
(21115141) (21124231) (21133321) (21142411) (11115232) (11124322) (11133412)
(11251141) (12142141) (12151231) (11233141) (11242231) (11251321) (12124141)
(12133231) (12142321) (12151411) (11215141) (11224231) (11233321) (11242411)
(12115231) (12124321) (12133411) (11152141) (11161231) (11134141) (11143231)
(11152321) (11161411) (11116141) (11125231) (11134321) (11143411) (21111244)
(41111242) (11111335) (31111333) (51111331) (21111424) (41111422) (11111515)
(31111513) (51111511) (21211153) (41211151) (22111243) (42111241) (11211244)
(31211242) (12111334) (32111332) (21211333) (41211331) (22111423) (42111421)
(11211424) (31211422) (12111514) (32111512) (21211513) (41211511) (22211152)
(11311153) (31311151) (23111242) (12211243) (32211241) (21311242) (13111333)
(33111331) (22211332) (11311333) (31311331) (23111422) (12211423) (32211421)
(21311422) (13111513) (33111511) (22211512) (11311513) (31311511) (23211151)
(12311152) (21411151) (24111241) (13211242) (22311241) (11411242) (14111332)
(23211331) (12311332) (21411331) (24111421) (13211422) (22311421) (11411422)
(14111512) (23211511) (12311512) (21411511) (13311151) (11511151) (14211241)
(12411241) (15111331) (13311331) (11511331) (14211421) (12411421) (15111511)
(13311511) (11511511) (31121152) (21112153) (41112151) (21121243) (41121241)
(11112244) (31112242) (11121334) (31121332) (21112333) (41112331) (21121423)
(41121421) (11112424) (31112422) (11121514) (31121512) (21112513) (41112511)
(12121153) (32121151) (21221152) (22112152) (11212153) (22121242) (11221243)
(31221241) (12112243) (32112241) (12121333) (32121331) (21221332) (22112332)
(11212333) (22121422) (11221423) (31221421) (12112423) (32112421) (12121513)
(32121511) (21221512) (22112512) (11212513) (31212511) (13121152) (22221151)
(11321152) (23112151) (12212152) (23121241) (12221242) (21321241) (13112242)
(13121332) (11312242) (22221331) (11321332) (23112331) (12212332) (23121421)
(12221422) (21321421) (13112422) (13121512) (11312422) (22221511) (11321512)
(23112511) (12212512) (21312511) (14121151) (12321151) (13212151) (13221241)
(11412151) (11421241) (14112241) (14121331) (12312241) (12321331) (13212331)
(13221421) (11412331) (11421421) (14112421) (14121511) (12312421) (12321511)
(13212511) (11412511) (11131153) (31131151) (21122152) (21131242) (11113153)
(31113151) (11122243) (31122241) (11131333) (31131331) (21113242) (21122332)
(21131422) (11113333) (31113331) (11122423) (31122421) (11131513) (31131511)
(21113422) (21122512) (12131152) (21231151) (22122151) (11222152) (22131241)
(11231242) (12113152) (12122242) (12131332) (21231331) (22113241) (11213242)
(22122331) (11222332) (22131421) (11231422) (12113332) (12122422) (12131512)
(21231511) (22113421) (11213422) (22122511) (11222512) (13131151) (11331151)
(12222151) (12231241) (13113151) (13122241) (11313151) (13131331) (11322241)
(11331331) (12213241) (12222331) (12231421) (13113331) (13122421) (11313331)
(13131511) (11322421) (11331511) (12213421) (12222511) (11141152) (21132151)
(21141241) (11123152) (11132242) (11141332) (21114151) (21123241) (21132331)
(21141421) (11114242) (11123332) (11132422) (11141512) (21114331) (21123421)
(21132511) (12141151) (11232151) (11241241) (12123151) (12132241) (12141331)
(11214151) (11223241) (11232331) (11241421) (12114241) (12123331) (12132421)
(12141511) (11214331) (11223421) (11232511) (11151151) (11133151) (11142241)
(11151331) (11115151) (11124241) (11133331) (11142421) (11151511) (11111254)
(31111252) (21111343) (41111341) (11111434) (31111432) (21111523) (41111521)
(11111614) (31111612) (31211161) (12111253) (32111251) (21211252) (22111342)
(11211343) (31211341) (12111433) (32111431) (21211432) (22111522) (11211523)
(31211521) (12111613) (32111611) (21211612) (12211162) (21311161) (13111252)
(22211251) (11311252) (23111341) (12211342) (21311341) (13111432) (22211431)
(11311432) (23111521) (12211522) (21311521) (13111612) (22211611) (11311612)
(13211161) (11411161) (14111251) (12311251) (13211341) (11411341) (14111431)
(12311431) (13211521) (11411521) (14111611) (12311611) (21121162) (11112163)
(31112161) (11121253) (31121251) (21112252) (21121342) (11112343) (31112341)
(11121433) (31121431) (21112432) (21121522) (11112523) (31112521) (11121613)
(31121611) (22121161) (11221162) (12112162) (12121252) (21221251) (22112251)
(11212252) (22121341) (11221342) (12112342) (12121432) (21221431) (22112431)
(11212432) (22121521) (11221522) (12112522) (12121612) (21221611) (12221161)
(13112161) (13121251) (11312161) (11321251) (32121115) (52121113) (21221116)
(41221114) (61221112) (22112116) (42112114) (31212115) (51212113) (13121116)
(33121114) (22221115) (42221113) (11321116) (31321114) (51321112) (23112115)
(43112113) (12212116) (32212114) (52212112) (21312115) (41312113) (61312111)
(14121115) (34121113) (23221114) (43221112) (12321115) (32321113) (52321111)
(21421114) (41421112) (24112114) (13212115) (33212113) (22312114) (42312112)
(11412115) (31412113) (51412111) (15121114) (24221113) (13321114) (33321112)
(22421113) (42421111) (11521114) (31521112) (25112113) (14212114) (34212112)
(23312113) (43312111) (12412114) (32412112) (21512113) (41512111) (16121113)
(25221112) (14321113) (34321111) (23421112) (12521113) (32521111) (15212113)
(24312112) (13412113) (33412111) (22512112) (11612113) (31612111) (31131115)
(51131113) (21122116) (41122114) (61122112) (31113115) (51113113) (12131116)
(32131114) (52131112) (21231115) (41231113) (61231111) (22122115) (42122113)
(11222116) (31222114) (51222112) (12113116) (32113114) (52113112) (21213115)
(41213113) (61213111) (13131115) (33131113) (22231114) (42231112) (11331115)
(31331113) (51331111) (23122114) (43122112) (12222115) (32222113) (52222111)
(21322114) (41322112) (13113115) (33113113) (22213114) (42213112) (11313115)
(31313113) (51313111) (14131114) (34131112) (23231113) (43231111) (12331114)
(32331112) (21431113) (41431111) (24122113) (13222114) (33222112) (22322113)
(42322111) (11422114) (31422112) (14113114) (34113112) (23213113) (43213111)
(12313114) (32313112) (21413113) (41413111) (15131113) (24231112) (13331113)
(33331111) (22431112) (25122112) (14222113) (34222111) (23322112) (12422113)
(32422111) (21522112) (15113113) (24213112) (13313113) (33313111) (22413112)
(11513113) (31513111) (16131112) (25231111) (14331112) (23431111) (15222112)
(24322111) (13422112) (22522111) (16113112) (25213111) (14313112) (23413111)
(12513112) (21613111) (11141116) (31141114) (51141112) (21132115) (41132113)
(61132111) (11123116) (31123114) (51123112) (21114115) (41114113) (61114111)
(12141115) (32141113) (52141111) (21241114) (41241112) (22132114) (42132112)
(11232115) (31232113) (51232111) (12123115) (32123113) (52123111) (21223114)
(41223112) (22114114) (42114112) (11214115) (31214113) (51214111) (13141114)
(33141112) (22241113) (42241111) (11341114) (31341112) (23132113) (43132111)
(12232114) (32232112) (21332113) (41332111) (13123114) (33123112) (22223113)
(42223111) (11323114) (31323112) (23114113) (43114111) (12214114) (32214112)
(21314113) (41314111) (14141113) (34141111) (23241112) (12341113) (32341111)
(24132112) (13232113) (33232111) (22332112) (11432113) (31432111) (14123113)
(34123111) (23223112) (12323113) (32323111) (21423112) (24114112) (13214113)
(33214111) (22314112) (11414113) (31414111) (15141112) (24241111) (13341112)
(25132111) (14232112) (23332111) (12432112) (15123112) (24223111) (13323112)
(22423111) (11523112) (25114111) (14214112) (23314111) (12414112) (21514111)
(16141111) (14341111) (15232111) (13432111) (16123111) (14323111) (12523111)
(15214111) (13414111) (11614111) (11151115) (31151113) (51151111) (21142114)
(41142112) (11133115) (31133113) (51133111) (21124114) (41124112) (11115115)
(31115113) (51115111) (12151114) (32151112) (21251113) (41251111) (22142113)
(42142111) (11242114) (31242112) (12133114) (32133112) (21233113) (41233111)
(22124113) (42124111) (11224114) (31224112) (12115114) (32115112) (21215113)
(41215111) (13151113) (33151111) (22251112) (23142112) (12242113) (32242111)
(21342112) (13133113) (33133111) (22233112) (11333113) (31333111) (23124112)
(12224113) (32224111) (21324112) (13115113) (33115111) (22215112) (11315113)
(31315111) (14151112) (23251111) (24142111) (13242112) (22342111) (14133112)
(23233111) (12333112) (21433111) (24124111) (13224112) (22324111) (11424112)
(14115112) (23215111) (12315112) (21415111) (15151111) (14242111) (15133111)
(13333111) (14224111) (12424111) (15115111) (13315111) (11515111) (11161114)
(31161112) (21152113) (41152111) (11143114) (31143112) (21134113) (41134111)
(11125114) (31125112) (21116113) (41116111) (12161113) (32161111) (22152112)
(11252113) (31252111) (12143113) (32143111) (21243112) (22134112) (11234113)
(31234111) (12125113) (32125111) (21225112) (22116112) (11216113) (31216111)
(13161112) (23152111) (12252112) (13143112) (22243111) (11343112) (23134111)
(12234112) (21334111) (13125112) (22225111) (11325112) (23116111) (12216112)
(21316111) (14161111) (13252111) (14143111) (12343111) (13234111) (11434111)
(14125111) (12325111) (13216111) (11416111) (31111216) (51111214) (31211125)
(51211123) (32111215) (52111213) (21211216) (41211214) (61211212) (12211126)
(32211124) (52211122) (21311125) (41311123) (61311121) (13111216) (33111214)
(22211215) (42211213) (11311216) (31311214) (51311212) (13211125) (33211123)
(22311124) (42311122) (11411125) (31411123) (51411121) (14111215) (34111213)
(23211214) (43211212) (12311215) (32311213) (52311211) (21411214) (41411212)
(14211124) (34211122) (23311123) (43311121) (12411124) (32411122) (21511123)
(41511121) (15111214) (24211213) (13311214) (33311212) (22411213) (42411211)
(11511214) (31511212) (15211123) (24311122) (13411123) (33411121) (22511122)
(11611123) (31611121) (16111213) (25211212) (14311213) (34311211) (23411212)
(12511213) (32511211) (21611212) (21121126) (41121124) (61121122) (31112125)
(51112123) (31121215) (51121213) (21112216) (41112214) (61112212) (22121125)
(42121123) (11221126) (31221124) (51221122) (12112126) (32112124) (52112122)
(12121216) (32121214) (52121212) (21221215) (41221213) (61221211) (22112215)
(42112213) (11212216) (31212214) (51212212) (23121124) (43121122) (12221125)
(32221123) (52221121) (21321124) (41321122) (13112125) (33112123) (13121215)
(33121213) (11312125) (22221214) (42221212) (11321215) (31321213) (51321211)
(23112214) (43112212) (12212215) (32212213) (52212211) (21312214) (41312212)
(24121123) (13221124) (33221122) (22321123) (42321121) (11421124) (31421122)
(14112124) (34112122) (14121214) (34121212) (12312124) (23221213) (43221211)
(12321214) (32321212) (21421213) (41421211) (24112213) (13212214) (33212212)
(22312213) (42312211) (11412214) (31412212) (25121122) (14221123) (34221121)
(23321122) (12421123) (32421121) (21521122) (15112123) (15121213) (13312123)
(24221212) (13321213) (33321211) (11512123) (22421212) (11521213) (31521211)
(25112212) (14212213) (34212211) (23312212) (12412213) (32412211) (21512212)
(15221122) (24321121) (13421122) (22521121) (16112122) (16121212) (14312122)
(25221211) (14321212) (12512122) (23421211) (12521212) (15212212) (24312211)
(13412212) (22512211) (11612212) (21131125) (41131123) (61131121) (11122126)
(31122124) (51122122) (11131216) (31131214) (51131212) (21113125) (41113123)
(61113121) (21122215) (41122213) (61122211) (11113216) (31113214) (51113212)
(22131124) (42131122) (11231125) (31231123) (51231121) (12122125) (32122123)
(52122121) (12131215) (32131213) (52131211) (21231214) (41231212) (22113124)
(42113122) (11213125) (22122214) (42122212) (11222215) (31222213) (51222211)
(12113215) (32113213) (52113211) (21213214) (41213212) (23131123) (43131121)
(12231124) (32231122) (21331123) (41331121) (13122124) (33122122) (13131214)
(33131212) (11322124) (22231213) (42231211) (11331214) (31331212) (23113123)
(43113121) (12213124) (23122213) (43122211) (12222214) (32222212) (21322213)
(41322211) (13113214) (33113212) (22213213) (42213211) (11313214) (31313212)
(24131122) (13231123) (33231121) (22331122) (11431123) (31431121) (14122123)
(34122121) (14131213) (34131211) (12322123) (23231212) (12331213) (32331211)
(21431212) (24113122) (13213123) (24122212) (13222213) (33222211) (11413123)
(22322212) (11422213) (31422211) (14113213) (34113211) (23213212) (12313213)
(32313211) (21413212) (25131121) (14231122) (23331121) (12431122) (15122122)
(15131212) (13322122) (24231211) (13331212) (11522122) (22431211) (25113121)
(14213122) (25122211) (14222212) (12413122) (23322211) (12422212) (21522211)
(15113212) (24213211) (13313212) (22413211) (11513212) (15231121) (13431121)
(16122121) (16131211) (14322121) (14331211) (12522121) (15213121) (15222211)
(13413121) (13422211) (11613121) (16113211) (14313211) (12513211) (21141124)
(41141122) (11132125) (31132123) (51132121) (11141215) (31141213) (51141211)
(21123124) (41123122) (21132214) (41132212) (11114125) (31114123) (51114121)
(11123215) (31123213) (51123211) (21114214) (41114212) (22141123) (42141121)
(11241124) (31241122) (12132124) (32132122) (12141214) (32141212) (21241213)
(41241211) (22123123) (42123121) (11223124) (22132213) (42132211) (11232214)
(31232212) (12114124) (32114122) (12123214) (32123212) (21223213) (41223211)
(22114213) (42114211) (11214214) (31214212) (23141122) (12241123) (32241121)
(21341122) (13132123) (33132121) (13141213) (33141211) (11332123) (22241212)
(11341213) (31341211) (23123122) (12223123) (23132212) (12232213) (32232211)
(21332212) (13114123) (33114121) (13123213) (33123211) (11314123) (22223212)
(11323213) (31323211) (23114212) (12214213) (32214211) (21314212) (24141121)
(13241122) (22341121) (14132122) (14141212) (12332122) (23241211) (12341212)
(24123121) (13223122) (24132211) (13232212) (11423122) (22332211) (11432212)
(14114122) (14123212) (12314122) (23223211) (12323212) (21423211) (24114211)
(13214212) (22314211) (11414212) (14241121) (15132121) (15141211) (13332121)
(13341211) (14223121) (14232211) (12423121) (12432211) (15114121) (15123211)
(13314121) (13323211) (11514121) (11523211) (14214211) (12414211) (21151123)
(41151121) (11142124) (31142122) (11151214) (31151212) (21133123) (41133121)
(21142213) (41142211) (11124124) (31124122) (11133214) (31133212) (21115123)
(41115121) (21124213) (41124211) (11115214) (31115212) (22151122) (11251123)
(31251121) (12142123) (32142121) (12151213) (32151211) (21251212) (22133122)
(11233123) (22142212) (11242213) (31242211) (12124123) (32124121) (12133213)
(32133211) (21233212) (22115122) (11215123) (22124212) (11224213) (31224211)
(12115213) (32115211) (21215212) (23151121) (12251122) (13142122) (13151212)
(11342122) (22251211) (23133121) (12233122) (23142211) (12242212) (21342211)
(13124122) (13133212) (11324122) (22233211) (11333212) (23115121) (12215122)
(23124211) (12224212) (21324211) (13115212) (22215211) (11315212) (13251121)
(14142121) (14151211) (12342121) (13233121) (13242211) (11433121) (14124121)
(14133211) (12324121) (12333211) (13215121) (13224211) (11415121) (11424211)
(14115211) (12315211) (21161122) (11152123) (31152121) (11161213) (31161211)
(21143122) (21152212) (11134123) (31134121) (11143213) (31143211) (21125122)
(21134212) (11116123) (31116121) (11125213) (31125211) (22161121) (12152122)
(12161212) (22143121) (11243122) (22152211) (11252212) (12134122) (12143212)
(21243211) (22125121) (11225122) (22134211) (11234212) (12116122) (12125212)
(21225211) (13152121) (13161211) (12243121) (12252211) (13134121) (13143211)
(11334121) (11343211) (12225121) (12234211) (13116121) (13125211) (11316121)
(11325211) (21111226) (41111224) (61111222) (31111315) (51111313) (21211135)
(41211133) (61211131) (22111225) (42111223) (11211226) (31211224) (51211222)
(12111316) (32111314) (52111312) (21211315) (41211313) (61211311) (22211134)
(42211132) (11311135) (31311133) (51311131) (23111224) (43111222) (12211225)
(32211223) (52211221) (21311224) (41311222) (13111315) (33111313) (22211314)
(42211312) (11311315) (31311313) (51311311) (23211133) (43211131) (12311134)
(32311132) (21411133) (41411131) (24111223) (13211224) (33211222) (22311223)
(42311221) (11411224) (31411222) (14111314) (34111312) (23211313) (43211311)
(12311314) (32311312) (21411313) (41411311) (24211132) (13311133) (33311131)
(22411132) (11511133) (31511131) (25111222) (14211223) (34211221) (23311222)
(12411223) (32411221) (21511222) (15111313) (24211312) (13311313) (33311311)
(22411312) (11511313) (31511311) (25211131) (14311132) (23411131) (12511132)
(21611131) (15211222) (24311221) (13411222) (22511221) (11611222) (16111312)
(25211311) (14311312) (23411311) (12511312) (21611311) (31121134) (51121132)
(21112135) (41112133) (61112131) (21121225) (41121223) (61121221) (11112226)
(31112224) (51112222) (11121316) (31121314) (51121312) (21112315) (41112313)
(61112311) (12121135) (32121133) (52121131) (21221134) (41221132) (22112134)
(42112132) (11212135) (22121224) (42121222) (11221225) (31221223) (51221221)
(12112225) (32112223) (52112221) (12121315) (32121313) (52121311) (21221314)
(41221312) (22112314) (42112312) (11212315) (31212313) (51212311) (13121134)
(33121132) (22221133) (42221131) (11321134) (31321132) (23112133) (43112131)
(12212134) (23121223) (43121221) (12221224) (32221222) (21321223) (41321221)
(13112224) (33112222) (13121314) (33121312) (11312224) (22221313) (42221311)
(11321314) (31321312) (23112313) (43112311) (12212314) (32212312) (21312313)
(41312311) (14121133) (34121131) (23221132) (12321133) (32321131) (21421132)
(24112132) (13212133) (24121222) (13221223) (33221221) (11412133) (22321222)
(11421223) (31421221) (14112223) (34112221) (14121313) (34121311) (12312223)
(23221312) (12321313) (32321311) (21421312) (24112312) (13212313) (33212311)
(22312312) (11412313) (31412311) (15121132) (24221131) (13321132) (22421131)
] [  % Odd parity
(22121116) (42121114) (31221115) (51221113) (32112115) (52112113) (21212116)
(41212114) (61212112) (23121115) (43121113) (12221116) (32221114) (52221112)
(21321115) (41321113) (61321111) (13112116) (33112114) (22212115) (42212113)
(11312116) (31312114) (51312112) (24121114) (13221115) (33221113) (22321114)
(42321112) (11421115) (31421113) (51421111) (14112115) (34112113) (23212114)
(43212112) (12312115) (32312113) (52312111) (21412114) (41412112) (25121113)
(14221114) (34221112) (23321113) (43321111) (12421114) (32421112) (21521113)
(41521111) (15112114) (24212113) (13312114) (33312112) (22412113) (42412111)
(11512114) (31512112) (15221113) (24321112) (13421113) (33421111) (22521112)
(16112113) (25212112) (14312113) (34312111) (23412112) (12512113) (32512111)
(21612112) (21131116) (41131114) (61131112) (31122115) (51122113) (21113116)
(41113114) (61113112) (22131115) (42131113) (11231116) (31231114) (51231112)
(12122116) (32122114) (52122112) (21222115) (41222113) (61222111) (22113115)
(42113113) (11213116) (31213114) (51213112) (23131114) (43131112) (12231115)
(32231113) (52231111) (21331114) (41331112) (13122115) (33122113) (22222114)
(42222112) (11322115) (31322113) (51322111) (23113114) (43113112) (12213115)
(32213113) (52213111) (21313114) (41313112) (24131113) (13231114) (33231112)
(22331113) (42331111) (11431114) (31431112) (14122114) (34122112) (23222113)
(43222111) (12322114) (32322112) (21422113) (41422111) (24113113) (13213114)
(33213112) (22313113) (42313111) (11413114) (31413112) (25131112) (14231113)
(34231111) (23331112) (12431113) (32431111) (15122113) (24222112) (13322113)
(33322111) (22422112) (11522113) (31522111) (25113112) (14213113) (34213111)
(23313112) (12413113) (32413111) (21513112) (15231112) (24331111) (13431112)
(16122112) (25222111) (14322112) (23422111) (12522112) (15213112) (24313111)
(13413112) (22513111) (11613112) (21141115) (41141113) (61141111) (11132116)
(31132114) (51132112) (21123115) (41123113) (61123111) (11114116) (31114114)
(51114112) (22141114) (42141112) (11241115) (31241113) (51241111) (12132115)
(32132113) (52132111) (21232114) (41232112) (22123114) (42123112) (11223115)
(31223113) (51223111) (12114115) (32114113) (52114111) (21214114) (41214112)
(23141113) (43141111) (12241114) (32241112) (21341113) (41341111) (13132114)
(33132112) (22232113) (42232111) (11332114) (31332112) (23123113) (43123111)
(12223114) (32223112) (21323113) (41323111) (13114114) (33114112) (22214113)
(42214111) (11314114) (31314112) (24141112) (13241113) (33241111) (22341112)
(14132113) (34132111) (23232112) (12332113) (32332111) (21432112) (24123112)
(13223113) (33223111) (22323112) (11423113) (31423111) (14114113) (34114111)
(23214112) (12314113) (32314111) (21414112) (25141111) (14241112) (23341111)
(15132112) (24232111) (13332112) (22432111) (25123111) (14223112) (23323111)
(12423112) (21523111) (15114112) (24214111) (13314112) (22414111) (11514112)
(15241111) (16132111) (14332111) (15223111) (13423111) (16114111) (14314111)
(12514111) (21151114) (41151112) (11142115) (31142113) (51142111) (21133114)
(41133112) (11124115) (31124113) (51124111) (21115114) (41115112) (22151113)
(42151111) (11251114) (31251112) (12142114) (32142112) (21242113) (41242111)
(22133113) (42133111) (11233114) (31233112) (12124114) (32124112) (21224113)
(41224111) (22115113) (42115111) (11215114) (31215112) (23151112) (12251113)
(32251111) (13142113) (33142111) (22242112) (11342113) (31342111) (23133112)
(12233113) (32233111) (21333112) (13124113) (33124111) (22224112) (11324113)
(31324111) (23115112) (12215113) (32215111) (21315112) (24151111) (13251112)
(14142112) (23242111) (12342112) (24133111) (13233112) (22333111) (11433112)
(14124112) (23224111) (12324112) (21424111) (24115111) (13215112) (22315111)
(11415112) (14251111) (15142111) (13342111) (14233111) (12433111) (15124111)
(13324111) (11524111) (14215111) (12415111) (21161113) (41161111) (11152114)
(31152112) (21143113) (41143111) (11134114) (31134112) (21125113) (41125111)
(11116114) (31116112) (22161112) (12152113) (32152111) (21252112) (22143112)
(11243113) (31243111) (12134113) (32134111) (21234112) (22125112) (11225113)
(31225111) (12116113) (32116111) (21216112) (23161111) (13152112) (22252111)
(23143111) (12243112) (21343111) (13134112) (22234111) (11334112) (23125111)
(12225112) (21325111) (13116112) (22216111) (11316112) (14152111) (13243111)
(14134111) (12334111) (13225111) (11425111) (14116111) (12316111) (41111215)
(61111213) (21211126) (41211124) (61211122) (22111216) (42111214) (31211215)
(51211213) (22211125) (42211123) (11311126) (31311124) (51311122) (23111215)
(43111213) (12211216) (32211214) (52211212) (21311215) (41311213) (61311211)
(23211124) (43211122) (12311125) (32311123) (52311121) (21411124) (41411122)
(24111214) (13211215) (33211213) (22311214) (42311212) (11411215) (31411213)
(51411211) (24211123) (13311124) (33311122) (22411123) (42411121) (11511124)
(31511122) (25111213) (14211214) (34211212) (23311213) (43311211) (12411214)
(32411212) (21511213) (41511211) (25211122) (14311123) (34311121) (23411122)
(12511123) (32511121) (21611122) (15211213) (24311212) (13411213) (33411211)
(22511212) (11611213) (31611211) (31121125) (51121123) (21112126) (41112124)
(61112122) (21121216) (41121214) (61121212) (31112215) (51112213) (12121126)
(32121124) (52121122) (21221125) (41221123) (61221121) (22112125) (42112123)
(11212126) (22121215) (42121213) (11221216) (31221214) (51221212) (12112216)
(32112214) (52112212) (21212215) (41212213) (61212211) (13121125) (33121123)
(22221124) (42221122) (11321125) (31321123) (51321121) (23112124) (43112122)
(12212125) (23121214) (43121212) (12221215) (32221213) (52221211) (21321214)
(41321212) (13112215) (33112213) (22212214) (42212212) (11312215) (31312213)
(51312211) (14121124) (34121122) (23221123) (43221121) (12321124) (32321122)
(21421123) (41421121) (24112123) (13212124) (24121213) (13221214) (33221212)
(11412124) (22321213) (42321211) (11421214) (31421212) (14112214) (34112212)
(23212213) (43212211) (12312214) (32312212) (21412213) (41412211) (15121123)
(24221122) (13321123) (33321121) (22421122) (11521123) (31521121) (25112122)
(14212123) (25121212) (14221213) (34221211) (12412123) (23321212) (12421213)
(32421211) (21521212) (15112213) (24212212) (13312213) (33312211) (22412212)
(11512213) (31512211) (16121122) (25221121) (14321122) (23421121) (12521122)
(15212122) (15221212) (13412122) (24321211) (13421212) (11612122) (22521211)
(16112212) (25212211) (14312212) (23412211) (12512212) (21612211) (11131126)
(31131124) (51131122) (21122125) (41122123) (61122121) (21131215) (41131213)
(61131211) (11113126) (31113124) (51113122) (11122216) (31122214) (51122212)
(21113215) (41113213) (61113211) (12131125) (32131123) (52131121) (21231124)
(41231122) (22122124) (42122122) (11222125) (22131214) (42131212) (11231215)
(31231213) (51231211) (12113125) (32113123) (52113121) (12122215) (32122213)
(52122211) (21222214) (41222212) (22113214) (42113212) (11213215) (31213213)
(51213211) (13131124) (33131122) (22231123) (42231121) (11331124) (31331122)
(23122123) (43122121) (12222124) (23131213) (43131211) (12231214) (32231212)
(21331213) (41331211) (13113124) (33113122) (13122214) (33122212) (11313124)
(22222213) (42222211) (11322214) (31322212) (23113213) (43113211) (12213214)
(32213212) (21313213) (41313211) (14131123) (34131121) (23231122) (12331123)
(32331121) (21431122) (24122122) (13222123) (24131212) (13231213) (33231211)
(11422123) (22331212) (11431213) (31431211) (14113123) (34113121) (14122213)
(34122211) (12313123) (23222212) (12322213) (32322211) (21422212) (24113212)
(13213213) (33213211) (22313212) (11413213) (31413211) (15131122) (24231121)
(13331122) (22431121) (25122121) (14222122) (25131211) (14231212) (12422122)
(23331211) (12431212) (15113122) (15122212) (13313122) (24222211) (13322212)
(11513122) (22422211) (11522212) (25113211) (14213212) (23313211) (12413212)
(21513211) (16131121) (14331121) (15222121) (15231211) (13422121) (13431211)
(16113121) (16122211) (14313121) (14322211) (12513121) (12522211) (15213211)
(13413211) (11613211) (11141125) (31141123) (51141121) (21132124) (41132122)
(21141214) (41141212) (11123125) (31123123) (51123121) (11132215) (31132213)
(51132211) (21114124) (41114122) (21123214) (41123212) (11114215) (31114213)
(51114211) (12141124) (32141122) (21241123) (41241121) (22132123) (42132121)
(11232124) (22141213) (42141211) (11241214) (31241212) (12123124) (32123122)
(12132214) (32132212) (21232213) (41232211) (22114123) (42114121) (11214124)
(22123213) (42123211) (11223214) (31223212) (12114214) (32114212) (21214213)
(41214211) (13141123) (33141121) (22241122) (11341123) (31341121) (23132122)
(12232123) (23141212) (12241213) (32241211) (21341212) (13123123) (33123121)
(13132213) (33132211) (11323123) (22232212) (11332213) (31332211) (23114122)
(12214123) (23123212) (12223213) (32223211) (21323212) (13114213) (33114211)
(22214212) (11314213) (31314211) (14141122) (23241121) (12341122) (24132121)
(13232122) (24141211) (13241212) (11432122) (22341211) (14123122) (14132212)
(12323122) (23232211) (12332212) (21432211) (24114121) (13214122) (24123211)
(13223212) (11414122) (22323211) (11423212) (14114212) (23214211) (12314212)
(21414211) (15141121) (13341121) (14232121) (14241211) (12432121) (15123121)
(15132211) (13323121) (13332211) (11523121) (14214121) (14223211) (12414121)
(12423211) (15114211) (13314211) (11514211) (11151124) (31151122) (21142123)
(41142121) (21151213) (41151211) (11133124) (31133122) (11142214) (31142212)
(21124123) (41124121) (21133213) (41133211) (11115124) (31115122) (11124214)
(31124212) (21115213) (41115211) (12151123) (32151121) (21251122) (22142122)
(11242123) (22151212) (11251213) (31251211) (12133123) (32133121) (12142213)
(32142211) (21242212) (22124122) (11224123) (22133212) (11233213) (31233211)
(12115123) (32115121) (12124213) (32124211) (21224212) (22115212) (11215213)
(31215211) (13151122) (22251121) (23142121) (12242122) (23151211) (12251212)
(13133122) (13142212) (11333122) (22242211) (11342212) (23124121) (12224122)
(23133211) (12233212) (21333211) (13115122) (13124212) (11315122) (22224211)
(11324212) (23115211) (12215212) (21315211) (14151121) (13242121) (13251211)
(14133121) (14142211) (12333121) (12342211) (13224121) (13233211) (11424121)
(11433211) (14115121) (14124211) (12315121) (12324211) (13215211) (11415211)
(11161123) (31161121) (21152122) (21161212) (11143123) (31143121) (11152213)
(31152211) (21134122) (21143212) (11125123) (31125121) (11134213) (31134211)
(21116122) (21125212) (12161122) (22152121) (11252122) (22161211) (12143122)
(12152212) (21252211) (22134121) (11234122) (22143211) (11243212) (12125122)
(12134212) (21234211) (22116121) (11216122) (22125211) (11225212) (13161121)
(12252121) (13143121) (13152211) (11343121) (12234121) (12243211) (13125121)
(13134211) (11325121) (11334211) (12216121) (12225211) (31111225) (51111223)
(21111316) (41111314) (61111312) (31211134) (51211132) (12111226) (32111224)
(52111222) (21211225) (41211223) (61211221) (22111315) (42111313) (11211316)
(31211314) (51211312) (12211135) (32211133) (52211131) (21311134) (41311132)
(13111225) (33111223) (22211224) (42211222) (11311225) (31311223) (51311221)
(23111314) (43111312) (12211315) (32211313) (52211311) (21311314) (41311312)
(13211134) (33211132) (22311133) (42311131) (11411134) (31411132) (14111224)
(34111222) (23211223) (43211221) (12311224) (32311222) (21411223) (41411221)
(24111313) (13211314) (33211312) (22311313) (42311311) (11411314) (31411312)
(14211133) (34211131) (23311132) (12411133) (32411131) (21511132) (15111223)
(24211222) (13311223) (33311221) (22411222) (11511223) (31511221) (25111312)
(14211313) (34211311) (23311312) (12411313) (32411311) (21511312) (15211132)
(24311131) (13411132) (22511131) (11611132) (16111222) (25211221) (14311222)
(23411221) (12511222) (21611221) (15211312) (24311311) (13411312) (22511311)
(11611312) (21121135) (41121133) (61121131) (11112136) (31112134) (51112132)
(11121226) (31121224) (51121222) (21112225) (41112223) (61112221) (21121315)
(41121313) (61121311) (11112316) (31112314) (51112312) (22121134) (42121132)
(11221135) (31221133) (51221131) (12112135) (32112133) (52112131) (12121225)
(32121223) (52121221) (21221224) (41221222) (22112224) (42112222) (11212225)
(22121314) (42121312) (11221315) (31221313) (51221311) (12112315) (32112313)
(52112311) (21212314) (41212312) (23121133) (43121131) (12221134) (32221132)
(21321133) (41321131) (13112134) (33112132) (13121224) (33121222) (11312134)
(22221223) (42221221) (11321224) (31321222) (23112223) (43112221) (12212224)
(23121313) (43121311) (12221314) (32221312) (21321313) (41321311) (13112314)
(33112312) (22212313) (42212311) (11312314) (31312312) (24121132) (13221133)
(33221131) (22321132) (11421133) (31421131) (14112133) (34112131) (14121223)
(34121221) (12312133) (23221222) (12321223) (32321221) (21421222) (24112222)
(13212223) (24121312) (13221313) (33221311) (11412223) (22321312) (11421313)
(31421311) (14112313) (34112311) (23212312) (12312313) (32312311) (21412312)
(25121131) (14221132) (23321131) (12421132) (21521131) (15112132) (15121222)
(13312132) (24221221) (13321222) (11512132) (22421221) (11521222) (25112221)
(14212222) (25121311) (14221312) (12412222) (23321311) (12421312) (21521311)
(15112312) (24212311) (13312312) (22412311) (11512312) (15221131) (13421131)
(16112131) (16121221) (14312131) (14321221) (12512131) (12521221) (15212221)
(15221311) (13412221) (13421311) (11612221) (16112311) (14312311) (12512311)
(21131134) (41131132) (11122135) (31122133) (51122131) (11131225) (31131223)
(51131221) (21113134) (41113132) (21122224) (41122222) (21131314) (41131312)
(11113225) (31113223) (51113221) (11122315) (31122313) (51122311) (21113314)
(41113312) (22131133) (42131131) (11231134) (31231132) (12122134) (32122132)
(12131224) (32131222) (21231223) (41231221) (22113133) (42113131) (11213134)
(22122223) (42122221) (11222224) (22131313) (42131311) (11231314) (31231312)
(12113224) (32113222) (12122314) (32122312) (21222313) (41222311) (22113313)
(42113311) (11213314) (31213312) (23131132) (12231133) (32231131) (21331132)
(13122133) (33122131) (13131223) (33131221) (11322133) (22231222) (11331223)
(31331221) (23113132) (12213133) (23122222) (12222223) (23131312) (12231313)
(32231311) (21331312) (13113223) (33113221) (13122313) (33122311) (11313223)
(22222312) (11322313) (31322311) (23113312) (12213313) (32213311) (21313312)
(24131131) (13231132) (22331131) (11431132) (14122132) (14131222) (12322132)
(23231221) (12331222) (21431221) (24113131) (13213132) (24122221) (13222222)
(24131311) (11413132) (13231312) (11422222) (22331311) (11431312) (14113222)
(14122312) (12313222) (23222311) (12322312) (21422311) (24113311) (13213312)
(22313311) (11413312) (14231131) (12431131) (15122131) (15131221) (13322131)
(13331221) (11522131) (14213131) (14222221) (12413131) (14231311) (12422221)
(12431311) (15113221) (15122311) (13313221) (13322311) (11513221) (11522311)
(14213311) (12413311) (21141133) (41141131) (11132134) (31132132) (11141224)
(31141222) (21123133) (41123131) (21132223) (41132221) (21141313) (41141311)
(11114134) (31114132) (11123224) (31123222) (11132314) (31132312) (21114223)
(41114221) (21123313) (41123311) (11114314) (31114312) (22141132) (11241133)
(31241131) (12132133) (32132131) (12141223) (32141221) (21241222) (22123132)
(11223133) (22132222) (11232223) (22141312) (11241313) (31241311) (12114133)
(32114131) (12123223) (32123221) (12132313) (32132311) (21232312) (22114222)
(11214223) (22123312) (11223313) (31223311) (12114313) (32114311) (21214312)
(23141131) (12241132) (21341131) (13132132) (13141222) (11332132) (22241221)
(11341222) (23123131) (12223132) (23132221) (12232222) (23141311) (12241312)
(21341311) (13114132) (13123222) (11314132) (13132312) (11323222) (22232311)
(11332312) (23114221) (12214222) (23123311) (12223312) (21323311) (13114312)
(22214311) (11314312) (13241131) (14132131) (14141221) (12332131) (12341221)
(13223131) (13232221) (11423131) (13241311) (11432221) (14114131) (14123221)
(12314131) (14132311) (12323221) (12332311) (13214221) (13223311) (11414221)
(11423311) (14114311) (12314311) (21151132) (11142133) (31142131) (11151223)
(31151221) (21133132) (21142222) (21151312) (11124133) (31124131) (11133223)
(31133221) (11142313) (31142311) (21115132) (21124222) (21133312) (11115223)
(31115221) (11124313) (31124311) (22151131) (11251132) (12142132) (12151222)
(21251221) (22133131) (11233132) (22142221) (11242222) (22151311) (11251312)
(12124132) (12133222) (12142312) (21242311) (22115131) (11215132) (22124221)
(11224222) (22133311) (11233312) (12115222) (12124312) (21224311) (12251131)
(13142131) (13151221) (11342131) (12233131) (12242221) (12251311) (13124131)
(13133221) (11324131) (13142311) (11333221) (11342311) (12215131) (12224221)
(12233311) (13115221) (13124311) (11315221) (11324311) (21161131) (11152132)
(11161222) (21143131) (21152221) (21161311) (11134132) (11143222) (11152312)
(21125131) (21134221) (21143311) (11116132) (11125222) (11134312) (12152131)
(12161221) (11243131) (11252221) (12134131) (12143221) (12152311) (11225131)
(11234221) (11243311) (12116131) (12125221) (12134311) (21111235) (41111233)
(61111231) (11111326) (31111324) (51111322) (21111415) (41111413) (61111411)
(21211144) (41211142) (22111234) (42111232) (11211235) (31211233) (51211231)
(12111325) (32111323) (52111321) (21211324) (41211322) (22111414) (42111412)
(11211415) (31211413) (51211411) (22211143) (42211141) (11311144) (31311142)
(23111233) (43111231) (12211234) (32211232) (21311233) (41311231) (13111324)
(33111322) (22211323) (42211321) (11311324) (31311322) (23111413) (43111411)
(12211414) (32211412) (21311413) (41311411) (23211142) (12311143) (32311141)
(21411142) (24111232) (13211233) (33211231) (22311232) (11411233) (31411231)
(14111323) (34111321) (23211322) (12311323) (32311321) (21411322) (24111412)
(13211413) (33211411) (22311412) (11411413) (31411411) (24211141) (13311142)
(22411141) (11511142) (25111231) (14211232) (23311231) (12411232) (21511231)
(15111322) (24211321) (13311322) (22411321) (11511322) (25111411) (14211412)
(23311411) (12411412) (21511411) (14311141) (12511141) (15211231) (13411231)
(11611231) (16111321) (14311321) (12511321) (15211411) (13411411) (11611411)
(31121143) (51121141) (21112144) (41112142) (21121234) (41121232) (11112235)
(31112233) (51112231) (11121325) (31121323) (51121321) (21112324) (41112322)
(21121414) (41121412) (11112415) (31112413) (51112411) (12121144) (32121142)
(21221143) (41221141) (22112143) (42112141) (11212144) (22121233) (42121231)
(11221234) (31221232) (12112234) (32112232) (12121324) (32121322) (21221323)
(41221321) (22112323) (42112321) (11212324) (22121413) (42121411) (11221414)
(31221412) (12112414) (32112412) (21212413) (41212411) (13121143) (33121141)
(22221142) (11321143) (31321141) (23112142) (12212143) (23121232) (12221233)
(32221231) (21321232) (13112233) (33112231) (13121323) (33121321) (11312233)
(22221322) (11321323) (31321321) (23112322) (12212323) (23121412) (12221413)
(32221411) (21321412) (13112413) (33112411) (22212412) (11312413) (31312411)
(14121142) (23221141) (12321142) (21421141) (24112141) (13212142) (24121231)
(13221232) (11412142) (22321231) (11421232) (14112232) (14121322) (12312232)
(23221321) (12321322) (21421321) (24112321) (13212322) (24121411) (13221412)
(11412322) (22321411) (11421412) (14112412) (23212411) (12312412) (21412411)
(15121141) (13321141) (11521141) (14212141) (14221231) (12412141) (12421231)
(15112231) (15121321) (13312231) (13321321) (11512231) (11521321) (14212321)
(14221411) (12412321) (12421411) (15112411) (13312411) (11512411) (11131144)
(31131142) (21122143) (41122141) (21131233) (41131231) (11113144) (31113142)
(11122234) (31122232) (11131324) (31131322) (21113233) (41113231) (21122323)
(41122321) (21131413) (41131411) (11113324) (31113322) (11122414) (31122412)
(21113413) (41113411) (12131143) (32131141) (21231142) (22122142) (11222143)
(22131232) (11231233) (31231231) (12113143) (32113141) (12122233) (32122231)
(12131323) (32131321) (21231322) (22113232) (11213233) (22122322) (11222323)
(22131412) (11231413) (31231411) (12113323) (32113321) (12122413) (32122411)
(21222412) (22113412) (11213413) (31213411) (13131142) (22231141) (11331142)
(23122141) (12222142) (23131231) (12231232) (21331231) (13113142) (13122232)
(11313142) (13131322) (11322232) (22231321) (11331322) (23113231) (12213232)
(23122321) (12222322) (23131411) (12231412) (21331411) (13113322) (13122412)
(11313322) (22222411) (11322412) (23113411) (12213412) (21313411) (14131141)
(12331141) (13222141) (13231231) (11422141) (11431231) (14113141) (14122231)
(12313141) (14131321) (12322231) (12331321) (13213231) (13222321) (11413231)
(13231411) (11422321) (11431411) (14113321) (14122411) (12313321) (12322411)
(13213411) (11413411) (11141143) (31141141) (21132142) (21141232) (11123143)
(31123141) (11132233) (31132231) (11141323) (31141321) (21114142) (21123232)
(21132322) (21141412) (11114233) (31114231) (11123323) (31123321) (11132413)
(31132411) (21114322) (21123412) (12141142) (21241141) (22132141) (11232142)
(22141231) (11241232) (12123142) (12132232) (12141322) (21241321) (22114141)
(11214142) (22123231) (11223232) (22132321) (11232322) (22141411) (11241412)
(12114232) (12123322) (12132412) (21232411) (22114321) (11214322) (22123411)
(11223412) (13141141) (11341141) (12232141) (12241231) (13123141) (13132231)
(11323141) (13141321) (11332231) (11341321) (12214141) (12223231) (12232321)
(12241411) (13114231) (13123321) (11314231) (13132411) (11323321) (11332411)
(12214321) (12223411) (11151142) (21142141) (21151231) (11133142) (11142232)
(11151322) (21124141) (21133231) (21142321) (21151411) (11115142) (11124232)
(11133322) (11142412) (21115231) (21124321) (21133411) (12151141) (11242141)
(11251231) (12133141) (12142231) (12151321) (11224141) (11233231) (11242321)
(11251411) (12115141) (12124231) (12133321) (12142411) (11215231) (11224321)
(11233411) (11161141) (11143141) (11152231) (11161321) (11125141) (11134231)
(11143321) (11152411) (11111245) (31111243) (51111241) (21111334) (41111332)
(11111425) (31111423) (51111421) (21111514) (41111512) (31211152) (12111244)
(32111242) (21211243) (41211241) (22111333) (42111331) (11211334) (31211332)
(12111424) (32111422) (21211423) (41211421) (22111513) (42111511) (11211514)
(31211512) (12211153) (32211151) (21311152) (13111243) (33111241) (22211242)
(11311243) (31311241) (23111332) (12211333) (32211331) (21311332) (13111423)
(33111421) (22211422) (11311423) (31311421) (23111512) (12211513) (32211511)
(21311512) (13211152) (22311151) (11411152) (14111242) (23211241) (12311242)
(21411241) (24111331) (13211332) (22311331) (11411332) (14111422) (23211421)
(12311422) (21411421) (24111511) (13211512) (22311511) (11411512) (14211151)
(12411151) (15111241) (13311241) (11511241) (14211331) (12411331) (15111421)
(13311421) (11511421) (14211511) (12411511) (21121153) (41121151) (11112154)
(31112152) (11121244) (31121242) (21112243) (41112241) (21121333) (41121331)
(11112334) (31112332) (11121424) (31121422) (21112423) (41112421) (21121513)
(41121511) (11112514) (31112512) (22121152) (11221153) (31221151) (12112153)
(32112151) (12121243) (32121241) (21221242) (22112242) (11212243) (22121332)
(11221333) (31221331) (12112333) (32112331) (12121423) (32121421) (21221422)
(22112422) (11212423) (22121512) (11221513) (31221511) (12112513) (32112511)
(21212512) (23121151) (12221152) (21321151) (13112152) (13121242) (11312152)
(22221241) (11321242) (23112241) (12212242) (23121331) (12221332) (21321331)
(13112332) (13121422) (11312332) (22221421) (11321422) (23112421) (12212422)
(23121511) (12221512) (21321511) (13112512) (22212511) (11312512) (13221151)
(11421151) (14112151) (14121241) (12312151) (12321241) (13212241) (13221331)
(11412241) (11421331) (14112331) (14121421) (12312331) (12321421) (13212421)
(13221511) (11412421) (11421511) (14112511) (12312511) (21131152) (11122153)
(31122151) (11131243) (31131241) (21113152) (21122242) (21131332) (11113243)
(31113241) (11122333) (31122331) (11131423) (31131421) (21113332) (21122422)
(21131512) (11113423) (31113421) (11122513) (31122511) (22131151) (11231152)
(12122152) (12131242) (21231241) (22113151) (11213152) (22122241) (11222242)
(22131331) (11231332) (12113242) (12122332) (12131422) (21231421) (22113331)
(11213332) (22122421) (11222422) (22131511) (11231512) (12113422) (12122512)
(21222511) (12231151) (13122151) (13131241) (11322151) (11331241) (12213151)
(12222241) (12231331) (13113241) (13122331) (11313241) (13131421) (11322331)
(11331421) (12213331) (12222421) (12231511) (13113421) (13122511) (11313421)
(11322511) (21141151) (11132152) (11141242) (21123151) (21132241) (21141331)
(11114152) (11123242) (11132332) (11141422) (21114241) (21123331) (21132421)
(21141511) (11114332) (11123422) (11132512) (11241151) (12132151) (12141241)
(11223151) (11232241) (11241331) (12114151) (12123241) (12132331) (12141421)
(11214241) (11223331) (11232421) (11241511) (12114331) (12123421) (12132511)
(11142151) (11151241) (11124151) (11133241) (11142331) (11151421) (11115241)
(11124331) (11133421) (11142511) (21111253) (41111251) (11111344) (31111342)
(21111433) (41111431) (11111524) (31111522) (21111613) (41111611) (21211162)
(22111252) (11211253) (31211251) (12111343) (32111341) (21211342) (22111432)
(11211433) (31211431) (12111523) (32111521) (21211522) (22111612) (11211613)
(31211611) (22211161) (11311162) (23111251) (12211252) (21311251) (13111342)
(22211341) (11311342) (23111431) (12211432) (21311431) (13111522) (22211521)
(11311522) (23111611) (12211612) (21311611) (12311161) (13211251) (11411251)
(14111341) (12311341) (13211431) (11411431) (14111521) (12311521) (13211611)
(11411611) (31121161) (21112162) (21121252) (11112253) (31112251) (11121343)
(31121341) (21112342) (21121432) (11112433) (31112431) (11121523) (31121521)
(21112522) (21121612) (12121162) (21221161) (22112161) (11212162) (22121251)
(11221252) (12112252) (12121342) (21221341) (22112341) (11212342) (22121431)
(11221432) (12112432) (12121522) (21221521) (22112521) (11212522) (22121611)
(11221612) (13121161) (11321161) (12212161) (12221251) (13112251) (13121341)
(11312251) (11321341) (12212341) (12221431) (13112431) (13121521) (11312431)
(11321521) (12212521) (12221611) (11131162) (21122161) (21131251) (11113162)
]
] def

/parity [
(1001) (0101) (1100) (0011) (1010) (0110) (1111) (0000)
] def

% Derive the bits for each row
/rowbits r array def
0 1 r 1 sub {
/i exch def
/p i r 1 sub ne {parity i get} {(0000)} ifelse def
/ccrow ccs i 8 mul 8 getinterval def
/scrow [
0 2 7 {ccrow exch 2 getinterval aload pop exch 49 mul add} for
] def
/sbs [
10 1 1
0 1 3 {
/j exch def
patterns p j get 48 sub get scrow j get get {48 sub} forall
} for
4 1
] def
mark
1 sbs {1 index 0 eq {{1}} {{0}} ifelse repeat} forall
counttomark 1 sub array astore exch pop exch pop
rowbits i 3 -1 roll put
} for

% Populate the bitmap
/pixs [
81 sepheight mul {1} repeat
0 1 r 2 sub {
/i exch def
rowheight {rowbits i get aload pop} repeat
sepheight {10 {0} repeat 70 {1} repeat 0} repeat
} for
rowheight {rowbits r 1 sub get aload pop} repeat
81 sepheight mul {1} repeat
] def

% Return the arguments
<<
/ren //renmatrix
/pixs pixs
/pixx 81
/pixy pixs length 81 idiv
/height pixs length 81 idiv 72 div
/width 81 72 div
/opt options
>>

dontdraw not //renmatrix if

end

} bind def
/code49 dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER code49--

% --BEGIN ENCODER channelcode--
% --REQUIRES preamble raiseerror renlinear--
% --DESC: Channel Code
% --EXAM: 3493
% --EXOP: height=0.5 includetext
% --RNDR: renlinear
%%BeginResource: QRCODE channelcode 0.0 2015112400 68302 68105
%%BeginData:        149 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
begin
/channelcode {

20 dict begin                 % Confine variables to local scope

/options exch def       % We are given an option string
/barcode exch def       % We are given a barcode string

/dontdraw false def
/shortfinder false def
/includetext false def
/includecheck false def
/height 1 def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/height height cvr def

% Validate the input
barcode length 2 lt barcode length 7 gt or {
/bwipp.channelcodeBadLength (Channel Code must be 2 to 7 digits) //raiseerror exec
} if
barcode {
dup 48 lt exch 57 gt or {
/bwipp.channelcodeBadCharacter (Channel Code must contain only digits) //raiseerror exec
} if
} forall
barcode cvi [ 26 292 3493 44072 576688 7742862 ] barcode length 2 sub get gt {
/bwipp.channelcodeTooBig (The Channel Code value is too big for the number of channels) //raiseerror exec
} if

/nextb {
dup
dup s exch get exch
dup b exch 1 sub get exch
dup s exch 1 sub get exch
b exch 2 sub get exch
add add add 4 gt {1} {2} ifelse
1 index chan 2 add lt {
dup 1 4 index {
b 3 index 2 index put
3 index exch sub 1 add 4 index 3 index 1 add nexts
} for
} {
dup 3 index le {
b 2 index 4 index put
value target eq {
/out [
3 1 10 {dup s exch get exch b exch get} for
] 0 chan 2 mul getinterval def
} if
/value value 1 add def
} if
} ifelse
pop pop pop pop
} bind def

/nexts {
dup chan 2 add lt {1} {1 index} ifelse 1 3 index {
s 2 index 2 index put
2 index exch sub 1 add 3 index 2 index nextb
} for
pop pop pop
} bind def

/encode {
/chan exch def
/target exch def
/value 0 def
/out -1 def
/b [ 1 1 1 0 0 0 0 0 0 0 0 ] def
/s [ 0 1 1 0 0 0 0 0 0 0 0 ] def
chan dup 3 nexts
out
} bind def

/barlen barcode length def

% Determine finder
/finder shortfinder { [ 1 1 1 1 1 ] } { [ 1 1 1 1 1 1 1 1 1 ] } ifelse def

% Encode the main data
/data barcode cvi barlen 1 add encode def

% Determine check data
/check [] def
includecheck {
/mod23 [
[] []
[ 13 12  4  9  3  1 ]
[ 13  2 12  3 18 16  4  1 ]
[ 11 16 17  8 20  4 10  2  5  1 ]
[  1  4 16 18  3 12  2  8  9 13  6  1 ]
[ 20 16 22 13 15 12  5  4  8  9 21  3  7  1 ]
[  2  6 18  8  1  3  9  4 12 13 16  2  6 18  8  1 ]
] barlen get def
0
0 1 data length 1 sub {
dup data exch get 1 sub exch mod23 exch get mul add
} for
23 mod 3 encode /check exch def
} if

% Construct the symbol
/sbs [
finder aload pop
data aload pop
check aload pop
] def

% Create the human readable text
/txt barlen array def
0 1 barlen 1 sub {
/i exch def
txt i [barcode i 1 getinterval 0 0 () 0] put
} for

% Return the arguments
<<
/ren //renlinear
/sbs sbs
/bhs [sbs length 1 add 2 idiv {height} repeat]
/bbs [sbs length 1 add 2 idiv {0} repeat]
/txt txt
/textxalign (center)
/opt options
>>

dontdraw not //renlinear if

end

} bind def
/channelcode dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER channelcode--

% --BEGIN ENCODER flattermarken--
% --REQUIRES preamble raiseerror renlinear--
% --DESC: Flattermarken
% --EXAM: 11099
% --EXOP: inkspread=-0.25 showborder borderleft=0 borderright=0
% --RNDR: renlinear
%%BeginResource: QRCODE flattermarken 0.0 2015112400 59248 59148
%%BeginData:         93 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
begin
/flattermarken {

20 dict begin                 % Confine variable to local scope

/options exch def       % We are given an option string
/barcode exch def       % We are given a barcode string

/dontdraw false def
/includetext false def   % Enable/disable text
/textfont /Courier def
/textsize 8 def
/textyoffset -7 def
/height 0.3 def

% Validate the input
barcode {
dup 48 lt exch 57 gt or {
/bwipp.flattermarkenBadCharacter (Flattermarken must contain only digits) //raiseerror exec
} if
} forall

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/textfont textfont cvlit def
/textsize textsize cvr def
/textyoffset textyoffset cvr def
/height height cvr def

% Validate the input
barcode {
dup 48 lt exch 57 gt or {
/bwipp.flattermarkenBadCharacter (Flattermarken must contain only digits) //raiseerror exec
} if
} forall

% Create an array containing the character mappings
/encs
[ (0018) (0117) (0216) (0315) (0414) (0513) (0612) (0711) (0810)
(0900)
] def

% Create a string of the available characters
/barchars (1234567890) def

/barlen barcode length def            % Length of the code

/sbs barlen 4 mul string def
/txt barlen array def

0 1 barlen 1 sub {
/i exch def
% Lookup the encoding for the each barcode character
barcode i 1 getinterval barchars exch search
pop                                 % Discard true leaving pre
length /indx exch def               % indx is the length of pre
pop pop                             % Discard seek and post
/enc encs indx get def              % Get the indxth encoding
sbs i 4 mul enc putinterval         % Put encoded digit into sbs
txt i [barcode i 1 getinterval i 9 mul textyoffset textfont textsize] put
} for

% Return the arguments
<<
/ren //renlinear
/sbs [sbs {48 sub} forall]
/bhs [sbs length 1 add 2 idiv {height} repeat]
/bbs [sbs length 1 add 2 idiv {0} repeat]
/txt txt
/opt options
>>

dontdraw not //renlinear if

end

} bind def
/flattermarken dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER flattermarken--

% --BEGIN ENCODER raw--
% --REQUIRES preamble raiseerror renlinear--
% --DESC: Custom 1D symbology
% --EXAM: 331132131313411122131311333213114131131221323
% --EXOP: height=0.5
% --RNDR: renlinear
%%BeginResource: QRCODE raw 0.0 2015112400 55514 55371
%%BeginData:         52 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
begin
/raw {

20 dict begin                  % Confine variables to local scope

/options exch def        % We are given an option string
/barcode exch def        % We are given a barcode string

/dontdraw false def
/height 1 def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/height height cvr def

% Validate input
barcode {
dup 49 lt exch 57 gt or {
/bwipp.rawBadCharacter (Raw must contain only digits 1 to 9) //raiseerror exec
} if
} forall

% Return the arguments
<<
/ren //renlinear
/sbs [barcode {48 sub} forall]
/bhs [barcode length 1 add 2 idiv {height} repeat]
/bbs [barcode length 1 add 2 idiv {0} repeat]
/opt options
>>

dontdraw not //renlinear if

end

} bind def
/raw dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER raw--

% --BEGIN ENCODER daft--
% --REQUIRES preamble raiseerror renlinear--
% --DESC: Custom 4 state symbology
% --EXAM: FATDAFTDAD
% --EXOP:
% --RNDR: renlinear
%%BeginResource: QRCODE daft 0.0 2015112400 58288 58222
%%BeginData:         76 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
begin
/daft {

20 dict begin

/options exch def              % We are given an option string
/barcode exch def              % We are given a barcode string

/dontdraw false def
/height 0.175 def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/height height cvr def

barcode {
dup 68 ne exch dup 65 ne exch dup 70 ne exch 84 ne and and and {
/bwipp.daftBadCharacter (DAFT must contain only characters D, A, F and T) //raiseerror exec
} if
} forall

/barlen barcode length def

/bbs barlen array def
/bhs barlen array def
0 1 barlen 1 sub {
/i exch def
/enc barcode i 1 getinterval def
enc (D) eq {
bbs i 0 height mul 8 div put
bhs i 5 height mul 8 div put
} if
enc (A) eq {
bbs i 3 height mul 8 div put
bhs i 5 height mul 8 div put
} if
enc (F) eq {
bbs i 0 height mul 8 div put
bhs i 8 height mul 8 div put
} if
enc (T) eq {
bbs i 3 height mul 8 div put
bhs i 2 height mul 8 div put
} if
} for

% Return the arguments
<<
/ren //renlinear
/bbs bbs
/bhs bhs
/sbs [bhs length 1 sub {1.44 1.872} repeat 1.44]
/opt options
>>

dontdraw not //renlinear if

end

} bind def
/daft dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER daft--

% --BEGIN ENCODER symbol--
% --REQUIRES preamble raiseerror renlinear--
% --DESC: Miscellaneous symbols
% --EXAM: fima
% --EXOP: backgroundcolor=DD000011
% --RNDR: renlinear
%%BeginResource: QRCODE symbol 0.0 2015112400 58044 57965
%%BeginData:         72 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
begin
/symbol {

20 dict begin            % Confine variables to local scope

/options exch def  % We are given an option string
/barcode exch def  % We are given a barcode string

/dontdraw false def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/symbols <<
/fima {
/sbs [2.25 2.25 2.25 11.25 2.25 11.25 2.25 2.25 2.25] def
/bhs [.625 .625 .625 .625 .625] def
/bbs [0 0 0 0 0] def
} bind
/fimb {
/sbs [2.25 6.75 2.25 2.25 2.25 6.25 2.25 2.25 2.25 6.75 2.25] def
/bhs [.625 .625 .625 .625 .625 .625] def
/bbs [0 0 0 0 0 0] def
} bind
/fimc {
/sbs [2.25 2.25 2.25 6.75 2.25 6.75 2.25 6.75 2.25 2.25 2.25] def
/bhs [.625 .625 .625 .625 .625 .625] def
/bbs [0 0 0 0 0 0] def
} bind
/fimd {
/sbs [2.25 2.25 2.25 2.25 2.25 6.75 2.25 6.75 2.25 2.25 2.25 2.25 2.25] def
/bhs [.625 .625 .625 .625 .625 .625 .625] def
/bbs [0 0 0 0 0 0 0] def
} bind
>> def

% Valiate input
symbols barcode known not {
/bwipp.symbolUnknownSymbol (Unknown symbol name provided) //raiseerror exec
} if

symbols barcode get exec

% Return the arguments
<<
/ren //renlinear
/sbs sbs
/bhs bhs
/bbs bbs
/opt options
>>

dontdraw not //renlinear if

end

} bind def
/symbol dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER symbol--

% --BEGIN ENCODER pdf417--
% --REQUIRES preamble raiseerror renmatrix--
% --DESC: PDF417
% --EXAM: This is PDF417
% --EXOP: columns=2
% --RNDR: renmatrix
%%BeginResource: QRCODE pdf417 0.0 2015112400 188276 197810
%%BeginData:        873 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renmatrix dup /QRCODE findresource put
begin
/pdf417 {

20 dict begin

/options exch def
/barcode exch def

/dontdraw false def
/compact false def
/eclevel -1 def
/columns 0 def
/rows 0 def
/rowmult 3 def
/encoding (auto) def
/ccc false def
/raw false def
/parse false def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/eclevel eclevel cvi def
/columns columns cvi def
/rows rows cvi def
/rowmult rowmult cvr def

% Parse ordinals of the form ^NNN to ASCII
parse {
/msg barcode length string def
/j 0 def
barcode
{ % loop
(^) search {
dup msg exch j exch putinterval
length j add 1 add /j exch def
pop
dup 0 3 getinterval cvi msg exch j 1 sub exch put
dup length 3 sub 3 exch getinterval
} {
dup msg exch j exch putinterval
length j add /j exch def
/barcode msg 0 j getinterval def
exit
} ifelse
} loop
} if

raw {/encoding (raw) def} if

% Convert input into array of codewords
encoding (raw) eq {
/datcws barcode length array def
/i 0 def /j 0 def
{ % loop
i barcode length eq {exit} if
/cw barcode i 1 add 3 getinterval cvi def
datcws j cw put
/i i 4 add def
/j j 1 add def
} loop
/datcws datcws 0 j getinterval def
} if

/barcode [ barcode {} forall ] def
/barlen barcode length def

ccc {/encoding (ccc) def} if

/encb {
/in exch def
/inlen in length def
/out inlen 6 idiv 5 mul inlen 6 mod add array def
0 1 inlen 6 idiv 1 sub {
/k exch def
/msbs [ in k 6 mul 3 getinterval aload pop ] def
/mscs [
msbs aload pop exch 256 mul add exch 65536 mul add
3 {dup 900 mod exch 900 idiv} repeat
] def
/lsbs [ in k 6 mul 3 add 3 getinterval aload pop ] def
/lscs [
lsbs aload pop exch 256 mul add exch 65536 mul add
3 {dup 900 mod exch 900 idiv} repeat
] def
lscs 0 get mscs 0 get 316 mul add
out k 5 mul 4 add 2 index 900 mod put
900 idiv lscs 1 get add mscs 0 get 641 mul add mscs 1 get 316 mul add
out k 5 mul 3 add 2 index 900 mod put
900 idiv lscs 2 get add mscs 0 get 20 mul add mscs 1 get 641 mul add mscs 2 get 316 mul add
out k 5 mul 2 add 2 index 900 mod put
900 idiv lscs 3 get add mscs 1 get 20 mul add mscs 2 get 641 mul add
out k 5 mul 1 add 2 index 900 mod put
900 idiv mscs 2 get 20 mul add
out k 5 mul 3 -1 roll 900 mod put
} for
/rem inlen 6 mod def
rem 0 ne {
out out length rem sub
[ in inlen rem sub rem getinterval aload pop ]
putinterval
} if
out
} bind def

encoding (byte) eq encoding (ccc) eq or {
/datcws barlen 6 idiv 5 mul barlen 6 mod add 1 add array def
datcws 0 barlen 6 mod 0 eq {924} {901} ifelse put
datcws 1 barcode encb putinterval
encoding (ccc) eq {/datcws [920 datcws aload pop] def} if
} if

encoding (auto) eq {

% Modes and text submodes
/T 0 def  /N 1 def  /B 2 def
/A 0 def  /L 1 def  /M 2 def  /P 3 def

% Special function characters for mode switching
/tl -1 def  /nl -2 def  /bl -3 def  /bl6 -4 def  /bs -5 def

% Special function characters for text mode
/al -6 def  /ll -7 def  /ml -8 def  /pl -9 def  /as -10 def  /ps -11 def

% Character maps for each state
/charmaps [
%  A    L    M    P
[ (A)  (a)  (0)  (;) ]  % 0
[ (B)  (b)  (1)  (<) ]  % 1
[ (C)  (c)  (2)  (>) ]  % 2
[ (D)  (d)  (3)  (@) ]  % 3
[ (E)  (e)  (4)  ([) ]  % 4
[ (F)  (f)  (5)   92 ]  % 5
[ (G)  (g)  (6)  (]) ]  % 6
[ (H)  (h)  (7)  (_) ]  % 7
[ (I)  (i)  (8)  (`) ]  % 8
[ (J)  (j)  (9)  (~) ]  % 9
[ (K)  (k)  (&)  (!) ]  % 10
[ (L)  (l)   13   13 ]  % 11
[ (M)  (m)    9    9 ]  % 12
[ (N)  (n)  (,)  (,) ]  % 13
[ (O)  (o)  (:)  (:) ]  % 14
[ (P)  (p)  (#)   10 ]  % 15
[ (Q)  (q)  (-)  (-) ]  % 16
[ (R)  (r)  (.)  (.) ]  % 17
[ (S)  (s)  ($)  ($) ]  % 18
[ (T)  (t)  (/)  (/) ]  % 19
[ (U)  (u)  (+)  (") ]  % 20
[ (V)  (v)  (%)  (|) ]  % 21
[ (W)  (w)  (*)  (*) ]  % 22
[ (X)  (x)  (=)   40 ]  % 23
[ (Y)  (y)  (^)   41 ]  % 24
[ (Z)  (z)   pl  (?) ]  % 25
[ ( )  ( )  ( )  ({) ]  % 26
[  ll   as   ll  (}) ]  % 27
[  ml   ml   al  (') ]  % 28
[  ps   ps   ps   al ]  % 29
] def

% Invert charmaps to give character to value maps for each state
/charvals [ 30 dict 30 dict 30 dict 30 dict ] def
/alltext 104 dict def
0 1 charmaps length 1 sub {
/i exch def
/encs charmaps i get def
0 1 3 {
/j exch def
encs j get dup type /stringtype eq {0 get} if  % convert string to ASCII if required
dup charvals j get exch i put
alltext exch -1 put
} for
} for

/e 10000 def  % "Empty"

/latlen [  % Bit length of latch between submodes
% To:  A  L  M  P      From
[  0  1  1  2 ]  % A
[  2  0  1  2 ]  % L
[  1  1  0  1 ]  % M
[  1  2  2  0 ]  % P
] def

/latseq [  % Latch sequences between submodes
% To: A       L       M       P               From
[ []      [ll]    [ml]    [ml pl]    ]  % A
[ [ml al] []      [ml]    [ml pl]    ]  % L
[ [al]    [ll]    []      [pl]       ]  % M
[ [al]    [al ll] [al ml] []         ]  % P
] def

/shftlen [  % Bit length of shift to submode
% To:  A  L  M  P      From
[  e  e  e  1 ]  % A
[  1  e  e  1 ]  % L
[  e  e  e  1 ]  % M
[  e  e  e  e ]  % P
] def

% Determine runlengths of digits
/numdigits [ barlen {0} repeat 0 ] def
/numtext   [ barlen {0} repeat 0 ] def
/numbytes  [ barlen {0} repeat 0 ] def
barlen 1 sub -1 0 {
/i exch def
barcode i get dup 48 ge exch 57 le and {
numdigits i numdigits i 1 add get 1 add put
} if
alltext barcode i get known numdigits i get 13 lt and {
numtext i numtext i 1 add get 1 add put
} if
numtext i get 5 lt numdigits i get 13 lt and {
numbytes i numbytes i 1 add get 1 add put
} if
} for
/numdigits numdigits 0 barlen getinterval def
/numtext   numtext   0 barlen getinterval def
/numbytes  numbytes  0 barlen getinterval def

/seq [] def /seqlen 0 def /state T def /p 0 def {  % loop
p barlen eq {exit} if
/n numdigits p get def
n 13 ge {
/seq [
seq aload pop
nl
[ barcode p n getinterval aload pop ]
] def
/state N def
/p p n add def
/seqlen seqlen 1 add n add def
} {  % next
/t numtext p get def
t 5 ge {
/seq [
seq aload pop
state T ne {tl} if
[ barcode p t getinterval aload pop ]
] def
/state T def
/p p t add def
/seqlen seqlen 1 add t add def  % ish
} {  % next
/b numbytes p get def
b 1 eq state T eq and {
/seq [
seq aload pop
bs
[ barcode p get ]
] def
/p p b add def
/seqlen seqlen 2 add def
} {  % next
/seq [
seq aload pop
b 6 mod 0 ne {bl} {bl6} ifelse
[ barcode p b getinterval aload pop ]
] def
/state B def
/p p b add def
/seqlen seqlen 1 add b add def
} ifelse } ifelse } ifelse
} loop

/latchcws <<
tl 900  bl 901  bl6 924  nl 902  bs 913
>> def

% Submode encoding functions
/enca {charvals A get exch get} bind def
/encl {charvals L get exch get} bind def
/encm {charvals M get exch get} bind def
/encp {charvals P get exch get} bind def
/textencfuncs [ /enca /encl /encm /encp ] def

/addtotext {
text exch l exch put
/l l 1 add def
} bind def

/enct {

/in exch def

/curlen [  e  e  e  e ] def
curlen submode 0 put
/curseq [ [] [] [] [] ] def

% Derive the optimal sequences ending in each submode
in {

/char exch def

% Check for optimisations in the current sequences by latching from x to y
{  % loop
/imp false def
[ A L M P ] {
/x exch def
[ A L M P ] {
/y exch def
/cost curlen x get latlen x get y get add def
cost curlen y get lt {
curlen y cost put
curseq y [
curseq x get aload pop
latseq x get y get aload pop
] put
/imp true def
} if
} forall
} forall
imp not {exit} if  % Repeat unless no improvement
} loop

% Determine optimal next sequences for each valid encoding
/nxtlen [ e e e e ] def
/nxtseq 4 array def

[ A L M P ] {
/x exch def

{ % loop for common exit

charvals x get char known not {exit} if

% Extend directly
/cost curlen x get 1 add def
cost nxtlen x get lt {
nxtlen x cost put
nxtseq x [ curseq x get aload pop char ] put
} if

% Optimise for direct shifts from y to x
[ A L M P ] {
/y exch def
x y ne {
/cost curlen y get shftlen y get x get add 1 add def
cost nxtlen y get lt {
nxtlen y cost put
nxtseq y [
curseq y get aload pop
x A eq {as} {ps} ifelse
char
] put
} if
} if
} forall

exit
} loop

} forall

/curlen nxtlen def
/curseq nxtseq def

} forall

% Select the optimal sequence
/minseq e def
[ A L M P ] {
/k exch def
curlen k get minseq lt {
/minseq curlen k get def
/txtseq curseq k get def
} if
} forall

% Encode the sequence
/text minseq array def
/k 0 def /l 0 def {
k txtseq length ge {exit} if

/char txtseq k get def

% Encode character
char textencfuncs submode get load exec addtotext
/k k 1 add def

% Encode shifted next character
char as eq char ps eq or {
txtseq k get char as eq {enca} {encp} ifelse addtotext
/k k 1 add def
} if

% Latches to new submode
char al eq {/submode A def} if
char ll eq {/submode L def} if
char ml eq {/submode M def} if
char pl eq {/submode P def} if
} loop

text length 2 mod 1 eq {
submode P eq {
/pad al encp def
/submode A def
} {
/pad ps textencfuncs submode get load exec def
} ifelse
/text [ text aload pop pad ] def
} if

/out text length 2 idiv array def
0 1 out length 1 sub {
/k exch def
out k text k 2 mul get 30 mul text k 2 mul 1 add get add put
} for

out

} bind def

/encn {
/in exch def
/out [] def
0 44 in length 1 sub {
/k exch def
/gmod [
1 in k in length k sub dup 44 gt {pop 44} if getinterval
{48 sub} forall
] def
/cwn [] def {
/dv 900 def
/gmul [] def /val 0 def {
gmod length 0 eq {exit} if
/val val 10 mul gmod 0 get add def
/gmod gmod 1 gmod length 1 sub getinterval def
val dv lt {
gmul length 0 ne {
/gmul [ gmul aload pop 0 ] def
} if
} {
/gmul [ gmul aload pop val dv idiv ] def
} ifelse
/val val dv mod def
} loop
/dv val def
/cwn [ dv cwn aload pop ] def
/gmod gmul def
gmul length 0 eq {exit} if
} loop
/out [ out aload pop cwn aload pop ] def
} for
out
} bind def

/encfuncs [ /enct /encn /encb ] def

/addtocws {
dup datcws j 3 -1 roll putinterval
length j add /j exch def
} bind def

% Encode the sequence
/state T def /submode A def
/datcws seqlen array def
/i 0 def /j 0 def {
i seq length ge {exit} if
/chars seq i get def
chars type /arraytype eq {  % Encode data according to mode
chars encfuncs state get load exec addtocws
} {  % Encode the latch to new state or byte shift
[ latchcws chars get ] addtocws
chars tl eq {/state T def /submode A def} if
chars nl eq {/state N def} if
chars bl eq chars bl6 eq or {/state B def} if
chars bs eq {
/i i 1 add def
seq i get encb addtocws
} if
} ifelse
/i i 1 add def
} loop
/datcws datcws 0 j getinterval def
} if

% Determine the error correction level if unspecified
/m datcws length def
eclevel -1 eq {
m  40 le              {/eclevel 2 def} if
m  41 ge m 160 le and {/eclevel 3 def} if
m 161 ge m 320 le and {/eclevel 4 def} if
m 321 ge              {/eclevel 5 def} if
} if

% Reduce the error level so that it does not cause an excessive number of codewords
/maxeclevel 928 1 sub m sub ln 2 ln div cvi 1 sub def
eclevel maxeclevel gt {/eclevel maxeclevel def} if
/k 2 eclevel 1 add exp cvi def

% To determine size of matrix, number of columns if given by user...
columns 0 eq {/columns m k add 3 div sqrt round cvi def} if
columns 1 ge columns 30 le and {/c columns def} if

% ... and rows is greater of those required and that given by user within limits
/r m k add 1 add columns div ceiling cvi def  % Required
r rows lt rows 90 le and {/r rows def} if
r 3 lt {/r 3 def} if

% Opportunistically raise the error level if a better fit to the matrix is possible
/maxeclevel c r mul 1 sub m sub ln 2 ln div cvi 1 sub 8 2 copy gt {exch} if pop def
maxeclevel eclevel gt {
/eclevel maxeclevel def
/k 2 eclevel 1 add exp cvi def
} if

% Create codewords array with one extra working space element and add padding
/n c r mul k sub def
/cws c r mul 1 add array def
cws 0 n put
cws 1 datcws putinterval
cws m 1 add [ n m sub 1 sub {900} repeat ] putinterval
cws n [ k {0} repeat 0 ] putinterval

% Calculate the log and anti-log tables
/rsalog [ 1 928 {dup 3 mul 929 mod} repeat ] def
/rslog 929 array def
1 1 928 {dup rsalog exch get exch rslog 3 1 roll put} for

% Function to calculate the product in the field
/rsprod {
2 copy 0 ne exch 0 ne and {
rslog exch get exch rslog exch get add 928 mod rsalog exch get
} {
pop pop 0
} ifelse
} bind def

% Generate the coefficients
/coeffs [ 1 k {0} repeat ] def
1 1 k {
/i exch def
coeffs i coeffs i 1 sub get put
i 1 sub -1 1 {
/j exch def
coeffs j coeffs j 1 sub get coeffs j get rsalog i get rsprod add 929 mod put
} for
coeffs 0 coeffs 0 get rsalog i get rsprod put
} for
/coeffs coeffs 0 coeffs length 1 sub getinterval def
coeffs length 1 sub -2 0 {coeffs exch 2 copy get 929 exch sub put} for

% Derive the error codewords
0 1 n 1 sub {
/t exch cws exch get cws n get add 929 mod def
0 1 k 1 sub {
/j exch def
cws n j add cws n j add 1 add get 929 t coeffs k j sub 1 sub get mul 929 mod sub add 929 mod put
} for
} for
n 1 n k add { dup cws exch 929 cws 5 -1 roll get sub 929 mod put } for

% Trim the working space from the end of the codewords
/cws cws 0 cws length 1 sub getinterval def

% Base 10 encoding of the bar space successions for the codewords in each cluster
/clusters [
[
120256 125680 128380 120032 125560 128318 108736 119920 108640  86080 108592  86048
110016 120560 125820 109792 120440 125758  88256 109680  88160  89536 110320 120700
89312 110200 120638  89200 110140  89840 110460  89720 110398  89980 128506 119520
125304 128190 107712 119408 125244 107616 119352  84032 107568 119324  84000 107544
83984 108256 119672 125374  85184 108144 119612  85088 108088 119582  85040 108060
85728 108408 119742  85616 108348  85560 108318  85880 108478  85820  85790 107200
119152 125116 107104 119096 125086  83008 107056 119068  82976 107032  82960  82952
83648 107376 119228  83552 107320 119198  83504 107292  83480  83468  83824 107452
83768 107422  83740  83900 106848 118968 125022  82496 106800 118940  82464 106776
118926  82448 106764  82440 106758  82784 106936 119006  82736 106908  82712 106894
82700  82694 106974  82830  82240 106672 118876  82208 106648 118862  82192 106636
82184 106630  82180  82352  82328  82316  82080 118830 106572 106566  82050 117472
124280 127678 103616 117360 124220 103520 117304 124190  75840 103472  75808 104160
117624 124350  76992 104048 117564  76896 103992  76848  76824  77536 104312 117694
77424 104252  77368  77340  77688 104382  77628  77758 121536 126320 128700 121440
126264 128670 111680 121392 126236 111648 121368 126222 111632 121356 103104 117104
124092 112320 103008 117048 124062 112224 121656 126366  93248  74784 102936 117006
93216 112152  93200  75456 103280 117180  93888  75360 103224 117150  93792 112440
121758  93744  75288  93720  75632 103356  94064  75576 103326  94008 112542  93980
75708  94140  75678  94110 121184 126136 128606 111168 121136 126108 111136 121112
126094 111120 121100 111112 111108 102752 116920 123998 111456 102704 116892  91712
74272 121244 116878  91680  74256 102668  91664 111372 102662  74244  74592 102840
116958  92000  74544 102812  91952 111516 102798  91928  74508  74502  74680 102878
92088  74652  92060  74638  92046  92126 110912 121008 126044 110880 120984 126030
110864 120972 110856 120966 110852 110850  74048 102576 116828  90944  74016 102552
116814  90912 111000 121038  90896  73992 102534  90888 110982  90884  74160 102620
91056  74136 102606  91032 111054  91020  74118  91014  91100  91086 110752 120920
125998 110736 120908 110728 120902 110724 110722  73888 102488 116782  90528  73872
102476  90512 110796 102470  90504  73860  90500  73858  73944  90584  90572  90566
120876 120870 110658 102444  73800  90312  90308  90306 101056 116080 123580 100960
116024  70720 100912 115996  70688 100888  70672  70664  71360 101232 116156  71264
101176 116126  71216 101148  71192  71180  71536 101308  71480 101278  71452  71612
71582 118112 124600 127838 105024 118064 124572 104992 118040 124558 104976 118028
104968 118022 100704 115896 123486 105312 100656 115868  79424  70176 118172 115854
79392 105240 100620  79376  70152  79368  70496 100792 115934  79712  70448 118238
79664 105372 100750  79640  70412  79628  70584 100830  79800  70556  79772  70542
70622  79838 122176 126640 128860 122144 126616 128846 122128 126604 122120 126598
122116 104768 117936 124508 113472 104736 126684 124494 113440 122264 126670 113424
104712 117894 113416 122246 104706  69952 100528 115804  78656  69920 100504 115790
96064  78624 104856 117966  96032 113560 122318 100486  96016  78600 104838  96008
69890  70064 100572  78768  70040 100558  96176  78744 104910  96152 113614  70022
78726  70108  78812  70094  96220  78798 122016 126552 128814 122000 126540 121992
126534 121988 121986 104608 117848 124462 113056 104592 126574 113040 122060 117830
113032 104580 113028 104578 113026  69792 100440 115758  78240  69776 100428  95136
78224 104652 100422  95120 113100  69764  95112  78212  69762  78210  69848 100462
78296  69836  95192  78284  69830  95180  78278  69870  95214 121936 126508 121928
126502 121924 121922 104528 117804 112848 104520 117798 112840 121958 112836 104514
112834  69712 100396  78032  69704 100390  94672  78024 104550  94664 112870  69698
94660  78018  94658  78060  94700  94694 126486 121890 117782 104484 104482  69672
77928  94440  69666  77922  99680  68160  99632  68128  99608 115342  68112  99596
68104  99590  68448  99768 115422  68400  99740  68376  99726  68364  68358  68536
99806  68508  68494  68574 101696 116400 123740 101664 116376 101648 116364 101640
116358 101636  67904  99504 115292  72512  67872 116444 115278  72480 101784 116430
72464  67848  99462  72456 101766  67842  68016  99548  72624  67992  99534  72600
101838  72588  67974  68060  72668  68046  72654 118432 124760 127918 118416 124748
118408 124742 118404 118402 101536 116312 105888 101520 116300 105872 118476 116294
105864 101508 105860 101506 105858  67744  99416  72096  67728 116334  80800  72080
101580  99398  80784 105932  67716  80776  72068  67714  72066  67800  99438  72152
67788  80856  72140  67782  80844  72134  67822  72174  80878 126800 128940 126792
128934 126788 126786 118352 124716 122576 126828 124710 122568 126822 122564 118338
122562 101456 116268 105680 101448 116262 114128 105672 118374 114120 122598 101442
114116 105666 114114  67664  99372  71888  67656  99366  80336  71880 101478  97232
80328 105702  67650  97224 114150  71874  97220  67692  71916  67686  80364  71910
97260  80358  97254 126760 128918 126756 126754 118312 124694 122472 126774 122468
118306 122466 101416 116246 105576 101412 113896 105572 101410 113892 105570 113890
67624  99350  71784 101430  80104  71780  67618  96744  80100  71778  96740  80098
96738  71798  96758 126738 122420 122418 105524 113780 113778  71732  79988  96500
96498  66880  66848  98968  66832  66824  66820  66992  66968  66956  66950  67036
67022 100000  99984 115532  99976 115526  99972  99970  66720  98904  69024 100056
98892  69008 100044  69000 100038  68996  66690  68994  66776  98926  69080 100078
69068  66758  69062  66798  69102 116560 116552 116548 116546  99920 102096 116588
115494 102088 116582 102084  99906 102082  66640  68816  66632  98854  73168  68808
66628  73160  68804  66626  73156  68802  66668  68844  66662  73196  68838  73190
124840 124836 124834 116520 118632 124854 118628 116514 118626  99880 115478 101992
116534 106216 101988  99874 106212 101986 106210  66600  98838  68712  99894  72936
68708  66594  81384  72932  68706  81380  72930  66614  68726  72950  81398 128980
128978 124820 126900 124818 126898 116500 118580 116498 122740 118578 122738  99860
101940  99858 106100 101938 114420
] [
128352 129720 125504 128304 129692 125472 128280 129678 125456 128268 125448 128262
125444 125792 128440 129758 120384 125744 128412 120352 125720 128398 120336 125708
120328 125702 120324 120672 125880 128478 110144 120624 125852 110112 120600 125838
110096 120588 110088 120582 110084 110432 120760 125918  89664 110384 120732  89632
110360 120718  89616 110348  89608 110342  89952 110520 120798  89904 110492  89880
110478  89868  90040 110558  90012  89998 125248 128176 129628 125216 128152 129614
125200 128140 125192 128134 125188 125186 119616 125360 128220 119584 125336 128206
119568 125324 119560 125318 119556 119554 108352 119728 125404 108320 119704 125390
108304 119692 108296 119686 108292 108290  85824 108464 119772  85792 108440 119758
85776 108428  85768 108422  85764  85936 108508  85912 108494  85900  85894  85980
85966 125088 128088 129582 125072 128076 125064 128070 125060 125058 119200 125144
128110 119184 125132 119176 125126 119172 119170 107424 119256 125166 107408 119244
107400 119238 107396 107394  83872 107480 119278  83856 107468  83848 107462  83844
83842  83928 107502  83916  83910  83950 125008 128044 125000 128038 124996 124994
118992 125036 118984 125030 118980 118978 106960 119020 106952 119014 106948 106946
82896 106988  82888 106982  82884  82882  82924  82918 124968 128022 124964 124962
118888 124982 118884 118882 106728 118902 106724 106722  82408 106742  82404  82402
124948 124946 118836 118834 106612 106610 124224 127664 129372 124192 127640 129358
124176 127628 124168 127622 124164 124162 117568 124336 127708 117536 124312 127694
117520 124300 117512 124294 117508 117506 104256 117680 124380 104224 117656 124366
104208 117644 104200 117638 104196 104194  77632 104368 117724  77600 104344 117710
77584 104332  77576 104326  77572  77744 104412  77720 104398  77708  77702  77788
77774 128672 129880  93168 128656 129868  92664 128648 129862  92412 128644 128642
124064 127576 129326 126368 124048 129902 126352 128716 127558 126344 124036 126340
124034 126338 117152 124120 127598 121760 117136 124108 121744 126412 124102 121736
117124 121732 117122 121730 103328 117208 124142 112544 103312 117196 112528 121804
117190 112520 103300 112516 103298 112514  75680 103384 117230  94112  75664 103372
94096 112588 103366  94088  75652  94084  75650  75736 103406  94168  75724  94156
75718  94150  75758 128592 129836  91640 128584 129830  91388 128580  91262 128578
123984 127532 126160 123976 127526 126152 128614 126148 123970 126146 116944 124012
121296 116936 124006 121288 126182 121284 116930 121282 102864 116972 111568 102856
116966 111560 121318 111556 102850 111554  74704 102892  92112  74696 102886  92104
111590  92100  74690  92098  74732  92140  74726  92134 128552 129814  90876 128548
90750 128546 123944 127510 126056 128566 126052 123938 126050 116840 123958 121064
116836 121060 116834 121058 102632 116854 111080 121078 111076 102626 111074  74216
102646  91112  74212  91108  74210  91106  74230  91126 128532  90494 128530 123924
126004 123922 126002 116788 120948 116786 120946 102516 110836 102514 110834  73972
90612  73970  90610 128522 123914 125978 116762 120890 102458 110714 123552 127320
129198 123536 127308 123528 127302 123524 123522 116128 123608 127342 116112 123596
116104 123590 116100 116098 101280 116184 123630 101264 116172 101256 116166 101252
101250  71584 101336 116206  71568 101324  71560 101318  71556  71554  71640 101358
71628  71622  71662 127824 129452  79352 127816 129446  79100 127812  78974 127810
123472 127276 124624 123464 127270 124616 127846 124612 123458 124610 115920 123500
118224 115912 123494 118216 124646 118212 115906 118210 100816 115948 105424 100808
115942 105416 118246 105412 100802 105410  70608 100844  79824  70600 100838  79816
105446  79812  70594  79810  70636  79852  70630  79846 129960  95728 113404 129956
95480 113278 129954  95356  95294 127784 129430  78588 128872 129974  95996  78462
128868 127778  95870 128866 123432 127254 124520 123428 126696 128886 123426 126692
124514 126690 115816 123446 117992 115812 122344 117988 115810 122340 117986 122338
100584 115830 104936 100580 113640 104932 100578 113636 104930 113634  70120 100598
78824  70116  96232  78820  70114  96228  78818  96226  70134  78838 129940  94968
113022 129938  94844  94782 127764  78206 128820 127762  95102 128818 123412 124468
123410 126580 124466 126578 115764 117876 115762 122100 117874 122098 100468 104692
100466 113140 104690 113138  69876  78324  69874  95220  78322  95218 129930  94588
94526 127754 128794 123402 124442 126522 115738 117818 121978 100410 104570 112890
69754  78074  94714  94398 123216 127148 123208 127142 123204 123202 115408 123244
115400 123238 115396 115394  99792 115436  99784 115430  99780  99778  68560  99820
68552  99814  68548  68546  68588  68582 127400 129238  72444 127396  72318 127394
123176 127126 123752 123172 123748 123170 123746 115304 123190 116456 115300 116452
115298 116450  99560 115318 101864  99556 101860  99554 101858  68072  99574  72680
68068  72676  68066  72674  68086  72694 129492  80632 105854 129490  80508  80446
127380  72062 127924 127378  80766 127922 123156 123700 123154 124788 123698 124786
115252 116340 115250 118516 116338 118514  99444 101620  99442 105972 101618 105970
67828  72180  67826  80884  72178  80882  97008 114044  96888 113982  96828  96798
129482  80252 130010  97148  80190  97086 127370 127898 128954 123146 123674 124730
126842 115226 116282 118394 122618  99386 101498 105722 114170  67706  71930  80378
96632 113854  96572  96542  80062  96702  96444  96414  96350 123048 123044 123042
115048 123062 115044 115042  99048 115062  99044  99042  67048  99062  67044  67042
67062 127188  68990 127186 123028 123316 123026 123314 114996 115572 114994 115570
98932 100084  98930 100082  66804  69108  66802  69106 129258  73084  73022 127178
127450 123018 123290 123834 114970 115514 116602  98874  99962 102138  66682  68858
73210  81272 106174  81212  81182  72894  81342  97648 114364  97592 114334  97564
97550  81084  97724  81054  97694  97464 114270  97436  97422  80990  97502  97372
97358  97326 114868 114866  98676  98674  66292  66290 123098 114842 115130  98618
99194  66170  67322  69310  73404  73374  81592 106334  81564  81550  73310  81630
97968 114524  97944 114510  97932  97926  81500  98012  81486  97998  97880 114478
97868  97862  81454  97902  97836  97830  69470  73564  73550  81752 106414  81740
81734  73518  81774  81708  81702
] [
109536 120312  86976 109040 120060  86496 108792 119934  86256 108668  86136 129744
89056 110072 129736  88560 109820 129732  88312 109694 129730  88188 128464 129772
89592 128456 129766  89340 128452  89214 128450 125904 128492 125896 128486 125892
125890 120784 125932 120776 125926 120772 120770 110544 120812 110536 120806 110532
84928 108016 119548  84448 107768 119422  84208 107644  84088 107582  84028 129640
85488 108284 129636  85240 108158 129634  85116  85054 128232 129654  85756 128228
85630 128226 125416 128246 125412 125410 119784 125430 119780 119778 108520 119798
108516 108514  83424 107256 119166  83184 107132  83064 107070  83004  82974 129588
83704 107390 129586  83580  83518 128116  83838 128114 125172 125170 119284 119282
107508 107506  82672 106876  82552 106814  82492  82462 129562  82812  82750 128058
125050 119034  82296 106686  82236  82206  82366  82108  82078  76736 103920 117500
76256 103672 117374  76016 103548  75896 103486  75836 129384  77296 104188 129380
77048 104062 129378  76924  76862 127720 129398  77564 127716  77438 127714 124392
127734 124388 124386 117736 124406 117732 117730 104424 117750 104420 104418 112096
121592 126334  92608 111856 121468  92384 111736 121406  92272 111676  92216 111646
92188  75232 103160 117118  93664  74992 103036  93424 112252 102974  93304  74812
93244  74782  93214 129332  75512 103294 129908 129330  93944  75388 129906  93820
75326  93758 127604  75646 128756 127602  94078 128754 124148 126452 124146 126450
117236 121844 117234 121842 103412 103410  91584 111344 121212  91360 111224 121150
91248 111164  91192 111134  91164  91150  74480 102780  91888  74360 102718  91768
111422  91708  74270  91678 129306  74620 129850  92028  74558  91966 127546 128634
124026 126202 116986 121338 102906  90848 110968 121022  90736 110908  90680 110878
90652  90638  74104 102590  91000  74044  90940  74014  90910  74174  91070  90480
110780  90424 110750  90396  90382  73916  90556  73886  90526  90296 110686  90268
90254  73822  90334  90204  90190  71136 101112 116094  70896 100988  70776 100926
70716  70686 129204  71416 101246 129202  71292  71230 127348  71550 127346 123636
123634 116212 116210 101364 101362  79296 105200 118140  79072 105080 118078  78960
105020  78904 104990  78876  78862  70384 100732  79600  70264 100670  79480 105278
79420  70174  79390 129178  70524 129466  79740  70462  79678 127290 127866 123514
124666 115962 118266 100858 113376 122232 126654  95424 113264 122172  95328 113208
122142  95280 113180  95256 113166  95244  78560 104824 117950  95968  78448 104764
95856 113468 104734  95800  78364  95772  78350  95758  70008 100542  78712  69948
96120  78652  69918  96060  78622  96030  70078  78782  96190  94912 113008 122044
94816 112952 122014  94768 112924  94744 112910  94732  94726  78192 104636  95088
78136 104606  95032 113054  95004  78094  94990  69820  78268  69790  95164  78238
95134  94560 112824 121950  94512 112796  94488 112782  94476  94470  78008 104542
94648  77980  94620  77966  94606  69726  78046  94686  94384 112732  94360 112718
94348  94342  77916  94428  77902  94414  94296 112686  94284  94278  77870  94318
94252  94246  68336  99708  68216  99646  68156  68126  68476  68414 127162 123258
115450  99834  72416 101752 116414  72304 101692  72248 101662  72220  72206  67960
99518  72568  67900  72508  67870  72478  68030  72638  80576 105840 118460  80480
105784 118430  80432 105756  80408 105742  80396  80390  72048 101564  80752  71992
101534  80696  71964  80668  71950  80654  67772  72124  67742  80828  72094  80798
114016 122552 126814  96832 113968 122524  96800 113944 122510  96784 113932  96776
113926  96772  80224 105656 118366  97120  80176 105628  97072 114076 105614  97048
80140  97036  80134  97030  71864 101470  80312  71836  97208  80284  71822  97180
80270  97166  67678  71902  80350  97246  96576 113840 122460  96544 113816 122446
96528 113804  96520 113798  96516  96514  80048 105564  96688  80024 105550  96664
113870  96652  80006  96646  71772  80092  71758  96732  80078  96718  96416 113752
122414  96400 113740  96392 113734  96388  96386  79960 105518  96472  79948  96460
79942  96454  71726  79982  96494  96336 113708  96328 113702  96324  96322  79916
96364  79910  96358  96296 113686  96292  96290  79894  96310  66936  99006  66876
66846  67006  68976 100028  68920  99998  68892  68878  66748  69052  66718  69022
73056 102072 116574  73008 102044  72984 102030  72972  72966  68792  99934  73144
68764  73116  68750  73102  66654  68830  73182  81216 106160 118620  81184 106136
118606  81168 106124  81160 106118  81156  81154  72880 101980  81328  72856 101966
81304 106190  81292  72838  81286  68700  72924  68686  81372  72910  81358 114336
122712 126894 114320 122700 114312 122694 114308 114306  81056 106072 118574  97696
81040 106060  97680 114380 106054  97672  81028  97668  81026  97666  72792 101934
81112  72780  97752  81100  72774  97740  81094  97734  68654  72814  81134  97774
114256 122668 114248 122662 114244 114242  80976 106028  97488  80968 106022  97480
114278  97476  80962  97474  72748  81004  72742  97516  80998  97510 114216 122646
114212 114210  80936 106006  97384  80932  97380  80930  97378  72726  80950  97398
114196 114194  80916  97332  80914  97330  66236  66206  67256  99166  67228  67214
66142  67294  69296 100188  69272 100174  69260  69254  67164  69340  67150  69326
73376 102232 116654  73360 102220  73352 102214  73348  73346  69208 100142  73432
102254  73420  69190  73414  67118  69230  73454 106320 118700 106312 118694 106308
106306  73296 102188  81616 106348 102182  81608  73284  81604  73282  81602  69164
73324  69158  81644  73318  81638 122792 126934 122788 122786 106280 118678 114536
106276 114532 106274 114530  73256 102166  81512  73252  98024  81508  73250  98020
81506  98018  69142  73270  81526  98038 122772 122770 106260 114484 106258 114482
73236  81460  73234  97908  81458  97906 122762 106250 114458  73226  81434  97850
66396  66382  67416  99246  67404  67398  66350  67438  69456 100268  69448 100262
69444  69442  67372  69484  67366  69478 102312 116694 102308 102306  69416 100246
73576 102326  73572  69410  73570  67350  69430  73590 118740 118738 102292 106420
102290 106418  69396  73524  69394  81780  73522  81778 118730 102282 106394  69386
73498  81722  66476  66470  67496  99286  67492  67490  66454  67510 100308 100306
67476  69556  67474  69554 116714
]
] def

% Return the 17 bits for a codeword in a given cluster
/cwtobits {
clusters exch get exch get /v exch def
[ 17 {0} repeat v 2 17 string cvrs {48 sub} forall ]
dup length 17 sub 17 getinterval
} bind def

% Populate bitmap for the image
compact {
/rwid 17 c mul 17 add 17 add 1 add def
} {
/rwid 17 c mul 17 add 17 add 17 add 18 add def
} ifelse
/pixs rwid r mul array def

0 1 r 1 sub {
/i exch def

i 3 mod 0 eq {
/lcw i 3 idiv 30 mul r 1 sub 3 idiv add def
/rcw i 3 idiv 30 mul c add 1 sub def
} if
i 3 mod 1 eq {
/lcw i 3 idiv 30 mul eclevel 3 mul add r 1 sub 3 mod add def
/rcw i 3 idiv 30 mul r 1 sub 3 idiv add def
} if
i 3 mod 2 eq {
/lcw i 3 idiv 30 mul c add 1 sub def
/rcw i 3 idiv 30 mul eclevel 3 mul add r 1 sub 3 mod add def
} if

pixs rwid i mul [
1 1 1 1 1 1 1 1 0 1 0 1 0 1 0 0 0
lcw i 3 mod cwtobits {} forall
cws c i mul c getinterval { i 3 mod cwtobits {} forall } forall
compact {
1
} {
rcw i 3 mod cwtobits {} forall
1 1 1 1 1 1 1 0 1 0 0 0 1 0 1 0 0 1
} ifelse
] putinterval

} for

% Return the arguments
<<
/ren //renmatrix
/pixs pixs
/pixx rwid
/pixy r
/height r 72 div rowmult mul
/width rwid 72 div
/opt options
>>

dontdraw not //renmatrix if

end

} bind def
/pdf417 dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER pdf417--

% --BEGIN ENCODER pdf417compact--
% --REQUIRES preamble raiseerror renmatrix pdf417--
% --DESC: Compact PDF417
% --EXAM: This is compact PDF417
% --EXOP: columns=2
% --RNDR: renmatrix
%%BeginResource: QRCODE pdf417compact 0.0 2015112400 60668 60355
%%BeginData:         43 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renmatrix dup /QRCODE findresource put
dup /pdf417 dup /QRCODE findresource put
begin
/pdf417compact {

20 dict begin                 % Confine variables to local scope

/options exch def       % We are given an option string
/barcode exch def       % We are given a barcode string

/dontdraw false def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

% Get the result of encoding with pdf417 with compact option
options (dontdraw) true put
options (compact) true put

/args barcode options //pdf417 exec def

args (opt) options put
args

dontdraw not //renmatrix if

end

} bind def
/pdf417compact dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER pdf417compact--

% --BEGIN ENCODER micropdf417--
% --REQUIRES preamble raiseerror renmatrix--
% --DESC: MicroPDF417
% --EXAM: MicroPDF417
% --EXOP:
% --RNDR: renmatrix
%%BeginResource: QRCODE micropdf417 0.0 2015112400 201094 213914
%%BeginData:        959 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renmatrix dup /QRCODE findresource put
begin
/micropdf417 {

20 dict begin

/options exch def
/barcode exch def

/dontdraw false def
/version (unset) def
/columns 0 def
/rows 0 def
/rowmult 2 def
/encoding (auto) def
/cca false def
/ccb false def
/raw false def
/parse false def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

version (unset) ne {
version (x) search
pop /columns exch def
pop /rows exch def
} if

/columns columns cvi def
/rows rows cvi def
/rowmult rowmult cvr def

% Parse ordinals of the form ^NNN to ASCII
parse {
/msg barcode length string def
/j 0 def
barcode
{ % loop
(^) search {
dup msg exch j exch putinterval
length j add 1 add /j exch def
pop
dup 0 3 getinterval cvi msg exch j 1 sub exch put
dup length 3 sub 3 exch getinterval
} {
dup msg exch j exch putinterval
length j add /j exch def
/barcode msg 0 j getinterval def
exit
} ifelse
} loop
} if

raw {/encoding (raw) def} if
cca {/encoding (cca) def} if

% Convert input into array of codewords
encoding (raw) eq encoding (cca) eq or {
/datcws barcode length array def
/i 0 def /j 0 def
{ % loop
i barcode length eq {exit} if
/cw barcode i 1 add 3 getinterval cvi def
datcws j cw put
/i i 4 add def
/j j 1 add def
} loop
/datcws datcws 0 j getinterval def
} if

/barcode [ barcode {} forall ] def
/barlen barcode length def

ccb {/encoding (ccb) def} if

/encb {
/in exch def
/inlen in length def
/out inlen 6 idiv 5 mul inlen 6 mod add array def
0 1 inlen 6 idiv 1 sub {
/k exch def
/msbs [ in k 6 mul 3 getinterval aload pop ] def
/mscs [
msbs aload pop exch 256 mul add exch 65536 mul add
3 {dup 900 mod exch 900 idiv} repeat
] def
/lsbs [ in k 6 mul 3 add 3 getinterval aload pop ] def
/lscs [
lsbs aload pop exch 256 mul add exch 65536 mul add
3 {dup 900 mod exch 900 idiv} repeat
] def
lscs 0 get mscs 0 get 316 mul add
out k 5 mul 4 add 2 index 900 mod put
900 idiv lscs 1 get add mscs 0 get 641 mul add mscs 1 get 316 mul add
out k 5 mul 3 add 2 index 900 mod put
900 idiv lscs 2 get add mscs 0 get 20 mul add mscs 1 get 641 mul add mscs 2 get 316 mul add
out k 5 mul 2 add 2 index 900 mod put
900 idiv lscs 3 get add mscs 1 get 20 mul add mscs 2 get 641 mul add
out k 5 mul 1 add 2 index 900 mod put
900 idiv mscs 2 get 20 mul add
out k 5 mul 3 -1 roll 900 mod put
} for
/rem inlen 6 mod def
rem 0 ne {
out out length rem sub
[ in inlen rem sub rem getinterval aload pop ]
putinterval
} if
out
} bind def

encoding (byte) eq encoding (ccb) eq or {
/datcws barlen 6 idiv 5 mul barlen 6 mod add 1 add array def
datcws 0 barlen 6 mod 0 eq {924} {901} ifelse put
datcws 1 barcode encb putinterval
encoding (ccb) eq {/datcws [920 datcws aload pop] def} if
} if

encoding (auto) eq {

% Modes and text submodes
/T 0 def  /N 1 def  /B 2 def
/A 0 def  /L 1 def  /M 2 def  /P 3 def

% Special function characters for mode switching
/tl -1 def  /nl -2 def  /bl -3 def  /bl6 -4 def  /bs -5 def

% Special function characters for text mode
/al -6 def  /ll -7 def  /ml -8 def  /pl -9 def  /as -10 def  /ps -11 def

% Character maps for each state
/charmaps [
%  A    L    M    P
[ (A)  (a)  (0)  (;) ]  % 0
[ (B)  (b)  (1)  (<) ]  % 1
[ (C)  (c)  (2)  (>) ]  % 2
[ (D)  (d)  (3)  (@) ]  % 3
[ (E)  (e)  (4)  ([) ]  % 4
[ (F)  (f)  (5)   92 ]  % 5
[ (G)  (g)  (6)  (]) ]  % 6
[ (H)  (h)  (7)  (_) ]  % 7
[ (I)  (i)  (8)  (`) ]  % 8
[ (J)  (j)  (9)  (~) ]  % 9
[ (K)  (k)  (&)  (!) ]  % 10
[ (L)  (l)   13   13 ]  % 11
[ (M)  (m)    9    9 ]  % 12
[ (N)  (n)  (,)  (,) ]  % 13
[ (O)  (o)  (:)  (:) ]  % 14
[ (P)  (p)  (#)   10 ]  % 15
[ (Q)  (q)  (-)  (-) ]  % 16
[ (R)  (r)  (.)  (.) ]  % 17
[ (S)  (s)  ($)  ($) ]  % 18
[ (T)  (t)  (/)  (/) ]  % 19
[ (U)  (u)  (+)  (") ]  % 20
[ (V)  (v)  (%)  (|) ]  % 21
[ (W)  (w)  (*)  (*) ]  % 22
[ (X)  (x)  (=)   40 ]  % 23
[ (Y)  (y)  (^)   41 ]  % 24
[ (Z)  (z)   pl  (?) ]  % 25
[ ( )  ( )  ( )  ({) ]  % 26
[  ll   as   ll  (}) ]  % 27
[  ml   ml   al  (') ]  % 28
[  ps   ps   ps   al ]  % 29
] def

% Invert charmaps to give character to value maps for each state
/charvals [ 30 dict 30 dict 30 dict 30 dict ] def
/alltext 104 dict def
0 1 charmaps length 1 sub {
/i exch def
/encs charmaps i get def
0 1 3 {
/j exch def
encs j get dup type /stringtype eq {0 get} if  % convert string to ASCII if required
dup charvals j get exch i put
alltext exch -1 put
} for
} for

/e 10000 def  % "Empty"

/latlen [  % Bit length of latch between submodes
% To:  A  L  M  P      From
[  0  1  1  2 ]  % A
[  2  0  1  2 ]  % L
[  1  1  0  1 ]  % M
[  1  2  2  0 ]  % P
] def

/latseq [  % Latch sequences between submodes
% To: A       L       M       P               From
[ []      [ll]    [ml]    [ml pl]    ]  % A
[ [ml al] []      [ml]    [ml pl]    ]  % L
[ [al]    [ll]    []      [pl]       ]  % M
[ [al]    [al ll] [al ml] []         ]  % P
] def

/shftlen [  % Bit length of shift to submode
% To:  A  L  M  P      From
[  e  e  e  1 ]  % A
[  1  e  e  1 ]  % L
[  e  e  e  1 ]  % M
[  e  e  e  e ]  % P
] def

% Determine runlengths of digits
/numdigits [ barlen {0} repeat 0 ] def
/numtext   [ barlen {0} repeat 0 ] def
/numbytes  [ barlen {0} repeat 0 ] def
barlen 1 sub -1 0 {
/i exch def
barcode i get dup 48 ge exch 57 le and {
numdigits i numdigits i 1 add get 1 add put
} if
alltext barcode i get known numdigits i get 13 lt and {
numtext i numtext i 1 add get 1 add put
} if
numtext i get 5 lt numdigits i get 13 lt and {
numbytes i numbytes i 1 add get 1 add put
} if
} for
/numdigits numdigits 0 barlen getinterval def
/numtext   numtext   0 barlen getinterval def
/numbytes  numbytes  0 barlen getinterval def

/seq [] def /seqlen 0 def /state B def /p 0 def {  % loop
p barlen eq {exit} if
/n numdigits p get def
n 13 ge {
/seq [
seq aload pop
nl
[ barcode p n getinterval aload pop ]
] def
/state N def
/p p n add def
/seqlen seqlen 1 add n add def
} {  % next
/t numtext p get def
t 5 ge {
/seq [
seq aload pop
state T ne {tl} if
[ barcode p t getinterval aload pop ]
] def
/state T def
/p p t add def
/seqlen seqlen 1 add t add def  % ish
} {  % next
/b numbytes p get def
b 1 eq state T eq and {
/seq [
seq aload pop
bs
[ barcode p get ]
] def
/p p b add def
/seqlen seqlen 2 add def
} {  % next
/seq [
seq aload pop
b 6 mod 0 ne {bl} {bl6} ifelse
[ barcode p b getinterval aload pop ]
] def
/state B def
/p p b add def
/seqlen seqlen 1 add b add def
} ifelse } ifelse } ifelse
} loop

/latchcws <<
tl 900  bl 901  bl6 924  nl 902  bs 913
>> def

% Submode encoding functions
/enca {charvals A get exch get} bind def
/encl {charvals L get exch get} bind def
/encm {charvals M get exch get} bind def
/encp {charvals P get exch get} bind def
/textencfuncs [ /enca /encl /encm /encp ] def

/addtotext {
text exch l exch put
/l l 1 add def
} bind def

/enct {

/in exch def

/curlen [  e  e  e  e ] def
curlen submode 0 put
/curseq [ [] [] [] [] ] def

% Derive the optimal sequences ending in each submode
in {

/char exch def

% Check for optimisations in the current sequences by latching from x to y
{  % loop
/imp false def
[ A L M P ] {
/x exch def
[ A L M P ] {
/y exch def
/cost curlen x get latlen x get y get add def
cost curlen y get lt {
curlen y cost put
curseq y [
curseq x get aload pop
latseq x get y get aload pop
] put
/imp true def
} if
} forall
} forall
imp not {exit} if  % Repeat unless no improvement
} loop

% Determine optimal next sequences for each valid encoding
/nxtlen [ e e e e ] def
/nxtseq 4 array def

[ A L M P ] {
/x exch def

{ % loop for common exit

charvals x get char known not {exit} if

% Extend directly
/cost curlen x get 1 add def
cost nxtlen x get lt {
nxtlen x cost put
nxtseq x [ curseq x get aload pop char ] put
} if

% Optimise for direct shifts from y to x
[ A L M P ] {
/y exch def
x y ne {
/cost curlen y get shftlen y get x get add 1 add def
cost nxtlen y get lt {
nxtlen y cost put
nxtseq y [
curseq y get aload pop
x A eq {as} {ps} ifelse
char
] put
} if
} if
} forall

exit
} loop

} forall

/curlen nxtlen def
/curseq nxtseq def

} forall

% Select the optimal sequence
/minseq e def
[ A L M P ] {
/k exch def
curlen k get minseq lt {
/minseq curlen k get def
/txtseq curseq k get def
} if
} forall

% Encode the sequence
/text minseq array def
/k 0 def /l 0 def {
k txtseq length ge {exit} if

/char txtseq k get def

% Encode character
char textencfuncs submode get load exec addtotext
/k k 1 add def

% Encode shifted next character
char as eq char ps eq or {
txtseq k get char as eq {enca} {encp} ifelse addtotext
/k k 1 add def
} if

% Latches to new submode
char al eq {/submode A def} if
char ll eq {/submode L def} if
char ml eq {/submode M def} if
char pl eq {/submode P def} if
} loop

text length 2 mod 1 eq {
submode P eq {
/pad al encp def
/submode A def
} {
/pad ps textencfuncs submode get load exec def
} ifelse
/text [ text aload pop pad ] def
} if

/out text length 2 idiv array def
0 1 out length 1 sub {
/k exch def
out k text k 2 mul get 30 mul text k 2 mul 1 add get add put
} for

out

} bind def

/encn {
/in exch def
/out [] def
0 44 in length 1 sub {
/k exch def
/gmod [
1 in k in length k sub dup 44 gt {pop 44} if getinterval
{48 sub} forall
] def
/cwn [] def {
/dv 900 def
/gmul [] def /val 0 def {
gmod length 0 eq {exit} if
/val val 10 mul gmod 0 get add def
/gmod gmod 1 gmod length 1 sub getinterval def
val dv lt {
gmul length 0 ne {
/gmul [ gmul aload pop 0 ] def
} if
} {
/gmul [ gmul aload pop val dv idiv ] def
} ifelse
/val val dv mod def
} loop
/dv val def
/cwn [ dv cwn aload pop ] def
/gmod gmul def
gmul length 0 eq {exit} if
} loop
/out [ out aload pop cwn aload pop ] def
} for
out
} bind def

/encfuncs [ /enct /encn /encb ] def

/addtocws {
dup datcws j 3 -1 roll putinterval
length j add /j exch def
} bind def

% Encode the sequence
/state T def /submode A def
/datcws seqlen array def
/i 0 def /j 0 def {
i seq length ge {exit} if
/chars seq i get def
chars type /arraytype eq {  % Encode data according to mode
chars encfuncs state get load exec addtocws
} {  % Encode the latch to new state or byte shift
[ latchcws chars get ] addtocws
chars tl eq {/state T def /submode A def} if
chars nl eq {/state N def} if
chars bl eq chars bl6 eq or {/state B def} if
chars bs eq {
/i i 1 add def
seq i get encb addtocws
} if
} ifelse
/i i 1 add def
} loop
/datcws datcws 0 j getinterval def
} if

% Basic metrics for the each symbol
%     c  r ecw  rl rc rr
/metrics [
[ 1 11   7   1  0  9 ]
[ 1 14   7   8  0  8 ]
[ 1 17   7  36  0 36 ]
[ 1 20   8  19  0 19 ]
[ 1 24   8   9  0 17 ]
[ 1 28   8  25  0 33 ]
[ 2  8   8   1  0  1 ]
[ 2 11   9   1  0  9 ]
[ 2 14   9   8  0  8 ]
[ 2 17  10  36  0 36 ]
[ 2 20  11  19  0 19 ]
[ 2 23  13   9  0 17 ]
[ 2 26  15  27  0 35 ]
[ 3  6  12   1  1  1 ]
[ 3  8  14   7  7  7 ]
[ 3 10  16  15 15 15 ]
[ 3 12  18  25 25 25 ]
[ 3 15  21  37 37 37 ]
[ 3 20  26   1 17 33 ]
[ 3 26  32   1  9 17 ]
[ 3 32  38  21 29 37 ]
[ 3 38  44  15 31 47 ]
[ 3 44  50   1 25 49 ]
[ 4  4   8  47 19 43 ]
[ 4  6  12   1  1  1 ]
[ 4  8  14   7  7  7 ]
[ 4 10  16  15 15 15 ]
[ 4 12  18  25 25 25 ]
[ 4 15  21  37 37 37 ]
[ 4 20  26   1 17 33 ]
[ 4 26  32   1  9 17 ]
[ 4 32  38  21 29 37 ]
[ 4 38  44  15 31 47 ]
[ 4 44  50   1 25 49 ]
] def

% Basic metrics for the each symbol
%     c  r ecw  rl rc rr
/ccametrics [
[ 2  5   4  39  0 19 ]
[ 2  6   4   1  0 33 ]
[ 2  7   5  32  0 12 ]
[ 2  8   5   8  0 40 ]
[ 2  9   6  14  0 46 ]
[ 2 10   6  43  0 23 ]
[ 2 12   7  20  0 52 ]
[ 3  4   4  11 43 23 ]
[ 3  5   5   1 33 13 ]
[ 3  6   6   5 37 17 ]
[ 3  7   7  15 47 27 ]
[ 3  8   7  21  1 33 ]
[ 4  3   4  40 20 52 ]
[ 4  4   5  43 23  3 ]
[ 4  5   6  46 26  6 ]
[ 4  6   7  34 14 46 ]
[ 4  7   8  29  9 41 ]
] def
cca {/metrics ccametrics def} if

% Select metrics of an appropriate symbol
/urows rows def
/ucols columns def
/i 0 def
{ % loop
/m metrics i get def
/c    m 0 get def        % Columns in symbol
/r    m 1 get def        % Rows in symbol
/k    m 2 get def        % Error correction codewords
/rapl m 3 get def        % Left row address pattern
/rapc m 4 get def        % Centre row address pattern
/rapr m 5 get def        % Right row address pattern
/ncws r c mul k sub def  % Data codewords
/okay true def
datcws length ncws gt     {/okay false def} if
urows 0 ne urows r ne and {/okay false def} if
ucols 0 ne ucols c ne and {/okay false def} if
okay {exit} if
/i i 1 add def
} loop
/m datcws length def

% Create codewords array with one extra working space element and add padding
/n c r mul k sub def
/cws c r mul 1 add array def
cws 0 datcws putinterval
cws m [ n m sub {900} repeat ] putinterval
cws n [ k {0} repeat 0 ] putinterval

% Calculate the log and anti-log tables
/rsalog [ 1 928 {dup 3 mul 929 mod} repeat ] def
/rslog 929 array def
1 1 928 {dup rsalog exch get exch rslog 3 1 roll put} for

% Function to calculate the product in the field
/rsprod {
2 copy 0 ne exch 0 ne and {
rslog exch get exch rslog exch get add 928 mod rsalog exch get
} {
pop pop 0
} ifelse
} bind def

% Generate the coefficients
/coeffs [ 1 k {0} repeat ] def
1 1 k {
/i exch def
coeffs i coeffs i 1 sub get put
i 1 sub -1 1 {
/j exch def
coeffs j coeffs j 1 sub get coeffs j get rsalog i get rsprod add 929 mod put
} for
coeffs 0 coeffs 0 get rsalog i get rsprod put
} for
/coeffs coeffs 0 coeffs length 1 sub getinterval def
coeffs length 1 sub -2 0 {coeffs exch 2 copy get 929 exch sub put} for

% Derive the error codewords
0 1 n 1 sub {
/t exch cws exch get cws n get add 929 mod def
0 1 k 1 sub {
/j exch def
cws n j add cws n j add 1 add get 929 t coeffs k j sub 1 sub get mul 929 mod sub add 929 mod put
} for
} for
n 1 n k add { dup cws exch 929 cws 5 -1 roll get sub 929 mod put } for

% Trim the working space from the end of the codewords
/cws cws 0 cws length 1 sub getinterval def

% Base 10 encoding of the bar space successions for the codewords in each cluster
/clusters [
[
120256 125680 128380 120032 125560 128318 108736 119920 108640  86080 108592  86048
110016 120560 125820 109792 120440 125758  88256 109680  88160  89536 110320 120700
89312 110200 120638  89200 110140  89840 110460  89720 110398  89980 128506 119520
125304 128190 107712 119408 125244 107616 119352  84032 107568 119324  84000 107544
83984 108256 119672 125374  85184 108144 119612  85088 108088 119582  85040 108060
85728 108408 119742  85616 108348  85560 108318  85880 108478  85820  85790 107200
119152 125116 107104 119096 125086  83008 107056 119068  82976 107032  82960  82952
83648 107376 119228  83552 107320 119198  83504 107292  83480  83468  83824 107452
83768 107422  83740  83900 106848 118968 125022  82496 106800 118940  82464 106776
118926  82448 106764  82440 106758  82784 106936 119006  82736 106908  82712 106894
82700  82694 106974  82830  82240 106672 118876  82208 106648 118862  82192 106636
82184 106630  82180  82352  82328  82316  82080 118830 106572 106566  82050 117472
124280 127678 103616 117360 124220 103520 117304 124190  75840 103472  75808 104160
117624 124350  76992 104048 117564  76896 103992  76848  76824  77536 104312 117694
77424 104252  77368  77340  77688 104382  77628  77758 121536 126320 128700 121440
126264 128670 111680 121392 126236 111648 121368 126222 111632 121356 103104 117104
124092 112320 103008 117048 124062 112224 121656 126366  93248  74784 102936 117006
93216 112152  93200  75456 103280 117180  93888  75360 103224 117150  93792 112440
121758  93744  75288  93720  75632 103356  94064  75576 103326  94008 112542  93980
75708  94140  75678  94110 121184 126136 128606 111168 121136 126108 111136 121112
126094 111120 121100 111112 111108 102752 116920 123998 111456 102704 116892  91712
74272 121244 116878  91680  74256 102668  91664 111372 102662  74244  74592 102840
116958  92000  74544 102812  91952 111516 102798  91928  74508  74502  74680 102878
92088  74652  92060  74638  92046  92126 110912 121008 126044 110880 120984 126030
110864 120972 110856 120966 110852 110850  74048 102576 116828  90944  74016 102552
116814  90912 111000 121038  90896  73992 102534  90888 110982  90884  74160 102620
91056  74136 102606  91032 111054  91020  74118  91014  91100  91086 110752 120920
125998 110736 120908 110728 120902 110724 110722  73888 102488 116782  90528  73872
102476  90512 110796 102470  90504  73860  90500  73858  73944  90584  90572  90566
120876 120870 110658 102444  73800  90312  90308  90306 101056 116080 123580 100960
116024  70720 100912 115996  70688 100888  70672  70664  71360 101232 116156  71264
101176 116126  71216 101148  71192  71180  71536 101308  71480 101278  71452  71612
71582 118112 124600 127838 105024 118064 124572 104992 118040 124558 104976 118028
104968 118022 100704 115896 123486 105312 100656 115868  79424  70176 118172 115854
79392 105240 100620  79376  70152  79368  70496 100792 115934  79712  70448 118238
79664 105372 100750  79640  70412  79628  70584 100830  79800  70556  79772  70542
70622  79838 122176 126640 128860 122144 126616 128846 122128 126604 122120 126598
122116 104768 117936 124508 113472 104736 126684 124494 113440 122264 126670 113424
104712 117894 113416 122246 104706  69952 100528 115804  78656  69920 100504 115790
96064  78624 104856 117966  96032 113560 122318 100486  96016  78600 104838  96008
69890  70064 100572  78768  70040 100558  96176  78744 104910  96152 113614  70022
78726  70108  78812  70094  96220  78798 122016 126552 128814 122000 126540 121992
126534 121988 121986 104608 117848 124462 113056 104592 126574 113040 122060 117830
113032 104580 113028 104578 113026  69792 100440 115758  78240  69776 100428  95136
78224 104652 100422  95120 113100  69764  95112  78212  69762  78210  69848 100462
78296  69836  95192  78284  69830  95180  78278  69870  95214 121936 126508 121928
126502 121924 121922 104528 117804 112848 104520 117798 112840 121958 112836 104514
112834  69712 100396  78032  69704 100390  94672  78024 104550  94664 112870  69698
94660  78018  94658  78060  94700  94694 126486 121890 117782 104484 104482  69672
77928  94440  69666  77922  99680  68160  99632  68128  99608 115342  68112  99596
68104  99590  68448  99768 115422  68400  99740  68376  99726  68364  68358  68536
99806  68508  68494  68574 101696 116400 123740 101664 116376 101648 116364 101640
116358 101636  67904  99504 115292  72512  67872 116444 115278  72480 101784 116430
72464  67848  99462  72456 101766  67842  68016  99548  72624  67992  99534  72600
101838  72588  67974  68060  72668  68046  72654 118432 124760 127918 118416 124748
118408 124742 118404 118402 101536 116312 105888 101520 116300 105872 118476 116294
105864 101508 105860 101506 105858  67744  99416  72096  67728 116334  80800  72080
101580  99398  80784 105932  67716  80776  72068  67714  72066  67800  99438  72152
67788  80856  72140  67782  80844  72134  67822  72174  80878 126800 128940 126792
128934 126788 126786 118352 124716 122576 126828 124710 122568 126822 122564 118338
122562 101456 116268 105680 101448 116262 114128 105672 118374 114120 122598 101442
114116 105666 114114  67664  99372  71888  67656  99366  80336  71880 101478  97232
80328 105702  67650  97224 114150  71874  97220  67692  71916  67686  80364  71910
97260  80358  97254 126760 128918 126756 126754 118312 124694 122472 126774 122468
118306 122466 101416 116246 105576 101412 113896 105572 101410 113892 105570 113890
67624  99350  71784 101430  80104  71780  67618  96744  80100  71778  96740  80098
96738  71798  96758 126738 122420 122418 105524 113780 113778  71732  79988  96500
96498  66880  66848  98968  66832  66824  66820  66992  66968  66956  66950  67036
67022 100000  99984 115532  99976 115526  99972  99970  66720  98904  69024 100056
98892  69008 100044  69000 100038  68996  66690  68994  66776  98926  69080 100078
69068  66758  69062  66798  69102 116560 116552 116548 116546  99920 102096 116588
115494 102088 116582 102084  99906 102082  66640  68816  66632  98854  73168  68808
66628  73160  68804  66626  73156  68802  66668  68844  66662  73196  68838  73190
124840 124836 124834 116520 118632 124854 118628 116514 118626  99880 115478 101992
116534 106216 101988  99874 106212 101986 106210  66600  98838  68712  99894  72936
68708  66594  81384  72932  68706  81380  72930  66614  68726  72950  81398 128980
128978 124820 126900 124818 126898 116500 118580 116498 122740 118578 122738  99860
101940  99858 106100 101938 114420
] [
128352 129720 125504 128304 129692 125472 128280 129678 125456 128268 125448 128262
125444 125792 128440 129758 120384 125744 128412 120352 125720 128398 120336 125708
120328 125702 120324 120672 125880 128478 110144 120624 125852 110112 120600 125838
110096 120588 110088 120582 110084 110432 120760 125918  89664 110384 120732  89632
110360 120718  89616 110348  89608 110342  89952 110520 120798  89904 110492  89880
110478  89868  90040 110558  90012  89998 125248 128176 129628 125216 128152 129614
125200 128140 125192 128134 125188 125186 119616 125360 128220 119584 125336 128206
119568 125324 119560 125318 119556 119554 108352 119728 125404 108320 119704 125390
108304 119692 108296 119686 108292 108290  85824 108464 119772  85792 108440 119758
85776 108428  85768 108422  85764  85936 108508  85912 108494  85900  85894  85980
85966 125088 128088 129582 125072 128076 125064 128070 125060 125058 119200 125144
128110 119184 125132 119176 125126 119172 119170 107424 119256 125166 107408 119244
107400 119238 107396 107394  83872 107480 119278  83856 107468  83848 107462  83844
83842  83928 107502  83916  83910  83950 125008 128044 125000 128038 124996 124994
118992 125036 118984 125030 118980 118978 106960 119020 106952 119014 106948 106946
82896 106988  82888 106982  82884  82882  82924  82918 124968 128022 124964 124962
118888 124982 118884 118882 106728 118902 106724 106722  82408 106742  82404  82402
124948 124946 118836 118834 106612 106610 124224 127664 129372 124192 127640 129358
124176 127628 124168 127622 124164 124162 117568 124336 127708 117536 124312 127694
117520 124300 117512 124294 117508 117506 104256 117680 124380 104224 117656 124366
104208 117644 104200 117638 104196 104194  77632 104368 117724  77600 104344 117710
77584 104332  77576 104326  77572  77744 104412  77720 104398  77708  77702  77788
77774 128672 129880  93168 128656 129868  92664 128648 129862  92412 128644 128642
124064 127576 129326 126368 124048 129902 126352 128716 127558 126344 124036 126340
124034 126338 117152 124120 127598 121760 117136 124108 121744 126412 124102 121736
117124 121732 117122 121730 103328 117208 124142 112544 103312 117196 112528 121804
117190 112520 103300 112516 103298 112514  75680 103384 117230  94112  75664 103372
94096 112588 103366  94088  75652  94084  75650  75736 103406  94168  75724  94156
75718  94150  75758 128592 129836  91640 128584 129830  91388 128580  91262 128578
123984 127532 126160 123976 127526 126152 128614 126148 123970 126146 116944 124012
121296 116936 124006 121288 126182 121284 116930 121282 102864 116972 111568 102856
116966 111560 121318 111556 102850 111554  74704 102892  92112  74696 102886  92104
111590  92100  74690  92098  74732  92140  74726  92134 128552 129814  90876 128548
90750 128546 123944 127510 126056 128566 126052 123938 126050 116840 123958 121064
116836 121060 116834 121058 102632 116854 111080 121078 111076 102626 111074  74216
102646  91112  74212  91108  74210  91106  74230  91126 128532  90494 128530 123924
126004 123922 126002 116788 120948 116786 120946 102516 110836 102514 110834  73972
90612  73970  90610 128522 123914 125978 116762 120890 102458 110714 123552 127320
129198 123536 127308 123528 127302 123524 123522 116128 123608 127342 116112 123596
116104 123590 116100 116098 101280 116184 123630 101264 116172 101256 116166 101252
101250  71584 101336 116206  71568 101324  71560 101318  71556  71554  71640 101358
71628  71622  71662 127824 129452  79352 127816 129446  79100 127812  78974 127810
123472 127276 124624 123464 127270 124616 127846 124612 123458 124610 115920 123500
118224 115912 123494 118216 124646 118212 115906 118210 100816 115948 105424 100808
115942 105416 118246 105412 100802 105410  70608 100844  79824  70600 100838  79816
105446  79812  70594  79810  70636  79852  70630  79846 129960  95728 113404 129956
95480 113278 129954  95356  95294 127784 129430  78588 128872 129974  95996  78462
128868 127778  95870 128866 123432 127254 124520 123428 126696 128886 123426 126692
124514 126690 115816 123446 117992 115812 122344 117988 115810 122340 117986 122338
100584 115830 104936 100580 113640 104932 100578 113636 104930 113634  70120 100598
78824  70116  96232  78820  70114  96228  78818  96226  70134  78838 129940  94968
113022 129938  94844  94782 127764  78206 128820 127762  95102 128818 123412 124468
123410 126580 124466 126578 115764 117876 115762 122100 117874 122098 100468 104692
100466 113140 104690 113138  69876  78324  69874  95220  78322  95218 129930  94588
94526 127754 128794 123402 124442 126522 115738 117818 121978 100410 104570 112890
69754  78074  94714  94398 123216 127148 123208 127142 123204 123202 115408 123244
115400 123238 115396 115394  99792 115436  99784 115430  99780  99778  68560  99820
68552  99814  68548  68546  68588  68582 127400 129238  72444 127396  72318 127394
123176 127126 123752 123172 123748 123170 123746 115304 123190 116456 115300 116452
115298 116450  99560 115318 101864  99556 101860  99554 101858  68072  99574  72680
68068  72676  68066  72674  68086  72694 129492  80632 105854 129490  80508  80446
127380  72062 127924 127378  80766 127922 123156 123700 123154 124788 123698 124786
115252 116340 115250 118516 116338 118514  99444 101620  99442 105972 101618 105970
67828  72180  67826  80884  72178  80882  97008 114044  96888 113982  96828  96798
129482  80252 130010  97148  80190  97086 127370 127898 128954 123146 123674 124730
126842 115226 116282 118394 122618  99386 101498 105722 114170  67706  71930  80378
96632 113854  96572  96542  80062  96702  96444  96414  96350 123048 123044 123042
115048 123062 115044 115042  99048 115062  99044  99042  67048  99062  67044  67042
67062 127188  68990 127186 123028 123316 123026 123314 114996 115572 114994 115570
98932 100084  98930 100082  66804  69108  66802  69106 129258  73084  73022 127178
127450 123018 123290 123834 114970 115514 116602  98874  99962 102138  66682  68858
73210  81272 106174  81212  81182  72894  81342  97648 114364  97592 114334  97564
97550  81084  97724  81054  97694  97464 114270  97436  97422  80990  97502  97372
97358  97326 114868 114866  98676  98674  66292  66290 123098 114842 115130  98618
99194  66170  67322  69310  73404  73374  81592 106334  81564  81550  73310  81630
97968 114524  97944 114510  97932  97926  81500  98012  81486  97998  97880 114478
97868  97862  81454  97902  97836  97830  69470  73564  73550  81752 106414  81740
81734  73518  81774  81708  81702
] [
109536 120312  86976 109040 120060  86496 108792 119934  86256 108668  86136 129744
89056 110072 129736  88560 109820 129732  88312 109694 129730  88188 128464 129772
89592 128456 129766  89340 128452  89214 128450 125904 128492 125896 128486 125892
125890 120784 125932 120776 125926 120772 120770 110544 120812 110536 120806 110532
84928 108016 119548  84448 107768 119422  84208 107644  84088 107582  84028 129640
85488 108284 129636  85240 108158 129634  85116  85054 128232 129654  85756 128228
85630 128226 125416 128246 125412 125410 119784 125430 119780 119778 108520 119798
108516 108514  83424 107256 119166  83184 107132  83064 107070  83004  82974 129588
83704 107390 129586  83580  83518 128116  83838 128114 125172 125170 119284 119282
107508 107506  82672 106876  82552 106814  82492  82462 129562  82812  82750 128058
125050 119034  82296 106686  82236  82206  82366  82108  82078  76736 103920 117500
76256 103672 117374  76016 103548  75896 103486  75836 129384  77296 104188 129380
77048 104062 129378  76924  76862 127720 129398  77564 127716  77438 127714 124392
127734 124388 124386 117736 124406 117732 117730 104424 117750 104420 104418 112096
121592 126334  92608 111856 121468  92384 111736 121406  92272 111676  92216 111646
92188  75232 103160 117118  93664  74992 103036  93424 112252 102974  93304  74812
93244  74782  93214 129332  75512 103294 129908 129330  93944  75388 129906  93820
75326  93758 127604  75646 128756 127602  94078 128754 124148 126452 124146 126450
117236 121844 117234 121842 103412 103410  91584 111344 121212  91360 111224 121150
91248 111164  91192 111134  91164  91150  74480 102780  91888  74360 102718  91768
111422  91708  74270  91678 129306  74620 129850  92028  74558  91966 127546 128634
124026 126202 116986 121338 102906  90848 110968 121022  90736 110908  90680 110878
90652  90638  74104 102590  91000  74044  90940  74014  90910  74174  91070  90480
110780  90424 110750  90396  90382  73916  90556  73886  90526  90296 110686  90268
90254  73822  90334  90204  90190  71136 101112 116094  70896 100988  70776 100926
70716  70686 129204  71416 101246 129202  71292  71230 127348  71550 127346 123636
123634 116212 116210 101364 101362  79296 105200 118140  79072 105080 118078  78960
105020  78904 104990  78876  78862  70384 100732  79600  70264 100670  79480 105278
79420  70174  79390 129178  70524 129466  79740  70462  79678 127290 127866 123514
124666 115962 118266 100858 113376 122232 126654  95424 113264 122172  95328 113208
122142  95280 113180  95256 113166  95244  78560 104824 117950  95968  78448 104764
95856 113468 104734  95800  78364  95772  78350  95758  70008 100542  78712  69948
96120  78652  69918  96060  78622  96030  70078  78782  96190  94912 113008 122044
94816 112952 122014  94768 112924  94744 112910  94732  94726  78192 104636  95088
78136 104606  95032 113054  95004  78094  94990  69820  78268  69790  95164  78238
95134  94560 112824 121950  94512 112796  94488 112782  94476  94470  78008 104542
94648  77980  94620  77966  94606  69726  78046  94686  94384 112732  94360 112718
94348  94342  77916  94428  77902  94414  94296 112686  94284  94278  77870  94318
94252  94246  68336  99708  68216  99646  68156  68126  68476  68414 127162 123258
115450  99834  72416 101752 116414  72304 101692  72248 101662  72220  72206  67960
99518  72568  67900  72508  67870  72478  68030  72638  80576 105840 118460  80480
105784 118430  80432 105756  80408 105742  80396  80390  72048 101564  80752  71992
101534  80696  71964  80668  71950  80654  67772  72124  67742  80828  72094  80798
114016 122552 126814  96832 113968 122524  96800 113944 122510  96784 113932  96776
113926  96772  80224 105656 118366  97120  80176 105628  97072 114076 105614  97048
80140  97036  80134  97030  71864 101470  80312  71836  97208  80284  71822  97180
80270  97166  67678  71902  80350  97246  96576 113840 122460  96544 113816 122446
96528 113804  96520 113798  96516  96514  80048 105564  96688  80024 105550  96664
113870  96652  80006  96646  71772  80092  71758  96732  80078  96718  96416 113752
122414  96400 113740  96392 113734  96388  96386  79960 105518  96472  79948  96460
79942  96454  71726  79982  96494  96336 113708  96328 113702  96324  96322  79916
96364  79910  96358  96296 113686  96292  96290  79894  96310  66936  99006  66876
66846  67006  68976 100028  68920  99998  68892  68878  66748  69052  66718  69022
73056 102072 116574  73008 102044  72984 102030  72972  72966  68792  99934  73144
68764  73116  68750  73102  66654  68830  73182  81216 106160 118620  81184 106136
118606  81168 106124  81160 106118  81156  81154  72880 101980  81328  72856 101966
81304 106190  81292  72838  81286  68700  72924  68686  81372  72910  81358 114336
122712 126894 114320 122700 114312 122694 114308 114306  81056 106072 118574  97696
81040 106060  97680 114380 106054  97672  81028  97668  81026  97666  72792 101934
81112  72780  97752  81100  72774  97740  81094  97734  68654  72814  81134  97774
114256 122668 114248 122662 114244 114242  80976 106028  97488  80968 106022  97480
114278  97476  80962  97474  72748  81004  72742  97516  80998  97510 114216 122646
114212 114210  80936 106006  97384  80932  97380  80930  97378  72726  80950  97398
114196 114194  80916  97332  80914  97330  66236  66206  67256  99166  67228  67214
66142  67294  69296 100188  69272 100174  69260  69254  67164  69340  67150  69326
73376 102232 116654  73360 102220  73352 102214  73348  73346  69208 100142  73432
102254  73420  69190  73414  67118  69230  73454 106320 118700 106312 118694 106308
106306  73296 102188  81616 106348 102182  81608  73284  81604  73282  81602  69164
73324  69158  81644  73318  81638 122792 126934 122788 122786 106280 118678 114536
106276 114532 106274 114530  73256 102166  81512  73252  98024  81508  73250  98020
81506  98018  69142  73270  81526  98038 122772 122770 106260 114484 106258 114482
73236  81460  73234  97908  81458  97906 122762 106250 114458  73226  81434  97850
66396  66382  67416  99246  67404  67398  66350  67438  69456 100268  69448 100262
69444  69442  67372  69484  67366  69478 102312 116694 102308 102306  69416 100246
73576 102326  73572  69410  73570  67350  69430  73590 118740 118738 102292 106420
102290 106418  69396  73524  69394  81780  73522  81778 118730 102282 106394  69386
73498  81722  66476  66470  67496  99286  67492  67490  66454  67510 100308 100306
67476  69556  67474  69554 116714
]
] def

% Row address patterns
/raps [
[  % Left and right
802 930 946 818 882 890 826 954 922 986 970 906 778
794 786 914 978 982 980 916 948 932 934 942 940 936
808 812 814 806 822 950 918 790 788 820 884 868 870
878 876 872 840 856 860 862 846 844 836 838 834 866
] [  % Centre
718 590 622 558 550 566 534 530 538 570 562 546 610
626 634 762 754 758 630 628 612 614 582 578 706 738
742 740 748 620 556 552 616 744 712 716 708 710 646
654 652 668 664 696 688 656 720 592 600 604 732 734
]
] def

% Return the 17 bits for a codeword in a given cluster
/cwtobits {
clusters exch get exch get /v exch def
[ 17 {0} repeat v 2 17 string cvrs {48 sub} forall ]
dup length 17 sub 17 getinterval
} bind def

% Return the 10 bits for a row address pattern
/raptobits {
raps exch get exch get /v exch def
[ 10 {0} repeat v 2 10 string cvrs {48 sub} forall ]
dup length 10 sub 10 getinterval
} bind def

% Populate bitmap for the image
/rwid [38 55 82 99] c 1 sub get def
c 3 eq cca and {/rwid 72 def} if
/pixs rwid r mul array def

0 1 r 1 sub {
/i exch def
/clst i rapl add 1 sub 3 mod def
pixs rwid i mul [
c 1 eq {
i rapl add 1 sub 52 mod 0 raptobits aload pop
cws i get clst cwtobits aload pop
i rapr add 1 sub 52 mod 0 raptobits aload pop
} if
c 2 eq {
i rapl add 1 sub 52 mod 0 raptobits aload pop
cws i 2 mul get clst cwtobits aload pop
cws i 2 mul 1 add get clst cwtobits aload pop
i rapr add 1 sub 52 mod 0 raptobits aload pop
} if
c 3 eq {
cca not {
i rapl add 1 sub 52 mod 0 raptobits aload pop
} if
cws i 3 mul get clst cwtobits aload pop
i rapc add 1 sub 52 mod 1 raptobits aload pop
cws i 3 mul 1 add get clst cwtobits aload pop
cws i 3 mul 2 add get clst cwtobits aload pop
i rapr add 1 sub 52 mod 0 raptobits aload pop
} if
c 4 eq {
i rapl add 1 sub 52 mod 0 raptobits aload pop
cws i 4 mul get clst cwtobits aload pop
cws i 4 mul 1 add get clst cwtobits aload pop
i rapc add 1 sub 52 mod 1 raptobits aload pop
cws i 4 mul 2 add get clst cwtobits aload pop
cws i 4 mul 3 add get clst cwtobits aload pop
i rapr add 1 sub 52 mod 0 raptobits aload pop
} if
1
] putinterval
} for

% Return the arguments
<<
/ren //renmatrix
/pixs pixs
/pixx rwid
/pixy r
/height r 72 div rowmult mul
/width rwid 72 div
/opt options
>>

dontdraw not //renmatrix if

end

} bind def
/micropdf417 dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER micropdf417--

% --BEGIN ENCODER datamatrix--
% --REQUIRES preamble raiseerror renmatrix--
% --DESC: Data Matrix
% --EXAM: This is Data Matrix!
% --EXOP:
% --RNDR: renmatrix
%%BeginResource: QRCODE datamatrix 0.0 2015112400 190794 217275
%%BeginData:        851 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renmatrix dup /QRCODE findresource put
begin
/datamatrix {

20 dict begin

/options exch def
/barcode exch def

/dontdraw false def
/columns 0 def
/rows 0 def
/version (unset) def
/parse false def
/parsefnc false def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

version (unset) ne {
version (x) search
pop /rows exch def
pop /columns exch def
} if

/columns columns cvi def
/rows rows cvi def

% Parse ordinals of the form ^NNN to ASCII
parse {
/msg barcode length string def
/j 0 def
barcode
{ % loop
(^) search {
dup msg exch j exch putinterval
length j add 1 add /j exch def
pop
dup 0 3 getinterval cvi msg exch j 1 sub exch put
dup length 3 sub 3 exch getinterval
} {
dup msg exch j exch putinterval
length j add /j exch def
/barcode msg 0 j getinterval def
exit
} ifelse
} loop
} if

/barlen barcode length def

% Convert input into bytes accounting for FNC characters
/fnc1 -1 def  /prog -2 def  /m05 -3 def  /m06 -4 def
/fncvals <<
(FNC1) fnc1
(PROG) prog
(MAC5) m05
(MAC6) m06
>> def
/msg barlen array def
/i 0 def /j 0 def {
i barlen eq {exit} if
/char barcode i get def
parsefnc char 94 eq and i barlen 4 sub lt and {
barcode i 1 add get 94 ne {
/char fncvals barcode i 1 add 4 getinterval get def
/i i 4 add def
} {
/i i 1 add def
} ifelse
} if
msg j char put
/i i 1 add def
/j j 1 add def
} loop
/msg msg 0 j getinterval def
/msglen msg length def

% Basic metrics for the each symbol
%    rows  cols  regh  regv  rscw  rsbl
/metrics [
% Standard square symbols
[  10    10     1     1     5     1 ]
[  12    12     1     1     7     1 ]
[  14    14     1     1    10     1 ]
[  16    16     1     1    12     1 ]
[  18    18     1     1    14     1 ]
[  20    20     1     1    18     1 ]
[  22    22     1     1    20     1 ]
[  24    24     1     1    24     1 ]
[  26    26     1     1    28     1 ]
[  32    32     2     2    36     1 ]
[  36    36     2     2    42     1 ]
[  40    40     2     2    48     1 ]
[  44    44     2     2    56     1 ]
[  48    48     2     2    68     1 ]
[  52    52     2     2    84     2 ]
[  64    64     4     4   112     2 ]
[  72    72     4     4   144     4 ]
[  80    80     4     4   192     4 ]
[  88    88     4     4   224     4 ]
[  96    96     4     4   272     4 ]
[ 104   104     4     4   336     6 ]
[ 120   120     6     6   408     6 ]
[ 132   132     6     6   496     8 ]
[ 144   144     6     6   620    10 ]
% Optional rectangular symbols
[   8    18     1     1     7     1 ]
[   8    32     1     2    11     1 ]
[  12    26     1     1    14     1 ]
[  12    36     1     2    18     1 ]
[  16    36     1     2    24     1 ]
[  16    48     1     2    28     1 ]
] def

% Create array of codewords remaining to make a full symbol
/urows rows def
/ucols columns def
/fullcws [] def
metrics {
/m exch def
/rows m 0 get def                          % Rows in symbol
/cols m 1 get def                          % Columns in symbol
/regh m 2 get def                          % Horizontal regions
/regv m 3 get def                          % Vertical regions
/rscw m 4 get def                          % Error correction codewords
/rsbl m 5 get def                          % Error correction blocks
/mrows rows 2 regh mul sub def             % Rows in the mapping matrix
/mcols cols 2 regv mul sub def             % Columns in the mapping matrix
/ncws mrows mcols mul 8 idiv rscw sub def  % Data codewords
/okay true def
urows 0 ne urows rows ne and {/okay false def} if
ucols 0 ne ucols cols ne and {/okay false def} if
urows 0 eq ucols 0 eq or rows cols ne and {/okay false def} if
okay {/fullcws [ fullcws aload pop ncws ] def} if
} forall
/numremcws [ 1558 {10000} repeat ] def
fullcws {numremcws exch 1 sub 1 put} forall
1556 -1 0 {
/i exch def
numremcws i get 1 ne {
numremcws i numremcws i 1 add get 1 add put
} if
} for

% Special characters
/lC    -5 def  /lB    -6 def  /lX    -7 def  /lT    -8 def  /lE    -9 def  /unl -10 def
/sapp -11 def  /usft -12 def  /sft1 -13 def  /sft2 -14 def  /sft3 -15 def  /eci -16 def  /pad -17 def
/unlcw 254 def

/Avals <<
0 1 128 {dup 1 add} for
pad 129
0 1 99 {  % Double digits
dup 10 2 string cvrs (00) 2 string copy dup 2 3 index length sub 4 -1 roll putinterval
exch 130 add
} for
229 [ lC lB fnc1 sapp prog usft m05 m06 lX lT lE eci ] {exch 1 add dup} forall pop
>> def
/Avals <<
Avals {[exch]} forall
>> def

/CNvals <<
sft1 0
sft2 1
sft3 2
32   3
48 1 57 {dup 44 sub} for  % 0-9
65 1 90 {dup 51 sub} for  % A-Z
>> def
/C1vals << 0 1 31 {dup} for >> def
/C2vals <<
33 1 47 {dup 33 sub} for
58 1 64 {dup 43 sub} for
91 1 95 {dup 69 sub} for
fnc1 27
usft 30
>> def
/C3vals << 96 1 127 {dup 96 sub} for >> def
/Cvals <<
CNvals {[exch]} forall
C1vals {[exch CNvals sft1 get exch]} forall
C2vals {[exch CNvals sft2 get exch]} forall
C3vals {[exch CNvals sft3 get exch]} forall
>> def

/TNvals <<
sft1 0
sft2 1
sft3 2
32   3
48 1  57 {dup 44 sub} for  % 0-9
97 1 122 {dup 83 sub} for  % a-z
>> def
/T1vals << 0 1 31 {dup} for >> def
/T2vals <<
33 1 47 {dup 33 sub} for
58 1 64 {dup 43 sub} for
91 1 95 {dup 69 sub} for
fnc1 27
usft 30
>> def
/T3vals <<
96 0
65 1  90 {dup 64 sub} for
123 1 127 {dup 96 sub} for
>> def
/Tvals <<
TNvals {[exch]} forall
T1vals {[exch TNvals sft1 get exch]} forall
T2vals {[exch TNvals sft2 get exch]} forall
T3vals {[exch TNvals sft3 get exch]} forall
>> def

% Extended ASCII mappings
128 1 255 {
/i exch def
Avals i [ Avals usft get aload pop Avals i 128 sub get aload pop ] put
Cvals i [ Cvals usft get aload pop Cvals i 128 sub get aload pop ] put
Tvals i [ Tvals usft get aload pop Tvals i 128 sub get aload pop ] put
} for

/Xvals <<
13 0
42 1
62 2
32 3
48 1 57 {dup 44 sub} for
65 1 90 {dup 51 sub} for
>> def
/Xvals <<
Xvals {[exch]} forall
>> def

/Evals <<
64 1 94 {dup 64 sub} for
unl 31
32 1 63 {dup} for
>> def
/Evals <<
Evals {[exch]} forall
>> def

/Bvals <<
0 1 255 {dup} for
>> def
/Bvals <<
Bvals {[exch]} forall
>> def

/encvals [ Avals Cvals Tvals Xvals Evals Bvals ] def

/numD [ msglen {0} repeat 0 ] def
/nextXterm [ msglen {0} repeat 9999 ] def
/nextNonX  [ msglen {0} repeat 9999 ] def
msglen 1 sub -1 0 {
/i exch def
/barchar msg i get def
barchar 48 ge barchar 57 le and {
numD i numD i 1 add get 1 add put
} if
barchar 13 eq barchar 42 eq or barchar 62 eq or {
nextXterm i 0 put
} {
nextXterm i nextXterm i 1 add get 1 add put
} ifelse
Xvals barchar known not {
nextNonX i 0 put
} {
nextNonX i nextNonX i 1 add get 1 add put
} ifelse
} for
/nextXterm [nextXterm {dup 10000 gt {pop 10000} if} forall] def
/nextNonX  [nextNonX  {dup 10000 gt {pop 10000} if} forall] def

/isD  {char 48 ge char 57 le and} bind def
/isC  {CNvals char known} bind def
/isT  {TNvals char known} bind def
/isX  {Xvals char known} bind def
/isE  {Evals char known} bind def
/isEA {char 127 gt} bind def
/isFN {char 0 lt} bind def
/XtermFirst {dup nextXterm exch get exch nextNonX exch get lt} bind def

/A 0 def  /C 1 def  /T 2 def  /X 3 def  /E 4 def  /B 5 def

/lookup {
/ac 1 def /cc 2 def /tc 2 def /xc 2 def /ec 2 def /bc 2.25 def
mode A eq {/ac 0 def /cc 1 def /tc 1 def /xc 1 def /ec 1 def /bc 1.25 def} if
mode C eq {/cc 0 def} if
mode T eq {/tc 0 def} if
mode X eq {/xc 0 def} if
mode E eq {/ec 0 def} if
mode B eq {/bc 0 def} if
1 {  % common exit
/k 0 def {  % loop
i k add msglen eq {
[/ac /cc /tc /xc /ec /bc] {dup load ceiling def} forall
true [   cc tc xc ec bc] {ac exch le and} forall {A exit} if
true [ac cc tc xc ec   ] {bc exch lt and} forall {B exit} if
true [ac cc tc xc    bc] {ec exch lt and} forall {E exit} if
true [ac cc    xc ec bc] {tc exch lt and} forall {T exit} if
true [ac cc tc    ec bc] {xc exch lt and} forall {X exit} if
C exit
} if
/char msg i k add get def
/ac ac isD {1 2 div add} {isEA {ceiling 2 add} {ceiling 1 add} ifelse} ifelse def
/cc cc isC {2 3 div add} {isEA { 8 3 div add } { 4 3 div add } ifelse} ifelse def
/tc tc isT {2 3 div add} {isEA { 8 3 div add } { 4 3 div add } ifelse} ifelse def
/xc xc isX {2 3 div add} {isEA {13 3 div add } {10 3 div add } ifelse} ifelse def
/ec ec isE {3 4 div add} {isEA {17 4 div add } {13 4 div add } ifelse} ifelse def
/bc bc isFN {4 add} {1 add} ifelse def
k 4 ge {
true [   cc tc xc ec bc] {ac 1 add exch le and} forall {A exit} if
bc 1 add ac le {B exit} if
true [   cc tc xc ec   ] {bc 1 add exch lt and} forall {B exit} if
true [ac cc tc xc    bc] {ec 1 add exch lt and} forall {E exit} if
true [ac cc    xc ec bc] {tc 1 add exch lt and} forall {T exit} if
true [ac cc tc    ec bc] {xc 1 add exch lt and} forall {X exit} if
true [ac    tc    ec bc] {cc 1 add exch lt and} forall {
cc xc lt {C exit} if
cc xc eq {i k add 1 add XtermFirst {X exit} {C exit} ifelse} if
} if
} if
/k k 1 add def
} loop
} repeat
} bind def

/addtocws {
dup cws exch j exch putinterval
/j exch length j add def
} bind def

/encA {
1 {  % Common exit
numD i get 2 ge {
2 string dup 0 msg i get put dup 1 msg i 1 add get put Avals exch get addtocws
/i i 2 add def
exit
} if
/newmode lookup def
newmode mode ne {
Avals [-1 lC lT lX lE lB] newmode get get addtocws
/mode newmode def
exit
} if
Avals msg i get get addtocws
/i i 1 add def
exit
} repeat
} bind def

/CTXvalstocws {
/in exch def
mark
0 3 in length 1 sub {
in exch 3 getinterval 0 exch {add 40 mul} forall 40 idiv 1 add
dup 256 idiv exch 256 mod
} for
counttomark array astore exch pop
} bind def

/encCTX {
/p 0 def
/ctxvals 2500 array def

% Lookup the values for each character
{
i msglen eq {exit} if
encvals mode get msg i get known not {exit} if
p 3 mod 0 eq {
lookup mode ne {
ctxvals 0 p getinterval CTXvalstocws addtocws
[unlcw] addtocws
/mode A def
exit
} if
msglen i sub 3 le {  % Check end of data conditions
/remcws numremcws j p 3 idiv 2 mul add get def
/remvals [
msg i msglen i sub getinterval {
dup encvals mode get exch known {
encvals mode get exch get aload pop
} {  % Unencodable X12 characters
pop -1 -1 -1 -1
} ifelse
} forall
] def
remcws 2 eq remvals length 3 eq and {
% Encode and omit unlatch
[
ctxvals 0 p getinterval aload pop
remvals aload pop
] CTXvalstocws addtocws
/mode A def
/i msglen def
exit
} if
remcws 2 eq remvals length 2 eq and mode X ne and {
% Encode with sft1 as third value, omit unlatch
[
ctxvals 0 p getinterval aload pop
remvals aload pop
encvals mode get sft1 get aload pop
] CTXvalstocws addtocws
/mode A def
/i msglen def
exit
} if
remcws 2 eq remvals length 1 eq and {
% Unlatch to ASCII
ctxvals 0 p getinterval CTXvalstocws addtocws
[unlcw] addtocws
Avals msg i get get addtocws
/mode A def
/i msglen def
exit
} if
remcws 1 eq remvals length 1 eq and {
% Implied unlatch to ASCII
ctxvals 0 p getinterval CTXvalstocws addtocws
Avals msg i get get addtocws
/mode A def
/i msglen def
exit
} if
} if
} if
encvals mode get msg i get get
dup ctxvals exch p exch putinterval
/p exch length p add def
/i i 1 add def
} loop

% Backtrack to a boundary and return to ASCII
mode A ne {
{
p 3 mod 0 eq {exit} if
/i i 1 sub def
/p p encvals mode get msg i get get length sub def
} loop
[
ctxvals 0 p getinterval aload pop
] CTXvalstocws addtocws
[unlcw] addtocws
/mode A def
% Encode something to avoid latching immediately back
i msglen ne {
numD i get 2 ge {
2 string dup 0 msg i get put dup 1 msg i 1 add get put Avals exch get addtocws
/i i 2 add def
} {
Avals msg i get get addtocws
/i i 1 add def
} ifelse
} if
} if

} bind def

/Evalstocws {
/in exch def
/inlen in length def
/outlen in length 4 div 3 mul ceiling cvi def
/in [ in aload pop 0 0 0 ] def
mark
0 4 inlen 1 sub {
in exch 4 getinterval 0 exch {or 6 bitshift} forall -6 bitshift
dup -16 bitshift 255 and exch
dup -8 bitshift 255 and exch
255 and
} for
counttomark array astore exch pop
0 outlen getinterval
} bind def

/encE {
/p 0 def
/edifactvals 2100 array def

% Lookup the values for each character
{
i msglen eq {exit} if
Evals msg i get known not {exit} if
p 4 mod 0 eq {
lookup mode ne {exit} if
msglen i sub 2 le {  % Check end of data conditions
/remcws numremcws j p 4 idiv 3 mul add get def
/remvals [
msg i msglen i sub getinterval {
dup Evals exch known {
Evals exch get aload pop
} {  % Unencodable EDIFACT characters
pop -1 -1 -1 -1 -1
} ifelse
} forall
] def
remcws 2 eq remvals length 2 eq and {
% Implied unlatch to ASCII
edifactvals 0 p getinterval Evalstocws addtocws
Avals msg i get get addtocws
Avals msg i 1 add get get addtocws
/mode A def
/i msglen def
exit
} if
remcws 2 eq remcws 1 eq or remvals length 1 eq and {
% Implied unlatch to ASCII
edifactvals 0 p getinterval Evalstocws addtocws
Avals msg i get get addtocws
/mode A def
/i msglen def
exit
} if
} if
} if
Evals msg i get get
dup edifactvals exch p exch putinterval
/p exch length p add def
/i i 1 add def
} loop

% Unlatch and pad with zeros until boundary
mode A ne {
/remcws numremcws j p 4 idiv 3 mul add 1 sub get 1 sub def
remcws 0 ne {  % Unlatch if we haven't filled symbol
Evals unl get
dup edifactvals exch p exch putinterval
/p exch length p add def
} if
edifactvals 0 p getinterval Evalstocws addtocws
/mode A def
% Encode something to avoid latching immediately back
i msglen ne {
numD i get 2 ge {
2 string dup 0 msg i get put dup 1 msg i 1 add get put Avals exch get addtocws
/i i 2 add def
} {
Avals msg i get get addtocws
/i i 1 add def
} ifelse
} if
} if

} bind def

/encB {
/p 0 def /bvals 1558 array def {
i msglen eq {exit} if
lookup mode ne {exit} if
bvals p msg i get put
/p p 1 add def
/i i 1 add def
} loop
/remcws numremcws j p add get 1 sub def
/bvals [
remcws 0 eq i msglen eq and {  % Terminates symbol
0
} {
p 250 lt {p} {p 250 idiv 249 add p 250 mod} ifelse
} ifelse
bvals 0 p getinterval aload pop
] def
0 1 bvals length 1 sub {  % Pseudo-randomise based on codeword position
/p exch def
j p add 1 add 149 mul 255 mod 1 add bvals p get add
dup 256 ge {256 sub} if
bvals exch p exch put
} for
bvals addtocws
/mode A def
} bind def

% Derive the codewords
/cws 1558 array def
/mode A def /i 0 def /j 0 def {
i msglen ge {exit} if
[ /encA /encCTX /encCTX /encCTX /encE /encB ] mode get load exec
} loop
/cws cws 0 j getinterval def

% Extend codewords to fill symbol with pseudo-randomised pad characters
/datlen cws length def
/remcws numremcws j 1 sub get 1 sub def
remcws 0 gt {
/cws [ cws aload pop remcws {129} repeat ] def
datlen 1 add 1 datlen remcws add 1 sub {
/i exch def
i 1 add 149 mul 253 mod 1 add 129 add
dup 254 gt {254 sub} if
cws exch i exch put
} for
} if

% Lookup symbol metrics based on number of codewords and user specification
/i 0 def { % loop
/m metrics i get def
/rows m 0 get def                          % Rows in symbol
/cols m 1 get def                          % Columns in symbol
/regh m 2 get def                          % Horizontal regions
/regv m 3 get def                          % Vertical regions
/rscw m 4 get def                          % Error correction codewords
/rsbl m 5 get def                          % Error correction blocks
/mrows rows 2 regh mul sub def             % Rows in the mapping matrix
/mcols cols 2 regv mul sub def             % Columns in the mapping matrix
/rrows mrows regh idiv def                 % Rows per region
/rcols mcols regv idiv def                 % Columns per region
/ncws mrows mcols mul 8 idiv rscw sub def  % Data codewords
/okay true def
cws length ncws ne           {/okay false def} if
urows 0 ne urows rows ne and {/okay false def} if
ucols 0 ne ucols cols ne and {/okay false def} if
okay {exit} if
/i i 1 add def
} loop

% De-interleave the codewords into blocks
/cwbs rsbl array def  % Array of data codeword blocks
/ecbs rsbl array def  % Array of error correction blocks
0 1 rsbl 1 sub {
/i exch def
cws length 1558 ne {
/cwbsize cws length rsbl idiv def
} {
i 7 le {/cwbsize 156 def} {/cwbsize 155 def} ifelse
} ifelse
/cwb cwbsize array def
0 1 cwbsize 1 sub {
/j exch def
cwb j cws j rsbl mul i add get put
} for
cwbs i cwb put
ecbs i [ rscw rsbl idiv {0} repeat ] put
} for

% Calculate the log and anti-log tables
/rsalog [ 1 255 { dup 2 mul dup 256 ge {301 xor} if } repeat ] def
/rslog 256 array def
1 1 255 {dup rsalog exch get exch rslog 3 1 roll put} for

% Function to calculate the product in the field
/rsprod {
2 copy 0 ne exch 0 ne and {
rslog exch get exch rslog exch get add 255 mod rsalog exch get
} {
pop pop 0
} ifelse
} bind def

% Generate the coefficients
/coeffs [ 1 rscw rsbl idiv {0} repeat ] def
1 1 rscw rsbl idiv {
/i exch def
coeffs i coeffs i 1 sub get put
i 1 sub -1 1 {
/j exch def
coeffs j coeffs j 1 sub get coeffs j get rsalog i get rsprod xor put
} for
coeffs 0 coeffs 0 get rsalog i get rsprod put
} for
/coeffs coeffs 0 coeffs length 1 sub getinterval def

% Calculate the error correction codewords for each block
0 1 cwbs length 1 sub {
/i exch def
/cwb cwbs i get def
/ecb ecbs i get def
0 1 cwb length 1 sub {
/t exch cwb exch get ecb 0 get xor def
ecb length 1 sub -1 0 {
/j exch def
/p ecb length j sub 1 sub def
ecb p t coeffs j get rsprod put
j 0 gt { ecb p ecb p 1 add get ecb p get xor put } if
} for
} for
} for

% Strange fixup for 144x144 symbols
ncws 1558 eq {
/ecbs [ ecbs 8 2 getinterval {} forall ecbs 0 8 getinterval {} forall ] def
} if

% Extend codewords with the interleaved error correction codes
/cws [ cws {} forall rscw {0} repeat ] def
0 1 rscw 1 sub {
/i exch def
cws ncws i add ecbs i rsbl mod get i rsbl idiv get put
} for

% Place the codewords into the matrix
/module {
% cw row col shape
4 -1 roll
(00000000) 8 string copy dup 3 -1 roll 2 8 string cvrs
dup length 8 exch sub exch putinterval
7 -1 0 {1 index exch get 48 sub exch} for pop
11 -3 roll
% 1 2 4 8 16 32 64 128 row col shape
{  % Place each bit of the codeword in the shape, MSB first
exec
1 index 0 lt {
exch mrows add exch
4 mrows 4 add 8 mod sub add
} if
dup 0 lt {
mcols add exch
4 mcols 4 add 8 mod sub add exch
} if
exch mcols mul add
mmat exch 5 -1 roll put
} forall
} bind def

% Placement patterns
/dmn [
{ 2 copy 2 sub exch 2 sub exch } bind  { 2 copy 1 sub exch 2 sub exch } bind
{ 2 copy 2 sub exch 1 sub exch } bind  { 2 copy 1 sub exch 1 sub exch } bind
{ 2 copy exch 1 sub exch } bind        { 2 copy 2 sub } bind
{ 2 copy 1 sub } bind                  { 2 copy } bind
] def

/dmc1 [
{ mrows 1 sub 0 } bind  { mrows 1 sub 1 } bind
{ mrows 1 sub 2 } bind  { 0 mcols 2 sub } bind
{ 0 mcols 1 sub } bind  { 1 mcols 1 sub } bind
{ 2 mcols 1 sub } bind  { 3 mcols 1 sub } bind
] def

/dmc2 [
{ mrows 3 sub 0 } bind  { mrows 2 sub 0 } bind
{ mrows 1 sub 0 } bind  { 0 mcols 4 sub } bind
{ 0 mcols 3 sub } bind  { 0 mcols 2 sub } bind
{ 0 mcols 1 sub } bind  { 1 mcols 1 sub } bind
] def

/dmc3 [
{ mrows 3 sub 0 } bind  { mrows 2 sub 0 } bind
{ mrows 1 sub 0 } bind  { 0 mcols 2 sub } bind
{ 0 mcols 1 sub } bind  { 1 mcols 1 sub } bind
{ 2 mcols 1 sub } bind  { 3 mcols 1 sub } bind
] def

/dmc4 [
{ mrows 1 sub 0 } bind  { mrows 1 sub mcols 1 sub } bind
{ 0 mcols 3 sub } bind  { 0 mcols 2 sub } bind
{ 0 mcols 1 sub } bind  { 1 mcols 3 sub } bind
{ 1 mcols 2 sub } bind  { 1 mcols 1 sub } bind
] def

/mmat [ mrows mcols mul {-1} repeat ] def
cws length 1 sub -1 0 {cws exch get} for  % Reverse cws onto stack
4 0  % Starting row and column
{ % loop
2 copy 0 eq exch mrows eq and {
dmc1 module
} if
2 copy 0 eq exch mrows 2 sub eq and mcols 4 mod 0 ne and {
dmc2 module
} if
2 copy 0 eq exch mrows 2 sub eq and mcols 8 mod 4 eq and {
dmc3 module
} if
2 copy 2 eq exch mrows 4 add eq and mcols 8 mod 0 eq and {
dmc4 module
} if

{ % loop for sweeping upwards
2 copy 0 ge exch mrows lt and {
2 copy exch mcols mul add mmat exch get -1 eq {
dmn module
} if
} if
2 add exch 2 sub exch
2 copy mcols lt exch 0 ge and not {exit} if
} loop
3 add exch 1 add exch

{ % loop for sweeping downwards
2 copy mcols lt exch 0 ge and {
2 copy exch mcols mul add mmat exch get -1 eq {
dmn module
} if
} if
2 sub exch 2 add exch
2 copy 0 ge exch mrows lt and not {exit} if
} loop
1 add exch 3 add exch

2 copy mcols lt exch mrows lt or not {pop pop exit} if

} loop

% Set checker pattern if required
mmat mrows mcols mul 1 sub get -1 eq {
mmat mrows mcols 1 sub mul 2 sub [1 0] putinterval
mmat mrows mcols mul 2 sub [0 1] putinterval
} if

% Place the modules onto a pixel map between alignment patterns
/pixs rows cols mul array def
/cwpos 0 def
0 1 rows 1 sub {
/i exch def
i rrows 2 add mod 0 eq { pixs i cols mul [ cols 2 idiv {1 0} repeat ] putinterval } if
i rrows 2 add mod rrows 1 add eq { pixs i cols mul [ cols {1} repeat ] putinterval } if
i rrows 2 add mod 0 ne i rrows 2 add mod rrows 1 add ne and {
0 1 cols 1 sub {
/j exch def
j rcols 2 add mod 0 eq { pixs i cols mul j add 1 put } if
j rcols 2 add mod rcols 1 add eq { pixs i cols mul j add i 2 mod put } if
j rcols 2 add mod 0 ne j rcols 2 add mod rcols 1 add ne and {
pixs i cols mul j add mmat cwpos get put
/cwpos cwpos 1 add def
} if
} for
} if
} for

% Return the arguments
<<
/ren //renmatrix
/pixs pixs
/pixx cols
/pixy rows
/height rows 2 mul 72 div
/width cols 2 mul 72 div
/opt options
>>

dontdraw not //renmatrix if

end

} bind def
/datamatrix dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER datamatrix--

% --BEGIN ENCODER qrcode--
% --REQUIRES preamble raiseerror renmatrix--
% --DESC: QR Code
% --EXAM: http://goo.gl/0bis
% --EXOP: eclevel=M
% --RNDR: renmatrix
%%BeginResource: QRCODE qrcode 0.0 2015112400 267379 277512
%%BeginData:       1019 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renmatrix dup /QRCODE findresource put
begin
/qrcode {

20 dict begin

/options exch def
/barcode exch def

/dontdraw false def
/format (full) def     % full or micro or any
/version (unset) def   % 1-40 or M1-M4
/eclevel (unset) def   % L, M, Q or H
/parse false def
/parsefnc false def
/mask -1 def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/mask mask cvi def

% Parse ordinals of the form ^NNN to ASCII
parse {
/msg barcode length string def
/j 0 def
barcode
{ % loop
(^) search {
dup msg exch j exch putinterval
length j add 1 add /j exch def
pop
dup 0 3 getinterval cvi msg exch j 1 sub exch put
dup length 3 sub 3 exch getinterval
} {
dup msg exch j exch putinterval
length j add /j exch def
/barcode msg 0 j getinterval def
exit
} ifelse
} loop
} if

/barlen barcode length def

% Convert input into bytes accounting for FNC characters
/fn1 -1 def
/fncvals <<
(FNC1) fn1
>> def
/msg barlen array def
/i 0 def /j 0 def {
i barlen eq {exit} if
/char barcode i get def
parsefnc char 94 eq and i barlen 4 sub lt and {
barcode i 1 add get 94 ne {
/char fncvals barcode i 1 add 4 getinterval get def
/i i 4 add def
} {
/i i 1 add def
} ifelse
} if
msg j char put
/i i 1 add def
/j j 1 add def
} loop
/msg msg 0 j getinterval def
/msglen msg length def

% If FNC1 in first position then escape % as %%
/fnc1first false def
msglen 0 gt {
msg 0 get fn1 eq {
/fnc1first true def
/msg [ msg 1 msglen 1 sub getinterval { dup 37 eq {dup} if } forall ] def
/msglen msg length def
} if
} if

% Default error correction level
eclevel (unset) eq {/eclevel format (full) eq {(M)} {(L)} ifelse def} if

% Convert from input into message bitstream
/N 0 def  /A 1 def  /B 2 def  /K 3 def

/Nexcl <<
[
16#30 1 16#39 {} for
] {-1} forall
>> def

/Aexcl <<
[
16#20 16#24 16#25 16#2A 16#2B 16#2D 16#2E 16#2F 16#3A
16#41 1 16#5A {} for
] {-1} forall
>> def

/Bexcl <<
[
16#00 1 16#1F {} for
16#21 16#22 16#23 16#26 16#27 16#28 16#29 16#2C
16#3B 1 16#40 {} for
16#5B 1 16#7F {} for
16#A0 1 16#DF {} for
] {-1} forall
>> def

/Kexcl <<
[
16#81 1 16#9F {} for
16#E0 1 16#EB {} for
] {-1} forall
>> def

/mids [  % N  A  B  K
[ (0001) (0010) (0100) (1000) ]  %  1-9
[ (0001) (0010) (0100) (1000) ]  % 10-26
[ (0001) (0010) (0100) (1000) ]  % 27-40
[     ()   -1     -1     -1   ]  % M1
[    (0)    (1)   -1     -1   ]  % M2
[   (00)   (01)   (10)   (11) ]  % M3
[  (000)  (001)  (010)  (011) ]  % M4
] def

/cclens [  % N  A  B  K
[ 10  9  8  8 ]  %  1-9
[ 12 11 16 10 ]  % 10-26
[ 14 13 16 12 ]  % 27-40
[  3 -1 -1 -1 ]  % M1
[  4  3 -1 -1 ]  % M2
[  5  4  4  3 ]  % M3
[  6  5  5  4 ]  % M4
] def

/termlens [ 4 4 4 3 5 7 9 ] def

% Encoding functions
/tobin {
string dup length 1 sub 0 exch 1 exch {1 index exch 48 put} for
dup 3 -1 roll 2 2 index length string cvrs dup length 2 index length exch sub exch putinterval
} bind def

% Alphanumeric character to value map
/charmap (0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:) def
/charvals 44 dict def
0 1 44 {dup charmap exch get exch charvals 3 1 roll put} for

/encA {
/in exch def
fnc1first {  % FNC1 as %
/in [ in { dup -1 eq {pop 37} if } forall ] def
} if
/out in length 11 mul 2 idiv 1 add string def
/k 0 def /m 0 def {
k in length eq {exit} if
k in length 1 sub lt {
charvals in k get get 45 mul charvals in k 1 add get get add 11 tobin
/k k 2 add def
} {  % Final character
charvals in k get get 6 tobin
/k k 1 add def
} ifelse
dup out exch m exch putinterval
length m add /m exch def
} loop
out 0 m getinterval
} bind def

/encN {
/in exch def
/out in length 10 mul 3 idiv 1 add string def
/k 0 def /m 0 def {
k in length eq {exit} if
k in length 2 sub lt {
in k 3 getinterval 0 exch {exch 10 mul 48 sub add} forall 10 tobin
/k k 3 add def
} {
k in length 2 sub eq {  % Two final digits
in k 2 getinterval 0 exch {exch 10 mul 48 sub add} forall 7 tobin
/k k 2 add def
} {  % One final digit
in k 1 getinterval 0 exch {exch 10 mul 48 sub add} forall 4 tobin
/k k 1 add def
} ifelse
} ifelse
dup out exch m exch putinterval
length m add /m exch def
} loop
out 0 m getinterval
} bind def

/encB {
/in exch def
fnc1first {  % FNC1 as GS
/in [ in { dup -1 eq {pop 29} if } forall ] def
} if
/out in length 8 mul string def
0 1 in length 1 sub {
/k exch def
in k get cvi 8 tobin
out k 8 mul 3 -1 roll putinterval
} for
out
} bind def

/encK {
/in exch def
/out in length 2 idiv 13 mul string def
/k 0 def /m 0 def {
k in length eq {exit} if
in k get 256 mul in k 1 add get add
dup 16#E040 lt {16#8140} {16#C140} ifelse sub
dup -8 bitshift 16#C0 mul exch 16#00FF and add
13 tobin dup out exch m exch putinterval
length m add /m exch def
/k k 2 add def
} loop
out
} bind def

/encfuncs [ /encN /encA /encB /encK ] def

/addtobits {
dup bits j 3 -1 roll putinterval
length j add /j exch def
} bind def

/numNs [ msglen {0} repeat 0 ] def
/numAs [ msglen {0} repeat 0 ] def
/numBs [ msglen {0} repeat 0 ] def
/numKs [ msglen {0} repeat -1 ] def
/nextNs [ msglen {0} repeat 9999 ] def
/nextBs [ msglen {0} repeat 9999 ] def
/nextAs [ msglen {0} repeat 9999 ] def
/nextKs [ msglen {0} repeat 9999 ] def
msglen 1 sub -1 0 {
/i exch def
/barchar msg i get def
Kexcl barchar known {
nextKs i 0 put
numKs i numKs i 1 add get 1 add put
} {
nextKs i nextKs i 1 add get 1 add put
} ifelse
Nexcl barchar known {
nextNs i 0 put
numNs i numNs i 1 add get 1 add put
} {
nextNs i nextNs i 1 add get 1 add put
} ifelse
Bexcl barchar known {
nextBs i 0 put
numBs i numBs i 1 add get 1 add put
} {
nextBs i nextBs i 1 add get 1 add put
} ifelse
Aexcl barchar known {
nextAs i 0 put
numAs i numAs i 1 add get 1 add put
} {
nextAs i nextAs i 1 add get 1 add put
} ifelse
} for
/numKs [ numKs {1 add 2 idiv} forall ] def

/KbeforeB {numK exch ver get ge nextBs numK 2 mul i add get 0 eq and} bind def
/KbeforeA {numK exch ver get ge nextAs numK 2 mul i add get 0 eq and} bind def
/KbeforeN {numK exch ver get ge nextNs numK 2 mul i add get 0 eq and} bind def
/KbeforeE {numK exch ver get ge numK 2 mul i add msglen eq and} bind def
/AbeforeK {numA exch ver get ge nextKs numA i add get 0 eq and} bind def
/AbeforeB {numA exch ver get ge nextBs numA i add get 0 eq and} bind def
/AbeforeN {numA exch ver get ge nextNs numA i add get 0 eq and} bind def
/AbeforeE {numA exch ver get ge numA i add msglen eq and} bind def
/NbeforeK {numN exch ver get ge nextKs numN i add get 0 eq and} bind def
/NbeforeB {numN exch ver get ge nextBs numN i add get 0 eq and} bind def
/NbeforeA {numN exch ver get ge nextAs numN i add get 0 eq and} bind def
/NbeforeE {numN exch ver get ge numN i add msglen eq and} bind def

% Encode unterminated bitsream for each version group separately
/msgbits [-1 -1 -1 -1 -1 -1 -1] def
/v1to9 0 def  /v10to26 1 def  /v27to40 2 def  /vM1 3 def  /vM2 4 def  /vM3 5 def  /vM4 6 def
/e 10000 def
[v1to9 v10to26 v27to40 vM1 vM2 vM3 vM4] {
/ver exch def

% Derive optimal sequence
/mode -1 def /seq [] def /i 0 def {
i msglen ge {exit} if
/numK numKs i get def
/numB numBs i get def
/numA numAs i get def
/numN numNs i get def
ver vM1 eq numA 1 ge and {/seq -1 def exit} if
ver vM1 eq numB 1 ge and {/seq -1 def exit} if
ver vM1 eq numK 1 ge and {/seq -1 def exit} if
ver vM2 eq numB 1 ge and {/seq -1 def exit} if
ver vM2 eq numK 1 ge and {/seq -1 def exit} if
{  % common exit
mode -1 eq {  % Set initial mode
[ 1  1  1  e  e  1  1] KbeforeA {K exit} if
[ 1  1  1  e  e  1  1] KbeforeN {K exit} if
[ 5  5  6  e  e  2  3] KbeforeB {K exit} if
[ 1  1  1  e  e  1  1] KbeforeE {K exit} if
numK 1 ge {B exit} if
[ 6  7  8  e  e  3  4] AbeforeB {A exit} if
[ 1  1  1  e  1  1  1] AbeforeE {A exit} if
numA 1 ge {
ver vM1 ne ver vM2 ne and {B} {A} ifelse exit
} if
[ 4  4  5  e  e  2  3] NbeforeB {N exit} if
[ 1  1  1  e  e  1  1] NbeforeB {B exit} if
[ 7  8  9  e  3  4  5] NbeforeA {N exit} if
[ 1  1  1  e  1  1  1] NbeforeA {A exit} if
numN 1 ge {N exit} if
B exit
} if
mode B eq {
[ 9 12 13  e  e  4  5] KbeforeB {K exit} if
[ 9 10 12  e  e  4  5] KbeforeA {K exit} if
[ 9 10 11  e  e  5  6] KbeforeN {K exit} if
[ 4  5  6  e  e  2  3] KbeforeE {K exit} if
[11 12 14  e  e  5  7] AbeforeK {A exit} if
[11 15 16  e  e  6  7] AbeforeB {A exit} if
[12 13 15  e  e  6  8] AbeforeN {A exit} if
[ 6  7  8  e  e  3  4] AbeforeE {A exit} if
[ 6  7  8  e  e  3  4] NbeforeK {N exit} if
[ 6  8  9  e  e  3  4] NbeforeB {N exit} if
[ 6  7  8  e  e  3  4] NbeforeA {N exit} if
[ 3  4  5  e  e  2  3] NbeforeE {N exit} if
B exit
} if
mode A eq {
numK 1 ge {K exit} if
numB 1 ge {B exit} if
[13 15 17  e  5  7  9] NbeforeA {N exit} if
[13 17 18  e  e  7  9] NbeforeB {N exit} if
[ 7  8  9  e  3  4  5] NbeforeE {N exit} if
A exit
} if
mode N eq {
numK 1 ge {K exit} if
numB 1 ge {B exit} if
numA 1 ge {A exit} if
N exit
} if
mode K eq {
numB 1 ge {B exit} if
numA 1 ge {A exit} if
numN 1 ge {N exit} if
K exit
} if
} loop
dup K eq fnc1first and {pop B} if  % No kanji with fnc1first
dup mode eq {  % Same mode encode directly
pop
/dat msg i mode K eq {2} {1} ifelse getinterval def
/seq [
seq aload pop
[ exch aload pop dat aload pop ]
] def
} {  % Change mode
/mode exch def
mode K eq {K msg i numK 2 mul getinterval} if
mode B eq {B msg i numB getinterval} if
mode A eq {A msg i numA getinterval} if
mode N eq {N msg i numN getinterval} if
/dat exch def /sw exch def
/seq [ seq aload pop sw dat ] def
} ifelse
/i i dat length add def
} loop

% Encode the sequence
{  % common exit
seq -1 eq {exit} if  % Sequence not available
/bits 23648 string def
/j 0 def
fnc1first {(0101) addtobits} if
/abort false def
0 2 seq length 1 sub {
/i exch def
/mode seq i get def
mids ver get mode get addtobits
/cclen cclens ver get mode get def
/chars seq i 1 add get def
chars length 2 cclen exp cvi ge {  % Too many characters for cc indicator
/abort true def exit
} if
chars length mode K eq {2 idiv} if cclen tobin addtobits
chars encfuncs mode get load exec addtobits
} for
abort {exit} if
/bits bits 0 j getinterval def
msgbits ver bits put
exit
} loop
} forall

% Lookup the most appropriate symbol specification
/metrics [
% format   vers  vergrp  size align modules    error codewords        error correction blocks
%                                              L    M    Q    H       L1 L2 M1 M2 Q1 Q2 H1 H2
[ (micro)  (M1)  vM1       11  98 99     36  [   2   99   99   99 ]  [  1  0 -1 -1 -1 -1 -1 -1 ] ]
[ (micro)  (M2)  vM2       13  98 99     80  [   5    6   99   99 ]  [  1  0  1  0 -1 -1 -1 -1 ] ]
[ (micro)  (M3)  vM3       15  98 99    132  [   6    8   99   99 ]  [  1  0  1  0 -1 -1 -1 -1 ] ]
[ (micro)  (M4)  vM4       17  98 99    192  [   8   10   14   99 ]  [  1  0  1  0  1  0 -1 -1 ] ]
[ (full)   (1)   v1to9     21  98 99    208  [   7   10   13   17 ]  [  1  0  1  0  1  0  1  0 ] ]
[ (full)   (2)   v1to9     25  18 99    359  [  10   16   22   28 ]  [  1  0  1  0  1  0  1  0 ] ]
[ (full)   (3)   v1to9     29  22 99    567  [  15   26   36   44 ]  [  1  0  1  0  2  0  2  0 ] ]
[ (full)   (4)   v1to9     33  26 99    807  [  20   36   52   64 ]  [  1  0  2  0  2  0  4  0 ] ]
[ (full)   (5)   v1to9     37  30 99   1079  [  26   48   72   88 ]  [  1  0  2  0  2  2  2  2 ] ]
[ (full)   (6)   v1to9     41  34 99   1383  [  36   64   96  112 ]  [  2  0  4  0  4  0  4  0 ] ]
[ (full)   (7)   v1to9     45  22 38   1568  [  40   72  108  130 ]  [  2  0  4  0  2  4  4  1 ] ]
[ (full)   (8)   v1to9     49  24 42   1936  [  48   88  132  156 ]  [  2  0  2  2  4  2  4  2 ] ]
[ (full)   (9)   v1to9     53  26 46   2336  [  60  110  160  192 ]  [  2  0  3  2  4  4  4  4 ] ]
[ (full)   (10)  v10to26   57  28 50   2768  [  72  130  192  224 ]  [  2  2  4  1  6  2  6  2 ] ]
[ (full)   (11)  v10to26   61  30 54   3232  [  80  150  224  264 ]  [  4  0  1  4  4  4  3  8 ] ]
[ (full)   (12)  v10to26   65  32 58   3728  [  96  176  260  308 ]  [  2  2  6  2  4  6  7  4 ] ]
[ (full)   (13)  v10to26   69  34 62   4256  [ 104  198  288  352 ]  [  4  0  8  1  8  4 12  4 ] ]
[ (full)   (14)  v10to26   73  26 46   4651  [ 120  216  320  384 ]  [  3  1  4  5 11  5 11  5 ] ]
[ (full)   (15)  v10to26   77  26 48   5243  [ 132  240  360  432 ]  [  5  1  5  5  5  7 11  7 ] ]
[ (full)   (16)  v10to26   81  26 50   5867  [ 144  280  408  480 ]  [  5  1  7  3 15  2  3 13 ] ]
[ (full)   (17)  v10to26   85  30 54   6523  [ 168  308  448  532 ]  [  1  5 10  1  1 15  2 17 ] ]
[ (full)   (18)  v10to26   89  30 56   7211  [ 180  338  504  588 ]  [  5  1  9  4 17  1  2 19 ] ]
[ (full)   (19)  v10to26   93  30 58   7931  [ 196  364  546  650 ]  [  3  4  3 11 17  4  9 16 ] ]
[ (full)   (20)  v10to26   97  34 62   8683  [ 224  416  600  700 ]  [  3  5  3 13 15  5 15 10 ] ]
[ (full)   (21)  v10to26  101  28 50   9252  [ 224  442  644  750 ]  [  4  4 17  0 17  6 19  6 ] ]
[ (full)   (22)  v10to26  105  26 50  10068  [ 252  476  690  816 ]  [  2  7 17  0  7 16 34  0 ] ]
[ (full)   (23)  v10to26  109  30 54  10916  [ 270  504  750  900 ]  [  4  5  4 14 11 14 16 14 ] ]
[ (full)   (24)  v10to26  113  28 54  11796  [ 300  560  810  960 ]  [  6  4  6 14 11 16 30  2 ] ]
[ (full)   (25)  v10to26  117  32 58  12708  [ 312  588  870 1050 ]  [  8  4  8 13  7 22 22 13 ] ]
[ (full)   (26)  v10to26  121  30 58  13652  [ 336  644  952 1110 ]  [ 10  2 19  4 28  6 33  4 ] ]
[ (full)   (27)  v27to40  125  34 62  14628  [ 360  700 1020 1200 ]  [  8  4 22  3  8 26 12 28 ] ]
[ (full)   (28)  v27to40  129  26 50  15371  [ 390  728 1050 1260 ]  [  3 10  3 23  4 31 11 31 ] ]
[ (full)   (29)  v27to40  133  30 54  16411  [ 420  784 1140 1350 ]  [  7  7 21  7  1 37 19 26 ] ]
[ (full)   (30)  v27to40  137  26 52  17483  [ 450  812 1200 1440 ]  [  5 10 19 10 15 25 23 25 ] ]
[ (full)   (31)  v27to40  141  30 56  18587  [ 480  868 1290 1530 ]  [ 13  3  2 29 42  1 23 28 ] ]
[ (full)   (32)  v27to40  145  34 60  19723  [ 510  924 1350 1620 ]  [ 17  0 10 23 10 35 19 35 ] ]
[ (full)   (33)  v27to40  149  30 58  20891  [ 540  980 1440 1710 ]  [ 17  1 14 21 29 19 11 46 ] ]
[ (full)   (34)  v27to40  153  34 62  22091  [ 570 1036 1530 1800 ]  [ 13  6 14 23 44  7 59  1 ] ]
[ (full)   (35)  v27to40  157  30 54  23008  [ 570 1064 1590 1890 ]  [ 12  7 12 26 39 14 22 41 ] ]
[ (full)   (36)  v27to40  161  24 50  24272  [ 600 1120 1680 1980 ]  [  6 14  6 34 46 10  2 64 ] ]
[ (full)   (37)  v27to40  165  28 54  25568  [ 630 1204 1770 2100 ]  [ 17  4 29 14 49 10 24 46 ] ]
[ (full)   (38)  v27to40  169  32 58  26896  [ 660 1260 1860 2220 ]  [  4 18 13 32 48 14 42 32 ] ]
[ (full)   (39)  v27to40  173  26 54  28256  [ 720 1316 1950 2310 ]  [ 20  4 40  7 43 22 10 67 ] ]
[ (full)   (40)  v27to40  177  30 58  29648  [ 750 1372 2040 2430 ]  [ 19  6 18 31 34 34 20 61 ] ]
] def
/eclval (LMQH) eclevel search pop length exch pop exch pop def
0 1 43 {
/i exch def
/m metrics i get def
/frmt m 0 get def                             % Format of the symbol
/vers m 1 get def                             % Version of symbol
/vergrp m 2 get def                           % Version group
/size m 3 get def                             % Length of side
/asp2 m 4 get def                             % Position of second alignment symbol
/asp3 m 5 get def                             % Position of third alignment symbol
/nmod m 6 get def                             % Number of modules
/ncws nmod 8 idiv def                         % Total number of codewords
/rbit nmod 8 mod def                          % Number of remainder bits
/lc4b false def                               % Last data codeword is 4 bits long
size 11 eq size 15 eq or {                    % Adjustments for M1 and M3 symbols
/ncws ncws 1 add def
/rbit 0 def
/lc4b true def
} if
/ecws m 7 get eclval get def                  % Number of error correction codewords
/dcws ncws ecws sub def                       % Number of data codewords
/dmod dcws 8 mul lc4b {4} {0} ifelse sub def  % Number of data modules
/ecb1 m 8 get eclval 2 mul get def            % First error correction blocks
/ecb2 m 8 get eclval 2 mul 1 add get def      % Second error correction blocks
/okay true def
format (any) ne format frmt ne and {/okay false def} if  % The format must match that supplied
frmt (micro) eq fnc1first and {/okay false def} if
version (unset) ne version vers ne and {/okay false def} if  % The version must match that supplied
ecb1 -1 eq ecb2 -1 eq or {/okay false def} if % Error correction level must be valid
/verbits msgbits vergrp get def
verbits -1 eq {                               % Bitstream must be available
/okay false def
} {
verbits length dmod gt {/okay false def} if  % and fit into data modules
} ifelse
/term (000000000) 0 termlens vergrp get getinterval def
okay {exit} if
} for

okay not {
/bwipp.qrcodeNoValidSymbol (No valid symbol available) //raiseerror exec
} if

/format frmt def
/version vers def
/msgbits verbits def
/dcpb dcws ecb1 ecb2 add idiv def                 % Base data codewords per block
/ecpb ncws ecb1 ecb2 add idiv dcpb sub def        % Error correction codewords per block

% Complete the message bits by adding the terminator, truncated if neccessary
/term term 0 dmod msgbits length sub term length 2 copy gt {exch} if pop getinterval def
msgbits length term length add string
dup 0 msgbits putinterval
dup msgbits length term putinterval
/msgbits exch def

% Expand the message bits by adding padding as necessary
/pad dmod string def
0 1 pad length 1 sub {pad exch 48 put} for
pad 0 msgbits putinterval
/padstrs [ (11101100) (00010001) ] def
/padnum 0 def
msgbits length 8 div ceiling 8 mul cvi 8 dmod lc4b {5} {1} ifelse sub {
pad exch padstrs padnum get putinterval
/padnum padnum 1 add 2 mod def
} for

% Evaluate the padded message into codewords
/cws dcws array def
0 1 cws length 1 sub {
/c exch def
/bpcw 8 def
lc4b c cws length 1 sub eq and {/bpcw 4 def} if
/cwb pad c 8 mul bpcw getinterval def
/cw 0 def
0 1 bpcw 1 sub {
/i exch def
/cw cw 2 bpcw i sub 1 sub exp cvi cwb i get 48 sub mul add def
} for
cws c cw put
} for

% Short final data byte in M1 and M3 symbols has high-order value
lc4b {cws cws length 1 sub 2 copy get 4 bitshift put} if

% Calculate the log and anti-log tables
/rsalog [ 1 255 { dup 2 mul dup 256 ge {285 xor} if } repeat ] def
/rslog 256 array def
1 1 255 {dup rsalog exch get exch rslog 3 1 roll put} for

% Function to calculate the product in the field
/rsprod {
2 copy 0 ne exch 0 ne and {
rslog exch get exch rslog exch get add 255 mod rsalog exch get
} {
pop pop 0
} ifelse
} bind def

% Generate the coefficients for the Reed-Solomon algorithm
/coeffs [ 1 ecpb {0} repeat ] def
0 1 ecpb 1 sub {
/i exch def
coeffs i 1 add coeffs i get put
i -1 1 {
/j exch def
coeffs j coeffs j 1 sub get coeffs j get rsalog i get rsprod xor put
} for
coeffs 0 coeffs 0 get rsalog i get rsprod put
} for
/coeffs coeffs 0 coeffs length 1 sub getinterval def

% Reed-Solomon algorithm to derive the error correction codewords
/rscodes {
/rscws exch def
/rsnd rscws length def
/rscws [ rscws {} forall ecpb {0} repeat ] def
0 1 rsnd 1 sub {
/m exch def
/k rscws m get def
0 1 ecpb 1 sub {
/j exch def
rscws m j add 1 add coeffs ecpb j sub 1 sub get k rsprod rscws m j add 1 add get xor put
} for
} for
rscws rsnd ecpb getinterval
} bind def

% Divide codewords into two groups of blocks and calculate the error correction codewords
/dcwsb ecb1 ecb2 add array def
/ecwsb ecb1 ecb2 add array def
0 1 ecb1 1 sub {  % First group of blocks has smaller number of data codewords
/i exch def
dcwsb i cws i dcpb mul dcpb getinterval put
ecwsb i dcwsb i get rscodes put
} for
0 1 ecb2 1 sub {  % Second group of blocks has larger number of data codewords
/i exch def
dcwsb ecb1 i add cws ecb1 dcpb mul i dcpb 1 add mul add dcpb 1 add getinterval put
ecwsb ecb1 i add dcwsb ecb1 i add get rscodes put
} for

% Reassemble the codewords
/cws ncws array def
/cw 0 def
0 1 dcpb {  % Interleave the data codeword blocks
/i exch def
0 1 ecb1 ecb2 add 1 sub {
/j exch def
i dcwsb j get length lt {  % Ignore the end of short blocks
cws cw dcwsb j get i get put
/cw cw 1 add def
} if
} for
} for
0 1 ecpb 1 sub {  % Interleave the error codeword blocks
/i exch def
0 1 ecb1 ecb2 add 1 sub {
/j exch def
cws cw ecwsb j get i get put
/cw cw 1 add def
} for
} for

% Extend codewords by one if there are remainder bits
rbit 0 gt {
/pad cws length 1 add array def
pad 0 cws putinterval
pad pad length 1 sub 0 put
/cws pad def
} if

% Fixups for the short final data byte in M1 and M3 symbols
lc4b {
	cws dcws 1 sub 2 copy get -4 bitshift put
dcws 1 sub 1 ncws 2 sub {
/i exch def
cws i cws i get 15 and 4 bitshift put
cws i cws i 1 add get -4 bitshift 15 and cws i get or put
} for
cws ncws 1 sub cws ncws 1 sub get 15 and 4 bitshift put
} if

% Create the bitmap
/pixs [ size size mul {-1} repeat ] def
/qmv {size mul add} bind def

% Finder patterns
/fpat [
[ 1 1 1 1 1 1 1 0 ]
[ 1 0 0 0 0 0 1 0 ]
[ 1 0 1 1 1 0 1 0 ]
[ 1 0 1 1 1 0 1 0 ]
[ 1 0 1 1 1 0 1 0 ]
[ 1 0 0 0 0 0 1 0 ]
[ 1 1 1 1 1 1 1 0 ]
[ 0 0 0 0 0 0 0 0 ]
] def
0 1 fpat length 1 sub {
/y exch def
0 1 fpat 0 get length 1 sub {
/x exch def
/fpb fpat y get x get def
pixs x y qmv fpb put
format (full) eq {
pixs size x sub 1 sub y qmv fpb put
pixs x size y sub 1 sub qmv fpb put
} if
} for
} for

% Alignment patterns
/algnpat [
[ 1 1 1 1 1 ]
[ 1 0 0 0 1 ]
[ 1 0 1 0 1 ]
[ 1 0 0 0 1 ]
[ 1 1 1 1 1 ]
] def
/putalgnpat {
/py exch def
/px exch def
0 1 4 {
/pb exch def
0 1 4 {
/pa exch def
pixs px pa add py pb add qmv algnpat pb get pa get put
} for
} for
} bind def
asp2 2 sub asp3 asp2 sub size 13 sub {
/i exch def
i 4 putalgnpat
4 i putalgnpat
} for
asp2 2 sub asp3 asp2 sub size 9 sub {
/x exch def
asp2 2 sub asp3 asp2 sub size 9 sub {
/y exch def
x y putalgnpat
} for
} for

% Timing patterns
format (full) eq {
8 1 size 9 sub {
/i exch def
pixs i 6 qmv i 1 add 2 mod put
pixs 6 i qmv i 1 add 2 mod put
} for
} {
8 1 size 1 sub {
/i exch def
pixs i 0 qmv i 1 add 2 mod put
pixs 0 i qmv i 1 add 2 mod put
} for
} ifelse

% Format information modules
format (full) eq {
/formatmap [
[ [ 0 8 ] [ 8 size 1 sub ] ]  [ [ 1 8 ] [ 8 size 2 sub ] ]  [ [ 2 8 ] [ 8 size 3 sub ] ]
[ [ 3 8 ] [ 8 size 4 sub ] ]  [ [ 4 8 ] [ 8 size 5 sub ] ]  [ [ 5 8 ] [ 8 size 6 sub ] ]
[ [ 7 8 ] [ 8 size 7 sub ] ]  [ [ 8 8 ] [ size 8 sub 8 ] ]  [ [ 8 7 ] [ size 7 sub 8 ] ]
[ [ 8 5 ] [ size 6 sub 8 ] ]  [ [ 8 4 ] [ size 5 sub 8 ] ]  [ [ 8 3 ] [ size 4 sub 8 ] ]
[ [ 8 2 ] [ size 3 sub 8 ] ]  [ [ 8 1 ] [ size 2 sub 8 ] ]  [ [ 8 0 ] [ size 1 sub 8 ] ]
] def
} {
/formatmap [
[ [ 1 8 ] ]  [ [ 2 8 ] ]  [ [ 3 8 ] ]  [ [ 4 8 ] ]  [ [ 5 8 ] ]
[ [ 6 8 ] ]  [ [ 7 8 ] ]  [ [ 8 8 ] ]  [ [ 8 7 ] ]  [ [ 8 6 ] ]
[ [ 8 5 ] ]  [ [ 8 4 ] ]  [ [ 8 3 ] ]  [ [ 8 2 ] ]  [ [ 8 1 ] ]
] def
} ifelse
formatmap {
{ {} forall qmv pixs exch 0 put } forall
} forall

% Version information modules
size 45 ge {
/versionmap [
[ [ size  9 sub 5 ] [ 5 size  9 sub ] ]  [ [ size 10 sub 5 ] [ 5 size 10 sub ] ]
[ [ size 11 sub 5 ] [ 5 size 11 sub ] ]  [ [ size  9 sub 4 ] [ 4 size  9 sub ] ]
[ [ size 10 sub 4 ] [ 4 size 10 sub ] ]  [ [ size 11 sub 4 ] [ 4 size 11 sub ] ]
[ [ size  9 sub 3 ] [ 3 size  9 sub ] ]  [ [ size 10 sub 3 ] [ 3 size 10 sub ] ]
[ [ size 11 sub 3 ] [ 3 size 11 sub ] ]  [ [ size  9 sub 2 ] [ 2 size  9 sub ] ]
[ [ size 10 sub 2 ] [ 2 size 10 sub ] ]  [ [ size 11 sub 2 ] [ 2 size 11 sub ] ]
[ [ size  9 sub 1 ] [ 1 size  9 sub ] ]  [ [ size 10 sub 1 ] [ 1 size 10 sub ] ]
[ [ size 11 sub 1 ] [ 1 size 11 sub ] ]  [ [ size  9 sub 0 ] [ 0 size  9 sub ] ]
[ [ size 10 sub 0 ] [ 0 size 10 sub ] ]  [ [ size 11 sub 0 ] [ 0 size 11 sub ] ]
] def
} {
/versionmap [] def
} ifelse
versionmap {
{ {} forall qmv pixs exch 0 put } forall
} forall

% Solitary dark module in full symbols
format (full) eq {
pixs 8 size 8 sub qmv 1 put
} if

% Calculate the mask patterns
format (full) eq {
/maskfuncs [
{add 2 mod} bind
{exch pop 2 mod} bind
{pop 3 mod} bind
{add 3 mod} bind
{2 idiv exch 3 idiv add 2 mod} bind
{mul dup 2 mod exch 3 mod add} bind
{mul dup 2 mod exch 3 mod add 2 mod} bind
{2 copy mul 3 mod 3 1 roll add 2 mod add 2 mod} bind
] def
} {
/maskfuncs [
{exch pop 2 mod} bind
{2 idiv exch 3 idiv add 2 mod} bind
{mul dup 2 mod exch 3 mod add 2 mod} bind
{2 copy mul 3 mod 3 1 roll add 2 mod add 2 mod} bind
] def
} ifelse
mask -1 ne {  % User specifies a mask
/maskfuncs [maskfuncs mask 1 sub get] def
/bestmaskval mask 1 sub def
} if
/masks maskfuncs length array def
0 1 masks length 1 sub {
/m exch def
/mask size size mul array def
0 1 size 1 sub {
/j exch def
0 1 size 1 sub {
/i exch def
i j maskfuncs m get exec 0 eq
pixs i j qmv get -1 eq and {1} {0} ifelse
mask i j qmv 3 -1 roll put
} for
} for
masks m mask put
} for

% Walk the symbol placing the bitstream
/posx size 1 sub def
/posy size 1 sub def
/dir -1 def  % -1 is upwards, 1 is downwards
/col 1 def   % 0 is left bit, 1 is right bit
/num 0 def
{ % loop
posx 0 lt {exit} if
pixs posx posy qmv get -1 eq {
cws num 8 idiv get 7 num 8 mod sub neg bitshift 1 and
pixs posx posy qmv 3 -1 roll put
/num num 1 add def
} if
col 1 eq {
/col 0 def
/posx posx 1 sub def
} {
/col 1 def
/posx posx 1 add def
/posy posy dir add def
posy 0 lt posy size ge or {  % Turn around at top and bottom
/dir dir -1 mul def
/posy posy dir add def
/posx posx 2 sub def
% Hop over the timing pattern in full size symbols
format (full) eq posx 6 eq and {/posx posx 1 sub def} if
} if
} ifelse
} loop

% Evaluate runlength encoded rows or columns in full symbols
/evalfulln1n3 {
/scrle exch def
% Detect runs of 5 or more like modules
/scr1 0 scrle { dup 5 ge {add 2 sub dup} if pop } forall def
% Detect 1:1:3:1:1 ratio next to 4 modules of whitespace
/scr3 0 def
3 2 scrle length 3 sub {  % Scan odd (dark) runs within bounds
/j exch def
scrle j get 3 mod 0 eq {  % Multiple of 3 black modules
/fact scrle j get 3 idiv def
scrle j 2 sub 5 getinterval {fact eq} forall and exch pop and and {
j 3 eq j 4 add scrle length ge or {  % At either extent of run
/scr3 scr3 40 add def
} {  % Bounded by dark modules
scrle j 3 sub get 4 ge scrle j 3 add get 4 ge or {
/scr3 scr3 40 add def
} if
} ifelse
} if
} if
} for
scr1 scr3
} bind def

% Evaluation algorithm for full symbols
/evalfull {
/sym exch def

/n1 0 def /n2 0 def /n3 0 def
/rle size 1 add array def
/lastpairs size array def
/thispairs size array def
/sizeadd1 size 1 add def
0 1 size 1 sub {
/i exch def

% Runlength encode (light, dark, light, ...) and evaluate each column
mark 0 0
i size dup dup mul 1 sub {
sym exch get exch 1 index eq {exch 1 add exch} {1 exch} ifelse
} for
pop
rle 0 counttomark 2 sub getinterval astore
evalfulln1n3 n3 add /n3 exch def n1 add /n1 exch def
pop

% Runlength encode (light, dark, light, ...) and evaluate each row
/symrow sym i size mul size getinterval def
mark 0 0
symrow {
exch 1 index eq {exch 1 add exch} {1 exch} ifelse
} forall
pop
rle 0 counttomark 2 sub getinterval astore
evalfulln1n3 n3 add /n3 exch def n1 add /n1 exch def
pop

% Count and score same coloured blocks
/lastpairs thispairs /thispairs lastpairs def def
symrow 0 get 1 eq {0} {1} ifelse
symrow {exch 1 index add exch} forall
pop
thispairs astore pop
i 0 gt {
mark
lastpairs aload pop thispairs aload pop
n2 size { exch sizeadd1 index add 3 and 0 eq {3 add} if } repeat
/n2 exch def
cleartomark
} if

} for

% Score dark/light imbalance
/dark 0 sym {add} forall def
/n4 dark 100 mul size dup mul div 50 sub abs 5 div cvi 10 mul def

n1 n2 add n3 add n4 add
} bind def

% Evaluation algorithm for micro symbols
/evalmicro {
/sym exch def
/dkrhs 0 def /dkbot 0 def
1 1 size 1 sub {
/i exch def
/dkrhs dkrhs sym size 1 sub i qmv get add def
/dkbot dkbot sym i size 1 sub qmv get add def
} for
dkrhs dkbot le {
dkrhs 16 mul dkbot add neg
} {
dkbot 16 mul dkrhs add neg
} ifelse
} bind def

% Evaluate the masked symbols to find the most suitable
/bestscore 999999999 def
0 1 masks length 1 sub {
/m exch def
/masksym size size mul array def
0 1 size size mul 1 sub {
/i exch def
masksym i pixs i get masks m get i get xor put
} for
masks length 1 ne {
format (full) eq {
masksym evalfull /score exch def
} {
masksym evalmicro /score exch def
} ifelse
score bestscore lt {
/bestsym masksym def
/bestmaskval m def
/bestscore score def
} if
} {
/bestsym masksym def
} ifelse
} for
/pixs bestsym def

% Add the format information
format (full) eq {
/fmtvals [
16#5412 16#5125 16#5e7c 16#5b4b 16#45f9 16#40ce 16#4f97 16#4aa0
16#77c4 16#72f3 16#7daa 16#789d 16#662f 16#6318 16#6c41 16#6976
16#1689 16#13be 16#1ce7 16#19d0 16#0762 16#0255 16#0d0c 16#083b
16#355f 16#3068 16#3f31 16#3a06 16#24b4 16#2183 16#2eda 16#2bed
] def
/ecid (MLHQ) eclevel search pop length exch pop exch pop def
/fmtval fmtvals ecid 3 bitshift bestmaskval add get def
} {
/fmtvals [
16#4445 16#4172 16#4e2b 16#4b1c 16#55ae 16#5099 16#5fc0 16#5af7
16#6793 16#62a4 16#6dfd 16#68ca 16#7678 16#734f 16#7c16 16#7921
16#06de 16#03e9 16#0cb0 16#0987 16#1735 16#1202 16#1d5b 16#186c
16#2508 16#203f 16#2f66 16#2a51 16#34e3 16#31d4 16#3e8d 16#3bba
] def
/symid [ [0] [1 2] [3 4] [5 6 7] ] size 11 sub 2 idiv get eclval get def
/fmtval fmtvals symid 2 bitshift bestmaskval add get def
} ifelse
0 1 formatmap length 1 sub {
/i exch def
formatmap i get {
pixs exch {} forall qmv fmtval 14 i sub neg bitshift 1 and put
} forall
} for

% Add the version information
size 45 ge {
/vervals [
16#07c94 16#085bc 16#09a99 16#0a4d3 16#0bbf6 16#0c762 16#0d847
16#0e60d 16#0f928 16#10b78 16#1145d 16#12a17 16#13532 16#149a6
16#15683 16#168c9 16#177ec 16#18ec4 16#191e1 16#1afab 16#1b08e
16#1cc1a 16#1d33f 16#1ed75 16#1f250 16#209d5 16#216fd 16#228ba
16#2379f 16#24b0b 16#2542e 16#26a64 16#27541 16#28c69
] def
/verval vervals size 17 sub 4 idiv 7 sub get def
0 1 versionmap length 1 sub {
/i exch def
versionmap i get {
pixs exch {} forall qmv verval 17 i sub neg bitshift 1 and put
} forall
} for
} if

% Return the arguments
<<
/ren //renmatrix
/pixs pixs
/pixx size
/pixy size
/height size 2 mul 72 div
/width size 2 mul 72 div
/opt options
>>

dontdraw not //renmatrix if

end

} bind def
/qrcode dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER qrcode--

% --BEGIN ENCODER microqrcode--
% --REQUIRES preamble raiseerror renmatrix qrcode--
% --DESC: Micro QR Code
% --EXAM: 1234
% --EXOP:
% --RNDR: renmatrix
%%BeginResource: QRCODE microqrcode 0.0 2015112400 60576 60353
%%BeginData:         43 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renmatrix dup /QRCODE findresource put
dup /qrcode dup /QRCODE findresource put
begin
/microqrcode {

20 dict begin                 % Confine variables to local scope

/options exch def       % We are given an option string
/barcode exch def       % We are given a barcode string

/dontdraw false def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

% Get the result of encoding with qrcode with format=micro
options (dontdraw) true put
options (format) (micro) put

/args barcode options //qrcode exec def

args (opt) options put
args

dontdraw not //renmatrix if

end

} bind def
/microqrcode dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER microqrcode--

% --BEGIN ENCODER maxicode--
% --REQUIRES preamble raiseerror renmaximatrix--
% --DESC: MaxiCode
% --EXAM: [)>^03001^02996152382802^029840^029001^0291Z00004951^029UPSN^02906X610^029159^0291234567^0291/1^029^029Y^029634 ALPHA DR^029PITTSBURGH^029PA^029^004
% --EXOP: mode=2 parse
% --RNDR: renmaximatrix
%%BeginResource: QRCODE maxicode 0.0 2015112400 116961 123452
%%BeginData:        564 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renmaximatrix dup /QRCODE findresource put
begin
/maxicode {

20 dict begin

/options exch def        % We are given an option string
/barcode exch def        % We are given a barcode string

/dontdraw false def
/mode -1 def
/sam -1 def
/parse false def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/mode mode cvi def
/sam sam cvi def

% Parse ordinals of the form ^NNN to ASCII
parse {
/msg barcode length string def
/j 0 def
barcode
{ % loop
(^) search {
dup msg exch j exch putinterval
length j add 1 add /j exch def
pop
dup 0 3 getinterval cvi msg exch j 1 sub exch put
dup length 3 sub 3 exch getinterval
} {
dup msg exch j exch putinterval
length j add /j exch def
/barcode msg 0 j getinterval def
exit
} ifelse
} loop
} if

/msg barcode def
/msglen msg length def

% Special message handling for modes 2 and 3
mode 2 eq mode 3 eq or {

% Normalise messages that begin with a field identifier [)>RS01GSyy
msg 0 7 getinterval <5b293e1e30311d> eq {
/fid msg 0 9 getinterval def
/msg msg 9 msglen 9 sub getinterval def
} {
/fid () def
} ifelse

% Read the postcode, country code and service code fields seperated by GS
msg <1d> search pop /pcode exch def
pop <1d> search pop /ccode exch def
pop <1d> search pop /scode exch def
pop /msg exch def

% Prepend the field identifier
msg length fid length add string dup
0 fid putinterval dup
fid length msg putinterval
/msg exch def
/msglen msg length def

} if

% Special function characters
/eci -1 def  /pad -2 def  /ns -3 def
/la  -4 def  /lb  -5 def
/sa  -6 def  /sb  -7 def  /sc -8 def  /sd -9 def  /se -10 def
/sa2 -11 def /sa3 -12 def
/lkc -13 def /lkd -14 def /lke -15 def
/pd2 -16 def /pd3 -17 def

% Character maps for each state
/charmaps [
%  A    B    C    D    E
[  13  (`)  192  224    0 ]  % 0
[ (A)  (a)  193  225    1 ]  % 1
[ (B)  (b)  194  226    2 ]  % 2
[ (C)  (c)  195  227    3 ]  % 3
[ (D)  (d)  196  228    4 ]  % 4
[ (E)  (e)  197  229    5 ]  % 5
[ (F)  (f)  198  230    6 ]  % 6
[ (G)  (g)  199  231    7 ]  % 7
[ (H)  (h)  200  232    8 ]  % 8
[ (I)  (i)  201  233    9 ]  % 9
[ (J)  (j)  202  234   10 ]  % 10
[ (K)  (k)  203  235   11 ]  % 11
[ (L)  (l)  204  236   12 ]  % 12
[ (M)  (m)  205  237   13 ]  % 13
[ (N)  (n)  206  238   14 ]  % 14
[ (O)  (o)  207  239   15 ]  % 15
[ (P)  (p)  208  240   16 ]  % 16
[ (Q)  (q)  209  241   17 ]  % 17
[ (R)  (r)  210  242   18 ]  % 18
[ (S)  (s)  211  243   19 ]  % 19
[ (T)  (t)  212  244   20 ]  % 20
[ (U)  (u)  213  245   21 ]  % 21
[ (V)  (v)  214  246   22 ]  % 22
[ (W)  (w)  215  247   23 ]  % 23
[ (X)  (x)  216  248   24 ]  % 24
[ (Y)  (y)  217  249   25 ]  % 25
[ (Z)  (z)  218  250   26 ]  % 26
[ eci  eci  eci  eci  eci ]  % 27
[  28   28   28   28  pad ]  % 28
[  29   29   29   29  pad ]  % 29
[  30   30   30   30   27 ]  % 30
[  ns   ns   ns   ns   ns ]  % 31
[ ( )  ({)  219  251   28 ]  % 32
[ pad  pad  220  252   29 ]  % 33
[ (")  (})  221  253   30 ]  % 34
[ (#)  (~)  222  254   31 ]  % 35
[ ($)  127  223  255  159 ]  % 36
[ (%)  (;)  170  161  160 ]  % 37
[ (&)  (<)  172  168  162 ]  % 38
[ (')  (=)  177  171  163 ]  % 39
[  40  (>)  178  175  164 ]  % 40
[  41  (?)  179  176  165 ]  % 41
[ (*)  ([)  181  180  166 ]  % 42
[ (+)   92  185  183  167 ]  % 43
[ (,)  (])  186  184  169 ]  % 44
[ (-)  (^)  188  187  173 ]  % 45
[ (.)  (_)  189  191  174 ]  % 46
[ (/)  ( )  190  138  182 ]  % 47
[ (0)  (,)  128  139  149 ]  % 48
[ (1)  (.)  129  140  150 ]  % 49
[ (2)  (/)  130  141  151 ]  % 50
[ (3)  (:)  131  142  152 ]  % 51
[ (4)  (@)  132  143  153 ]  % 52
[ (5)  (!)  133  144  154 ]  % 53
[ (6)  (|)  134  145  155 ]  % 54
[ (7)  pd2  135  146  156 ]  % 55
[ (8)  sa2  136  147  157 ]  % 56
[ (9)  sa3  137  148  158 ]  % 57
[ (:)  pd3   la   la   la ]  % 58
[  sb   sa  ( )  ( )  ( ) ]  % 59
[  sc   sc  lkc   sc   sc ]  % 60
[  sd   sd   sd  lkd   sd ]  % 61
[  se   se   se   se  lke ]  % 62
[  lb   la   lb   lb   lb ]  % 63
] def

% Invert charmaps to give character to value maps for each state
/charvals [ 64 dict 64 dict 64 dict 64 dict 64 dict ] def
0 1 charmaps length 1 sub {
/i exch def
/encs charmaps i get def
0 1 4 {
/j exch def
encs j get dup type /stringtype eq {0 get} if  % convert string to ASCII if required
charvals j get exch i put
} for
} for
/seta charvals 0 get def
/setb charvals 1 get def
/setc charvals 2 get def
/setd charvals 3 get def
/sete charvals 4 get def

% Compute numeric runlengths
/nseq [ msglen 1 add {0} repeat ] def
msglen 1 sub -1 0 {
/i exch def
msg i get dup 48 ge exch 57 le and {
nseq i nseq i 1 add get 1 add put
} {
nseq i 0 put
} ifelse
} for
/nseq nseq 0 msglen getinterval def

% Encode the message from ASCII to codewords
/prefixinset {
0 {
2 copy exch length ge {exit} if
2 copy get 3 index exch known {1 add} {exit} ifelse
} loop
exch pop exch pop
} bind def

/enc {
exch get out exch j exch put
/j j 1 add def
} bind def

/out 144 array def
/i 0 def /j 0 def /cset (seta) def
{ % loop
% Exit when no characters remain latching back to A if necessary
i msglen eq {
cset (seta) ne cset (setb) ne and {
la cset load enc
/cset (seta) def
} if
exit
} if
{ % not a loop but common exit point

% If 9 numerals available then use NS
nseq i get 9 ge {
msg i 9 getinterval cvi 4 { dup 63 and exch -6 bitshift } repeat cset load ns get
0 2 10 {index} for 6 array astore 7 1 roll 6 {pop} repeat
out exch j exch putinterval
/i i 9 add def
/j j 6 add def
exit
} if

% Read next three characters
/char1 msg i get def
/char2 i 1 add msglen lt {msg i 1 add get} {-99} ifelse def
/char3 i 2 add msglen lt {msg i 2 add get} {-99} ifelse def

% If current mode is sufficient then directly encode
cset load char1 known {
char1 cset load enc
/i i 1 add def
exit
} if

% For switching from A to B
cset (seta) eq setb char1 known and {
setb char2 known {
lb seta enc
/cset (setb) def
} {
sb seta enc
char1 setb enc
/i i 1 add def
} ifelse
exit
} if

% For switching from B to A encode according to length of prefix
cset (setb) eq seta char1 known and {
/p seta msg i 4 msglen i sub 2 copy gt {exch} if pop getinterval prefixinset def
p 1 eq {
sa setb enc
char1 seta enc
/i i 1 add def
} if
p 2 eq {
sa2 setb enc
char1 seta enc
char2 seta enc
/i i 2 add def
} if
p 3 eq {
sa3 setb enc
char1 seta enc
char2 seta enc
char3 seta enc
/i i 3 add def
} if
p 4 ge {
la setb enc
/cset (seta) def
} if
exit
} if

% If character is in A or B then directly latch
seta char1 known {
la cset load enc
/cset (seta) def
exit
} if
setb char1 known {
lb cset load enc
/cset (setb) def
exit
} if

% Determine which one of sets C, D or E the character is in
setc char1 known {/setx (setc) def /sx sc def /lkx lkc def} if
setd char1 known {/setx (setd) def /sx sd def /lkx lkd def} if
sete char1 known {/setx (sete) def /sx se def /lkx lke def} if

% Encode according to the length of the prefix
/p setx load msg i 4 msglen i sub 2 copy gt {exch} if pop getinterval prefixinset def
p 1 eq {
sx cset load enc
char1 setx load enc
/i i 1 add def
} if
p 2 eq {
sx cset load enc
char1 setx load enc
sx cset load enc
char2 setx load enc
/i i 2 add def
} if
p 3 eq {
sx cset load enc
char1 setx load enc
sx cset load enc
char2 setx load enc
sx cset load enc
char3 setx load enc
/i i 3 add def
} if
p 4 ge {
sx cset load enc
lkx setx load enc
/cset setx def
} if

exit
} loop  % out
} loop
/encmsg out 0 j getinterval def
/padval cset load pad get def

% Prefix the encoded message with the structured append insert
/sami [] def
sam -1 ne {
/sami 2 array def
sami 0 seta pad get put
sami 1 sam 10 idiv 1 sub 8 mul sam 10 mod 1 sub add put
} if
/encmsg [ sami aload pop encmsg aload pop ] def

% Derive the primary and secondary codewords for modes 2 and 3
mode 2 eq mode 3 eq or {

% Calculate the fixed-width binary values for the mode, postcode, country code and service
/mdb (0000) 4 string copy dup mode cvi 2 4 string cvrs dup length 4 exch sub exch putinterval def
/ccb (0000000000) 10 string copy dup ccode cvi 2 10 string cvrs dup length 10 exch sub exch putinterval def
/scb (0000000000) 10 string copy dup scode cvi 2 10 string cvrs dup length 10 exch sub exch putinterval def
/pcb (000000000000000000000000000000000000) 36 string copy def
mode 2 eq {
% For numeric postcode, first six bits represent length and remaining 30 bits the value
pcb pcode length 2 6 string cvrs dup length 6 exch sub exch putinterval
pcb pcode cvi 2 30 string cvrs dup length 36 exch sub exch putinterval
} {  % mode=3
% For alphanumeric postcode, trim or pad with spaces to 6 chars and encode to binary
/pccw [
(      ) 6 string copy dup 0 pcode length 6 gt {pcode 0 6 getinterval} {pcode} ifelse putinterval
{seta exch get} forall
] def
0 1 5 {
/i exch def
pcb pccw i get 2 6 string cvrs dup length 6 i mul 6 add exch sub exch putinterval
} for
} ifelse

% Convolute the binary values into the structured carrier message
/scm 60 string def
scm 2  mdb putinterval
scm 38 pcb 0  4 getinterval putinterval
scm 30 pcb 4  6 getinterval putinterval
scm 24 pcb 10 6 getinterval putinterval
scm 18 pcb 16 6 getinterval putinterval
scm 12 pcb 22 6 getinterval putinterval
scm 6  pcb 28 6 getinterval putinterval
scm 0  pcb 34 2 getinterval putinterval
scm 52 ccb 0  2 getinterval putinterval
scm 42 ccb 2  6 getinterval putinterval
scm 36 ccb 8  2 getinterval putinterval
scm 54 scb 0  6 getinterval putinterval
scm 48 scb 6  4 getinterval putinterval

% Evaluate the structured carrier message as codewords
/pri [ 0 0 0 0 0 0 0 0 0 0 ] def
0 1 59 {
/i exch def
/ps i 6 idiv def
/ep 2 5 i 6 mod sub exp cvi scm i get 48 sub mul def
pri ps pri ps get ep add put
} for

% Pad the encoded message into the secondary component
/sec [ 84 {padval} repeat ] def
sec 0 encmsg putinterval

} if

% Derive the primary and secondary codewords for modes 4, 5 and 6
mode 4 eq mode 5 eq or mode 6 eq or mode -1 eq or {

% If mode isn't specified then use EEC if message fits, otherwise SEC
mode -1 eq {
/mode encmsg length 77 le {5} {4} ifelse def
} if

% First symbol is the mode and the remainder are the padded message
/cws [ mode 5 eq {78} {94} ifelse {padval} repeat ] def
cws 0 mode put
cws 1 encmsg putinterval

% Fit the message into the primary and secondary components
/pri cws 0 10 getinterval def
/sec cws 10 cws length 10 sub getinterval def

} if

% Calculate the log and anti-log tables
/rsalog [ 1 63 { dup 2 mul dup 64 ge {67 xor} if } repeat ] def
/rslog 64 array def
1 1 63 {dup rsalog exch get exch rslog 3 1 roll put} for

% Function to calculate the product in the field
/rsprod {
2 copy 0 ne exch 0 ne and {
rslog exch get exch rslog exch get add 63 mod rsalog exch get
} {
pop pop 0
} ifelse
} bind def

% Generate error correction codewords
/rscodes {

/rsnum exch def
/cwb exch def

% Generate the coefficients
/coeffs [ 1 rsnum {0} repeat ] def
1 1 rsnum {
/i exch def
coeffs i coeffs i 1 sub get put
i 1 sub -1 1 {
/j exch def
coeffs j coeffs j 1 sub get coeffs j get rsalog i get rsprod xor put
} for
coeffs 0 coeffs 0 get rsalog i get rsprod put
} for
/coeffs coeffs 0 coeffs length 1 sub getinterval def

% Calculate the error correction codewords
/ecb [ rsnum {0} repeat ] def
0 1 cwb length 1 sub {
/t exch cwb exch get ecb 0 get xor def
ecb length 1 sub -1 0 {
/i exch def
/p ecb length i sub 1 sub def
ecb p t coeffs i get rsprod put
i 0 gt { ecb p ecb p 1 add get ecb p get xor put } if
} for
} for

ecb

} bind def

% Split secondary codeword into odd and even elements
/seco [ 0 2 sec length 1 sub { sec exch get } for ] def
/sece [ 1 2 sec length 1 sub { sec exch get } for ] def

% Calculate the parity codewords for secondary codeword parts based on mode
/scodes sec length 84 eq {20} {28} ifelse def  % SEC/EEC mode
/secochk seco scodes rscodes def
/secechk sece scodes rscodes def

% Recompose the secondary parity codewords
/secchk [ 0 1 scodes 1 sub { dup secochk exch get exch secechk exch get } for ] def

% Concatinate the data into final codewords
/codewords [
pri aload pop
pri 10 rscodes aload pop
sec aload pop
secchk aload pop
] def

% Convert the codewords into module bits
/mods [ 864 {0} repeat ] def
0 1 143 {
/i exch def
/cw [ codewords i get 2 6 string cvrs {48 sub} forall ] def
mods 6 i mul 6 cw length sub add cw putinterval
} for

% Maps modules to pixels in the grid
/modmap [
469 529 286 316 347 346 673 672 703 702 647 676 283 282 313 312 370 610 618 379
378 409 408 439 705 704 559 589 588 619 458 518 640 701 675 674 285 284 315 314
310 340 531 289 288 319 349 348 456 486 517 516 471 470 369 368 399 398 429 428
549 548 579 578 609 608 649 648 679 678 709 708 639 638 669 668 699 698 279 278
309 308 339 338 381 380 411 410 441 440 561 560 591 590 621 620 547 546 577 576
607 606 367 366 397 396 427 426 291 290 321 320 351 350 651 650 681 680 711 710
1   0   31  30  61  60  3   2   33  32  63  62  5   4   35  34  65  64  7   6
37  36  67  66  9   8   39  38  69  68  11  10  41  40  71  70  13  12  43  42
73  72  15  14  45  44  75  74  17  16  47  46  77  76  19  18  49  48  79  78
21  20  51  50  81  80  23  22  53  52  83  82  25  24  55  54  85  84  27  26
57  56  87  86  117 116 147 146 177 176 115 114 145 144 175 174 113 112 143 142
173 172 111 110 141 140 171 170 109 108 139 138 169 168 107 106 137 136 167 166
105 104 135 134 165 164 103 102 133 132 163 162 101 100 131 130 161 160 99  98
129 128 159 158 97  96  127 126 157 156 95  94  125 124 155 154 93  92  123 122
153 152 91  90  121 120 151 150 181 180 211 210 241 240 183 182 213 212 243 242
185 184 215 214 245 244 187 186 217 216 247 246 189 188 219 218 249 248 191 190
221 220 251 250 193 192 223 222 253 252 195 194 225 224 255 254 197 196 227 226
257 256 199 198 229 228 259 258 201 200 231 230 261 260 203 202 233 232 263 262
205 204 235 234 265 264 207 206 237 236 267 266 297 296 327 326 357 356 295 294
325 324 355 354 293 292 323 322 353 352 277 276 307 306 337 336 275 274 305 304
335 334 273 272 303 302 333 332 271 270 301 300 331 330 361 360 391 390 421 420
363 362 393 392 423 422 365 364 395 394 425 424 383 382 413 412 443 442 385 384
415 414 445 444 387 386 417 416 447 446 477 476 507 506 537 536 475 474 505 504
535 534 473 472 503 502 533 532 455 454 485 484 515 514 453 452 483 482 513 512
451 450 481 480 511 510 541 540 571 570 601 600 543 542 573 572 603 602 545 544
575 574 605 604 563 562 593 592 623 622 565 564 595 594 625 624 567 566 597 596
627 626 657 656 687 686 717 716 655 654 685 684 715 714 653 652 683 682 713 712
637 636 667 666 697 696 635 634 665 664 695 694 633 632 663 662 693 692 631 630
661 660 691 690 721 720 751 750 781 780 723 722 753 752 783 782 725 724 755 754
785 784 727 726 757 756 787 786 729 728 759 758 789 788 731 730 761 760 791 790
733 732 763 762 793 792 735 734 765 764 795 794 737 736 767 766 797 796 739 738
769 768 799 798 741 740 771 770 801 800 743 742 773 772 803 802 745 744 775 774
805 804 747 746 777 776 807 806 837 836 867 866 897 896 835 834 865 864 895 894
833 832 863 862 893 892 831 830 861 860 891 890 829 828 859 858 889 888 827 826
857 856 887 886 825 824 855 854 885 884 823 822 853 852 883 882 821 820 851 850
881 880 819 818 849 848 879 878 817 816 847 846 877 876 815 814 845 844 875 874
813 812 843 842 873 872 811 810 841 840 871 870 901 900 931 930 961 960 903 902
933 932 963 962 905 904 935 934 965 964 907 906 937 936 967 966 909 908 939 938
969 968 911 910 941 940 971 970 913 912 943 942 973 972 915 914 945 944 975 974
917 916 947 946 977 976 919 918 949 948 979 978 921 920 951 950 981 980 923 922
953 952 983 982 925 924 955 954 985 984 927 926 957 956 987 986 58  89  88  118
149 148 178 209 208 238 269 268 298 329 328 358 389 388 418 449 448 478 509 508
538 569 568 598 629 628 658 689 688 718 749 748 778 809 808 838 869 868 898 929
928 958 989 988
] def

% Lookup pixels for enabled modules from modmap
/pixs 864 array def
/j 0 def
0 1 mods length 1 sub {
/i exch def
mods i get 1 eq {
pixs j modmap i get put
/j j 1 add def
} if
} for
/pixs [ pixs 0 j getinterval {} forall 28 29 280 281 311 457 488 500 530 670 700 677 707 ] def

% Return the arguments
<<
/ren //renmaximatrix
/pixs pixs
/opt options
>>

dontdraw not //renmaximatrix if

end

} bind def
/maxicode dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER maxicode--

% --BEGIN ENCODER azteccode--
% --REQUIRES preamble raiseerror renmatrix--
% --DESC: Aztec Code
% --EXAM: This is Aztec Code
% --EXOP: format=full
% --RNDR: renmatrix
%%BeginResource: QRCODE azteccode 0.0 2015112400 163082 186690
%%BeginData:        679 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renmatrix dup /QRCODE findresource put
begin
/azteccode {

20 dict begin

/options exch def
/barcode exch def

/dontdraw false def
/format (unset) def    % full, compact or rune
/readerinit false def
/layers -1 def
/eclevel 23 def
/ecaddchars 3 def
/raw false def
/parse false def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/layers layers cvi def
/eclevel eclevel cvr def
/ecaddchars ecaddchars cvi def

% Parse ordinals of the form ^NNN to ASCII
parse {
/msg barcode length string def
/j 0 def
barcode
{ % loop
(^) search {
dup msg exch j exch putinterval
length j add 1 add /j exch def
pop
dup 0 3 getinterval cvi msg exch j 1 sub exch put
dup length 3 sub 3 exch getinterval
} {
dup msg exch j exch putinterval
length j add /j exch def
/barcode msg 0 j getinterval def
exit
} ifelse
} loop
} if

% Convert from input into message bitstream
/msgbits () def
format (rune) ne raw and {/msgbits barcode def} if
format (rune) ne raw not and {

% State key: "U"pper, "L"ower, "M"ixed, "P"unctuation, "D"igit, "B"inary
/U 0 def  /L 1 def  /M 2 def  /P 3 def  /D 4 def  /B 5 def

% Special function characters
/lu -1 def  /ll -2 def  /lm -3 def
/lp -4 def  /ld -5 def  /su -6 def
/sp -7 def  /sb -8 def  /fl -9 def
/p2 -10 def /p3 -11 def /p4 -12 def /p5 -13 def

% Character maps for each state
/charmaps [
%  U    L    M    P    D
[  sp   sp   sp   fl   sp ]  % 0
[  32   32   32   13   32 ]  % 1
[ (A)  (a)    1   p2  (0) ]  % 2     p2 = CR LF
[ (B)  (b)    2   p3  (1) ]  % 3     p3 = ". "
[ (C)  (c)    3   p4  (2) ]  % 4     p4 = ", "
[ (D)  (d)    4   p5  (3) ]  % 5     p5 = ": "
[ (E)  (e)    5  (!)  (4) ]  % 6
[ (F)  (f)    6  (")  (5) ]  % 7
[ (G)  (g)    7  (#)  (6) ]  % 8
[ (H)  (h)    8  ($)  (7) ]  % 9
[ (I)  (i)    9  (%)  (8) ]  % 10
[ (J)  (j)   10  (&)  (9) ]  % 11
[ (K)  (k)   11  (')  (,) ]  % 12
[ (L)  (l)   12   40  (.) ]  % 13
[ (M)  (m)   13   41   lu ]  % 14
[ (N)  (n)   27  (*)   su ]  % 15
[ (O)  (o)   28  (+)  -99 ]  % 16
[ (P)  (p)   29  (,)  -99 ]  % 17
[ (Q)  (q)   30  (-)  -99 ]  % 18
[ (R)  (r)   31  (.)  -99 ]  % 19
[ (S)  (s)  (@)  (/)  -99 ]  % 20
[ (T)  (t)   92  (:)  -99 ]  % 21
[ (U)  (u)  (^)  (;)  -99 ]  % 22
[ (V)  (v)  (_)  (<)  -99 ]  % 23
[ (W)  (w)  (`)  (=)  -99 ]  % 24
[ (X)  (x)  (|)  (>)  -99 ]  % 25
[ (Y)  (y)  (~)  (?)  -99 ]  % 26
[ (Z)  (z)  127  ([)  -99 ]  % 27
[  ll   su   ll  (])  -99 ]  % 28
[  lm   lm   lu  ({)  -99 ]  % 29
[  ld   ld   lp  (})  -99 ]  % 30
[  sb   sb   sb   lu  -99 ]  % 31
] def

% Invert charmaps to give character to value maps for each state
/charvals [ 32 dict 32 dict 32 dict 32 dict 16 dict ] def
0 1 charmaps length 1 sub {
/i exch def
/encs charmaps i get def
0 1 4 {
/j exch def
encs j get dup type /stringtype eq {0 get} if  % convert string to ASCII if required
charvals j get exch i put
} for
} for

% Punctuation compression
/pcomp <<
<0d0a> p2   % CR LF
(. )   p3
(, )   p4
(: )   p5
>> def

/e 10000 def  % "Empty"

/latlen [  % Bit length of latch between states
% To:  U  L  M  P  D  B      From
[  0  5  5 10  5 10 ]  % U
[  9  0  5 10  5 10 ]  % L
[  5  5  0  5 10 10 ]  % M
[  5 10 10  0 10 15 ]  % P
[  4  9  9 14  0 14 ]  % D
[  0  0  0  0  0  0 ]  % B
] def

/latseq [  % Latch sequences between states
% To: U       L       M       P          D       B          From
[ []      [ll]    [lm]    [lm lp]    [ld]    [sb]    ]  % U
[ [ld lu] []      [lm]    [lm lp]    [ld]    [sb]    ]  % L
[ [lu]    [ll]    []      [lp]       [lu ld] [sb]    ]  % M
[ [lu]    [lu ll] [lu lm] []         [lu ld] [lu sb] ]  % P
[ [lu]    [lu ll] [lu lm] [lu lm lp] []      [lu sb] ]  % D
[ [lu]    [ll]    [lm]    []         []      []      ]  % B
] def

/shftlen [  % Bit length of shift to state
% To:  U  L  M  P  D      From
[  e  e  e  5  e ]  % U
[  5  e  e  5  e ]  % L
[  e  e  e  5  e ]  % M
[  e  e  e  e  e ]  % P
[  4  e  e  4  e ]  % D
] def

%            U   L   M   P   D   B
/charsize [  5   5   5   5   4   8 ] def

%          U  L  M  P  D  B
/curlen [  0  e  e  e  e  e ] def
/curseq [ [] [] [] [] [] [] ] def

/backto U def  % U
/lastchar () def

% Derive the optimal sequences ending in each state
barcode {

/char exch def

% Check for optimisations in the current sequences by latching from x to y
{  % loop
/imp false def
[ U L M P D B ] {
/x exch def
[ U L M P D B ] {
/y exch def
x B ne y backto eq or {  % Only B -> backto
/cost curlen x get latlen x get y get add def
cost curlen y get lt {
curlen y cost put
curseq y [
curseq x get aload pop
latseq x get y get aload pop
] put
y B eq {  % Set backto to previous state
/backto x P eq x D eq or {U} {x} ifelse def
} if
/imp true def
} if
} if
} forall
} forall
imp not {exit} if  % Repeat unless no improvement
} loop

% Determine optimal next sequences for each valid encoding
/nxtlen [ e e e e e e ] def
/nxtseq 6 array def

[ U L M P D B ] {
/x exch def

{ % loop for common exit

% Skip states that cannot encode character
x B ne {charvals x get char known not {exit} if} if

% Extend directly
/cost curlen x get charsize x get add def
cost nxtlen x get lt {
nxtlen x cost put
nxtseq x [ curseq x get aload pop char ] put
} if

% Optimise for direct shifts from y to x
x B eq {exit} if  % B is treated as a latch
[ U L M P D ] {
/y exch def
x y ne {
/cost curlen y get shftlen y get x get add charsize x get add def
cost nxtlen y get lt {
nxtlen y cost put
nxtseq y [
curseq y get aload pop
x U eq {su} {sp} ifelse
char
] put
} if
} if
} forall

exit
} loop

} forall

% Optimise using P compression
lastchar () ne {
/pchars 2 string dup 0 lastchar put dup 1 char put def
pcomp pchars known {
curlen P get nxtlen P get lt {
nxtlen P curlen P get put
nxtseq P [ curseq P get aload pop pop pcomp pchars get ] put
} if
} if
} if

% Account for binary extension for 32 or more bytes
/numbytes 0 def
nxtseq B get {
sb eq {0} {numbytes 1 add} ifelse /numbytes exch def
} forall
numbytes 32 eq {nxtlen B nxtlen B get 11 add put} if

/curlen nxtlen def
/curseq nxtseq def
/lastchar char def

} forall

% Select the optimal sequence
/minseq e def
[ U L M P D B ] {
/i exch def
curlen i get minseq lt {
/minseq curlen i get def
/seq curseq i get def
} if
} forall

% Encoding functions
/tobin {
string dup length 1 sub 0 exch 1 exch {1 index exch 48 put} for
dup 3 -1 roll 2 2 index length string cvrs dup length 2 index length exch sub exch putinterval
} bind def
/encu {charvals U get exch get 5 tobin} bind def
/encl {charvals L get exch get 5 tobin} bind def
/encm {charvals M get exch get 5 tobin} bind def
/encp {charvals P get exch get 5 tobin} bind def
/encd {charvals D get exch get 4 tobin} bind def
/encfuncs [ /encu /encl /encm /encp /encd ] def
/addtomsgbits {
/v exch def
msgbits j v putinterval
/j j v length add def
} bind def

% Encode the sequence
/state U def
/msgbits minseq string def
/i 0 def /j 0 def {
i seq length ge {exit} if

state B ne {

/char seq i get def

% Encode character
char encfuncs state get load exec addtomsgbits
/i i 1 add def

% Encode shifted next character
char su eq char sp eq or {
seq i get char su eq {encu} {encp} ifelse addtomsgbits
/i i 1 add def
} if

% Latches to new state
char lu eq {/state U def} if
char ll eq {/state L def} if
char lm eq {/state M def} if
char lp eq {/state P def} if
char ld eq {/state D def} if
char sb eq {/state B def} if

} {  % Binary

% Find number of bytes before latch or end
/numbytes 0 def {
i numbytes add seq length ge {exit} if
seq i numbytes add get 0 lt {exit} if
/numbytes numbytes 1 add def
} loop

% Encode length
numbytes 31 le {
numbytes 5 tobin addtomsgbits
} {
0 5 tobin addtomsgbits
numbytes 31 sub 11 tobin addtomsgbits
} ifelse

% Encode bytes
numbytes {
seq i get 8 tobin addtomsgbits
/i i 1 add def
} repeat

% Return to previous state as indicated
i seq length lt {
/char seq i get def
/i i 1 add def
char lu eq {/state U def} if
char ll eq {/state L def} if
char lm eq {/state M def} if
} if

} ifelse

} loop

} if

% Lookup the most appropriate symbol specification
/metrics [
[ (rune)     0 0    0  6 ]  % Special metric for rune symbols
[ (compact)  1 1   17  6 ] [ (full)     1 1   21  6 ] [ (compact)  2 0   40  6 ]
[ (full)     2 1   48  6 ] [ (compact)  3 0   51  8 ] [ (full)     3 1   60  8 ]
[ (compact)  4 0   76  8 ] [ (full)     4 1   88  8 ] [ (full)     5 1  120  8 ]
[ (full)     6 1  156  8 ] [ (full)     7 1  196  8 ] [ (full)     8 1  240  8 ]
[ (full)     9 1  230 10 ] [ (full)    10 1  272 10 ] [ (full)    11 1  316 10 ]
[ (full)    12 1  364 10 ] [ (full)    13 1  416 10 ] [ (full)    14 1  470 10 ]
[ (full)    15 1  528 10 ] [ (full)    16 1  588 10 ] [ (full)    17 1  652 10 ]
[ (full)    18 1  720 10 ] [ (full)    19 1  790 10 ] [ (full)    20 1  864 10 ]
[ (full)    21 1  940 10 ] [ (full)    22 1 1020 10 ] [ (full)    23 0  920 12 ]
[ (full)    24 0  992 12 ] [ (full)    25 0 1066 12 ] [ (full)    26 0 1144 12 ]
[ (full)    27 0 1224 12 ] [ (full)    28 0 1306 12 ] [ (full)    29 0 1392 12 ]
[ (full)    30 0 1480 12 ] [ (full)    31 0 1570 12 ] [ (full)    32 0 1664 12 ]
] def

/i 0 def
{ % loop
/m metrics i get def
/frmt m 0 get def                          % Format of the symbol
/mlyr m 1 get def                          % Data layers
/icap m 2 get def                          % Reader initialisation capable
/ncws m 3 get def                          % Total of codewords
/bpcw m 4 get def                          % Bits per codeword
/numecw ncws eclevel mul 100 div ecaddchars add ceiling cvi def
msgbits length 0 eq {/numecw 0 def} if     % Error correction codewords
/numdcw ncws numecw sub def                % Data codewords
/okay true def
format (unset) ne format frmt ne and {/okay false def} if
readerinit icap 1 ne and {/okay false def} if
layers -1 ne layers mlyr ne and {/okay false def} if
msgbits length bpcw div ceiling cvi numdcw gt {/okay false def} if
okay {exit} if
/i i 1 add def
} loop
/layers mlyr def
/format frmt def

% Expand message bits into codewords avoiding codewords with all zeros or all ones
/allzero {dup length (000000000000) 0 3 -1 roll getinterval eq} bind def
/allones {dup length (111111111111) 0 3 -1 roll getinterval eq} bind def
/cws ncws array def
/m 0 def /c 0 def
{
msgbits length m le {exit} if
msgbits length m sub bpcw ge {
/cwb msgbits m bpcw 1 sub getinterval def        % All but last bit
/cwf msgbits m bpcw add 1 sub 1 getinterval def  % Last bit
cwb allzero {/cwf (1) def /m m 1 sub def} if     % Flip last bit to avoid zeros
cwb allones {/cwf (0) def /m m 1 sub def} if     % Flip last bit to avoid ones
% Concatinate the bits
12 string dup 0 cwb putinterval
dup bpcw 1 sub cwf putinterval
0 bpcw getinterval
/cwb exch def
} {  %  Final codeword
/cwb msgbits m msgbits length m sub getinterval def
/cwb (111111111111) 12 string copy dup 0 cwb putinterval 0 bpcw getinterval def
cwb allones {cwb cwb length 1 sub (0) putinterval} if  % Prevent all ones
} ifelse
% Conversion of binary data into byte array
/cw 0 def
0 1 bpcw 1 sub {
/i exch def
/cw cw 2 bpcw i sub 1 sub exp cvi cwb i get 48 sub mul add def
} for
cws c cw put
/m m bpcw add def
/c c 1 add def
} loop
/cws cws 0 c getinterval def

% Reed-Solomon algorithm
/rscodes {

/rspm exch def
/rsgf exch def
/rsnc exch def
/rscws exch def

% Calculate the log and anti-log tables
/rsalog [ 1 rsgf 1 sub { dup 2 mul dup rsgf ge {rspm xor} if } repeat ] def
/rslog rsgf array def
1 1 rsgf 1 sub {dup rsalog exch get exch rslog 3 1 roll put} for

% Function to calculate the product in the field
/rsprod {
2 copy 0 ne exch 0 ne and {
rslog exch get exch rslog exch get add rsgf 1 sub mod rsalog exch get
} {
pop pop 0
} ifelse
} bind def

% Generate the coefficients
/coeffs [ 1 rsnc {0} repeat ] def
1 1 rsnc {
/i exch def
coeffs i coeffs i 1 sub get put
i 1 sub -1 1 {
/j exch def
coeffs j coeffs j 1 sub get coeffs j get rsalog i get rsprod xor put
} for
coeffs 0 coeffs 0 get rsalog i get rsprod put
} for

% Extend the input with the error correction values
/nd rscws length def
/rscws [ rscws {} forall rsnc {0} repeat 0 ] def
0 1 nd 1 sub {
/k exch rscws exch get rscws nd get xor def
0 1 rsnc 1 sub {
/j exch def
rscws nd j add rscws nd j add 1 add get k coeffs rsnc j sub 1 sub get rsprod xor put
} for
} for

% Return all but the last codeword
rscws 0 rscws length 1 sub getinterval

} bind def

% Create the codewords and bit string for the mode
format (full) eq {
/mode layers 1 sub 11 bitshift cws length 1 sub add def
readerinit {/mode mode 2#0000010000000000 or def} if
/mode [
mode 2#1111000000000000 and -12 bitshift
mode 2#0000111100000000 and -8 bitshift
mode 2#0000000011110000 and -4 bitshift
mode 2#0000000000001111 and
] def
/mode mode 6 16 19 rscodes def
} if
format (compact) eq {
/mode layers 1 sub 6 bitshift cws length 1 sub add def
readerinit {/mode mode 2#00100000 or def} if
/mode [
mode 2#11110000 and -4 bitshift
mode 2#00001111 and
] def
/mode mode 5 16 19 rscodes def
} if
format (rune) eq {
/mode barcode cvi def
/mode [
mode 2#11110000 and -4 bitshift
mode 2#00001111 and
] def
/mode mode 5 16 19 rscodes def
/mode [mode {2#1010 xor} forall] def  % Invert alternate bits
} if
/modebits mode length 4 mul string def
0 1 modebits length 1 sub {modebits exch (0) putinterval} for
0 1 mode length 1 sub {
/i exch def
modebits mode i get 2 4 string cvrs dup length 4 exch sub 4 i mul add exch putinterval
} for

% Extend the data codewords with error correction codewords to create the bit string for the data
/rsparams [
[] [] [] [] [] []
[ 64 67 ]      % 6-bit codewords
[]
[ 256 301 ]    % 8-bit codewords
[]
[ 1024 1033 ]  % 10-bit codewords
[]
[ 4096 4201 ]  % 12-bit codewords
] def
/cws cws ncws cws length sub rsparams bpcw get {} forall rscodes def
format (full) eq {
/databits layers layers mul 16 mul layers 112 mul add string def
} {
/databits layers layers mul 16 mul layers 88 mul add string def
} ifelse
0 1 databits length 1 sub {databits exch (0) putinterval} for
0 1 ncws 1 sub {
/i exch def
databits cws i get 2 bpcw string cvrs
dup length bpcw exch sub bpcw i mul add databits length ncws bpcw mul sub add
exch putinterval
} for

% Move to a point in the cartesian plane centered on the bullseye
/cmv {size mul sub mid add} bind def

% Move to a bit position within a layer
/lmv {
/lbit exch def
/llyr exch def
/lwid fw llyr 4 mul add def
/ldir lbit 2 idiv lwid idiv def
ldir 0 eq {  % Top
lwid 1 sub 2 idiv neg 1 add lbit 2 idiv lwid mod add
fw 1 sub 2 idiv llyr 2 mul add lbit 2 mod add
cmv
} if
ldir 1 eq {  % Right
fw 2 idiv llyr 2 mul add lbit 2 mod add
lwid 1 sub 2 idiv 1 sub lbit 2 idiv lwid mod sub
cmv
} if
ldir 2 eq {  % Bottom
lwid 2 idiv neg 1 add lbit 2 idiv lwid mod add neg
fw 2 idiv llyr 2 mul add lbit 2 mod add neg
cmv
} if
ldir 3 eq {  % Left
fw 1 sub 2 idiv llyr 2 mul add lbit 2 mod add neg
lwid 2 idiv 1 sub lbit 2 idiv lwid mod sub neg
cmv
} if
} bind def

% Create the pixel map
% For full symbols we disregard the reference grid at this stage
format (full) eq {/fw 12 def} {/fw 9 def} ifelse
/size fw layers 4 mul add 2 add def
/pixs [size size mul {-1} repeat] def
/mid size 1 sub 2 idiv size mul size 1 sub 2 idiv add def

% Data layers
/i 0 def
1 1 layers {
/layer exch def
0 1 fw layer 4 mul add 8 mul 1 sub {
/pos exch def
pixs layer pos lmv databits databits length i sub 1 sub get 48 sub put
/i i 1 add def
} for
} for

% For full symbols expand the pixel map by inserting the reference grid
format (full) eq {
/fw 13 def
/size fw layers 4 mul add 2 add layers 10.5 add 7.5 div 1 sub cvi 2 mul add def
/mid size size mul 2 idiv def
/npixs [size size mul {-2} repeat] def
0 16 size 2 idiv {
/i exch def
0 1 size 1 sub {
/j exch def
npixs size 2 idiv neg j add i cmv     [size 2 idiv j add i add 1 add 2 mod] putinterval
npixs size 2 idiv neg j add i neg cmv [size 2 idiv j add i add 1 add 2 mod] putinterval
npixs i size 2 idiv neg j add cmv     [size 2 idiv j add i add 1 add 2 mod] putinterval
npixs i neg size 2 idiv neg j add cmv [size 2 idiv j add i add 1 add 2 mod] putinterval
} for
} for
/j 0 def
0 1 npixs length 1 sub {
/i exch def
npixs i get -2 eq {
npixs i pixs j get put
/j j 1 add def
} if
} for
/pixs npixs def
} if

% Finder pattern
/fw fw 2 idiv def
fw neg 1 fw {
/i exch def
fw neg 1 fw {
/j exch def
pixs i j cmv
i abs j abs gt {i abs} {j abs} ifelse 1 add 2 mod
put
} for
} for

% Orientation bits
[ [ fw 1 add neg   fw             1 ] [ fw 1 add neg   fw 1 add       1 ]
[ fw neg         fw 1 add       1 ] [ fw 1 add       fw 1 add       1 ]
[ fw 1 add       fw             1 ] [ fw 1 add       fw neg         1 ]
[ fw             fw 1 add       0 ] [ fw 1 add       fw 1 add neg   0 ]
[ fw             fw 1 add neg   0 ] [ fw neg         fw 1 add neg   0 ]
[ fw 1 add neg   fw 1 add neg   0 ] [ fw 1 add neg   fw neg         0 ]
] {pixs exch {} forall 3 1 roll cmv exch put} forall

% Mode ring
format (full) eq {
/modemap [
[-5  7] [-4  7] [-3  7] [-2  7] [-1  7] [ 1  7] [ 2  7] [ 3  7] [ 4  7] [ 5  7]
[ 7  5] [ 7  4] [ 7  3] [ 7  2] [ 7  1] [ 7 -1] [ 7 -2] [ 7 -3] [ 7 -4] [ 7 -5]
[ 5 -7] [ 4 -7] [ 3 -7] [ 2 -7] [ 1 -7] [-1 -7] [-2 -7] [-3 -7] [-4 -7] [-5 -7]
[-7 -5] [-7 -4] [-7 -3] [-7 -2] [-7 -1] [-7  1] [-7  2] [-7  3] [-7  4] [-7  5]
] def
} {
/modemap [
[-3  5] [-2  5] [-1  5] [ 0  5] [ 1  5] [ 2  5] [ 3  5]
[ 5  3] [ 5  2] [ 5  1] [ 5  0] [ 5 -1] [ 5 -2] [ 5 -3]
[ 3 -5] [ 2 -5] [ 1 -5] [ 0 -5] [-1 -5] [-2 -5] [-3 -5]
[-5 -3] [-5 -2] [-5 -1] [-5  0] [-5  1] [-5  2] [-5  3]
] def
} ifelse
0 1 modemap length 1 sub {
/i exch def
pixs modemap i get {} forall cmv modebits i get 48 sub put
} for

<<
/ren //renmatrix
/pixs pixs
/pixx size
/pixy size
/height size 2 mul 72 div
/width size 2 mul 72 div
/opt options
>>

dontdraw not //renmatrix if

end

} bind def
/azteccode dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER azteccode--

% --BEGIN ENCODER azteccodecompact--
% --REQUIRES preamble raiseerror renmatrix azteccode--
% --DESC: Compact Aztec Code
% --EXAM: 1234
% --EXOP:
% --RNDR: renmatrix
%%BeginResource: QRCODE azteccodecompact 0.0 2015112400 60604 60376
%%BeginData:         43 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renmatrix dup /QRCODE findresource put
dup /azteccode dup /QRCODE findresource put
begin
/azteccodecompact {

20 dict begin                 % Confine variables to local scope

/options exch def       % We are given an option string
/barcode exch def       % We are given a barcode string

/dontdraw false def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

% Get the result of encoding with azteccode with format=compact
options (dontdraw) true put
options (format) (compact) put

/args barcode options //azteccode exec def

args (opt) options put
args

dontdraw not //renmatrix if

end

} bind def
/azteccodecompact dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER azteccodecompact--

% --BEGIN ENCODER aztecrune--
% --REQUIRES preamble raiseerror renmatrix azteccode--
% --DESC: Aztec Runes
% --EXAM: 1
% --EXOP:
% --RNDR: renmatrix
%%BeginResource: QRCODE aztecrune 0.0 2015112400 60573 60352
%%BeginData:         43 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renmatrix dup /QRCODE findresource put
dup /azteccode dup /QRCODE findresource put
begin
/aztecrune {

20 dict begin                 % Confine variables to local scope

/options exch def       % We are given an option string
/barcode exch def       % We are given a barcode string

/dontdraw false def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

% Get the result of encoding with azteccode with format=rune
options (dontdraw) true put
options (format) (rune) put

/args barcode options //azteccode exec def

args (opt) options put
args

dontdraw not //renmatrix if

end

} bind def
/aztecrune dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER aztecrune--

% --BEGIN ENCODER codeone--
% --REQUIRES preamble raiseerror renmatrix--
% --DESC: Code One
% --EXAM: Code One
% --EXOP:
% --RNDR: renmatrix
%%BeginResource: QRCODE codeone 0.0 2015112400 190508 210074
%%BeginData:        851 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renmatrix dup /QRCODE findresource put
begin
/codeone {

20 dict begin

/options exch def
/barcode exch def

/dontdraw false def
/version (unset) def
/parse false def
/parsefnc false def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

% Parse ordinals of the form ^NNN to ASCII
parse {
/msg barcode length string def
/j 0 def
barcode
{ % loop
(^) search {
dup msg exch j exch putinterval
length j add 1 add /j exch def
pop
dup 0 3 getinterval cvi msg exch j 1 sub exch put
dup length 3 sub 3 exch getinterval
} {
dup msg exch j exch putinterval
length j add /j exch def
/barcode msg 0 j getinterval def
exit
} ifelse
} loop
} if

/barlen barcode length def

/stype version 0 1 getinterval (S) eq def

stype {
/vals [
(1)
(1010)
(1100100)
(1111101000)
(10011100010000)
(11000011010100000)
(11110100001001000000)
(100110001001011010000000)
(101111101011110000100000000)
(111011100110101100101000000000)
(1001010100000010111110010000000000)
(1011101001000011101101110100000000000)
(1110100011010100101001010001000000000000)
(10010001100001001110011100101010000000000000)
(10110101111001100010000011110100100000000000000)
(11100011010111111010100100110001101000000000000000)
(100011100001101111001001101111110000010000000000000000)
(101100011010001010111100001011101100010100000000000000000)
] def

/normalize {
/base exch def
/num exch def
num length 1 sub -1 1 {
/i exch def
num i 1 sub 2 copy get num i get base idiv add put
num i num i get base mod put
} for
{ %loop - extend input as necessary
num 0 get base lt {exit} if
/num [0 num {} forall] def
num 0 num 0 get num 1 get base idiv add put
num 1 num 1 get base mod put
} loop
% Trim leading zeros
/num [/i true def num {dup 0 eq i and {pop} {/i false def} ifelse} forall] def
num length 0 eq {/num [0] def} if
num
} bind def

/bigadd {
2 copy length exch length
2 copy sub abs /offset exch def
lt {exch} if
/a exch def /b exch def
0 1 b length 1 sub {
dup a exch offset add 2 copy get b 5 -1 roll get add put
} for
a
} bind def

% Convert value plus one to binary
/v [ 1 ] def
0 1 barlen 1 sub {
/i exch def
[ vals i get {48 sub barcode barlen i sub 1 sub get 48 sub mul} forall ]
v bigadd /v exch def
} for
/v v 2 normalize def

% Split into 5-bit codewords
/v [ 5 v length 5 mod sub 5 mod {0} repeat v aload pop ] def
/cws v length 5 idiv array def
0 1 cws length 1 sub {
/i exch def
v i 5 mul 5 getinterval
0 exch {add 2 mul} forall 2 idiv
cws exch i exch put
} for

} {  % Standard and type-T

% Convert input into bytes accounting for FNC characters
/fnc1 -1 def  /fnc3 -2 def
/fncvals <<
(FNC1) fnc1
(FNC3) fnc3
>> def
/msg barlen array def
/i 0 def /j 0 def {
i barlen eq {exit} if
/char barcode i get def
parsefnc char 94 eq and i barlen 4 sub lt and {
barcode i 1 add get 94 ne {
/char fncvals barcode i 1 add 4 getinterval get def
/i i 4 add def
} {
/i i 1 add def
} ifelse
} if
msg j char put
/i i 1 add def
/j j 1 add def
} loop
/msg msg 0 j getinterval def
/msglen msg length def

% Basic metrics for the each symbol
%     ver    row col dcol dcws rscw rsbl  ro ri rl
/metrics [
[ (A)     16  18   16   10   10    1   4 99  6 ]
[ (B)     22  22   20   19   16    1   4 99  8 ]
[ (C)     28  32   28   44   26    1   4 22 11 ]
[ (D)     40  42   36   91   44    1   4 16 16 ]
[ (E)     52  54   48  182   70    1   4 22 22 ]
[ (F)     70  76   68  370  140    2   4 22 31 ]
[ (G)    104  98   88  732  280    4   6 21 47 ]
[ (H)    148 134  120 1480  560    8   6 20 69 ]
[ (S-10)   8  11   10    4    4    1  99 99 99 ]
[ (S-20)   8  21   20    8    8    1  99 99 99 ]
[ (S-30)   8  31   30   12   12    1  99 99 99 ]
[ (T-16)  16  17   16   10   10    1  99 99 99 ]
[ (T-32)  16  33   32   24   16    1  99 99 99 ]
[ (T-48)  16  49   48   38   22    1  99 99 99 ]
] def

% Select metrics of an appropriate symbol
/fullcws [] def
metrics {
/m exch def
/vers m 0 get def           % Version of symbol
/dcws m 4 get def           % Data codewords in symbol
/okay true def
version (unset) eq {
vers length 1 ne {/okay false def} if
} {
version vers ne {/okay false def} if
} ifelse
okay {/fullcws [ fullcws aload pop dcws ] def} if
} forall
/numremcws [ 1480 {10000} repeat ] def
fullcws {numremcws exch 1 sub 1 put} forall
1478 -1 0 {
/i exch def
numremcws i get 1 ne {
numremcws i numremcws i 1 add get 1 add put
} if
} for

% Special characters
/lC    -5 def  /lB    -6 def  /lX    -7 def  /lT    -8 def  /lD    -9 def  /unl -10 def
/fnc2 -11 def  /fnc4 -12 def  /sft1 -13 def  /sft2 -14 def  /sft3 -15 def  /eci -16 def  /pad -17 def  /fnc1lD -18 def
/unlcw 255 def

/Avals <<
0 1 128 {dup 1 add} for
pad 129
0 1 99 {  % Double digits
dup 10 2 string cvrs (00) 2 string copy dup 2 3 index length sub 4 -1 roll putinterval
exch 130 add
} for
229 [ lC lB fnc1 fnc2 fnc3 fnc4 fnc1lD ] {exch 1 add dup} forall pop
lX 238
lT 239
% 240-255 lD + 4 bits
>> def
/Avals <<
Avals {[exch]} forall
>> def

/CNvals <<
sft1 0
sft2 1
sft3 2
32   3
48 1 57 {dup 44 sub} for  % 0-9
65 1 90 {dup 51 sub} for  % A-Z
>> def
/C1vals << 0 1 31 {dup} for >> def
/C2vals <<
33 1 47 {dup 33 sub} for
58 1 64 {dup 43 sub} for
91 1 95 {dup 69 sub} for
fnc1 27
fnc2 28
fnc3 29
fnc4 30
pad  31
>> def
/C3vals << 96 1 127 {dup 96 sub} for >> def
/Cvals <<
CNvals {[exch]} forall
C1vals {[exch CNvals sft1 get exch]} forall
C2vals {[exch CNvals sft2 get exch]} forall
C3vals {[exch CNvals sft3 get exch]} forall
>> def

/TNvals <<
sft1 0
sft2 1
sft3 2
32   3
48 1  57 {dup 44 sub} for  % 0-9
97 1 122 {dup 83 sub} for  % a-z
>> def
/T1vals << 0 1 31 {dup} for >> def
/T2vals <<
33 1 47 {dup 33 sub} for
58 1 64 {dup 43 sub} for
91 1 95 {dup 69 sub} for
fnc1 27
fnc2 28
fnc3 29
fnc4 30
pad  31
>> def
/T3vals <<
96 0
65 1  90 {dup 64 sub} for
123 1 127 {dup 96 sub} for
>> def
/Tvals <<
TNvals {[exch]} forall
T1vals {[exch TNvals sft1 get exch]} forall
T2vals {[exch TNvals sft2 get exch]} forall
T3vals {[exch TNvals sft3 get exch]} forall
>> def

% Extended ASCII mappings
128 1 255 {
/i exch def
Avals i [ Avals fnc4 get aload pop Avals i 128 sub get aload pop ] put
Cvals i [ Cvals fnc4 get aload pop Cvals i 128 sub get aload pop ] put
Tvals i [ Tvals fnc4 get aload pop Tvals i 128 sub get aload pop ] put
} for

/Xvals <<
13 0
42 1
62 2
32 3
48 1 57 {dup 44 sub} for
65 1 90 {dup 51 sub} for
>> def
/Xvals <<
Xvals {[exch]} forall
>> def

/Bvals <<
0 1 255 {dup} for
>> def
/Bvals <<
Bvals {[exch]} forall
>> def

/encvals [ Avals Cvals Tvals Xvals -1 Bvals ] def

/numD [ msglen {0} repeat 0 ] def
/nextXterm [ msglen {0} repeat 9999 ] def
/nextNonX  [ msglen {0} repeat 9999 ] def
msglen 1 sub -1 0 {
/i exch def
/barchar msg i get def
barchar 48 ge barchar 57 le and {
numD i numD i 1 add get 1 add put
} if
barchar 13 eq barchar 42 eq or barchar 62 eq or {
nextXterm i 0 put
} {
nextXterm i nextXterm i 1 add get 1 add put
} ifelse
Xvals barchar known not {
nextNonX i 0 put
} {
nextNonX i nextNonX i 1 add get 1 add put
} ifelse
} for
/nextXterm [nextXterm {dup 10000 gt {pop 10000} if} forall] def
/nextNonX  [nextNonX  {dup 10000 gt {pop 10000} if} forall] def

/isD  {char 48 ge char 57 le and} bind def
/isC  {CNvals char known} bind def
/isT  {TNvals char known} bind def
/isX  {Xvals char known} bind def
/isEA {char 127 gt} bind def
/isFN {char 0 lt} bind def
/XtermFirst {dup nextXterm exch get exch nextNonX exch get lt} bind def

/A 0 def  /C 1 def  /T 2 def  /X 3 def  /D 4 def  /B 5 def

/lookup {
/ac 1 def /cc 2 def /tc 2 def /xc 2 def /bc 3 def
mode A eq {/ac 0 def /cc 1 def /tc 1 def /xc 1 def /bc 2 def} if
mode C eq {/cc 0 def} if
mode T eq {/tc 0 def} if
mode X eq {/xc 0 def} if  % Assume mistake in spec
mode B eq {/bc 0 def} if
1 {  % common exit
/k 0 def {  % loop
i k add msglen eq {
true [ac cc tc xc   ] {bc         exch ceiling le and} forall {B exit} if
true [   cc tc xc bc] {ac         exch ceiling le and} forall {A exit} if
true [      tc xc   ] {cc ceiling exch ceiling le and} forall {C exit} if
true [         xc   ] {tc ceiling exch ceiling le and} forall {T exit} if
X exit
} if
/char msg i k add get def
/ac ac isD {1 2 div add} {isEA {ceiling 2 add} {ceiling 1 add} ifelse} ifelse def
/cc cc isC {2 3 div add} {isEA { 8 3 div add } { 4 3 div add } ifelse} ifelse def
/tc tc isT {2 3 div add} {isEA { 8 3 div add } { 4 3 div add } ifelse} ifelse def
/xc xc isX {2 3 div add} {isEA {13 3 div add } {10 3 div add } ifelse} ifelse def
/bc bc isFN {3 add} {1 add} ifelse def
k 3 ge {
true [ac cc tc xc   ] {bc 1 add exch ceiling le and} forall {B exit} if
true [   cc tc xc bc] {ac 1 add exch ceiling le and} forall {A exit} if
true [ac cc    xc bc] {tc 1 add exch ceiling le and} forall {T exit} if
true [ac    tc      ] {cc 1 add exch ceiling le and} forall {
cc ceiling xc ceiling lt {C exit} if
cc xc eq {i k add 1 add XtermFirst {X exit} {C exit} ifelse} if
} if
true [ac cc tc    bc] {xc 1 add exch lt and} forall {X exit} if
} if
/k k 1 add def
} loop
} repeat
} bind def

/addtocws {
dup cws exch j exch putinterval
/j exch length j add def
} bind def

/tobin {
string dup length 1 sub 0 exch 1 exch {1 index exch 48 put} for
dup 3 -1 roll 2 2 index length string cvrs dup length 2 index length exch sub exch putinterval
[ exch {48 sub} forall ]
} bind def

/encA {
1 {  % Common exit
numD i get 21 ge {
/Dbits [ 1 1 1 1 ] def
/mode D def
exit
} if
numD i get dup 13 ge exch i add msglen eq and {
/Dbits [ 1 1 1 1 ] def
/mode D def
exit
} if
numD i get 2 ge {
2 string dup 0 msg i get put dup 1 msg i 1 add get put Avals exch get addtocws
/i i 2 add def
exit
} if
msg i get fnc1 eq {
numD i 1 add get 15 ge {
Avals fnc1lD get addtocws
/i i 1 add def
/Dbits [] def
/mode D def
exit
} if
numD i 1 add get dup 7 ge exch i add 1 add msglen eq and {
Avals fnc1lD get addtocws
/i i 1 add def
/Dbits [] def
/mode D def
exit
} if
} if
/newmode lookup def
newmode mode ne {
Avals [-1 lC lT lX lD lB] newmode get get addtocws
/mode newmode def
exit
} if
Avals msg i get get addtocws
/i i 1 add def
exit
} repeat
} bind def

/CTXvalstocws {
/in exch def
mark
0 3 in length 1 sub {
in exch 3 getinterval 0 exch {add 40 mul} forall 40 idiv 1 add
dup 256 idiv exch 256 mod
} for
counttomark array astore exch pop
} bind def

/encCTX {
/p 0 def
/ctxvals 2220 array def

% Lookup the values for each character
{
i msglen eq {exit} if
encvals mode get msg i get known not {exit} if
p 3 mod 0 eq {
numD i get 12 ge {
[unlcw] addtocws
/mode A def
exit
} if
numD i get dup 8 ge exch i add msglen eq and {
[unlcw] addtocws
/mode A def
exit
} if
lookup mode ne {
ctxvals 0 p getinterval CTXvalstocws addtocws
[unlcw] addtocws
/mode A def
exit
} if
msglen i sub 3 le {  % Check end of data conditions
/remcws numremcws j p 3 idiv 2 mul add get def
/remvals [
msg i msglen i sub getinterval {
dup encvals mode get exch known {
encvals mode get exch get aload pop
} {  % Unencodable X12 characters
pop -1 -1 -1 -1
} ifelse
} forall
] def
remcws 2 eq remvals length 3 eq and {
% Encode and omit unlatch
[
ctxvals 0 p getinterval aload pop
remvals aload pop
] CTXvalstocws addtocws
/mode A def
/i msglen def
exit
} if
remcws 2 eq remvals length 2 eq and mode X ne and {
% Encode with sft1 as third value, omit unlatch
[
ctxvals 0 p getinterval aload pop
remvals aload pop
encvals mode get sft1 get aload pop
] CTXvalstocws addtocws
/mode A def
/i msglen def
exit
} if
remcws 2 eq remvals length 1 eq and {
% Unlatch to ASCII
ctxvals 0 p getinterval CTXvalstocws addtocws
[unlcw] addtocws
Avals msg i get get addtocws
/mode A def
/i msglen def
exit
} if
remcws 1 eq remvals length 1 eq and {
% Implied unlatch to ASCII
ctxvals 0 p getinterval CTXvalstocws addtocws
Avals msg i get get addtocws
/mode A def
/i msglen def
exit
} if
} if
} if
encvals mode get msg i get get
dup ctxvals exch p exch putinterval
/p exch length p add def
/i i 1 add def
} loop

% Backtrack to a boundary and return to ASCII
mode A ne {
{
p 3 mod 0 eq {exit} if
/i i 1 sub def
/p p encvals mode get msg i get get length sub def
} loop
[
ctxvals 0 p getinterval aload pop
] CTXvalstocws addtocws
[unlcw] addtocws
/mode A def
% Encode something to avoid latching immediately back
i msglen ne {
numD i get 2 ge {
2 string dup 0 msg i get put dup 1 msg i 1 add get put Avals exch get addtocws
/i i 2 add def
} {
Avals msg i get get addtocws
/i i 1 add def
} ifelse
} if
} if

} bind def

/encD {

{  % loop

numD i get 3 lt {

/Drem 8 Dbits length 8 mod sub 8 mod def
/remcws numremcws j Dbits length 8 idiv add get def

% Final codeword with no data
numremcws j Dbits length 8 idiv add 1 sub get 1 sub 0 eq
i msglen eq and {exit} if

% Final digit into final codeword as ASCII
i msglen 1 sub eq numD i get 1 eq and
remcws 1 eq and Drem 0 eq and {exit} if

% Latch to ASCII unless 4 or 6 bits remain in final codeword
i msglen 1 sub eq numD i get 1 eq and
remcws 1 eq and Drem 4 eq Drem 6 eq or and not {
/Dbits [ Dbits aload pop 1 1 1 1 1 1 ] def
/Drem 8 Dbits length 8 mod sub 8 mod def
} if

% Try to encode a digit in remaining bits
Drem 4 eq Drem 6 eq or {
numD i get 1 ge {
/Dbits [ Dbits aload pop msg i get 48 sub 1 add 4 tobin aload pop ] def
/i i 1 add def
} {
/Dbits [ Dbits aload pop 1 1 1 1 ] def
} ifelse
/Drem Drem 4 sub def
} if
Drem 2 eq {
/Dbits [ Dbits aload pop 0 1 ] def
/Drem 0 def
} if

exit

} if

% Three digit value plus one to ten bits
/Dbits [
Dbits aload pop
0 msg i 3 getinterval {48 sub add 10 mul} forall 10 idiv
1 add 10 tobin aload pop
] def
/i i 3 add def

} loop

mark
0 8 Dbits length 1 sub {
Dbits exch 8 getinterval 0 exch {add 2 mul} forall 2 idiv
} for
counttomark array astore exch pop addtocws
/mode A def

} bind def

/encB {
/p 0 def /bvals 1480 array def {
i msglen eq {exit} if
msg i get 0 lt {exit} if  % Function character
lookup mode ne {exit} if
bvals p msg i get put
/p p 1 add def
/i i 1 add def
} loop
/remcws numremcws j p add get 1 sub def
/bvals [
remcws 0 eq i msglen eq and {  % Terminates symbol
0
} {
p 250 lt {p} {p 250 idiv 249 add p 250 mod} ifelse
} ifelse
bvals 0 p getinterval aload pop
] def
bvals addtocws
/mode A def
} bind def

% Derive the codewords
/cws 1480 array def
/mode A def /i 0 def /j 0 def {
i msglen ge {exit} if
[ /encA /encCTX /encCTX /encCTX /encD /encB ] mode get load exec
} loop
/cws cws 0 j getinterval def

} ifelse

% Select metrics of an appropriate symbol
/i 0 def
{ % loop
/m metrics i get def
/vers m 0 get def           % Version of symbol
/rows m 1 get def           % Rows in symbol
/cols m 2 get def           % Columns in symbol
/dcol m 3 get def           % Data columns in symbol
/dcws m 4 get def           % Data codewords in symbol
/rscw m 5 get def           % Error correction codewords
/rsbl m 6 get def           % Error correction blocks
/riso m 7 get def           % Riser offset
/risi m 8 get def           % Riser interval
/risl m 9 get def           % Riser length
/dcpb dcws rsbl idiv def    % Data codewords per block
/ecpb rscw rsbl idiv def    % Error codewords per block
/okay true def
version (unset) ne version vers ne and {/okay false def} if  % The version must match that supplied
cws length dcws gt {/okay false def} if
okay {exit} if
/i i 1 add def
} loop

% Extend cws to ncws codewords by addition of pad characters
stype not {
/cws [ cws aload pop dcws cws length sub {129} repeat ] def
} {
/cws [ dcws cws length sub {0} repeat cws aload pop ] def
} ifelse

% De-interleave the codewords into blocks
/cwbs rsbl array def  % Array of data codeword blocks
/ecbs rsbl array def  % Array of error correction blocks
0 1 rsbl 1 sub {
/i exch def
/cwb dcpb array def
0 1 dcpb 1 sub {
/j exch def
cwb j cws j rsbl mul i add get put
} for
cwbs i cwb put
} for

% Log and anti-log tables and function to calculate product in the field
/gf stype {32} {256} ifelse def
/gf-1 gf 1 sub def
/pm stype {37} {301} ifelse def
/rsalog [ 1 gf-1 { dup 2 mul dup gf ge {pm xor} if } repeat ] def
/rslog gf array def
1 1 gf-1 {dup rsalog exch get exch rslog 3 1 roll put} for
/rsprod {
2 copy 0 ne exch 0 ne and {
rslog exch get exch rslog exch get add gf-1 mod rsalog exch get
} {
pop pop 0
} ifelse
} bind def

% Generate the coefficients for the Reed-Solomon algorithm
/coeffs [ 1 ecpb {0} repeat ] def
0 1 ecpb 1 sub {
/i exch def
coeffs i 1 add coeffs i get put
i -1 1 {
/j exch def
coeffs j coeffs j 1 sub get coeffs j get rsalog i get rsprod xor put
} for
coeffs 0 coeffs 0 get rsalog i get rsprod put
} for
/coeffs coeffs 0 coeffs length 1 sub getinterval def

% Reed-Solomon algorithm to derive the error correction codewords
0 1 cwbs length 1 sub {
/i exch def
/rscws [ cwbs i get aload pop ecpb {0} repeat ] def
0 1 dcpb 1 sub {
/m exch def
/k rscws m get def
0 1 ecpb 1 sub {
/j exch def
rscws m j add 1 add coeffs ecpb j sub 1 sub get k rsprod rscws m j add 1 add get xor put
} for
} for
ecbs i rscws dcpb ecpb getinterval put
} for

% Extend codewords with the interleaved error correction codes
/cws [ cws aload pop rscw {0} repeat ] def
0 1 rscw 1 sub {
/i exch def
cws dcws i add ecbs i rsbl mod get i rsbl idiv get put
} for

% Module matrix for layout of the codewords
/mmat dcws rscw add stype {5} {8} ifelse mul array def
/r 0 def /c 0 def
0 stype {2} {1} ifelse cws length 1 sub {
/i exch def
stype not {
(00000000) 8 string copy dup cws i get 2 8 string cvrs
dup length 8 exch sub exch putinterval [ exch {48 sub} forall ]
dup 0 4 getinterval /top exch def
4 4 getinterval /bot exch def
} {
(00000) 5 string copy dup cws i get 2 5 string cvrs
dup length 5 exch sub exch putinterval [ exch {48 sub} forall ]
/c1 exch def
(00000) 5 string copy dup cws i 1 add get 2 5 string cvrs
dup length 5 exch sub exch putinterval [ exch {48 sub} forall ]
/c2 exch def
/top [ c1 0 3 getinterval aload pop c2 0 2 getinterval aload pop ] def
/bot [ c1 3 2 getinterval aload pop c2 2 3 getinterval aload pop ] def
} ifelse
mmat r dcol mul c add top putinterval
mmat r 1 add dcol mul c add bot putinterval
/c c top length add def
c dcol eq {/c 0 def /r r 2 add def} if
} for

% Create bitmap and add finder patterns
/mmv {cols mul add} bind def
/pixs [ rows cols mul {-1} repeat ] def

% Centre pattern
/artifact [
{cols {0} repeat} bind
{cols {1} repeat} bind
{0   cols 2 sub {1} repeat   0} bind
{0 1 cols 4 sub {0} repeat 1 0} bind
{cols 1 sub 2 idiv {-1} repeat 1 cols 1 sub 2 idiv {-1} repeat} bind
{cols 1 sub 2 idiv {-1} repeat 0 cols 1 sub 2 idiv {-1} repeat} bind
{1   cols 2 sub {0} repeat   1} bind
{1 0 cols 4 sub {1} repeat 0 1} bind
] def
/cpat <<
/A (121343)
/B (12134343)
/C (12121343)
/D (1213434343)
/E (1212134343)
/F (1212121343)
/G (121213434343)
/H (121212134343)
/S (56661278)
/T (5666666666127878)
>> vers 0 1 getinterval get def
pixs 0 rows cpat length sub 2 idiv mmv
[ cpat {artifact exch 49 sub get exec} forall ] putinterval

% Risers
0 1 risl 1 sub {
/i exch def
riso risi cols 1 sub {
/j exch def
[ 1 i 12 mod 0 eq {1} {0} ifelse ] dup
pixs j i mmv
3 -1 roll putinterval
i risl 1 sub ne {
pixs cols j sub 2 sub rows i sub 1 sub mmv
3 -1 roll putinterval
} {pop} ifelse
} for
} for

% Black dots
<<
/A [ [12 5] ]
/B [ [16 7] ]
/C [ [26 12] ]
/D []
/E [ [26 23] ]
/F [ [26 32] [70 32] [26 34] [70 34] ]
/G [ [27 48] [69 48] ]
/H [ [26 70] [66 70] [106 70] [26 72] [66 72] [106 72] ]
/S-10 []
/S-20 [ [10 4] ]
/S-30 [ [15 4] [15 6] ]
/T-16 [ [8 10] ]
/T-32 [ [16 10] [16 12] ]
/T-48 [ [24 10] [24 12] [24 14] ]
>> vers get {pixs exch aload pop mmv 1 put} forall

% Place the modules onto a pixel map between alignment patterns
/j 0 def
0 1 pixs length 1 sub {
/i exch def
pixs i get -1 eq {
pixs i mmat j get put
/j j 1 add def
} if
} for

% Return the arguments
<<
/ren //renmatrix
/pixs pixs
/pixx cols
/pixy rows
/height rows 72 div 2 mul
/width cols 72 div 2 mul
/opt options
>>

dontdraw not //renmatrix if

end

} bind def
/codeone dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER codeone--

% --BEGIN ENCODER gs1-cc--
% --REQUIRES preamble raiseerror renmatrix micropdf417 pdf417--
% --DESC: GS1 Composite 2D Component
% --EXAM: (01)95012345678903(3103)000123
% --EXOP: ccversion=b cccolumns=4
% --RNDR: renmatrix
%%BeginResource: QRCODE gs1-cc 0.0 2015112400 201765 192209
%%BeginData:        650 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renmatrix dup /QRCODE findresource put
dup /pdf417 dup /QRCODE findresource put
dup /micropdf417 dup /QRCODE findresource put
begin
/gs1-cc {

20 dict begin            % Confine variables to local scope

/options exch def  % We are given an option string
/barcode exch def  % We are given a barcode string

/dontdraw false def
/ccversion (a) def
/cccolumns -1 def
/lintype () def
/linwidth -1 def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/cccolumns cccolumns cvi def
/linwidth linwidth cvi def

% Select columns based on linear type
cccolumns -1 eq {
<<
/ean13                  4
/upca                   4
/ean8                   3
/upce                   2
/gs1-128
ccversion (c) ne {4} {linwidth 52 sub 17 idiv} ifelse
/databaromni            4
/databarstacked         2
/databarstackedomni     2
/databartruncated       4
/databarlimited         3
/databarexpanded        4
/databarexpandedstacked 4
>> lintype get /cccolumns exch def
} if

% Expand ordinals of the form ^NNN to ASCII
/expand {
/in exch def
/out in length string def
/j 0 def
in
{ % loop
(^) search {
dup out exch j exch putinterval
length j add 1 add /j exch def
pop
dup 0 3 getinterval cvi out exch j 1 sub exch put
dup length 3 sub 3 exch getinterval
} {
dup out exch j exch putinterval
length j add /j exch def
out 0 j getinterval exit
} ifelse
} loop
} bind def

% Parse out AIs
/ais [] def
/aival 2 dict def
barcode dup length 1 sub 1 exch getinterval
{  % loop
dup () eq {exit} if
(\)) search pop
exch pop
exch (\() search {
exch pop exch 3 1 roll
} {
() 3 1 roll
}  ifelse
[ ais aload pop counttomark 2 add index ] /ais exch def
aival 3 1 roll expand put
} loop
pop

% Method selection
/isupper {dup 65 ge exch 90 le and} bind def  % A-Z
/isnum0  {dup 48 ge exch 57 le and} bind def  % 0-9
/isnum1  {dup 49 ge exch 57 le and} bind def  % 1-9
{  % common exit

% (10/11/17)...
ais length 1 ge {
ais 0 get (10) eq ais 0 get (11) eq or ais 0 get (17) eq or {
-1 (10) exit
} if
} if

% (90){0-3 digits not starting 0}{upper alpha}...
ais length 1 ge {
ais 0 get (90) eq {
/v aival (90) get def
v length 1 ge {
v 0 get isupper {
0 (11) exit
} if
} if
v length 2 ge {
v 0 get isnum1
v 1 get isupper and {
1 (11) exit
} if
} if
v length 3 ge {
v 0 get isnum1
v 1 get isnum0 and
v 2 get isupper and {
2 (11) exit
} if
} if
v length 4 ge {
v 0 get isnum1
v 1 get isnum0 and
v 2 get isnum0 and
v 3 get isupper and {
3 (11) exit
} if
} if
} if
} if

% Freeform
-1 (0) exit

} loop
/method exch def
/npre exch def

/fnc1 -1 def /lnumeric -2 def /lalphanumeric -3 def /liso646 -4 def

/tobin {
string dup length 1 sub 0 exch 1 exch {1 index exch 48 put} for
dup 3 -1 roll 2 2 index length string cvrs dup length 2 index length exch sub exch putinterval
} bind def

/alpha <<
65 1 90 {dup 65 sub 5 tobin} for
48 1 57 {dup 4 add 6 tobin} for
fnc1 (11111)
>> def

/numeric <<
0 1 119 {
dup (00) 2 string copy dup 3 -1 roll 11 2 string cvrs
dup length 2 exch sub exch putinterval
dup 0 get 65 eq {dup 0 94 put} if
dup 1 get 65 eq {dup 1 94 put} if
exch 8 add
(0000000) 7 string copy dup 3 -1 roll 2 7 string cvrs
dup length 7 exch sub exch putinterval
} for
lalphanumeric (0000)
>> def

/alphanumeric <<
48 1 57 {dup 43 sub 5 tobin} for
fnc1 (01111)
65 1 90 {dup 33 sub 6 tobin} for
42 (111010)
44 1 47 {dup 15 add 6 tobin} for
lnumeric (000)
liso646 (00100)
>> def

/iso646 <<
48 1 57 {dup 43 sub 5 tobin} for
fnc1 (01111)
65 1 90 {dup 1 sub 7 tobin} for
97 1 122 {dup 7 sub 7 tobin} for
33 (11101000)
34 (11101001)
37 1 47 {dup 197 add 8 tobin} for
58 1 63 {dup 187 add 8 tobin} for
95 (11111011)
32 (11111100)
lnumeric (000)
lalphanumeric (00100)
>> def

method (10) eq {  % TODO: fixme
ais 0 get (11) eq ais 0 get (17) eq or {
aival ais 0 get get
dup 0 2 getinterval cvi 384 mul exch
dup 2 2 getinterval cvi 1 sub 32 mul exch
4 2 getinterval cvi add add
(0000000000000000) 16 string copy dup 3 -1 roll 2 16 string cvrs
dup length 16 exch sub exch putinterval
[ 1 0
4 -1 roll {48 sub} forall
ais 0 get (11) eq {0} {1} ifelse
] /cdf exch def
/ais ais 1 ais length 1 sub getinterval def
} {
/cdf [ 1 0  1 1 ] def
} ifelse
ais length 0 ne {
ais 0 get (10) eq {
/gpf [ aival (10) get {} forall ] def
ais length 1 gt {/gpf [ gpf aload pop fnc1 ] def} if  % TODO: check
/ais ais 1 ais length 1 sub getinterval def
} {
/gpf [fnc1] def  % TODO: check
} ifelse
} {
/cdf [ cdf aload pop 0 0 0 0 0 1 1 1 1 ] def
/gpf [] def
} ifelse
/mode (numeric) def
} if

method (11) eq {
/cdf [ 1 1 ] def
/ai90 aival (90) get def
npre 1 add ai90 length ne {
ai90 npre 1 add ai90 length npre sub 1 sub getinterval
} {
()
} ifelse
/ai90rem exch def
/nalpha 0 ai90rem {dup 65 ge exch 90 le and {1 add} if} forall def
/nnums  0 ai90rem {dup 48 ge exch 57 le and {1 add} if} forall def
/mode nalpha nnums gt {(alpha)} {(numeric)} ifelse def
nalpha nnums add ai90rem length ne {/mode (alphanumeric) def} if
/cdf [
cdf aload pop
mode (alphanumeric) eq {0} if
mode (numeric) eq {1 0} if
mode (alpha) eq {1 1} if
] def
/ais1 ais length 1 gt {ais 1 get} {-1} ifelse def
ais1 (21) eq ais1 (8004) eq or {
/cdf [ cdf aload pop ais1 (21) eq {1 0} {1 1} ifelse ] def
} {
/cdf [ cdf aload pop 0 ] def
} ifelse
/nval npre 0 ne {ai90 0 npre getinterval cvi} {0} ifelse def
(BDHIJKLNPQRSTVXZ) ai90 npre 1 getinterval search {
length exch pop exch pop
/aval exch def
} {
pop /aval -1 def
} ifelse
nval 31 lt aval -1 ne and {
(00000) 5 string copy dup nval 2 5 string cvrs
dup length 5 exch sub exch putinterval
[ exch {48 sub} forall ] /nbits exch def
(0000) 4 string copy dup aval 2 4 string cvrs
dup length 4 exch sub exch putinterval
[ exch {48 sub} forall ] /abits exch def
/cdf [
cdf aload pop
nbits aload pop
abits aload pop
] def
} {
(0000000000) 10 string copy dup nval 2 10 string cvrs
dup length 10 exch sub exch putinterval
[ exch {48 sub} forall ] /nbits exch def
(00000) 5 string copy dup ai90 npre get 65 sub 2 5 string cvrs
dup length 5 exch sub exch putinterval
[ exch {48 sub} forall ] /abits exch def
/cdf [
cdf aload pop
1 1 1 1 1
nbits aload pop
abits aload pop
] def
} ifelse
mode (numeric) eq {
/gpf [ ai90rem {} forall ais length 1 gt {fnc1} if ] def
} {
/encs mode (alpha) eq {alpha} {alphanumeric} ifelse def
/in [ ai90rem {} forall ais length 1 gt {fnc1} if ] def
/out in length 6 mul array def
/j 0 def
0 1 in length 1 sub {
in exch get encs exch get
dup [ exch {48 sub} forall ] out exch j exch putinterval
length j add /j exch def
} for
/cdf [
cdf aload pop
out 0 j getinterval aload pop
] def
/gpf [] def
ais length 1 gt mode (alpha) ne or {/mode (numeric) def} if
} ifelse
/ais ais 1 ais length 1 sub getinterval def
ais length 0 ne {
ais1 (21) eq ais1 (8004) eq or {
/gpf [
gpf aload pop
aival ais1 get {} forall
] def
/ais ais 1 ais length 1 sub getinterval def
ais length 0 ne {/gpf [gpf aload pop fnc1] def} if
} if
} if
} if

method (0) eq {
/cdf [ 0 ] def
/gpf [] def
/mode (numeric) def
} if

% Pre-defined fixed length data field AIs
% any AI whose prefix is not included in this table must be
% terminated with "FNC1", even if it's fixed length
/aifixed 23 dict def
[
0 1 4 {} for
] {
(00) 2 string copy dup dup 1 5 -1 roll 48 add put aifixed 3 1 roll put
} forall
[
11 1 20 {} for
23
31 1 36 {} for
41
] {
10 2 string cvrs dup aifixed 3 1 roll put
} forall

% Append the remaining AI data
0 1 ais length 1 sub {
/i exch def
/ai ais i get def
/val aival ai get def
gpf length ai length add val length add array
dup 0 gpf putinterval
dup gpf length ai [ exch {} forall ] putinterval
dup gpf length ai length add val [ exch {} forall ] putinterval
/gpf exch def
i ais length 1 sub ne aifixed ai 0 2 getinterval known not and {  % Append FNC1
gpf length 1 add array
dup 0 gpf putinterval
dup gpf length fnc1 put
/gpf exch def
} if
} for

% Calculate the number of bits remaining to the next valid symbol size
/rembits {
/used exch def
ccversion (c) ne {  % cc-a or cc-b
<<
/a [
[167 138 118 108 88 78 59]
[167 138 118  98 78]
[197 167 138 108 78]
]
/b [
[ 336  296 256 208 160 104  56]
[ 768  648 536 416 304 208 152 112  72 32]
[1184 1016 840 672 496 352 264 208 152 96 56]
]
>> ccversion get cccolumns 2 sub get /bitcaps exch def
-1 bitcaps {dup used ge {exch} if pop} forall
dup -1 ne {used sub} if
} {
<< /c -1 >> ccversion get pop  % Assert cc-c
/m used 8 div ceiling cvi dup 6 idiv 5 mul exch 6 mod add def
m   40 le               {8 } if
m   41 ge m  160 le and {16} if
m  161 ge m  320 le and {32} if
m  321 ge               {64} if
/eccws exch def
/m m eccws add 3 add def
/c linwidth 52 sub 17 idiv def
m c idiv 90 gt {/c c 1 add def} if
/r m c div ceiling cvi def
/tgt c r mul eccws sub 3 sub dup 5 idiv 6 mul exch 5 mod add 8 mul def
used 8296 le {tgt used sub} {-1} ifelse
} ifelse
dup -1 eq {  % Upgrade CC-A to CC-B or CC-B to CC-C to fit
pop
ccversion (a) eq {
/ccversion (b) def
} {
ccversion (b) eq lintype (gs1-128) eq and {
/ccversion (c) def
/cccolumns linwidth 52 sub 17 idiv def
} {
/ccversion -1 def
} ifelse
} ifelse
used rembits
} if
} bind def

/encode {
dup /raw ne {exch get} {pop} ifelse
[ exch {48 sub} forall ]
dup length exch
gpfenc exch j exch putinterval
/j exch j add def
} bind def

% Pre-compute alphanumeric and numeric runlengths and position of next ISO646-only characters
/numericruns [ gpf length {0} repeat 0 -1 ] def
/alphanumericruns [ gpf length {0} repeat 0 ] def
/nextiso646only [ gpf length {0} repeat 9999 ] def
gpf length 1 sub -1 0 {
/i exch def
gpf i get
(00) 2 string copy
dup 0 gpf i get dup fnc1 eq {pop 94} if put
i gpf length 1 sub lt {dup 1 gpf i 1 add get dup fnc1 eq {pop 94} if put} if
numeric exch known {
numericruns i numericruns i 2 add get 2 add put
} {
numericruns i 0 put
} ifelse
dup alphanumeric exch known {
alphanumericruns i alphanumericruns i 1 add get 1 add put
} {
alphanumericruns i 0 put
} ifelse
dup iso646 exch known exch alphanumeric exch known not and {
nextiso646only i 0 put
} {
nextiso646only i nextiso646only i 1 add get 1 add put
} ifelse
} for

% Encode the general purpose field
/gpfenc 8296 array def
/i 0 def /j 0 def
{  % loop
i gpf length eq {exit} if
{  % not a loop but common exit point

mode (numeric) eq {
i gpf length 2 sub le {
2 string
dup 0 gpf i get dup fnc1 eq {pop 94} if put
dup 1 gpf i 1 add get dup fnc1 eq {pop 94} if put
dup numeric exch known {
numeric encode
/i i 2 add def
exit
} if
pop
lalphanumeric numeric encode
/mode (alphanumeric) def
exit
} {
gpf i get dup 48 lt exch 57 gt or {
lalphanumeric numeric encode
/mode (alphanumeric) def
exit
} if
/rem cdf length j add rembits def
rem 4 ge rem 6 le and {  % C1 + 1 into 4 to 6 bits
(000000) 6 string copy 0 rem getinterval
dup gpf i get 47 sub 2 4 string cvrs
dup length 4 exch sub exch putinterval /raw encode
/i i 1 add def
exit
} {  % C1.FNC1
2 string dup 0 gpf i get put dup 1 94 put numeric encode
/i i 1 add def
exit
} ifelse
} ifelse
} if

mode (alphanumeric) eq {
gpf i get fnc1 eq {
fnc1 alphanumeric encode
/mode (numeric) def
/i i 1 add def
exit
} if
gpf i get dup iso646 exch known exch alphanumeric exch known not and {
liso646 alphanumeric encode
/mode (iso646) def
exit
} if
numericruns i get 6 ge {
lnumeric alphanumeric encode
/mode (numeric) def
exit
} if
numericruns i get dup 4 ge exch i add gpf length eq and {
lnumeric alphanumeric encode
/mode (numeric) def
exit
} if
gpf i get alphanumeric encode
/i i 1 add def
exit
} if

mode (iso646) eq {
gpf i get fnc1 eq {
fnc1 iso646 encode
/mode (numeric) def
/i i 1 add def
exit
} if
numericruns i get 4 ge nextiso646only i get 10 ge and {
lnumeric iso646 encode
/mode (numeric) def
exit
} if
alphanumericruns i get 5 ge nextiso646only i get 10 ge and {
lalphanumeric iso646 encode
/mode (alphanumeric) def
exit
} if
gpf i get iso646 encode
/i i 1 add def
exit
} if

} loop
} loop
/gpf gpfenc 0 j getinterval def

% Create pad
/pad cdf length gpf length add rembits array def
pad length 0 gt {
0 5 pad length 1 sub {  % Fill with 00100
/i exch def
pad i [ 0 0 1 0 0 ] 0 pad length i sub 5 2 copy gt {exch} if pop getinterval putinterval
} for
mode (numeric) eq {  % Prefix shift from numeric to ASCII
/pad [ 0 0 0 0 pad aload pop ] 0 pad length getinterval def
} if
mode (alpha) eq {  % Prefix FNC1
/pad [ 1 1 1 1 1 pad aload pop ] 0 pad length getinterval def
} if
} if

% Concatinate fields
/bits [
cdf aload pop
gpf aload pop
pad aload pop
] def

ccversion (a) eq {
/pwr928 [
[ 0 0 0 0 0 0 1 ]
68 {7 array} repeat
] def
1 1 68 {
/j exch def
/v 0 def
6 -1 1 {
/i exch def
/v pwr928 j 1 sub get i get 2 mul v 928 idiv add def
pwr928 j get i v 928 mod put
} for
pwr928 j get 0 pwr928 j 1 sub get 0 get 2 mul v 928 idiv add put
} for
/cws [ 28 {0} repeat ] def
/b 0 def /c 0 def
{  % loop
b bits length eq {exit} if
/bs bits b 69 bits length b sub 2 copy gt {exch} if pop getinterval def
/bsl bs length def
/cs cws c bsl 10 idiv 1 add getinterval def
/csl cs length def
0 1 bsl 1 sub {
/i exch def
0 1 csl 1 sub {
/j exch def
cs j 2 copy get
pwr928 i get j 7 add csl sub get
bs bsl i sub 1 sub get
mul add put
} for
} for
csl 1 sub -1 1 {
/i exch def
cs i 1 sub 2 copy get cs i get 928 idiv add put
cs i 2 copy get 928 mod put
} for
/b b bsl add def
/c c csl add def
} loop
/cws cws 0 c getinterval def
/barcode cws length 4 mul string def
0 1 cws length 1 sub {
/i exch def
(^   ) 4 string copy dup cws i get 10 4 string cvrs
dup length 4 exch sub exch putinterval
barcode i 4 mul 3 -1 roll putinterval
} for
options (dontdraw) true put
options (cca) true put
options (columns) cccolumns put
/args barcode options //micropdf417 exec def
} if

ccversion (b) eq {
/barcode bits length 8 idiv string def
0 1 barcode length 1 sub {
/i exch def
bits i 8 mul 8 getinterval 0 exch {add 2 mul} forall 2 idiv
barcode exch i exch put
} for
options (dontdraw) true put
options (ccb) true put
options (columns) cccolumns put
/args barcode options //micropdf417 exec def
} if

ccversion (c) eq {
/barcode bits length 8 idiv string def
0 1 barcode length 1 sub {
/i exch def
bits i 8 mul 8 getinterval 0 exch {add 2 mul} forall 2 idiv
barcode exch i exch put
} for
options (dontdraw) true put
options (ccc) true put
options (columns) cccolumns put
/args barcode options //pdf417 exec def
} if

args
dontdraw not //renmatrix if

end

} bind def
/gs1-cc dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER gs1-cc--

% --BEGIN ENCODER ean13composite--
% --REQUIRES preamble raiseerror renlinear renmatrix ean5 ean2 ean13 micropdf417 pdf417 gs1-cc--
% --DESC: EAN-13 Composite
% --EXAM: 2112345678900|(99)1234-abcd
% --EXOP: includetext
% --RNDR: renlinear renmatrix
%%BeginResource: QRCODE ean13composite 0.0 2015112400 84127 84015
%%BeginData:         72 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /ean13 dup /QRCODE findresource put
dup /gs1-cc dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
dup /renmatrix dup /QRCODE findresource put
begin
/ean13composite {

20 dict begin            % Confine variables to local scope

/options exch def
/barcode exch def

/dontdraw false def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

% Split the linear and composite parts
barcode (|) search {
/linear exch def
pop
/comp exch def
} {
pop
} ifelse

gsave

options (lintype) (ean13) put
options (inkspread) (0) put
options (dontdraw) true put

% Plot the linear part
linear options //ean13 exec //renlinear exec

% Plot the separator
-1 72 rmoveto <<
/ren //renmatrix
/pixs [
0 1  93 {0} repeat  1 0
1 0  93 {0} repeat  0 1
0 1  93 {0} repeat  1 0
]
/pixx 97
/pixy 3
/height 6 72 div
/width 97 72 div
/opt options
>> //renmatrix exec

% Plot the 2D part
-2 6 rmoveto comp options //gs1-cc exec //renmatrix exec

grestore

end

} bind def
/ean13composite dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER ean13composite--

% --BEGIN ENCODER ean8composite--
% --REQUIRES preamble raiseerror renlinear renmatrix ean5 ean2 ean8 micropdf417 pdf417 gs1-cc--
% --DESC: EAN-8 Composite
% --EXAM: 02345673|(21)A12345678
% --EXOP: includetext
% --RNDR: renlinear renmatrix
%%BeginResource: QRCODE ean8composite 0.0 2015112400 84428 84317
%%BeginData:         75 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /ean8 dup /QRCODE findresource put
dup /gs1-cc dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
dup /renmatrix dup /QRCODE findresource put
begin
/ean8composite {

20 dict begin            % Confine variables to local scope

/options exch def
/barcode exch def

/dontdraw false def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

% Split the linear and composite parts
barcode (|) search {
/linear exch def
pop
/comp exch def
} {
pop
} ifelse

gsave

% Get the result of encoding with ean8 and gs1-cc
options (lintype) (ean8) put
options (inkspread) (0) put
options (dontdraw) true put

% Plot the linear part
linear options //ean8 exec //renlinear exec

% Plot the separator
-1 72 rmoveto <<
/ren //renmatrix
/pixs [
0 1  65 {0} repeat  1 0
1 0  65 {0} repeat  0 1
0 1  65 {0} repeat  1 0
]
/pixx 69
/pixy 3
/height 6 72 div
/width 69 72 div
/opt options
>> //renmatrix exec

% Plot the 2D part
comp options //gs1-cc exec
dup (pixx) get 69 exch sub 6 rmoveto
//renmatrix exec

grestore

end

} bind def
/ean8composite dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER ean8composite--

% --BEGIN ENCODER upcacomposite--
% --REQUIRES preamble raiseerror renlinear renmatrix ean5 ean2 upca micropdf417 pdf417 gs1-cc--
% --DESC: UPC-A Composite
% --EXAM: 416000336108|(99)1234-abcd
% --EXOP: includetext
% --RNDR: renlinear renmatrix
%%BeginResource: QRCODE upcacomposite 0.0 2015112400 84017 87498
%%BeginData:         72 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
2 dict
dup /raiseerror dup /QRCODE findresource put
dup /upca dup /QRCODE findresource put
dup /gs1-cc dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
dup /renmatrix dup /QRCODE findresource put
begin
/upcacomposite {

20 dict begin            % Confine variables to local scope

/options exch def
/barcode exch def

/dontdraw false def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

% Split the linear and composite parts
barcode (|) search {
/linear exch def
pop
/comp exch def
} {
pop
} ifelse

gsave

options (lintype) (ean13) put
options (inkspread) (0) put
options (dontdraw) true put

% Plot the linear part
linear options //upca exec //renlinear exec

% Plot the separator
-1 72 rmoveto <<
/ren //renmatrix
/pixs [
0 1  93 {0} repeat  1 0
1 0  93 {0} repeat  0 1
0 1  93 {0} repeat  1 0
]
/pixx 97
/pixy 3
/height 6 72 div
/width 97 72 div
/opt options
>> //renmatrix exec

% Plot the 2D part
-2 6 rmoveto comp options //gs1-cc exec //renmatrix exec

grestore

end

} bind def
/upcacomposite dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER upcacomposite--

% --BEGIN ENCODER upcecomposite--
% --REQUIRES preamble raiseerror renlinear renmatrix ean5 ean2 upce micropdf417 pdf417 gs1-cc--
% --DESC: UPC-E Composite
% --EXAM: 00123457|(15)021231
% --EXOP: includetext
% --RNDR: renlinear renmatrix
%%BeginResource: QRCODE upcecomposite 0.0 2015112400 88387 84857
%%BeginData:         87 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
2 dict
dup /raiseerror dup /QRCODE findresource put
dup /upce dup /QRCODE findresource put
dup /gs1-cc dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
dup /renmatrix dup /QRCODE findresource put
begin
/upcecomposite {

20 dict begin            % Confine variables to local scope

/options exch def
/barcode exch def

/dontdraw false def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

% Split the linear and composite parts
barcode (|) search {
/linear exch def
pop
/comp exch def
} {
pop
} ifelse

% Define the separator
/sep <<
/ren //renmatrix
/pixs [
0 1  49 {0} repeat  1 0
1 0  49 {0} repeat  0 1
0 1  49 {0} repeat  1 0
]
/pixx 53
/pixy 3
/height 6 72 div
/width 53 72 div
/opt options
>> def

gsave

options (lintype) (upce) put
options (inkspread) (0) put
options (dontdraw) true put

% Plot the linear part
linear options //upce exec //renlinear exec

% Plot the separator
-1 72 rmoveto <<
/ren //renmatrix
/pixs [
0 1  49 {0} repeat  1 0
1 0  49 {0} repeat  0 1
0 1  49 {0} repeat  1 0
]
/pixx 53
/pixy 3
/height 6 72 div
/width 53 72 div
/opt options
>> //renmatrix exec

% Plot the 2D part
-2 6 rmoveto comp options //gs1-cc exec //renmatrix exec

grestore

end

} bind def
/upcecomposite dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER upcecomposite--

% --BEGIN ENCODER databaromnicomposite--
% --REQUIRES preamble raiseerror renlinear renmatrix databaromni micropdf417 pdf417 gs1-cc--
% --DESC: GS1 DataBar Omnidirectional Composite
% --EXAM: (01)03612345678904|(11)990102
% --EXOP:
% --RNDR: renlinear renmatrix
%%BeginResource: QRCODE databaromnicomposite 0.0 2015112400 87388 83828
%%BeginData:        100 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
2 dict
dup /raiseerror dup /QRCODE findresource put
dup /databaromni dup /QRCODE findresource put
dup /gs1-cc dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
dup /renmatrix dup /QRCODE findresource put
begin
/databaromnicomposite {

20 dict begin            % Confine variables to local scope

/options exch def
/barcode exch def

/dontdraw false def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

% Split the linear and composite parts
barcode (|) search {
/linear exch def
pop
/comp exch def
} {
pop
} ifelse

gsave

options (lintype) (databaromni) put
options (linkage) true put
options (inkspread) (0) put
options (dontdraw) true put

% Plot the linear part
linear options //databaromni exec
dup (sbs) get /linsbs exch def
dup (bhs) get 0 get 72 mul /linheight exch def
//renlinear exec

% Plot the separator
/sepfinder {
/fp exch def
fp 1 fp 12 add {
/i exch def
bot i get 0 eq {
bot i 1 sub get 1 eq {
1
} {
sep i 1 sub get 0 eq {1} {0} ifelse
} ifelse
} {
0
} ifelse
sep exch i exch put
} for
/f3 [1 1 1 1 1 1 1 1 1 0 1 1 1] def
true 0 1 12 {dup bot exch fp add get exch f3 exch get eq and} for {
% Right shifted module for value 3 finder
sep fp [ 0 0 0 0 0 0 0 0 0 0 1 0 0 ] putinterval
} if
} bind def
mark
0 linsbs {1 index 1 eq {{0}} {{1}} ifelse repeat} forall
counttomark 1 sub array astore /bot exch def pop pop
/sep [ bot {1 exch sub} forall ] def
sep 0 [0 0 0] putinterval
sep sep length 4 sub [0 0 0 0] putinterval
18 sepfinder 64 sepfinder
0 linheight rmoveto <<
/ren //renmatrix
/pixs sep
/pixx sep length
/pixy 1
/height 1 72 div
/width sep length 72 div
/opt options
>> //renmatrix exec

% Plot the 2D part
-5 1 rmoveto comp options //gs1-cc exec //renmatrix exec

grestore

end

} bind def
/databaromnicomposite dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER databaromnicomposite--

% --BEGIN ENCODER databarstackedcomposite--
% --REQUIRES preamble raiseerror renlinear renmatrix databaromni databarstacked micropdf417 pdf417 gs1-cc--
% --DESC: GS1 DataBar Stacked Composite
% --EXAM: (01)03412345678900|(17)010200
% --EXOP:
% --RNDR: renlinear renmatrix
%%BeginResource: QRCODE databarstackedcomposite 0.0 2015112400 89818 86093
%%BeginData:         96 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
2 dict
dup /raiseerror dup /QRCODE findresource put
dup /databarstacked dup /QRCODE findresource put
dup /gs1-cc dup /QRCODE findresource put
dup /renmatrix dup /QRCODE findresource put
begin
/databarstackedcomposite {

20 dict begin            % Confine variables to local scope

/options exch def
/barcode exch def

/dontdraw false def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

% Split the linear and composite parts
barcode (|) search {
/linear exch def
pop
/comp exch def
} {
pop
} ifelse

gsave

options (lintype) (databarstacked) put
options (linkage) true put
options (inkspread) (0) put
options (dontdraw) true put

% Plot the linear part
linear options //databarstacked exec
dup (pixs) get 0 2 index (pixx) get getinterval /bot exch def
dup (pixy) get /linheight exch def
//renmatrix exec

% Plot the separator
/sepfinder {
/fp exch def
fp 1 fp 12 add {
/i exch def
bot i get 0 eq {
bot i 1 sub get 1 eq {
1
} {
sep i 1 sub get 0 eq {1} {0} ifelse
} ifelse
} {
0
} ifelse
sep exch i exch put
} for
/f3 [1 1 1 1 1 1 1 1 1 0 1 1 1] def
true 0 1 12 {dup bot exch fp add get exch f3 exch get eq and} for {
% Right shifted module for value 3 finder
sep fp [ 0 0 0 0 0 0 0 0 0 0 1 0 0 ] putinterval
} if
} bind def
/sep [ bot {1 exch sub} forall ] def
sep 0 [ 0 0 0 0 ] putinterval
sep sep length 4 sub [ 0 0 0 0 ] putinterval
18 sepfinder
0 linheight rmoveto <<
/ren //renmatrix
/pixs sep
/pixx sep length
/pixy 1
/height 1 72 div
/width sep length 72 div
/opt options
>> //renmatrix exec

% Plot the 2D part
1 1 rmoveto comp options //gs1-cc exec //renmatrix exec

grestore

end

} bind def
/databarstackedcomposite dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER databarstackedcomposite--

% --BEGIN ENCODER databarstackedomnicomposite--
% --REQUIRES preamble raiseerror renlinear renmatrix databaromni databarstackedomni micropdf417 pdf417 gs1-cc--
% --DESC: GS1 DataBar Stacked Omnidirectional Composite
% --EXAM: (01)03612345678904|(11)990102
% --EXOP:
% --RNDR: renlinear renmatrix
%%BeginResource: QRCODE databarstackedomnicomposite 0.0 2015112400 89894 86165
%%BeginData:         96 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
2 dict
dup /raiseerror dup /QRCODE findresource put
dup /databarstackedomni dup /QRCODE findresource put
dup /gs1-cc dup /QRCODE findresource put
dup /renmatrix dup /QRCODE findresource put
begin
/databarstackedomnicomposite {

20 dict begin            % Confine variables to local scope

/options exch def
/barcode exch def

/dontdraw false def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

% Split the linear and composite parts
barcode (|) search {
/linear exch def
pop
/comp exch def
} {
pop
} ifelse

gsave

options (lintype) (databarstackedomni) put
options (linkage) true put
options (inkspread) (0) put
options (dontdraw) true put

% Plot the linear part
linear options //databarstackedomni exec
dup (pixs) get 0 2 index (pixx) get getinterval /bot exch def
dup (pixy) get /linheight exch def
//renmatrix exec

% Plot the separator
/sepfinder {
/fp exch def
fp 1 fp 12 add {
/i exch def
bot i get 0 eq {
bot i 1 sub get 1 eq {
1
} {
sep i 1 sub get 0 eq {1} {0} ifelse
} ifelse
} {
0
} ifelse
sep exch i exch put
} for
/f3 [1 1 1 1 1 1 1 1 1 0 1 1 1] def
true 0 1 12 {dup bot exch fp add get exch f3 exch get eq and} for {
% Right shifted module for value 3 finder
sep fp [ 0 0 0 0 0 0 0 0 0 0 1 0 0 ] putinterval
} if
} bind def
/sep [ bot {1 exch sub} forall ] def
sep 0 [ 0 0 0 ] putinterval
sep sep length 4 sub [ 0 0 0 0 ] putinterval
18 sepfinder
0 linheight rmoveto <<
/ren //renmatrix
/pixs sep
/pixx sep length
/pixy 1
/height 1 72 div
/width sep length 72 div
/opt options
>> //renmatrix exec

% Plot the 2D part
1 1 rmoveto comp options //gs1-cc exec //renmatrix exec

grestore

end

} bind def
/databarstackedomnicomposite dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER databarstackedomnicomposite--

% --BEGIN ENCODER databartruncatedcomposite--
% --REQUIRES preamble raiseerror renlinear renmatrix databaromni databartruncated micropdf417 pdf417 gs1-cc--
% --DESC: GS1 DataBar Truncated Composite
% --EXAM: (01)03612345678904|(11)990102
% --EXOP:
% --RNDR: renlinear renmatrix
%%BeginResource: QRCODE databartruncatedcomposite 0.0 2015112400 90784 87051
%%BeginData:        100 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
2 dict
dup /raiseerror dup /QRCODE findresource put
dup /databartruncated dup /QRCODE findresource put
dup /gs1-cc dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
dup /renmatrix dup /QRCODE findresource put
begin
/databartruncatedcomposite {

20 dict begin            % Confine variables to local scope

/options exch def
/barcode exch def

/dontdraw false def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

% Split the linear and composite parts
barcode (|) search {
/linear exch def
pop
/comp exch def
} {
pop
} ifelse

gsave

options (lintype) (databartruncated) put
options (linkage) true put
options (inkspread) (0) put
options (dontdraw) true put

% Plot the linear part
linear options //databartruncated exec
dup (sbs) get /linsbs exch def
dup (bhs) get 0 get 72 mul /linheight exch def
//renlinear exec

% Plot the separator
/sepfinder {
/fp exch def
fp 1 fp 12 add {
/i exch def
bot i get 0 eq {
bot i 1 sub get 1 eq {
1
} {
sep i 1 sub get 0 eq {1} {0} ifelse
} ifelse
} {
0
} ifelse
sep exch i exch put
} for
/f3 [1 1 1 1 1 1 1 1 1 0 1 1 1] def
true 0 1 12 {dup bot exch fp add get exch f3 exch get eq and} for {
% Right shifted module for value 3 finder
sep fp [ 0 0 0 0 0 0 0 0 0 0 1 0 0 ] putinterval
} if
} bind def
mark
0 linsbs {1 index 1 eq {{0}} {{1}} ifelse repeat} forall
counttomark 1 sub array astore /bot exch def pop pop
/sep [ bot {1 exch sub} forall ] def
sep 0 [0 0 0] putinterval
sep sep length 4 sub [0 0 0 0] putinterval
18 sepfinder 64 sepfinder
0 linheight rmoveto <<
/ren //renmatrix
/pixs sep
/pixx sep length
/pixy 1
/height 1 72 div
/width sep length 72 div
/opt options
>> //renmatrix exec

% Plot the 2D part
-5 1 rmoveto comp options //gs1-cc exec //renmatrix exec

grestore

end

} bind def
/databartruncatedcomposite dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER databartruncatedcomposite--

% --BEGIN ENCODER databarlimitedcomposite--
% --REQUIRES preamble raiseerror renlinear renmatrix databarlimited micropdf417 pdf417 gs1-cc--
% --DESC: GS1 DataBar Limited Composite
% --EXAM: (01)03512345678907|(21)abcdefghijklmnopqrstuv
% --EXOP:
% --RNDR: renlinear renmatrix
%%BeginResource: QRCODE databarlimitedcomposite 0.0 2015112400 80661 80522
%%BeginData:         79 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
2 dict
dup /raiseerror dup /QRCODE findresource put
dup /databarlimited dup /QRCODE findresource put
dup /gs1-cc dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
dup /renmatrix dup /QRCODE findresource put
begin
/databarlimitedcomposite {

20 dict begin            % Confine variables to local scope

/options exch def
/barcode exch def

/dontdraw false def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

% Split the linear and composite parts
barcode (|) search {
/linear exch def
pop
/comp exch def
} {
pop
} ifelse

gsave

options (lintype) (databarlimited) put
options (linkage) true put
options (inkspread) (0) put
options (dontdraw) true put

% Plot the linear part
linear options //databarlimited exec
dup (sbs) get /linsbs exch def
dup (bhs) get 0 get 72 mul /linheight exch def
//renlinear exec

% Plot the separator
mark
1 linsbs {1 index 0 eq {{1}} {{0}} ifelse repeat} forall
counttomark 1 sub array astore /sep exch def pop pop
sep 0 [0 0 0] putinterval
sep sep length 4 sub [0 0 0 0] putinterval
0 linheight rmoveto <<
/ren //renmatrix
/pixs sep
/pixx sep length
/pixy 1
/height 1 72 div
/width sep length 72 div
/opt options
>> //renmatrix exec

% Plot the 2D part
comp options //gs1-cc exec
dup (pixx) get 72 exch sub 1 rmoveto
//renmatrix exec

grestore

end

} bind def
/databarlimitedcomposite dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER databarlimitedcomposite--

% --BEGIN ENCODER databarexpandedcomposite--
% --REQUIRES preamble raiseerror renlinear renmatrix databarexpanded micropdf417 pdf417 gs1-cc--
% --DESC: GS1 DataBar Expanded Composite
% --EXAM: (01)93712345678904(3103)001234|(91)1A2B3C4D5E
% --EXOP:
% --RNDR: renlinear renmatrix
%%BeginResource: QRCODE databarexpandedcomposite 0.0 2015112400 83387 86828
%%BeginData:         98 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
2 dict
dup /raiseerror dup /QRCODE findresource put
dup /databarexpanded dup /QRCODE findresource put
dup /gs1-cc dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
dup /renmatrix dup /QRCODE findresource put
begin
/databarexpandedcomposite {

20 dict begin            % Confine variables to local scope

/options exch def
/barcode exch def

/dontdraw false def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

% Split the linear and composite parts
barcode (|) search {
/linear exch def
pop
/comp exch def
} {
pop
} ifelse

gsave

options (lintype) (databarexpanded) put
options (linkage) true put
options (inkspread) (0) put
options (dontdraw) true put

% Plot the linear part
linear options //databarexpanded exec
dup (sbs) get /linsbs exch def
dup (bhs) get 0 get 72 mul /linheight exch def
//renlinear exec

% Plot the separator
/sepfinder {
/fp exch def
fp 1 fp 12 add {
/i exch def
bot i get 0 eq {
bot i 1 sub get 1 eq {
1
} {
sep i 1 sub get 0 eq {1} {0} ifelse
} ifelse
} {
0
} ifelse
sep exch i exch put
} for
} bind def
mark
0 linsbs {1 index 1 eq {{0}} {{1}} ifelse repeat} forall
counttomark 1 sub array astore /bot exch def pop pop
/sep [ bot {1 exch sub} forall ] def
sep 0 [0 0 0] putinterval
sep sep length 4 sub [0 0 0 0] putinterval
[  % Finder pattern module positions
18 98 bot length 13 sub {} for
69 98 bot length 13 sub {} for
] {sepfinder} forall
0 linheight rmoveto <<
/ren //renmatrix
/pixs sep
/pixx sep length
/pixy 1
/height 1 72 div
/width sep length 72 div
/opt options
>> //renmatrix exec

% Plot the 2D part
1 1 rmoveto comp options //gs1-cc exec //renmatrix exec

grestore

end

} bind def
/databarexpandedcomposite dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER databarexpandedcomposite--

% --BEGIN ENCODER databarexpandedstackedcomposite--
% --REQUIRES preamble raiseerror renlinear renmatrix databarexpanded databarexpandedstacked micropdf417 pdf417 gs1-cc--
% --DESC: GS1 DataBar Expanded Stacked Composite
% --EXAM: (01)00012345678905(10)ABCDEF|(21)12345678
% --EXOP: segments=4
% --RNDR: renmatrix renlinear
%%BeginResource: QRCODE databarexpandedstackedcomposite 0.0 2015112400 86317 89413
%%BeginData:         95 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
2 dict
dup /raiseerror dup /QRCODE findresource put
dup /databarexpandedstacked dup /QRCODE findresource put
dup /gs1-cc dup /QRCODE findresource put
dup /renmatrix dup /QRCODE findresource put
begin
/databarexpandedstackedcomposite {

20 dict begin            % Confine variables to local scope

/options exch def
/barcode exch def

/dontdraw false def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

% Split the linear and composite parts
barcode (|) search {
/linear exch def
pop
/comp exch def
} {
pop
} ifelse

gsave

options (lintype) (databarexpandedstacked) put
options (linkage) true put
options (inkspread) (0) put
options (dontdraw) true put

% Plot the linear part
linear options //databarexpandedstacked exec
dup (pixs) get 0 2 index (pixx) get getinterval /bot exch def
dup (pixy) get /linheight exch def
//renmatrix exec

% Plot the separator
/sepfinder {
/fp exch def
fp 1 fp 12 add {
/i exch def
bot i get 0 eq {
bot i 1 sub get 1 eq {
1
} {
sep i 1 sub get 0 eq {1} {0} ifelse
} ifelse
} {
0
} ifelse
sep exch i exch put
} for
} bind def
/sep [ bot {1 exch sub} forall ] def
sep 0 [ 0 0 0 ] putinterval
sep sep length 4 sub [ 0 0 0 0 ] putinterval
[  % Finder pattern module positions
19 98 bot length 13 sub {} for
70 98 bot length 13 sub {} for
] {sepfinder} forall
0 linheight rmoveto <<
/ren //renmatrix
/pixs sep
/pixx sep length
/pixy 1
/height 1 72 div
/width sep length 72 div
/opt options
>> //renmatrix exec

% Plot the 2D part
bot 0 get 0 eq {2} {0} ifelse 1 rmoveto
comp options //gs1-cc exec //renmatrix exec

grestore

end

} bind def
/databarexpandedstackedcomposite dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER databarexpandedstackedcomposite--

% --BEGIN ENCODER gs1-128composite--
% --REQUIRES preamble raiseerror renlinear renmatrix code128 gs1-128 micropdf417 pdf417 gs1-cc--
% --DESC: GS1-128 Composite
% --EXAM: (00)030123456789012340|(02)13012345678909(37)24(10)1234567ABCDEFG
% --EXOP: ccversion=c
% --RNDR: renlinear renmatrix
%%BeginResource: QRCODE gs1-128composite 0.0 2015112400 90300 86481
%%BeginData:        100 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
2 dict
dup /raiseerror dup /QRCODE findresource put
dup /gs1-128 dup /QRCODE findresource put
dup /gs1-cc dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
dup /renmatrix dup /QRCODE findresource put
begin
/gs1-128composite {

20 dict begin            % Confine variables to local scope

/options exch def
/barcode exch def

/dontdraw false def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

% Split the linear and composite parts
barcode (|) search {
/linear exch def
pop
/comp exch def
} {
pop
} ifelse

gsave

options (inkspread) (0) put
options (dontdraw) true put

% Dummy plot of linear part with CC-A to get width
options (linkagea) true put
linear << options {} forall >> //gs1-128 exec
(sbs) get 0 exch {add} forall /linwidth exch def

% Create 2D part and determine type
options (lintype) (gs1-128) put
options (linwidth) linwidth put
comp options //gs1-cc exec /compsym exch def
compsym (pixx) get 99 eq {(a)} {(c)} ifelse /linktype exch def

% Plot linear part
linktype (a) eq {
options (linkagea) true put
options (linkagec) false put
} {
options (linkagea) false put
options (linkagec) true put
} ifelse
linear << options {} forall >> //gs1-128 exec
dup (sbs) get /linsbs exch def
dup (bhs) get 0 get 72 mul /linheight exch def
//renlinear exec

% Plot the separator
mark
1 linsbs {1 index 0 eq {{1}} {{0}} ifelse repeat} forall
counttomark 1 sub array astore /sep exch def pop pop
0 linheight rmoveto <<
/ren //renmatrix
/pixs sep
/pixx sep length
/pixy 1
/height 1 72 div
/width sep length 72 div
/opt options
>> //renmatrix exec

% Plot the 2D part
linktype (a) eq {
/s linwidth 2 sub 11 idiv def
/p s 9 sub 2 idiv def
/x s p sub 1 sub 11 mul 10 add p 0 eq {2 add} if 99 sub def
x 1 rmoveto
} {
-7 1 rmoveto
} ifelse

compsym //renmatrix exec

grestore

end

} bind def
/gs1-128composite dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER gs1-128composite--

% --BEGIN ENCODER gs1datamatrix--
% --REQUIRES preamble raiseerror renmatrix datamatrix--
% --DESC: GS1 Data Matrix
% --EXAM: (01)03453120000011(17)120508(10)ABCD1234(410)9501101020917
% --EXOP:
% --RNDR: renmatrix
%%BeginResource: QRCODE gs1datamatrix 0.0 2015112400 78248 77990
%%BeginData:        134 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renmatrix dup /QRCODE findresource put
dup /datamatrix dup /QRCODE findresource put
begin
/gs1datamatrix {

20 dict begin            % Confine variables to local scope

/options exch def  % We are given an option string
/barcode exch def  % We are given a barcode string

/dontdraw false def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

% Expand ordinals of the form ^NNN to ASCII
/expand {
/in exch def
/out in length string def
/j 0 def
in
{ % loop
(^) search {
dup out exch j exch putinterval
length j add 1 add /j exch def
pop
dup 0 3 getinterval cvi out exch j 1 sub exch put
dup length 3 sub 3 exch getinterval
} {
dup out exch j exch putinterval
length j add /j exch def
out 0 j getinterval exit
} ifelse
} loop
} bind def

% Parse out AIs
/ais [] def
/aival 2 dict def
barcode dup length 1 sub 1 exch getinterval
{  % loop
dup () eq {exit} if
(\)) search pop
exch pop
exch (\() search {
exch pop exch 3 1 roll
} {
() 3 1 roll
} ifelse
[ ais aload pop counttomark 2 add index ] /ais exch def
aival 3 1 roll expand put
} loop
pop

% Pre-defined fixed length data field AIs
% any AI whose prefix is not included in this table must be
% terminated with "FNC1", even if it's fixed length
/aifixed 23 dict def
[
0 1 4 {} for
] {
(00) 2 string copy dup dup 1 5 -1 roll 48 add put aifixed 3 1 roll put
} forall
[
11 1 20 {} for
23
31 1 36 {} for
41
] {
10 2 string cvrs dup aifixed 3 1 roll put
} forall

% Create the datamatrix data
/fnc1 -1 def
/dmtx [ fnc1 ] def
0 1 ais length 1 sub {
/i exch def
/ai ais i get def
/val aival ai get def
dmtx length ai length add val length add array
dup 0 dmtx putinterval
dup dmtx length ai [ exch {} forall ] putinterval
dup dmtx length ai length add val [ exch {} forall ] putinterval
/dmtx exch def
i ais length 1 sub ne aifixed ai 0 2 getinterval known not and {  % Append FNC1
dmtx length 1 add array
dup 0 dmtx putinterval
dup dmtx length fnc1 put
/dmtx exch def
} if
} for

% Compose input to datamatrix
/barcode dmtx length 1 add 5 mul string def
/i 0 def /j 0 def {
i dmtx length eq {exit} if
dmtx i get dup fnc1 eq {
pop barcode j (^FNC1) putinterval
/j j 4 add def
} {
barcode exch j exch put
} ifelse
/i i 1 add def
/j j 1 add def
} loop
/barcode barcode 0 j getinterval def

% Get the result of encoding with code128
options (dontdraw) true put
options (parsefnc) true put
/args barcode options //datamatrix exec def

args (opt) options put
args

dontdraw not //renmatrix if

end

} bind def
/gs1datamatrix dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER gs1datamatrix--

% --BEGIN ENCODER gs1qrcode--
% --REQUIRES preamble raiseerror renmatrix qrcode--
% --DESC: GS1 QR Code
% --EXAM: (01)03453120000011(8200)http://www.abc.net(10)ABCD1234(410)9501101020917
% --EXOP:
% --RNDR: renmatrix
%%BeginResource: QRCODE gs1qrcode 0.0 2015112400 78192 78026
%%BeginData:        133 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /renmatrix dup /QRCODE findresource put
dup /qrcode dup /QRCODE findresource put
begin
/gs1qrcode {

20 dict begin            % Confine variables to local scope

/options exch def  % We are given an option string
/barcode exch def  % We are given a barcode string

/dontdraw false def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

% Expand ordinals of the form ^NNN to ASCII
/expand {
/in exch def
/out in length string def
/j 0 def
in
{ % loop
(^) search {
dup out exch j exch putinterval
length j add 1 add /j exch def
pop
dup 0 3 getinterval cvi out exch j 1 sub exch put
dup length 3 sub 3 exch getinterval
} {
dup out exch j exch putinterval
length j add /j exch def
out 0 j getinterval exit
} ifelse
} loop
} bind def

% Parse out AIs
/ais [] def
/aival 2 dict def
barcode dup length 1 sub 1 exch getinterval
{  % loop
dup () eq {exit} if
(\)) search pop
exch pop
exch (\() search {
exch pop exch 3 1 roll
} {
() 3 1 roll
} ifelse
[ ais aload pop counttomark 2 add index ] /ais exch def
aival 3 1 roll expand put
} loop
pop

% Pre-defined fixed length data field AIs
% any AI whose prefix is not included in this table must be
% terminated with "FNC1", even if it's fixed length
/aifixed 23 dict def
[
0 1 4 {} for
] {
(00) 2 string copy dup dup 1 5 -1 roll 48 add put aifixed 3 1 roll put
} forall
[
11 1 20 {} for
23
31 1 36 {} for
41
] {
10 2 string cvrs dup aifixed 3 1 roll put
} forall

% Create the qrcode data
/fnc1 -1 def
/qrc [ fnc1 ] def
0 1 ais length 1 sub {
/i exch def
/ai ais i get def
/val aival ai get def
qrc length ai length add val length add array
dup 0 qrc putinterval
dup qrc length ai [ exch {} forall ] putinterval
dup qrc length ai length add val [ exch {} forall ] putinterval
/qrc exch def
i ais length 1 sub ne aifixed ai 0 2 getinterval known not and {  % Append FNC1
qrc length 1 add array
dup 0 qrc putinterval
dup qrc length fnc1 put
/qrc exch def
} if
} for

% Compose input to qrcode
/barcode qrc length 1 add 5 mul string def
/i 0 def /j 0 def {
i qrc length eq {exit} if
qrc i get dup fnc1 eq {
pop barcode j (^FNC1) putinterval
/j j 4 add def
} {
barcode exch j exch put
} ifelse
/i i 1 add def
/j j 1 add def
} loop
/barcode barcode 0 j getinterval def

% Get the result of encoding with qrcode
options (dontdraw) true put
options (parsefnc) true put
/args barcode options //qrcode exec def

args (opt) options put
args

dontdraw not //renmatrix if

end

} bind def
/gs1qrcode dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER gs1qrcode--

% --BEGIN ENCODER hibccode39--
% --REQUIRES preamble raiseerror renlinear code39--
% --DESC: HIBC Code 39
% --EXAM: A123BJC5D6E71
% --EXOP: includetext
% --RNDR: renlinear
%%BeginResource: QRCODE hibccode39 0.0 2015112400 63169 62924
%%BeginData:         92 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
dup /code39 dup /QRCODE findresource put
begin
/hibccode39 {

20 dict begin                 % Confine variables to local scope

/options exch def       % We are given an option string
/barcode exch def       % We are given a barcode string

/dontdraw false def
/textfont /Courier def
/textsize 8 def
/textyoffset -7 def
/textxoffset 0 def
/validatecheck false def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/textfont textfont cvlit def
/textsize textsize cvr def
/textyoffset textyoffset cvr def
/textxoffset textxoffset cvr def

% Create a string of the available characters
/barchars (0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%) def
/charvals 43 dict def
0 1 42 {charvals exch dup barchars exch 1 getinterval exch put} for

% Validate the input
0 1 barcode length 1 sub {
barcode exch 1 getinterval charvals exch known not {
/bwipp.hibccode39badCharacter (HIBC Code 39 must contain only digits, capital letters, spaces and the symbols -.$/+%) //raiseerror exec
} if
} for

/barlen barcode length validatecheck {1 sub} if def

/checksum 41 def
0 1 barlen 1 sub {
barcode exch 1 getinterval charvals exch get
checksum add /checksum exch def
} for
/checksum checksum 43 mod def
validatecheck {
barcode barlen get barchars checksum get ne {
/bwipp.hibccode39badCheckDigit (Incorrect HIBC Code 39 check digit provided) //raiseerror exec
} if
/barcode barcode 0 barlen getinterval def
} if

/barcode barlen 2 add string dup 1 barcode putinterval def
barcode 0 43 put
barcode barlen 1 add barchars checksum get put

/text barlen 4 add string def
text 0 42 put
text 1 barcode putinterval
text barlen 2 add barcode barlen 1 add get dup 32 eq {pop 95} if put
text barlen 3 add 42 put

% Get the result of encoding with code39
options (dontdraw) true put
options (includecheck) false put
options (validatecheck) false put
/args barcode options //code39 exec def

args (txt) [ [text textxoffset textyoffset textfont textsize] ] put
args (textxalign) (center) put
args (opt) options put
args

dontdraw not //renlinear if

end

} bind def
/hibccode39 dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER hibccode39--

% --BEGIN ENCODER hibccode128--
% --REQUIRES preamble raiseerror renlinear code128--
% --DESC: HIBC Code 128
% --EXAM: A123BJC5D6E71
% --EXOP: includetext
% --RNDR: renlinear
%%BeginResource: QRCODE hibccode128 0.0 2015112400 67484 66909
%%BeginData:         91 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renlinear dup /QRCODE findresource put
dup /code128 dup /QRCODE findresource put
begin
/hibccode128 {

20 dict begin                 % Confine variables to local scope

/options exch def       % We are given an option string
/barcode exch def       % We are given a barcode string

/dontdraw false def
/textfont /Courier def
/textsize 8 def
/textyoffset -7 def
/textxoffset 0 def
/validatecheck false def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/textfont textfont cvlit def
/textsize textsize cvr def
/textyoffset textyoffset cvr def
/textxoffset textxoffset cvr def

% Create a string of the available characters
/barchars (0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%) def
/charvals 43 dict def
0 1 42 {charvals exch dup barchars exch 1 getinterval exch put} for

% Validate the input
0 1 barcode length 1 sub {
barcode exch 1 getinterval charvals exch known not {
/bwipp.hibccode128badCharacter (HIBC Code 128 must contain only digits, capital letters, spaces and the symbols -.$/+%) //raiseerror exec
} if
} for

/barlen barcode length validatecheck {1 sub} if def

/checksum 41 def
0 1 barlen 1 sub {
barcode exch 1 getinterval charvals exch get
checksum add /checksum exch def
} for
/checksum checksum 43 mod def
validatecheck {
barcode barlen get barchars checksum get ne {
/bwipp.hibccode128badCheckDigit (Incorrect HIBC Code 128 check digit provided) //raiseerror exec
} if
/barcode barcode 0 barlen getinterval def
} if

/barcode barlen 2 add string dup 1 barcode putinterval def
barcode 0 43 put
barcode barlen 1 add barchars checksum get put

/text barlen 4 add string def
text 0 42 put
text 1 barcode putinterval
text barlen 2 add barcode barlen 1 add get dup 32 eq {pop 95} if put
text barlen 3 add 42 put

% Get the result of encoding with code128
options (dontdraw) true put
options (validatecheck) false put
/args barcode options //code128 exec def

args (txt) [ [text textxoffset textyoffset textfont textsize] ] put
args (textxalign) (center) put
args (opt) options put
args

dontdraw not //renlinear if

end

} bind def
/hibccode128 dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER hibccode128--

% --BEGIN ENCODER hibcdatamatrix--
% --REQUIRES preamble raiseerror renmatrix datamatrix--
% --DESC: HIBC Data Matrix
% --EXAM: A123BJC5D6E71
% --EXOP:
% --RNDR: renmatrix
%%BeginResource: QRCODE hibcdatamatrix 0.0 2015112400 68711 64879
%%BeginData:         74 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renmatrix dup /QRCODE findresource put
dup /datamatrix dup /QRCODE findresource put
begin
/hibcdatamatrix {

20 dict begin                 % Confine variables to local scope

/options exch def       % We are given an option string
/barcode exch def       % We are given a barcode string

/dontdraw false def
/validatecheck false def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

% Create a string of the available characters
/barchars (0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%) def
/charvals 43 dict def
0 1 42 {charvals exch dup barchars exch 1 getinterval exch put} for

% Validate the input
0 1 barcode length 1 sub {
barcode exch 1 getinterval charvals exch known not {
/bwipp.hibcdatamatrixBadCharacter (HIBC Data Matrix must contain only digits, capital letters, spaces and the symbols -.$/+%) //raiseerror exec
} if
} for

/barlen barcode length validatecheck {1 sub} if def

/checksum 41 def
0 1 barlen 1 sub {
barcode exch 1 getinterval charvals exch get
checksum add /checksum exch def
} for
/checksum checksum 43 mod def
validatecheck {
barcode barlen get barchars checksum get ne {
/bwipp.hibcdatamatrixBadCheckDigit (Incorrect HIBC Data Matrix check digit provided) //raiseerror exec
} if
/barcode barcode 0 barlen getinterval def
} if

/barcode barlen 2 add string dup 1 barcode putinterval def
barcode 0 43 put
barcode barlen 1 add barchars checksum get put

% Get the result of encoding with datamatrix
options (dontdraw) true put
options (validatecheck) false put
/args barcode options //datamatrix exec def

args (opt) options put
args

dontdraw not //renmatrix if

end

} bind def
/hibcdatamatrix dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER hibcdatamatrix--

% --BEGIN ENCODER hibcpdf417--
% --REQUIRES preamble raiseerror renmatrix pdf417--
% --DESC: HIBC PDF417
% --EXAM: A123BJC5D6E71
% --EXOP:
% --RNDR: renmatrix
%%BeginResource: QRCODE hibcpdf417 0.0 2015112400 65468 65072
%%BeginData:         78 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renmatrix dup /QRCODE findresource put
dup /pdf417 dup /QRCODE findresource put
begin
/hibcpdf417 {

20 dict begin                 % Confine variables to local scope

/options exch def       % We are given an option string
/barcode exch def       % We are given a barcode string

/dontdraw false def
/columns 2 def
/validatecheck false def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/columns columns cvi def

% Create a string of the available characters
/barchars (0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%) def
/charvals 43 dict def
0 1 42 {charvals exch dup barchars exch 1 getinterval exch put} for

% Validate the input
0 1 barcode length 1 sub {
barcode exch 1 getinterval charvals exch known not {
/bwipp.hibcpdf417BadCharacter (HIBC PDF417 must contain only digits, capital letters, spaces and the symbols -.$/+%) //raiseerror exec
} if
} for

/barlen barcode length validatecheck {1 sub} if def

/checksum 41 def
0 1 barlen 1 sub {
barcode exch 1 getinterval charvals exch get
checksum add /checksum exch def
} for
/checksum checksum 43 mod def
validatecheck {
barcode barlen get barchars checksum get ne {
/bwipp.hibcpdf417BadCheckDigit (Incorrect HIBC PDF417 check digit provided) //raiseerror exec
} if
/barcode barcode 0 barlen getinterval def
} if

/barcode barlen 2 add string dup 1 barcode putinterval def
barcode 0 43 put
barcode barlen 1 add barchars checksum get put

% Get the result of encoding with pdf417
options (dontdraw) true put
options (columns) columns put
options (validatecheck) false put
/args barcode options //pdf417 exec def

args (opt) options put
args

dontdraw not //renmatrix if

end

} bind def
/hibcpdf417 dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER hibcpdf417--

% --BEGIN ENCODER hibcmicropdf417--
% --REQUIRES preamble raiseerror renmatrix micropdf417--
% --DESC: HIBC MicroPDF417
% --EXAM: A123BJC5D6E71
% --EXOP:
% --RNDR: renmatrix
%%BeginResource: QRCODE hibcmicropdf417 0.0 2015112400 65606 65195
%%BeginData:         78 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renmatrix dup /QRCODE findresource put
dup /micropdf417 dup /QRCODE findresource put
begin
/hibcmicropdf417 {

20 dict begin                 % Confine variables to local scope

/options exch def       % We are given an option string
/barcode exch def       % We are given a barcode string

/dontdraw false def
/columns 2 def
/validatecheck false def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

/columns columns cvi def

% Create a string of the available characters
/barchars (0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%) def
/charvals 43 dict def
0 1 42 {charvals exch dup barchars exch 1 getinterval exch put} for

% Validate the input
0 1 barcode length 1 sub {
barcode exch 1 getinterval charvals exch known not {
/bwipp.hibcmicropdf417BadCharacter (HIBC MicroPDF417 must contain only digits, capital letters, spaces and the symbols -.$/+%) //raiseerror exec
} if
} for

/barlen barcode length validatecheck {1 sub} if def

/checksum 41 def
0 1 barlen 1 sub {
barcode exch 1 getinterval charvals exch get
checksum add /checksum exch def
} for
/checksum checksum 43 mod def
validatecheck {
barcode barlen get barchars checksum get ne {
/bwipp.hibcmicropdf417BadCheckDigit (Incorrect HIBC MicroPDF417 check digit provided) //raiseerror exec
} if
/barcode barcode 0 barlen getinterval def
} if

/barcode barlen 2 add string dup 1 barcode putinterval def
barcode 0 43 put
barcode barlen 1 add barchars checksum get put

% Get the result of encoding with micropdf417
options (dontdraw) true put
options (columns) columns put
options (validatecheck) false put
/args barcode options //micropdf417 exec def

args (opt) options put
args

dontdraw not //renmatrix if

end

} bind def
/hibcmicropdf417 dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER hibcmicropdf417--

% --BEGIN ENCODER hibcqrcode--
% --REQUIRES preamble raiseerror renmatrix qrcode--
% --DESC: HIBC QR Code
% --EXAM: A123BJC5D6E71
% --EXOP:
% --RNDR: renmatrix
%%BeginResource: QRCODE hibcqrcode 0.0 2015112400 65071 68091
%%BeginData:         74 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renmatrix dup /QRCODE findresource put
dup /qrcode dup /QRCODE findresource put
begin
/hibcqrcode {

20 dict begin                 % Confine variables to local scope

/options exch def       % We are given an option string
/barcode exch def       % We are given a barcode string

/dontdraw false def
/validatecheck false def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

% Create a string of the available characters
/barchars (0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%) def
/charvals 43 dict def
0 1 42 {charvals exch dup barchars exch 1 getinterval exch put} for

% Validate the input
0 1 barcode length 1 sub {
barcode exch 1 getinterval charvals exch known not {
/bwipp.hibcqrcodeBadCharacter (HIBC QR Code must contain only digits, capital letters, spaces and the symbols -.$/+%) //raiseerror exec
} if
} for

/barlen barcode length validatecheck {1 sub} if def

/checksum 41 def
0 1 barlen 1 sub {
barcode exch 1 getinterval charvals exch get
checksum add /checksum exch def
} for
/checksum checksum 43 mod def
validatecheck {
barcode barlen get barchars checksum get ne {
/bwipp.hibcqrcodeBadCheckDigit (Incorrect HIBC QR Code check digit provided) //raiseerror exec
} if
/barcode barcode 0 barlen getinterval def
} if

/barcode barlen 2 add string dup 1 barcode putinterval def
barcode 0 43 put
barcode barlen 1 add barchars checksum get put

% Get the result of encoding with qrcode
options (dontdraw) true put
options (validatecheck) false put
/args barcode options //qrcode exec def

args (opt) options put
args

dontdraw not //renmatrix if

end

} bind def
/hibcqrcode dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER hibcqrcode--

% --BEGIN ENCODER hibccodablockf--
% --REQUIRES preamble raiseerror renmatrix codablockf--
% --DESC: HIBC Codablock F
% --EXAM: A123BJC5D6E71
% --EXOP:
% --RNDR: renmatrix
%%BeginResource: QRCODE hibccodablockf 0.0 2015112400 60823 64313
%%BeginData:         74 ASCII Lines
/setpacking where {pop currentpacking true setpacking} if
1 dict
dup /raiseerror dup /QRCODE findresource put
dup /renmatrix dup /QRCODE findresource put
dup /codablockf dup /QRCODE findresource put
begin
/hibccodablockf {

20 dict begin                 % Confine variables to local scope

/options exch def       % We are given an option string
/barcode exch def       % We are given a barcode string

/dontdraw false def
/validatecheck false def

% Parse the input options
options type /stringtype eq {
1 dict begin
options {
token false eq {exit} if dup length string cvs (=) search
true eq {cvlit exch pop exch def} {cvlit true def} ifelse
} loop
currentdict end /options exch def
} if
options {def} forall

% Create a string of the available characters
/barchars (0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%) def
/charvals 43 dict def
0 1 42 {charvals exch dup barchars exch 1 getinterval exch put} for

% Validate the input
0 1 barcode length 1 sub {
barcode exch 1 getinterval charvals exch known not {
/bwipp.codablockfBadCharacter (HIBC Codablock F must contain only digits, capital letters, spaces and the symbols -.$/+%) //raiseerror exec
} if
} for

/barlen barcode length validatecheck {1 sub} if def

/checksum 41 def
0 1 barlen 1 sub {
barcode exch 1 getinterval charvals exch get
checksum add /checksum exch def
} for
/checksum checksum 43 mod def
validatecheck {
barcode barlen get barchars checksum get ne {
/bwipp.hibccodablockfBadCheckDigit (Incorrect HIBC Codablock F check digit provided) //raiseerror exec
} if
/barcode barcode 0 barlen getinterval def
} if

/barcode barlen 2 add string dup 1 barcode putinterval def
barcode 0 43 put
barcode barlen 1 add barchars checksum get put

% Get the result of encoding with codablockf
options (dontdraw) true put
options (validatecheck) false put
/args barcode options //codablockf exec def

args (opt) options put
args

dontdraw not //renmatrix if

end

} bind def
/hibccodablockf dup load /QRCODE defineresource pop
end
/setpacking where {pop setpacking} if
%%EndData
%%EndResource
% --END ENCODER hibccodablockf--

% --END TEMPLATE--
%!PS

% We call the procedures like this:
%%/Helvetica findfont 8 scalefont setfont

/FA05 {5/ArialMT findfont exch scalefont setfont} bind def
/FA06 {6/ArialMT findfont exch scalefont setfont} bind def
/FA07 {7.5/ArialMT findfont exch scalefont setfont} bind def
/FA08 {8/ArialMT findfont exch scalefont setfont} bind def
/FA09 {9/ArialMT findfont exch scalefont setfont} bind def
/FA10 {10/ArialMT findfont exch scalefont setfont} bind def
/FA11 {11/ArialMT findfont exch scalefont setfont} bind def
/FA12 {12/ArialMT findfont exch scalefont setfont} bind def

/FB05 {5/Arial-BoldMT findfont exch scalefont setfont} bind def
/FB06 {6/Arial-BoldMT findfont exch scalefont setfont} bind def
/FB07 {7/Arial-BoldMT findfont exch scalefont setfont} bind def
/FB08 {8/Arial-BoldMT findfont exch scalefont setfont} bind def
/FB09 {9/Arial-BoldMT findfont exch scalefont setfont} bind def
/FB10 {10/Arial-BoldMT findfont exch scalefont setfont} bind def
/FB11 {11/Arial-BoldMT findfont exch scalefont setfont} bind def
/FB12 {12/Arial-BoldMT findfont exch scalefont setfont} bind def
/FB16 {16/Arial-BoldMT findfont exch scalefont setfont} bind def
/FB23 {23/Arial-BoldMT findfont exch scalefont setfont} bind def

/FC24 {24/C39P36DlTt findfont exch scalefont setfont} bind def
/FC20 {20/C39P36DlTt findfont exch scalefont setfont} bind def
/FC18 {18/C39P36DlTt findfont exch scalefont setfont} bind def
/FC16 {16/C39P36DlTt findfont exch scalefont setfont} bind def
/FC14 {14/C39P36DlTt findfont exch scalefont setfont} bind def
%%EndProlog